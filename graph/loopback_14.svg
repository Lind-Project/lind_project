<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>alloc_skb_with_frags (210,624,985 samples, 11.92%)</title><rect x="457.9" y="293" width="140.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="460.92" y="303.5" >alloc_skb_with_fr..</text>
</g>
<g >
<title>perf_evsel__enable_cpu (4,946,431 samples, 0.28%)</title><rect x="313.1" y="389" width="3.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="316.06" y="399.5" ></text>
</g>
<g >
<title>call_cpuidle (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="293" width="25.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1167.58" y="303.5" >c..</text>
</g>
<g >
<title>sock_alloc_send_pskb (210,624,985 samples, 11.92%)</title><rect x="457.9" y="309" width="140.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="460.92" y="319.5" >sock_alloc_send_p..</text>
</g>
<g >
<title>__ioctl (4,946,431 samples, 0.28%)</title><rect x="313.1" y="341" width="3.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="316.06" y="351.5" ></text>
</g>
<g >
<title>sk_reset_timer (258,421,421 samples, 14.63%)</title><rect x="10.0" y="277" width="172.6" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >sk_reset_timer</text>
</g>
<g >
<title>do_syscall_64 (210,624,985 samples, 11.92%)</title><rect x="457.9" y="421" width="140.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="460.92" y="431.5" >do_syscall_64</text>
</g>
<g >
<title>call_cpuidle (758,831,641 samples, 42.96%)</title><rect x="598.6" y="357" width="506.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="601.62" y="367.5" >call_cpuidle</text>
</g>
<g >
<title>bprm_execve (195,255,109 samples, 11.05%)</title><rect x="182.6" y="277" width="130.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="185.63" y="287.5" >bprm_execve</text>
</g>
<g >
<title>cpuidle_idle_call (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="309" width="25.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1167.58" y="319.5" >c..</text>
</g>
<g >
<title>__x64_sys_connect (258,421,421 samples, 14.63%)</title><rect x="10.0" y="373" width="172.6" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >__x64_sys_connect</text>
</g>
<g >
<title>intel_pmu_enable_all (4,946,431 samples, 0.28%)</title><rect x="313.1" y="53" width="3.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="316.06" y="63.5" ></text>
</g>
<g >
<title>irq_exit_rcu (94,049,648 samples, 5.32%)</title><rect x="762.8" y="277" width="62.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="765.84" y="287.5" >irq_ex..</text>
</g>
<g >
<title>cpuidle_enter (758,831,641 samples, 42.96%)</title><rect x="598.6" y="341" width="506.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="601.62" y="351.5" >cpuidle_enter</text>
</g>
<g >
<title>__cmd_record.constprop.54 (4,946,431 samples, 0.28%)</title><rect x="313.1" y="421" width="3.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="316.06" y="431.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (102,200,783 samples, 5.79%)</title><rect x="694.6" y="245" width="68.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="697.57" y="255.5" >__hrtim..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (195,255,109 samples, 11.05%)</title><rect x="182.6" y="357" width="130.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="185.63" y="367.5" >entry_SYSCALL_64..</text>
</g>
<g >
<title>apparmor_bprm_creds_for_exec (195,255,109 samples, 11.05%)</title><rect x="182.6" y="229" width="130.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="185.63" y="239.5" >apparmor_bprm_cr..</text>
</g>
<g >
<title>hrtimer_interrupt (102,200,783 samples, 5.79%)</title><rect x="694.6" y="261" width="68.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="697.57" y="271.5" >hrtimer..</text>
</g>
<g >
<title>__inet_stream_connect (258,421,421 samples, 14.63%)</title><rect x="10.0" y="309" width="172.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >__inet_stream_connect</text>
</g>
<g >
<title>[unknown] (195,255,109 samples, 11.05%)</title><rect x="182.6" y="437" width="130.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="185.63" y="447.5" >[unknown]</text>
</g>
<g >
<title>bprm_execve.part.0 (195,255,109 samples, 11.05%)</title><rect x="182.6" y="261" width="130.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="185.63" y="271.5" >bprm_execve.part.0</text>
</g>
<g >
<title>evlist__prepare_workload (195,255,109 samples, 11.05%)</title><rect x="182.6" y="405" width="130.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="185.63" y="415.5" >evlist__prepare_..</text>
</g>
<g >
<title>__x64_sys_write (210,624,985 samples, 11.92%)</title><rect x="457.9" y="389" width="140.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="460.92" y="399.5" >__x64_sys_write</text>
</g>
<g >
<title>perf_ioctl (4,946,431 samples, 0.28%)</title><rect x="313.1" y="261" width="3.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="316.06" y="271.5" ></text>
</g>
<g >
<title>cpuidle_select (88,404,992 samples, 5.00%)</title><rect x="1105.5" y="357" width="59.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1108.52" y="367.5" >cpuidl..</text>
</g>
<g >
<title>cpu_startup_entry (847,236,633 samples, 47.96%)</title><rect x="598.6" y="405" width="566.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="601.62" y="415.5" >cpu_startup_entry</text>
</g>
<g >
<title>event_function_call (4,946,431 samples, 0.28%)</title><rect x="313.1" y="197" width="3.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="316.06" y="207.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="229" width="25.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1167.58" y="239.5" >s..</text>
</g>
<g >
<title>cpuidle_enter (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="277" width="25.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1167.58" y="287.5" >c..</text>
</g>
<g >
<title>unix_stream_sendmsg (210,624,985 samples, 11.92%)</title><rect x="457.9" y="325" width="140.7" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="460.92" y="335.5" >unix_stream_sendmsg</text>
</g>
<g >
<title>x64_sys_call (4,946,431 samples, 0.28%)</title><rect x="313.1" y="293" width="3.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="316.06" y="303.5" ></text>
</g>
<g >
<title>__libc_connect (258,421,421 samples, 14.63%)</title><rect x="10.0" y="437" width="172.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >__libc_connect</text>
</g>
<g >
<title>__x64_sys_ioctl (4,946,431 samples, 0.28%)</title><rect x="313.1" y="277" width="3.3" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="316.06" y="287.5" ></text>
</g>
<g >
<title>ksys_write (210,624,985 samples, 11.92%)</title><rect x="457.9" y="373" width="140.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="460.92" y="383.5" >ksys_write</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (543,272,405 samples, 30.76%)</title><rect x="598.6" y="309" width="362.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="601.62" y="319.5" >asm_sysvec_apic_timer_interrupt</text>
</g>
<g >
<title>_perf_ioctl (4,946,431 samples, 0.28%)</title><rect x="313.1" y="245" width="3.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="316.06" y="255.5" ></text>
</g>
<g >
<title>sock_write_iter (210,624,985 samples, 11.92%)</title><rect x="457.9" y="341" width="140.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="460.92" y="351.5" >sock_write_iter</text>
</g>
<g >
<title>perf_evsel__ioctl (4,946,431 samples, 0.28%)</title><rect x="313.1" y="357" width="3.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="316.06" y="367.5" ></text>
</g>
<g >
<title>event_function (4,946,431 samples, 0.28%)</title><rect x="313.1" y="133" width="3.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="316.06" y="143.5" ></text>
</g>
<g >
<title>x64_sys_call (195,255,109 samples, 11.05%)</title><rect x="182.6" y="325" width="130.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="185.63" y="335.5" >x64_sys_call</text>
</g>
<g >
<title>loopback (258,421,421 samples, 14.63%)</title><rect x="10.0" y="453" width="172.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >loopback</text>
</g>
<g >
<title>cpuidle_idle_call (847,236,633 samples, 47.96%)</title><rect x="598.6" y="373" width="566.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="601.62" y="383.5" >cpuidle_idle_call</text>
</g>
<g >
<title>intel_idle (215,559,236 samples, 12.20%)</title><rect x="961.5" y="309" width="144.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="964.53" y="319.5" >intel_idle</text>
</g>
<g >
<title>perf (4,946,431 samples, 0.28%)</title><rect x="313.1" y="453" width="3.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="316.06" y="463.5" ></text>
</g>
<g >
<title>run_rebalance_domains (94,049,648 samples, 5.32%)</title><rect x="762.8" y="245" width="62.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="765.84" y="255.5" >run_re..</text>
</g>
<g >
<title>perf-exec (195,255,109 samples, 11.05%)</title><rect x="182.6" y="453" width="130.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="185.63" y="463.5" >perf-exec</text>
</g>
<g >
<title>hrtimer_interrupt (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="213" width="25.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1167.58" y="223.5" >h..</text>
</g>
<g >
<title>__GI_execve (195,255,109 samples, 11.05%)</title><rect x="182.6" y="373" width="130.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="185.63" y="383.5" >__GI_execve</text>
</g>
<g >
<title>security_bprm_creds_for_exec (195,255,109 samples, 11.05%)</title><rect x="182.6" y="245" width="130.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="185.63" y="255.5" >security_bprm_cr..</text>
</g>
<g >
<title>do_idle (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="325" width="25.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1167.58" y="335.5" >d..</text>
</g>
<g >
<title>x64_sys_call (258,421,421 samples, 14.63%)</title><rect x="10.0" y="389" width="172.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >x64_sys_call</text>
</g>
<g >
<title>do_idle (847,236,633 samples, 47.96%)</title><rect x="598.6" y="389" width="566.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="601.62" y="399.5" >do_idle</text>
</g>
<g >
<title>generic_exec_single (4,946,431 samples, 0.28%)</title><rect x="313.1" y="165" width="3.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="316.06" y="175.5" ></text>
</g>
<g >
<title>__perf_event_enable (4,946,431 samples, 0.28%)</title><rect x="313.1" y="117" width="3.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="316.06" y="127.5" ></text>
</g>
<g >
<title>smp_call_function_single (4,946,431 samples, 0.28%)</title><rect x="313.1" y="181" width="3.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="316.06" y="191.5" ></text>
</g>
<g >
<title>swapper (1,307,828,233 samples, 74.04%)</title><rect x="316.4" y="453" width="873.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="319.36" y="463.5" >swapper</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (102,200,783 samples, 5.79%)</title><rect x="694.6" y="277" width="68.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="697.57" y="287.5" >__sysve..</text>
</g>
<g >
<title>__cmd_record.constprop.54 (195,255,109 samples, 11.05%)</title><rect x="182.6" y="421" width="130.5" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="185.63" y="431.5" >__cmd_record.con..</text>
</g>
<g >
<title>tcp_v4_connect (258,421,421 samples, 14.63%)</title><rect x="10.0" y="293" width="172.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >tcp_v4_connect</text>
</g>
<g >
<title>do_syscall_64 (195,255,109 samples, 11.05%)</title><rect x="182.6" y="341" width="130.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="185.63" y="351.5" >do_syscall_64</text>
</g>
<g >
<title>evlist__enable (4,946,431 samples, 0.28%)</title><rect x="313.1" y="405" width="3.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="316.06" y="415.5" ></text>
</g>
<g >
<title>profile_transition (195,255,109 samples, 11.05%)</title><rect x="182.6" y="213" width="130.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="185.63" y="223.5" >profile_transition</text>
</g>
<g >
<title>__sys_connect (258,421,421 samples, 14.63%)</title><rect x="10.0" y="357" width="172.6" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >__sys_connect</text>
</g>
<g >
<title>[unknown] (4,946,431 samples, 0.28%)</title><rect x="313.1" y="437" width="3.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="316.06" y="447.5" ></text>
</g>
<g >
<title>start_secondary (847,236,633 samples, 47.96%)</title><rect x="598.6" y="421" width="566.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="601.62" y="431.5" >start_secondary</text>
</g>
<g >
<title>__sys_connect_file (258,421,421 samples, 14.63%)</title><rect x="10.0" y="341" width="172.6" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >__sys_connect_file</text>
</g>
<g >
<title>do_syscall_64 (258,421,421 samples, 14.63%)</title><rect x="10.0" y="405" width="172.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >do_syscall_64</text>
</g>
<g >
<title>x86_64_start_kernel (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="421" width="25.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1167.58" y="431.5" >x..</text>
</g>
<g >
<title>start_kernel (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="389" width="25.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1167.58" y="399.5" >s..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="245" width="25.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1167.58" y="255.5" >a..</text>
</g>
<g >
<title>x64_sys_call (210,624,985 samples, 11.92%)</title><rect x="457.9" y="405" width="140.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="460.92" y="415.5" >x64_sys_call</text>
</g>
<g >
<title>arch_call_rest_init (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="373" width="25.4" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1167.58" y="383.5" >a..</text>
</g>
<g >
<title>all (1,766,451,194 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>remote_function (4,946,431 samples, 0.28%)</title><rect x="313.1" y="149" width="3.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="316.06" y="159.5" ></text>
</g>
<g >
<title>menu_select (88,404,992 samples, 5.00%)</title><rect x="1105.5" y="341" width="59.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1108.52" y="351.5" >menu_s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (210,624,985 samples, 11.92%)</title><rect x="457.9" y="437" width="140.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="460.92" y="447.5" >entry_SYSCALL_64_..</text>
</g>
<g >
<title>rest_init (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="357" width="25.4" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1167.58" y="367.5" >r..</text>
</g>
<g >
<title>vfs_write (210,624,985 samples, 11.92%)</title><rect x="457.9" y="357" width="140.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="460.92" y="367.5" >vfs_write</text>
</g>
<g >
<title>perf_ctx_enable (4,946,431 samples, 0.28%)</title><rect x="313.1" y="85" width="3.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="316.06" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (258,421,421 samples, 14.63%)</title><rect x="10.0" y="421" width="172.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >entry_SYSCALL_64_after..</text>
</g>
<g >
<title>kmalloc_reserve (210,624,985 samples, 11.92%)</title><rect x="457.9" y="277" width="140.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="460.92" y="287.5" >kmalloc_reserve</text>
</g>
<g >
<title>ctx_resched (4,946,431 samples, 0.28%)</title><rect x="313.1" y="101" width="3.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="316.06" y="111.5" ></text>
</g>
<g >
<title>find_attach (195,255,109 samples, 11.05%)</title><rect x="182.6" y="197" width="130.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="185.63" y="207.5" >find_attach</text>
</g>
<g >
<title>__execvpe (195,255,109 samples, 11.05%)</title><rect x="182.6" y="389" width="130.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="185.63" y="399.5" >__execvpe</text>
</g>
<g >
<title>cpu_startup_entry (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="341" width="25.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1167.58" y="351.5" >c..</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (543,272,405 samples, 30.76%)</title><rect x="598.6" y="293" width="362.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="601.62" y="303.5" >sysvec_apic_timer_interrupt</text>
</g>
<g >
<title>perf_evsel__run_ioctl (4,946,431 samples, 0.28%)</title><rect x="313.1" y="373" width="3.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="316.06" y="383.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (195,255,109 samples, 11.05%)</title><rect x="182.6" y="293" width="130.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="185.63" y="303.5" >do_execveat_comm..</text>
</g>
<g >
<title>rb_erase (102,200,783 samples, 5.79%)</title><rect x="694.6" y="213" width="68.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="697.57" y="223.5" >rb_erase</text>
</g>
<g >
<title>cpuidle_enter_state (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="261" width="25.4" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1167.58" y="271.5" >c..</text>
</g>
<g >
<title>_perf_event_enable (4,946,431 samples, 0.28%)</title><rect x="313.1" y="213" width="3.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="316.06" y="223.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (38,059,908 samples, 2.15%)</title><rect x="1164.6" y="405" width="25.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1167.58" y="415.5" >x..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4,946,431 samples, 0.28%)</title><rect x="313.1" y="325" width="3.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="316.06" y="335.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (4,946,431 samples, 0.28%)</title><rect x="313.1" y="229" width="3.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="316.06" y="239.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (758,831,641 samples, 42.96%)</title><rect x="598.6" y="325" width="506.9" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="601.62" y="335.5" >cpuidle_enter_state</text>
</g>
<g >
<title>secondary_startup_64_no_verify (885,296,541 samples, 50.12%)</title><rect x="598.6" y="437" width="591.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="601.62" y="447.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>native_write_msr (4,946,431 samples, 0.28%)</title><rect x="313.1" y="37" width="3.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="316.06" y="47.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4,946,431 samples, 0.28%)</title><rect x="313.1" y="69" width="3.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="316.06" y="79.5" ></text>
</g>
<g >
<title>do_syscall_64 (4,946,431 samples, 0.28%)</title><rect x="313.1" y="309" width="3.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="316.06" y="319.5" ></text>
</g>
<g >
<title>native_apic_msr_eoi_write (203,384,880 samples, 11.51%)</title><rect x="825.7" y="277" width="135.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="828.66" y="287.5" >native_apic_msr_e..</text>
</g>
<g >
<title>__irq_exit_rcu (94,049,648 samples, 5.32%)</title><rect x="762.8" y="261" width="62.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="765.84" y="271.5" >__irq_..</text>
</g>
<g >
<title>__x64_sys_execve (195,255,109 samples, 11.05%)</title><rect x="182.6" y="309" width="130.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="185.63" y="319.5" >__x64_sys_execve</text>
</g>
<g >
<title>inet_stream_connect (258,421,421 samples, 14.63%)</title><rect x="10.0" y="325" width="172.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >inet_stream_connect</text>
</g>
<g >
<title>__remove_hrtimer (102,200,783 samples, 5.79%)</title><rect x="694.6" y="229" width="68.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="697.57" y="239.5" >__remov..</text>
</g>
</g>
</svg>
