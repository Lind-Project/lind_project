<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>__cmd_record.constprop.54 (5,327,057 samples, 0.10%)</title><rect x="70.1" y="421" width="1.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="73.08" y="431.5" ></text>
</g>
<g >
<title>poll_idle (966,865,449 samples, 18.72%)</title><rect x="823.0" y="309" width="220.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="826.00" y="319.5" >poll_idle</text>
</g>
<g >
<title>cpuidle_enter (223,623,406 samples, 4.33%)</title><rect x="1138.8" y="277" width="51.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1141.81" y="287.5" >cpuid..</text>
</g>
<g >
<title>[unknown] (937,376,216 samples, 18.15%)</title><rect x="71.3" y="437" width="214.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="74.30" y="447.5" >[unknown]</text>
</g>
<g >
<title>x64_sys_call (320,691,638 samples, 6.21%)</title><rect x="212.2" y="357" width="73.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="215.21" y="367.5" >x64_sys_..</text>
</g>
<g >
<title>__x64_sys_write (320,691,638 samples, 6.21%)</title><rect x="212.2" y="341" width="73.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="215.21" y="351.5" >__x64_sy..</text>
</g>
<g >
<title>bprm_execve.part.0 (262,943,749 samples, 5.09%)</title><rect x="10.0" y="261" width="60.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >bprm_e..</text>
</g>
<g >
<title>pipe (2,104,513,963 samples, 40.75%)</title><rect x="71.3" y="453" width="480.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="74.30" y="463.5" >pipe</text>
</g>
<g >
<title>policy_nodemask (49,285,815 samples, 0.95%)</title><rect x="479.0" y="293" width="11.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="482.00" y="303.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (176,483,454 samples, 3.42%)</title><rect x="438.7" y="293" width="40.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="441.68" y="303.5" >__w..</text>
</g>
<g >
<title>__update_load_avg_se (49,280,012 samples, 0.95%)</title><rect x="1079.5" y="245" width="11.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1082.48" y="255.5" ></text>
</g>
<g >
<title>update_process_times (202,248,441 samples, 3.92%)</title><rect x="648.6" y="197" width="46.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="651.64" y="207.5" >upda..</text>
</g>
<g >
<title>smp_call_function_single (5,327,057 samples, 0.10%)</title><rect x="70.1" y="181" width="1.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="73.08" y="191.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (52,902,458 samples, 1.02%)</title><rect x="212.2" y="277" width="12.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="215.21" y="287.5" ></text>
</g>
<g >
<title>__do_softirq (398,710,598 samples, 7.72%)</title><rect x="694.9" y="245" width="91.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="697.85" y="255.5" >__do_softirq</text>
</g>
<g >
<title>tick_sched_handle (202,248,441 samples, 3.92%)</title><rect x="648.6" y="213" width="46.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="651.64" y="223.5" >tick..</text>
</g>
<g >
<title>do_syscall_64 (272,609,858 samples, 5.28%)</title><rect x="428.0" y="405" width="62.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="430.97" y="415.5" >do_sys..</text>
</g>
<g >
<title>__execvpe (262,943,749 samples, 5.09%)</title><rect x="10.0" y="389" width="60.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >__exec..</text>
</g>
<g >
<title>perf_ctx_enable (5,327,057 samples, 0.10%)</title><rect x="70.1" y="85" width="1.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="73.08" y="95.5" ></text>
</g>
<g >
<title>_raw_spin_lock (112,584,944 samples, 2.18%)</title><rect x="1102.1" y="341" width="25.7" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1105.12" y="351.5" >_..</text>
</g>
<g >
<title>x64_sys_call (223,910,015 samples, 4.34%)</title><rect x="587.4" y="405" width="51.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="590.37" y="415.5" >x64_s..</text>
</g>
<g >
<title>__libc_read (574,228,699 samples, 11.12%)</title><rect x="285.5" y="437" width="131.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="288.48" y="447.5" >__libc_read</text>
</g>
<g >
<title>x86_pmu_enable (5,327,057 samples, 0.10%)</title><rect x="70.1" y="69" width="1.2" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="73.08" y="79.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (50,550,478 samples, 0.98%)</title><rect x="200.7" y="245" width="11.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="203.66" y="255.5" ></text>
</g>
<g >
<title>select_idle_sibling (52,902,458 samples, 1.02%)</title><rect x="212.2" y="165" width="12.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="215.21" y="175.5" ></text>
</g>
<g >
<title>clear_page_erms (42,568,115 samples, 0.82%)</title><rect x="251.2" y="229" width="9.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="254.22" y="239.5" ></text>
</g>
<g >
<title>run_rebalance_domains (398,710,598 samples, 7.72%)</title><rect x="694.9" y="229" width="91.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="697.85" y="239.5" >run_rebala..</text>
</g>
<g >
<title>__memcg_kmem_charge_page (49,424,022 samples, 0.96%)</title><rect x="224.3" y="245" width="11.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="227.29" y="255.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (5,327,057 samples, 0.10%)</title><rect x="70.1" y="389" width="1.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="73.08" y="399.5" ></text>
</g>
<g >
<title>cpuidle_select (62,301,581 samples, 1.21%)</title><rect x="1065.2" y="373" width="14.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1068.24" y="383.5" ></text>
</g>
<g >
<title>select_task_rq_fair (52,902,458 samples, 1.02%)</title><rect x="212.2" y="181" width="12.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="215.21" y="191.5" ></text>
</g>
<g >
<title>__GI_execve (262,943,749 samples, 5.09%)</title><rect x="10.0" y="373" width="60.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >__GI_e..</text>
</g>
<g >
<title>schedule_idle (162,394,725 samples, 3.14%)</title><rect x="1090.7" y="373" width="37.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1093.74" y="383.5" >sch..</text>
</g>
<g >
<title>__x64_sys_write (272,609,858 samples, 5.28%)</title><rect x="428.0" y="373" width="62.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="430.97" y="383.5" >__x64_..</text>
</g>
<g >
<title>file_modified (223,766,127 samples, 4.33%)</title><rect x="587.4" y="309" width="51.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="590.41" y="319.5" >file_..</text>
</g>
<g >
<title>atime_needs_update (45,391,814 samples, 0.88%)</title><rect x="107.2" y="277" width="10.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="110.23" y="287.5" ></text>
</g>
<g >
<title>__update_blocked_fair (87,709,149 samples, 1.70%)</title><rect x="694.9" y="181" width="20.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="697.85" y="191.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (223,623,406 samples, 4.33%)</title><rect x="1138.8" y="309" width="51.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1141.81" y="319.5" >cpuid..</text>
</g>
<g >
<title>free_unref_page (52,274,967 samples, 1.01%)</title><rect x="95.3" y="245" width="11.9" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="98.29" y="255.5" ></text>
</g>
<g >
<title>do_idle (2,141,447,095 samples, 41.47%)</title><rect x="638.5" y="389" width="489.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="641.53" y="399.5" >do_idle</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (574,228,699 samples, 11.12%)</title><rect x="285.5" y="421" width="131.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="288.48" y="431.5" >entry_SYSCALL_64..</text>
</g>
<g >
<title>intel_idle (172,781,525 samples, 3.35%)</title><rect x="1138.8" y="245" width="39.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1141.84" y="255.5" >int..</text>
</g>
<g >
<title>__perf_event_enable (5,327,057 samples, 0.10%)</title><rect x="70.1" y="117" width="1.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="73.08" y="127.5" ></text>
</g>
<g >
<title>pipe_write (320,691,638 samples, 6.21%)</title><rect x="212.2" y="293" width="73.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="215.21" y="303.5" >pipe_write</text>
</g>
<g >
<title>__folio_put (49,298,818 samples, 0.95%)</title><rect x="307.8" y="293" width="11.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="310.79" y="303.5" ></text>
</g>
<g >
<title>__wake_up_common (176,483,454 samples, 3.42%)</title><rect x="438.7" y="277" width="40.3" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="441.68" y="287.5" >__w..</text>
</g>
<g >
<title>local_clock_noinstr (66,647,327 samples, 1.29%)</title><rect x="807.8" y="309" width="15.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="810.78" y="319.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (97,664,179 samples, 1.89%)</title><rect x="296.7" y="309" width="22.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="299.74" y="319.5" >a..</text>
</g>
<g >
<title>alloc_pages (217,835,134 samples, 4.22%)</title><rect x="224.3" y="277" width="49.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="227.29" y="287.5" >alloc..</text>
</g>
<g >
<title>anon_pipe_buf_release (52,274,967 samples, 1.01%)</title><rect x="95.3" y="277" width="11.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="98.29" y="287.5" ></text>
</g>
<g >
<title>autoremove_wake_function (97,480,577 samples, 1.89%)</title><rect x="456.7" y="261" width="22.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="459.73" y="271.5" >a..</text>
</g>
<g >
<title>ext4_buffered_write_iter (223,766,127 samples, 4.33%)</title><rect x="587.4" y="325" width="51.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="590.41" y="335.5" >ext4_..</text>
</g>
<g >
<title>_raw_spin_trylock (68,411,398 samples, 1.32%)</title><rect x="235.6" y="229" width="15.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="238.59" y="239.5" ></text>
</g>
<g >
<title>uncharge_batch (49,298,818 samples, 0.95%)</title><rect x="307.8" y="261" width="11.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="310.79" y="271.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (32,820,058 samples, 0.64%)</title><rect x="1036.4" y="277" width="7.5" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1039.43" y="287.5" ></text>
</g>
<g >
<title>__libc_write (320,691,638 samples, 6.21%)</title><rect x="212.2" y="405" width="73.3" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="215.21" y="415.5" >__libc_w..</text>
</g>
<g >
<title>ksys_read (574,228,699 samples, 11.12%)</title><rect x="285.5" y="357" width="131.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="288.48" y="367.5" >ksys_read</text>
</g>
<g >
<title>cpuidle_idle_call (1,729,979,117 samples, 33.50%)</title><rect x="648.6" y="373" width="395.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="651.64" y="383.5" >cpuidle_idle_call</text>
</g>
<g >
<title>default_wake_function (97,480,577 samples, 1.89%)</title><rect x="456.7" y="245" width="22.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="459.73" y="255.5" >d..</text>
</g>
<g >
<title>sched_clock_noinstr (66,647,327 samples, 1.29%)</title><rect x="807.8" y="293" width="15.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="810.78" y="303.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (262,943,749 samples, 5.09%)</title><rect x="10.0" y="293" width="60.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >do_exe..</text>
</g>
<g >
<title>x64_sys_call (272,609,858 samples, 5.28%)</title><rect x="428.0" y="389" width="62.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="430.97" y="399.5" >x64_sy..</text>
</g>
<g >
<title>__schedule (49,730,918 samples, 0.96%)</title><rect x="405.3" y="293" width="11.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="408.33" y="303.5" ></text>
</g>
<g >
<title>perf_evsel__ioctl (5,327,057 samples, 0.10%)</title><rect x="70.1" y="357" width="1.2" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="73.08" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (262,943,749 samples, 5.09%)</title><rect x="10.0" y="357" width="60.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >entry_..</text>
</g>
<g >
<title>__libc_write (272,609,858 samples, 5.28%)</title><rect x="428.0" y="437" width="62.3" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="430.97" y="447.5" >__libc..</text>
</g>
<g >
<title>enqueue_task (49,280,012 samples, 0.95%)</title><rect x="1079.5" y="309" width="11.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1082.48" y="319.5" ></text>
</g>
<g >
<title>try_to_wake_up (97,480,577 samples, 1.89%)</title><rect x="456.7" y="229" width="22.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="459.73" y="239.5" >t..</text>
</g>
<g >
<title>asm_exc_page_fault (270,922,018 samples, 5.25%)</title><rect x="490.3" y="437" width="61.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="493.26" y="447.5" >asm_ex..</text>
</g>
<g >
<title>alloc_pages (49,285,815 samples, 0.95%)</title><rect x="479.0" y="309" width="11.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="482.00" y="319.5" ></text>
</g>
<g >
<title>enqueue_entity (49,280,012 samples, 0.95%)</title><rect x="1079.5" y="277" width="11.2" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="1082.48" y="287.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (224,045,362 samples, 4.34%)</title><rect x="1138.8" y="405" width="51.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1141.81" y="415.5" >x86_6..</text>
</g>
<g >
<title>__kmem_cache_free (262,943,749 samples, 5.09%)</title><rect x="10.0" y="181" width="60.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >__kmem..</text>
</g>
<g >
<title>page_counter_cancel (49,298,818 samples, 0.95%)</title><rect x="307.8" y="229" width="11.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="310.79" y="239.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (5,327,057 samples, 0.10%)</title><rect x="70.1" y="53" width="1.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="73.08" y="63.5" ></text>
</g>
<g >
<title>perf-exec (262,943,749 samples, 5.09%)</title><rect x="10.0" y="453" width="60.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >perf-e..</text>
</g>
<g >
<title>load_balance (244,444,480 samples, 4.73%)</title><rect x="714.9" y="197" width="55.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="717.89" y="207.5" >load_..</text>
</g>
<g >
<title>__hrtimer_run_queues (202,248,441 samples, 3.92%)</title><rect x="648.6" y="245" width="46.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="651.64" y="255.5" >__hr..</text>
</g>
<g >
<title>__wake_up_common_lock (52,902,458 samples, 1.02%)</title><rect x="212.2" y="261" width="12.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="215.21" y="271.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (5,327,057 samples, 0.10%)</title><rect x="70.1" y="373" width="1.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="73.08" y="383.5" ></text>
</g>
<g >
<title>schedule (49,730,918 samples, 0.96%)</title><rect x="405.3" y="309" width="11.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="408.33" y="319.5" ></text>
</g>
<g >
<title>search_binary_handler (262,943,749 samples, 5.09%)</title><rect x="10.0" y="229" width="60.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >search..</text>
</g>
<g >
<title>x64_sys_call (574,228,699 samples, 11.12%)</title><rect x="285.5" y="389" width="131.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="288.48" y="399.5" >x64_sys_call</text>
</g>
<g >
<title>tick_sched_timer (202,248,441 samples, 3.92%)</title><rect x="648.6" y="229" width="46.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="651.64" y="239.5" >tick..</text>
</g>
<g >
<title>ksys_read (616,684,578 samples, 11.94%)</title><rect x="71.3" y="325" width="140.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="74.30" y="335.5" >ksys_read</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (202,248,441 samples, 3.92%)</title><rect x="648.6" y="277" width="46.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="651.64" y="287.5" >__sy..</text>
</g>
<g >
<title>do_idle (224,045,362 samples, 4.34%)</title><rect x="1138.8" y="325" width="51.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1141.81" y="335.5" >do_idle</text>
</g>
<g >
<title>ext4_dirty_inode (223,766,127 samples, 4.33%)</title><rect x="587.4" y="245" width="51.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="590.41" y="255.5" >ext4_..</text>
</g>
<g >
<title>x86_64_start_kernel (224,045,362 samples, 4.34%)</title><rect x="1138.8" y="421" width="51.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1141.81" y="431.5" >x86_6..</text>
</g>
<g >
<title>__ioctl (5,327,057 samples, 0.10%)</title><rect x="70.1" y="341" width="1.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="73.08" y="351.5" ></text>
</g>
<g >
<title>try_charge_memcg (49,424,022 samples, 0.96%)</title><rect x="224.3" y="229" width="11.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="227.29" y="239.5" ></text>
</g>
<g >
<title>__schedule (104,524,796 samples, 2.02%)</title><rect x="188.3" y="261" width="23.9" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="191.32" y="271.5" >_..</text>
</g>
<g >
<title>rcu_sched_clock_irq (202,248,441 samples, 3.92%)</title><rect x="648.6" y="181" width="46.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="651.64" y="191.5" >rcu_..</text>
</g>
<g >
<title>_copy_to_iter (377,559,654 samples, 7.31%)</title><rect x="319.1" y="293" width="86.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="322.06" y="303.5" >_copy_to_i..</text>
</g>
<g >
<title>__cmd_record.constprop.54 (262,943,749 samples, 5.09%)</title><rect x="10.0" y="421" width="60.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >__cmd_..</text>
</g>
<g >
<title>evlist__prepare_workload (262,943,749 samples, 5.09%)</title><rect x="10.0" y="405" width="60.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >evlist..</text>
</g>
<g >
<title>_perf_ioctl (5,327,057 samples, 0.10%)</title><rect x="70.1" y="245" width="1.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="73.08" y="255.5" ></text>
</g>
<g >
<title>schedule (104,524,796 samples, 2.02%)</title><rect x="188.3" y="277" width="23.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="191.32" y="287.5" >s..</text>
</g>
<g >
<title>poll_idle (50,718,301 samples, 0.98%)</title><rect x="1178.3" y="245" width="11.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1181.31" y="255.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (2,413,477,896 samples, 46.73%)</title><rect x="638.5" y="437" width="551.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="641.53" y="447.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>irq_exit_rcu (398,710,598 samples, 7.72%)</title><rect x="694.9" y="277" width="91.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="697.85" y="287.5" >irq_exit_rcu</text>
</g>
<g >
<title>__raw_spin_lock_irqsave (49,382,603 samples, 0.96%)</title><rect x="456.7" y="213" width="11.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="459.73" y="223.5" ></text>
</g>
<g >
<title>try_charge_memcg (57,431,599 samples, 1.11%)</title><rect x="260.9" y="245" width="13.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="263.95" y="255.5" ></text>
</g>
<g >
<title>kfree (262,943,749 samples, 5.09%)</title><rect x="10.0" y="197" width="60.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >kfree</text>
</g>
<g >
<title>get_page_from_freelist (110,979,513 samples, 2.15%)</title><rect x="235.6" y="245" width="25.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="238.59" y="255.5" >g..</text>
</g>
<g >
<title>start_kernel (224,045,362 samples, 4.34%)</title><rect x="1138.8" y="389" width="51.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1141.81" y="399.5" >start..</text>
</g>
<g >
<title>copyin (49,954,046 samples, 0.97%)</title><rect x="274.1" y="245" width="11.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="277.07" y="255.5" ></text>
</g>
<g >
<title>swapper (2,791,463,467 samples, 54.05%)</title><rect x="552.2" y="453" width="637.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="555.17" y="463.5" >swapper</text>
</g>
<g >
<title>enqueue_task_fair (49,280,012 samples, 0.95%)</title><rect x="1079.5" y="293" width="11.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1082.48" y="303.5" ></text>
</g>
<g >
<title>__update_blocked_fair (66,556,969 samples, 1.29%)</title><rect x="770.7" y="197" width="15.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="773.75" y="207.5" ></text>
</g>
<g >
<title>pipe_read (574,228,699 samples, 11.12%)</title><rect x="285.5" y="325" width="131.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="288.48" y="335.5" >pipe_read</text>
</g>
<g >
<title>__irq_exit_rcu (398,710,598 samples, 7.72%)</title><rect x="694.9" y="261" width="91.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="697.85" y="271.5" >__irq_exit..</text>
</g>
<g >
<title>child (49,377,172 samples, 0.96%)</title><rect x="416.7" y="405" width="11.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="419.69" y="415.5" ></text>
</g>
<g >
<title>pipe_read (561,957,557 samples, 10.88%)</title><rect x="83.8" y="293" width="128.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="86.80" y="303.5" >pipe_read</text>
</g>
<g >
<title>__alloc_pages (217,835,134 samples, 4.22%)</title><rect x="224.3" y="261" width="49.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="227.29" y="271.5" >__all..</text>
</g>
<g >
<title>vfs_write (272,609,858 samples, 5.28%)</title><rect x="428.0" y="341" width="62.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="430.97" y="351.5" >vfs_wr..</text>
</g>
<g >
<title>arch_call_rest_init (224,045,362 samples, 4.34%)</title><rect x="1138.8" y="373" width="51.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1141.81" y="383.5" >arch_..</text>
</g>
<g >
<title>bprm_execve (262,943,749 samples, 5.09%)</title><rect x="10.0" y="277" width="60.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >bprm_e..</text>
</g>
<g >
<title>__x64_sys_read (574,228,699 samples, 11.12%)</title><rect x="285.5" y="373" width="131.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="288.48" y="383.5" >__x64_sys_read</text>
</g>
<g >
<title>evlist__enable (5,327,057 samples, 0.10%)</title><rect x="70.1" y="405" width="1.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="73.08" y="415.5" ></text>
</g>
<g >
<title>cpuidle_enter (1,729,979,117 samples, 33.50%)</title><rect x="648.6" y="341" width="395.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="651.64" y="351.5" >cpuidle_enter</text>
</g>
<g >
<title>local_clock_noinstr (32,820,058 samples, 0.64%)</title><rect x="1036.4" y="293" width="7.5" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1039.43" y="303.5" ></text>
</g>
<g >
<title>__schedule (162,394,725 samples, 3.14%)</title><rect x="1090.7" y="357" width="37.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1093.74" y="367.5" >__s..</text>
</g>
<g >
<title>ttwu_queue_wakelist (48,097,974 samples, 0.93%)</title><rect x="468.0" y="213" width="11.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="471.01" y="223.5" ></text>
</g>
<g >
<title>__libc_csu_init (937,376,216 samples, 18.15%)</title><rect x="71.3" y="421" width="214.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="74.30" y="431.5" >__libc_csu_init</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (600,959,039 samples, 11.64%)</title><rect x="648.6" y="293" width="137.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="651.64" y="303.5" >sysvec_apic_timer..</text>
</g>
<g >
<title>__ext4_journal_start_sb (223,766,127 samples, 4.33%)</title><rect x="587.4" y="229" width="51.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="590.41" y="239.5" >__ext..</text>
</g>
<g >
<title>update_load_avg (49,280,012 samples, 0.95%)</title><rect x="1079.5" y="261" width="11.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1082.48" y="271.5" ></text>
</g>
<g >
<title>ttwu_do_activate (49,280,012 samples, 0.95%)</title><rect x="1079.5" y="325" width="11.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1082.48" y="335.5" ></text>
</g>
<g >
<title>call_cpuidle (1,729,979,117 samples, 33.50%)</title><rect x="648.6" y="357" width="395.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="651.64" y="367.5" >call_cpuidle</text>
</g>
<g >
<title>__libc_start_main (49,377,172 samples, 0.96%)</title><rect x="416.7" y="437" width="11.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="419.69" y="447.5" ></text>
</g>
<g >
<title>[unknown] (262,943,749 samples, 5.09%)</title><rect x="10.0" y="437" width="60.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >[unkno..</text>
</g>
<g >
<title>all (5,164,248,236 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>x64_sys_call (262,943,749 samples, 5.09%)</title><rect x="10.0" y="325" width="60.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >x64_sy..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (320,691,638 samples, 6.21%)</title><rect x="212.2" y="389" width="73.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="215.21" y="399.5" >entry_SY..</text>
</g>
<g >
<title>sched_ttwu_pending (49,280,012 samples, 0.95%)</title><rect x="1079.5" y="341" width="11.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1082.48" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (616,684,578 samples, 11.94%)</title><rect x="71.3" y="373" width="140.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="74.30" y="383.5" >do_syscall_64</text>
</g>
<g >
<title>__mark_inode_dirty (223,766,127 samples, 4.33%)</title><rect x="587.4" y="261" width="51.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="590.41" y="271.5" >__mar..</text>
</g>
<g >
<title>do_syscall_64 (223,910,015 samples, 4.34%)</title><rect x="587.4" y="421" width="51.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="590.37" y="431.5" >do_sy..</text>
</g>
<g >
<title>do_syscall_64 (262,943,749 samples, 5.09%)</title><rect x="10.0" y="341" width="60.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >do_sys..</text>
</g>
<g >
<title>__x64_sys_execve (262,943,749 samples, 5.09%)</title><rect x="10.0" y="309" width="60.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >__x64_..</text>
</g>
<g >
<title>copyout (309,500,437 samples, 5.99%)</title><rect x="117.6" y="245" width="70.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="120.60" y="255.5" >copyout</text>
</g>
<g >
<title>__mem_cgroup_uncharge (49,298,818 samples, 0.95%)</title><rect x="307.8" y="277" width="11.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="310.79" y="287.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (202,248,441 samples, 3.92%)</title><rect x="648.6" y="261" width="46.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="651.64" y="271.5" >hrti..</text>
</g>
<g >
<title>cpu_startup_entry (2,189,432,534 samples, 42.40%)</title><rect x="638.5" y="405" width="500.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="641.53" y="415.5" >cpu_startup_entry</text>
</g>
<g >
<title>cpuidle_enter_state (223,623,406 samples, 4.33%)</title><rect x="1138.8" y="261" width="51.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1141.81" y="271.5" >cpuid..</text>
</g>
<g >
<title>generic_update_time (223,766,127 samples, 4.33%)</title><rect x="587.4" y="277" width="51.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="590.41" y="287.5" >gener..</text>
</g>
<g >
<title>ksys_write (223,766,127 samples, 4.33%)</title><rect x="587.4" y="373" width="51.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="590.41" y="383.5" >ksys_..</text>
</g>
<g >
<title>vfs_read (574,228,699 samples, 11.12%)</title><rect x="285.5" y="341" width="131.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="288.48" y="351.5" >vfs_read</text>
</g>
<g >
<title>rest_init (224,045,362 samples, 4.34%)</title><rect x="1138.8" y="357" width="51.2" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1141.81" y="367.5" >rest_..</text>
</g>
<g >
<title>copy_page_to_iter (309,500,437 samples, 5.99%)</title><rect x="117.6" y="277" width="70.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="120.60" y="287.5" >copy_pa..</text>
</g>
<g >
<title>check_cpu_stall (104,154,639 samples, 2.02%)</title><rect x="671.1" y="165" width="23.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="674.05" y="175.5" >c..</text>
</g>
<g >
<title>__switch_to (53,974,318 samples, 1.05%)</title><rect x="188.3" y="245" width="12.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="191.32" y="255.5" ></text>
</g>
<g >
<title>copyout (377,559,654 samples, 7.31%)</title><rect x="319.1" y="277" width="86.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="322.06" y="287.5" >copyout</text>
</g>
<g >
<title>__wake_up_sync_key (176,483,454 samples, 3.42%)</title><rect x="438.7" y="309" width="40.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="441.68" y="319.5" >__w..</text>
</g>
<g >
<title>tick_nohz_idle_enter (47,985,439 samples, 0.93%)</title><rect x="1127.8" y="389" width="11.0" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1130.84" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (272,609,858 samples, 5.28%)</title><rect x="428.0" y="421" width="62.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="430.97" y="431.5" >entry_..</text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (244,444,480 samples, 4.73%)</title><rect x="714.9" y="165" width="55.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="717.89" y="175.5" >updat..</text>
</g>
<g >
<title>do_syscall_64 (574,228,699 samples, 11.12%)</title><rect x="285.5" y="405" width="131.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="288.48" y="415.5" >do_syscall_64</text>
</g>
<g >
<title>native_sched_clock (66,647,327 samples, 1.29%)</title><rect x="807.8" y="277" width="15.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="810.78" y="287.5" ></text>
</g>
<g >
<title>call_cpuidle (223,623,406 samples, 4.33%)</title><rect x="1138.8" y="293" width="51.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1141.81" y="303.5" >call_..</text>
</g>
<g >
<title>__x64_sys_read (616,684,578 samples, 11.94%)</title><rect x="71.3" y="341" width="140.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="74.30" y="351.5" >__x64_sys_read</text>
</g>
<g >
<title>native_sched_clock (32,820,058 samples, 0.64%)</title><rect x="1036.4" y="261" width="7.5" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1039.43" y="271.5" ></text>
</g>
<g >
<title>start_secondary (2,189,432,534 samples, 42.40%)</title><rect x="638.5" y="421" width="500.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="641.53" y="431.5" >start_secondary</text>
</g>
<g >
<title>cpu_startup_entry (224,045,362 samples, 4.34%)</title><rect x="1138.8" y="341" width="51.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1141.81" y="351.5" >cpu_s..</text>
</g>
<g >
<title>sched_use_asym_prio (98,505,093 samples, 1.91%)</title><rect x="748.2" y="133" width="22.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="751.24" y="143.5" >s..</text>
</g>
<g >
<title>copy_page_to_iter (377,559,654 samples, 7.31%)</title><rect x="319.1" y="309" width="86.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="322.06" y="319.5" >copy_page_..</text>
</g>
<g >
<title>__switch_to (49,809,781 samples, 0.96%)</title><rect x="1090.7" y="341" width="11.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1093.74" y="351.5" ></text>
</g>
<g >
<title>cpuidle_not_available (93,275,815 samples, 1.81%)</title><rect x="1043.9" y="373" width="21.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1046.93" y="383.5" >c..</text>
</g>
<g >
<title>pipe_write (272,609,858 samples, 5.28%)</title><rect x="428.0" y="325" width="62.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="430.97" y="335.5" >pipe_w..</text>
</g>
<g >
<title>[unknown] (5,327,057 samples, 0.10%)</title><rect x="70.1" y="437" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="73.08" y="447.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (49,273,948 samples, 0.95%)</title><rect x="285.5" y="309" width="11.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="288.48" y="319.5" ></text>
</g>
<g >
<title>update_blocked_averages (66,556,969 samples, 1.29%)</title><rect x="770.7" y="213" width="15.3" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="773.75" y="223.5" ></text>
</g>
<g >
<title>perf_ioctl (5,327,057 samples, 0.10%)</title><rect x="70.1" y="261" width="1.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="73.08" y="271.5" ></text>
</g>
<g >
<title>event_function_call (5,327,057 samples, 0.10%)</title><rect x="70.1" y="197" width="1.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="73.08" y="207.5" ></text>
</g>
<g >
<title>_copy_from_iter (49,954,046 samples, 0.97%)</title><rect x="274.1" y="261" width="11.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="277.07" y="271.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1,729,979,117 samples, 33.50%)</title><rect x="648.6" y="325" width="395.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="651.64" y="335.5" >cpuidle_enter_state</text>
</g>
<g >
<title>copy_page_from_iter (49,954,046 samples, 0.97%)</title><rect x="274.1" y="277" width="11.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="277.07" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_write (223,766,127 samples, 4.33%)</title><rect x="587.4" y="389" width="51.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="590.41" y="399.5" >__x64..</text>
</g>
<g >
<title>default_wake_function (52,902,458 samples, 1.02%)</title><rect x="212.2" y="213" width="12.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="215.21" y="223.5" ></text>
</g>
<g >
<title>vfs_write (320,691,638 samples, 6.21%)</title><rect x="212.2" y="309" width="73.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="215.21" y="319.5" >vfs_write</text>
</g>
<g >
<title>file_modified_flags (223,766,127 samples, 4.33%)</title><rect x="587.4" y="293" width="51.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="590.41" y="303.5" >file_..</text>
</g>
<g >
<title>event_function (5,327,057 samples, 0.10%)</title><rect x="70.1" y="133" width="1.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="73.08" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (5,327,057 samples, 0.10%)</title><rect x="70.1" y="277" width="1.2" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="73.08" y="287.5" ></text>
</g>
<g >
<title>__libc_read (616,684,578 samples, 11.94%)</title><rect x="71.3" y="405" width="140.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="74.30" y="415.5" >__libc_read</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (223,910,015 samples, 4.34%)</title><rect x="587.4" y="437" width="51.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="590.37" y="447.5" >entry..</text>
</g>
<g >
<title>perf (5,327,057 samples, 0.10%)</title><rect x="70.1" y="453" width="1.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="73.08" y="463.5" ></text>
</g>
<g >
<title>exec_binprm (262,943,749 samples, 5.09%)</title><rect x="10.0" y="245" width="60.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >exec_b..</text>
</g>
<g >
<title>__update_load_avg_cfs_rq (87,709,149 samples, 1.70%)</title><rect x="694.9" y="165" width="20.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="697.85" y="175.5" ></text>
</g>
<g >
<title>native_write_msr (5,327,057 samples, 0.10%)</title><rect x="70.1" y="37" width="1.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="73.08" y="47.5" ></text>
</g>
<g >
<title>generic_exec_single (5,327,057 samples, 0.10%)</title><rect x="70.1" y="165" width="1.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="73.08" y="175.5" ></text>
</g>
<g >
<title>consume_stock (49,424,022 samples, 0.96%)</title><rect x="224.3" y="213" width="11.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="227.29" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (5,327,057 samples, 0.10%)</title><rect x="70.1" y="309" width="1.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="73.08" y="319.5" ></text>
</g>
<g >
<title>page_counter_uncharge (49,298,818 samples, 0.95%)</title><rect x="307.8" y="245" width="11.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="310.79" y="255.5" ></text>
</g>
<g >
<title>ksys_write (272,609,858 samples, 5.28%)</title><rect x="428.0" y="357" width="62.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="430.97" y="367.5" >ksys_w..</text>
</g>
<g >
<title>vfs_read (616,684,578 samples, 11.94%)</title><rect x="71.3" y="309" width="140.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="74.30" y="319.5" >vfs_read</text>
</g>
<g >
<title>autoremove_wake_function (52,902,458 samples, 1.02%)</title><rect x="212.2" y="229" width="12.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="215.21" y="239.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (49,280,012 samples, 0.95%)</title><rect x="1079.5" y="373" width="11.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1082.48" y="383.5" ></text>
</g>
<g >
<title>_perf_event_enable (5,327,057 samples, 0.10%)</title><rect x="70.1" y="213" width="1.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="73.08" y="223.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (223,766,127 samples, 4.33%)</title><rect x="587.4" y="197" width="51.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="590.41" y="207.5" >kmem_..</text>
</g>
<g >
<title>_nohz_idle_balance.isra.0 (87,709,149 samples, 1.70%)</title><rect x="694.9" y="213" width="20.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="697.85" y="223.5" ></text>
</g>
<g >
<title>__wake_up_common (52,902,458 samples, 1.02%)</title><rect x="212.2" y="245" width="12.1" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="215.21" y="255.5" ></text>
</g>
<g >
<title>_copy_to_iter (309,500,437 samples, 5.99%)</title><rect x="117.6" y="261" width="70.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="120.60" y="271.5" >_copy_t..</text>
</g>
<g >
<title>finish_task_switch.isra.0 (49,730,918 samples, 0.96%)</title><rect x="405.3" y="277" width="11.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="408.33" y="287.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (223,766,127 samples, 4.33%)</title><rect x="587.4" y="341" width="51.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="590.41" y="351.5" >ext4_..</text>
</g>
<g >
<title>load_elf_binary (262,943,749 samples, 5.09%)</title><rect x="10.0" y="213" width="60.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >load_e..</text>
</g>
<g >
<title>update_blocked_averages (87,709,149 samples, 1.70%)</title><rect x="694.9" y="197" width="20.0" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="697.85" y="207.5" ></text>
</g>
<g >
<title>vfs_write (223,766,127 samples, 4.33%)</title><rect x="587.4" y="357" width="51.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="590.41" y="367.5" >vfs_w..</text>
</g>
<g >
<title>find_busiest_group (244,444,480 samples, 4.73%)</title><rect x="714.9" y="181" width="55.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="717.89" y="191.5" >find_..</text>
</g>
<g >
<title>cpus_share_cache (52,902,458 samples, 1.02%)</title><rect x="212.2" y="149" width="12.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="215.21" y="159.5" ></text>
</g>
<g >
<title>__folio_put (52,274,967 samples, 1.01%)</title><rect x="95.3" y="261" width="11.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="98.29" y="271.5" ></text>
</g>
<g >
<title>x64_sys_call (616,684,578 samples, 11.94%)</title><rect x="71.3" y="357" width="140.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="74.30" y="367.5" >x64_sys_call</text>
</g>
<g >
<title>rebalance_domains (244,444,480 samples, 4.73%)</title><rect x="714.9" y="213" width="55.8" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="717.89" y="223.5" >rebal..</text>
</g>
<g >
<title>__flush_smp_call_function_queue (49,280,012 samples, 0.95%)</title><rect x="1079.5" y="357" width="11.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1082.48" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (616,684,578 samples, 11.94%)</title><rect x="71.3" y="389" width="140.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="74.30" y="399.5" >entry_SYSCALL_64_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,327,057 samples, 0.10%)</title><rect x="70.1" y="325" width="1.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="73.08" y="335.5" ></text>
</g>
<g >
<title>ksys_write (320,691,638 samples, 6.21%)</title><rect x="212.2" y="325" width="73.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="215.21" y="335.5" >ksys_write</text>
</g>
<g >
<title>ctx_resched (5,327,057 samples, 0.10%)</title><rect x="70.1" y="101" width="1.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="73.08" y="111.5" ></text>
</g>
<g >
<title>x64_sys_call (5,327,057 samples, 0.10%)</title><rect x="70.1" y="293" width="1.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="73.08" y="303.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (600,959,039 samples, 11.64%)</title><rect x="648.6" y="309" width="137.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="651.64" y="319.5" >asm_sysvec_apic_t..</text>
</g>
<g >
<title>perf_event_for_each_child (5,327,057 samples, 0.10%)</title><rect x="70.1" y="229" width="1.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="73.08" y="239.5" ></text>
</g>
<g >
<title>main (49,377,172 samples, 0.96%)</title><rect x="416.7" y="421" width="11.3" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="419.69" y="431.5" ></text>
</g>
<g >
<title>__rcu_read_lock (49,730,918 samples, 0.96%)</title><rect x="405.3" y="261" width="11.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="408.33" y="271.5" ></text>
</g>
<g >
<title>remote_function (5,327,057 samples, 0.10%)</title><rect x="70.1" y="149" width="1.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="73.08" y="159.5" ></text>
</g>
<g >
<title>intel_idle (95,507,302 samples, 1.85%)</title><rect x="786.0" y="309" width="21.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="788.95" y="319.5" >i..</text>
</g>
<g >
<title>do_syscall_64 (320,691,638 samples, 6.21%)</title><rect x="212.2" y="373" width="73.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="215.21" y="383.5" >do_sysca..</text>
</g>
<g >
<title>jbd2__journal_start (223,766,127 samples, 4.33%)</title><rect x="587.4" y="213" width="51.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="590.41" y="223.5" >jbd2_..</text>
</g>
<g >
<title>try_to_wake_up (52,902,458 samples, 1.02%)</title><rect x="212.2" y="197" width="12.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="215.21" y="207.5" ></text>
</g>
<g >
<title>update_sg_lb_stats (244,444,480 samples, 4.73%)</title><rect x="714.9" y="149" width="55.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="717.89" y="159.5" >updat..</text>
</g>
</g>
</svg>
