diff -r 523a31f94b7c cpu-exec.c
--- a/cpu-exec.c	Thu Mar 08 15:50:12 2012 -0500
+++ b/cpu-exec.c	Thu Mar 08 18:07:56 2012 -0500
@@ -24,7 +24,9 @@
 
 int tb_invalidated_flag;
 
-//#define CONFIG_DEBUG_EXEC
+// @@LOCALMOD-BEGIN
+#define CONFIG_DEBUG_EXEC
+// @@LOCALMOD-END
 
 bool qemu_cpu_has_work(CPUState *env)
 {
@@ -511,6 +513,13 @@
                     env->exception_index = EXCP_INTERRUPT;
                     cpu_loop_exit(env);
                 }
+ 
+                // @LOCALMOD-BEGIN
+                spin_lock(&tb_lock);
+                tb = tb_find_fast(env);
+                // @LOCALMOD-END
+
+                
 #if defined(DEBUG_DISAS) || defined(CONFIG_DEBUG_EXEC)
                 if (qemu_loglevel_mask(CPU_LOG_TB_CPU)) {
                     /* restore flags in standard format */
@@ -526,12 +535,29 @@
                               | env->cc_dest | (env->cc_x << 4);
                     log_cpu_state(env, 0);
 #else
-                    log_cpu_state(env, 0);
+#define VLINE  "=========================================================\n"
+                    long pc = (long)tb->pc;
+                    if (pc < 0x40000000) {
+                      if (pc < 0x10000) {
+                      } else if (pc < 0x20000) {
+                        qemu_log_mask(CPU_LOG_TB_CPU, "@TRAMPOLINES/LOADER" VLINE);
+                      } else if (pc < 0x0fc00000) {
+                        qemu_log_mask(CPU_LOG_TB_CPU, "@NACL_MODULE " VLINE);
+                      } else if (pc < 0x40000000) {
+                        qemu_log_mask(CPU_LOG_TB_CPU, "@NACL_IRT " VLINE);
+                      }
+
+                      log_cpu_state(env, 0);
+                    }
 #endif
                 }
 #endif /* DEBUG_DISAS || CONFIG_DEBUG_EXEC */
-                spin_lock(&tb_lock);
-                tb = tb_find_fast(env);
+
+                // @LOCALMOD-BEGIN
+                // spin_lock(&tb_lock);  
+                // tb = tb_find_fast(env);
+                // @LOCALMOD-END
+
                 /* Note: we do it here to avoid a gcc bug on Mac OS X when
                    doing it in tb_find_slow */
                 if (tb_invalidated_flag) {
diff -r 523a31f94b7c linux-user/elfload.c
--- a/linux-user/elfload.c	Thu Mar 08 15:50:12 2012 -0500
+++ b/linux-user/elfload.c	Thu Mar 08 18:07:56 2012 -0500
@@ -1046,7 +1046,7 @@
 #ifdef USE_ELF_CORE_DUMP
 static int elf_core_dump(int, const CPUState *);
 #endif /* USE_ELF_CORE_DUMP */
-static void load_symbols(struct elfhdr *hdr, int fd, abi_ulong load_bias);
+void load_symbols(struct elfhdr *hdr, int fd, abi_ulong load_bias);
 
 /* Verify the portions of EHDR within E_IDENT for the target.
    This can be performed before bswapping the entire header.  */
@@ -1727,7 +1727,7 @@
 }
 
 /* Best attempt to load symbols from this ELF object. */
-static void load_symbols(struct elfhdr *hdr, int fd, abi_ulong load_bias)
+void load_symbols(struct elfhdr *hdr, int fd, abi_ulong load_bias)
 {
     int i, shnum, nsyms, sym_idx = 0, str_idx = 0;
     struct elf_shdr *shdr;
diff -r 523a31f94b7c linux-user/main.c
--- a/linux-user/main.c	Thu Mar 08 15:50:12 2012 -0500
+++ b/linux-user/main.c	Thu Mar 08 18:07:56 2012 -0500
@@ -3089,6 +3089,38 @@
     exit(0);
 }
 
+// @LOCAL-MOD-START
+// zero initialized and zero terminated
+#define NACL_ELF_MAX 10
+struct syminfo* extra_syminfo[NACL_ELF_MAX + 1];
+#include "elf.h"
+void load_symbols(struct elf32_hdr *hdr, int fd, abi_ulong load_bias);
+
+static void handle_arg_nacl_extra_elf(const char *arg) {
+  int i;
+  for (i=0; i< NACL_ELF_MAX; ++i) {
+    if (extra_syminfo[i] == 0) break;
+  }
+
+  if (i >= NACL_ELF_MAX) {
+    printf("ERROR: too many extra symbol files\n");
+  }
+
+  printf("adding symbols from %s\n", arg);
+
+  struct elf32_hdr elf_ex;
+  int fd;
+  fd = open(arg, O_RDONLY);
+  if (fd <= 0) {
+    printf("ERROR: opening secondary exe %s\n", filename);
+    return;
+  }
+  
+  read(fd, &elf_ex, sizeof elf_ex);
+  load_symbols(&elf_ex, fd, 0);
+}
+
+  
 struct qemu_argument {
     const char *argv;
     const char *env;
@@ -3133,6 +3165,8 @@
      "",           "log system calls"},
     {"version",    "QEMU_VERSION",     false, handle_arg_version,
      "",           "display version information and exit"},
+    {"nacl_extra_elf",    "",     true, handle_arg_nacl_extra_elf,
+     "",           ""},
     {NULL, NULL, false, NULL, NULL, NULL}
 };
 
@@ -3310,6 +3344,12 @@
     cpu_set_log_filename(log_file);
     optind = parse_args(argc, argv);
 
+    // @LOCALMOD-START
+    if (qemu_loglevel_mask(CPU_LOG_EXEC)) {
+      printf("qemu with NACL mods\n");
+    }
+    // @LOCALMOD-END
+    
     /* Zero out regs */
     memset(regs, 0, sizeof(struct target_pt_regs));
 
