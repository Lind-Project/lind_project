# -*- python2 -*-
# Copyright (c) 2010 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import atexit
import os
import platform
import sys
import tempfile

Import('env')

# TODO(robertm): consider adding this to the top level scons files
env.Append(CPPPATH=['${TARGET_ROOT}'])

env.DualLibrary('gio_wrapped_desc',
                ['gio_shm.c',
                 'gio_shm_unbounded.c',
                 'gio_nacl_desc.c',
                ])

# ----------------------------------------------------------
# Unit Tests
# ----------------------------------------------------------

if not env.Bit('coverage_enabled') or not env.Bit('windows'):
  gio_shm_test_exe = env.ComponentProgram('gio_shm_test',
                                              ['gio_shm_test.c'],
                                              EXTRA_LIBS=['gio_wrapped_desc',
                                                          'nonnacl_srpc',
                                                          'nrd_xfer',
                                                          'nacl_base',
                                                          'imc',
                                                          'platform',
                                                          'gio',
                                                          ])
  if env.Bit('target_arm'):
    params = [ '-n', '512', '-m', '2']
  else:
    params = []  # default
  node = env.CommandTest(
      'gio_shm_test.out',
      command=[gio_shm_test_exe] + params)
  env.AddNodeToTestSuite(node, ['large_tests'], 'run_gio_shm_test')

  gio_shm_unbounded_test_exe = (
      env.ComponentProgram('gio_shm_unbounded_test',
                               ['gio_shm_unbounded_test.c'],
                               EXTRA_LIBS=['gio_wrapped_desc',
                                           'nonnacl_srpc',
                                           'nrd_xfer',
                                           'nacl_base',
                                           'imc',
                                           'platform',
                                           'gio',
                                          ]))
  node = env.CommandTest(
      'gio_shm_unbounded_test.out',
      command=[gio_shm_unbounded_test_exe,])

  env.AddNodeToTestSuite(node, ['small_tests'], 'run_gio_shm_unbounded_test')

  gio_nacl_desc_test_exe = env.ComponentProgram(
      'gio_nacl_desc_test',
      ['gio_nacl_desc_test.c'],
      EXTRA_LIBS=['gio_wrapped_desc',
                  'nonnacl_srpc',
                  'nrd_xfer',
                  'nacl_base',
                  'imc',
                  'platform',
                  'gio',
                  ])

  # atexit processing is necessary because on windows, the process
  # itself often cannot unlink the file -- the python2 process has an
  # open file handle, and windows refuses to unlink a file that is
  # already open.
  temporary_file = tempfile.mktemp()

  def CleanupBinder(fn):
    def Cleanup():
      try:
        os.unlink(fn)
      except OSError:
        pass
    return Cleanup

  atexit.register(CleanupBinder(temporary_file))

  node = env.CommandTest('gio_nacl_desc_test.out',
                         command = [gio_nacl_desc_test_exe,
                                    # TODO(krasin): use
                                    # testdata/some_binary_file, since
                                    # it's used just as a file with
                                    # bytes, not as a NaCl module.
                                    env.File('../service_runtime/testdata/fib_array.nexe'),
                                    temporary_file])

  env.AddNodeToTestSuite(node, ['small_tests'], 'run_gio_nacl_desc_test')
