00000000: 00 00                                        add %ds:[%eax], %al
  00                          386 OpcodeUsesModRm OpcodeLockable OperandSize_b
    Add $Eb, $Gb
      E_Operand               OpUse OpSet
      G_Operand               OpUse
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprUsed | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
00000000: 00 c0                                        add %al, %al
  00                          386 OpcodeUsesModRm OpcodeLockable OperandSize_b
    Add $Eb, $Gb
      E_Operand               OpUse OpSet
      G_Operand               OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %al, ExprUsed | ExprSize8 },
};
00000000: 01 c0                                        add %eax, %eax
  01                          386 OpcodeUsesModRm OpcodeLockable OpcodeAllowsData16 OperandSize_w OperandSize_v
    Add $Ev, $Gv
      E_Operand               OpUse OpSet
      G_Operand               OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %eax, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
};
00000000: 03 18                                        add %ebx, %ds:[%eax]
  03                          386 OpcodeUsesModRm OpcodeLockable OpcodeAllowsData16 OperandSize_w OperandSize_v
    Add $Gv, $Ev
      G_Operand               OpUse OpSet
      E_Operand               OpUse
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
00000000: 03 1d 20 00 00 00                            add %ebx, 0x20
  03                          386 OpcodeUsesModRm OpcodeLockable OpcodeAllowsData16 OperandSize_w OperandSize_v
    Add $Gv, $Ev
      G_Operand               OpUse OpSet
      E_Operand               OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %ebx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprConstant[0] , 0x20, ExprUsed | ExprSize32 | ExprSignedHex },
};
00000000: 02 04 00                                     add %al, %ds:[%eax+%eax*1]
  02                          386 OpcodeUsesModRm OpcodeLockable OperandSize_b
    Add $Gb, $Eb
      G_Operand               OpUse OpSet
      E_Operand               OpUse
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %al, ExprSet | ExprUsed | ExprSize8 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0, ExprSize8 },
};
00000000: d5 0a                                        aad 0xa
  d5                          386 OpcodeHasImmed_b NaClIllegal
    Aad {%ax}, $Ib
      RegAX                   OpUse OpSet OpImplicit
      I_Operand               OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt | ExprImplicit },
  { ExprRegister[0] , %ax, ExprSet | ExprUsed | ExprSize16 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprConstant[0] , 0xa, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
00000000: 90                                           nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 90                                        nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 8d 76 00                                     lea %esi, %ds:[%esi]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OpcodeAllowsData16 OperandSize_w OperandSize_v
    Lea $Gv, $M
      G_Operand               OpSet
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
00000000: 8d 74 26 00                                  lea %esi, %ds:[%esi+%esp*1]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OpcodeAllowsData16 OperandSize_w OperandSize_v
    Lea $Gv, $M
      G_Operand               OpSet
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize8 | ExprSignedHex },
};
00000000: 8d b6 00 00 00 00                            lea %esi, %ds:[%esi]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OpcodeAllowsData16 OperandSize_w OperandSize_v
    Lea $Gv, $M
      G_Operand               OpSet
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
00000000: 8d b4 26 00 00 00 00                         lea %esi, %ds:[%esi+%esp*1]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OpcodeAllowsData16 OperandSize_w OperandSize_v
    Lea $Gv, $M
      G_Operand               OpSet
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
00000000: 89 f6                                        mov %esi, %esi
  89                          386 OpcodeUsesModRm OpcodeAllowsData16 OperandSize_w OperandSize_v
    Mov $Ev, $Gv
      E_Operand               OpSet
      G_Operand               OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %esi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %esi, ExprUsed | ExprSize32 },
};
00000000: 8d bc 27 00 00 00 00                         lea %edi, %ds:[%edi+%esp*1]
  8d                          386 ModRmModIsnt0x3 OpcodeUsesModRm OpcodeAllowsData16 OperandSize_w OperandSize_v
    Lea $Gv, $M
      G_Operand               OpSet
      M_Operand               OpAddress
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %edi, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprAddress | ExprSize32 },
  { ExprRegister[0] , %ds, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %edi, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %esp, ExprUsed | ExprSize32 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
00000000: 0f 1f 00                                     nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 0f 1f 40 00                                  nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 0f 1f 44 00 00                               nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 0f 1f 44 00 00                            nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 0f 1f 80 00 00 00 00                         nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 0f 1f 84 00 00 00 00 00                      nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 0f 1f 84 00 00 00 00 00                   nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 2e 0f 1f 84 00 00 00 00 00                nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 2e 0f 1f 84 00 00 00 00 00             nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 66 2e 0f 1f 84 00 00 00 00 00          nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00       nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00    nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00 nop
  [hard coded]                386 
    Nop
NaClExpVector[0] = {
};
00000000: e3 00                                        jecxz 0x2
  e3                          386 OpcodeHasImmed OperandSize_b AddressSize_v ConditionalJump BranchHints
    Jecxz {%eip}, {%ecx}, $Jb
      RegEIP                  OpSet OpImplicit
      RegECX                  OpUse OpImplicit
      J_Operand               OpUse OperandNear OperandRelative
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt | ExprImplicit },
  { ExprRegister[0] , %eip, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt | ExprImplicit },
  { ExprRegister[0] , %ecx, ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, ExprSize8 | ExprUnsignedInt },
  { ExprConstant[0] , 0x2, ExprUsed | ExprSize8 | ExprSignedHex | ExprJumpTarget },
};
00000000: 67 e3 00                                     jcxz 0x3
  e3                          386 OpcodeHasImmed OperandSize_b AddressSize_w ConditionalJump BranchHints
    Jcxz {%eip}, {%cx}, $Jb
      RegEIP                  OpSet OpImplicit
      RegCX                   OpUse OpImplicit
      J_Operand               OpUse OperandNear OperandRelative
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt | ExprImplicit },
  { ExprRegister[0] , %eip, ExprSet | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt | ExprImplicit },
  { ExprRegister[0] , %cx, ExprUsed | ExprSize16 },
  { OperandReference[1] , 2, ExprSize8 | ExprUnsignedInt },
  { ExprConstant[0] , 0x3, ExprUsed | ExprSize8 | ExprSignedHex | ExprJumpTarget },
};
00000000: 0f 16 d1                                     movlhps %xmm2, %xmm1
  0f 16                       SSE ModRmModIs0x3 OpcodeUsesModRm
    Movlhps $Vps, $VRq
      Xmm_G_Operand           OpSet
      Xmm_E_Operand           OpUse
NaClExpVector[4] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %xmm2, ExprSet },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %xmm1, ExprUsed },
};
00000000: 0f 16 a5 00 00 00 00                         movhps %xmm4, %ss:[%ebp]
  0f 16                       SSE ModRmModIsnt0x3 OpcodeUsesModRm
    Movhps $Vps, $Mq
      Xmm_G_Operand           OpSet
      Mo_Operand              OpUse
NaClExpVector[10] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %xmm4, ExprSet },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %ss, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %ebp, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , 0x0, ExprSize32 | ExprSignedHex },
};
00000000: 0f ac c1 10                                  shrd %ecx, %eax, 0x10
  0f ac                       386 OpcodeUsesModRm OpcodeHasImmed_b OpcodeAllowsData16 OperandSize_w OperandSize_v
    Shrd $Ev, $Gv, $Ib
      E_Operand               OpUse OpSet
      G_Operand               OpUse
      I_Operand               OpUse
NaClExpVector[6] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %ecx, ExprSet | ExprUsed | ExprSize32 },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, ExprSize8 | ExprUnsignedInt },
  { ExprConstant[0] , 0x10, ExprUsed | ExprSize8 | ExprUnsignedHex },
};
00000000: 0f ad 45 bc                                  shrd %ss:[%ebp-0x44], %eax, %cl
  0f ad                       386 OpcodeUsesModRm OpcodeAllowsData16 OperandSize_w OperandSize_v
    Shrd $Ev, $Gv, %cl
      E_Operand               OpUse OpSet
      G_Operand               OpUse
      RegCL                   OpUse
NaClExpVector[12] = {
  { OperandReference[1] , 0, ExprSize8 | ExprUnsignedInt },
  { ExprSegmentAddress[2] , 0, ExprSet | ExprUsed | ExprSize32 },
  { ExprRegister[0] , %ss, ExprUsed | ExprSize16 },
  { ExprMemOffset[4] , 0, ExprSize32 },
  { ExprRegister[0] , %ebp, ExprUsed | ExprSize32 },
  { ExprRegister[0] , %unknown, 0 },
  { ExprConstant[0] , 1, ExprSize8 },
  { ExprConstant[0] , -0x44, ExprSize8 | ExprSignedHex },
  { OperandReference[1] , 1, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %eax, ExprUsed | ExprSize32 },
  { OperandReference[1] , 2, ExprSize8 | ExprUnsignedInt },
  { ExprRegister[0] , %cl, ExprUsed | ExprSize8 },
};
