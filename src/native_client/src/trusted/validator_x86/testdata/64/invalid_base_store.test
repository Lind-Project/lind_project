@hex:
  # Invalid base in memory offset, even though index register is properly defined,
  # because base isn't R15, RBP, or RSP.
  83 e1 e0
  49 89 44 CD 36
@val:
  VALIDATOR: 0000000000000003: 49 89 44 cd 36                               mov [%r13+%rcx*8+0x36], %rax
  VALIDATOR: ERROR: Invalid base register in memory offset
  VALIDATOR: Checking jump targets: 0 to 8
  VALIDATOR: Checking that basic blocks are aligned
  *** <input> IS UNSAFE ***
@rval:
  VALIDATOR: 0000000000000003: 49 89 44 cd 36                               mov [%r13+%rcx*8+0x36], %rax
  VALIDATOR: ERROR: Invalid base register in memory offset
  VALIDATOR: Checking jump targets: 0 to 8
  VALIDATOR: Checking that basic blocks are aligned
  *** <input> IS UNSAFE ***
@rvald:
  VALIDATOR: 0000000000000003: 49 89 44 cd 36                               mov [%r13+%rcx*8+0x36], %rax
  VALIDATOR: ERROR: Invalid base register in memory offset
  VALIDATOR: Checking block alignment and jump targets: 0 to 8
  *** <input> IS UNSAFE ***
@vd-rval:
  VALIDATOR: 0000000000000003: 49 89 44 cd 36                               mov [%r13+%rcx*8+0x36], %rax
  VALIDATOR: ERROR: Invalid base register in memory offset
  VALIDATOR: Checking jump targets: 0 to 8
  VALIDATOR: Checking that basic blocks are aligned
  *** <input> IS UNSAFE ***
@dis:
  0000000000000000: 83 e1 e0                                     and %ecx, 0xe0
  0000000000000003: 49 89 44 cd 36                               mov [%r13+%rcx*8+0x36], %rax
@vdis:
  0000000000000000: 83 e1 e0                                     and %ecx, 0xe0
  0000000000000003: 49 89 44 cd 36                               mov [%r13+%rcx*8+0x36], %rax
@rdfa_output:
  3: [0] improper memory address - bad base
  return code: 1
