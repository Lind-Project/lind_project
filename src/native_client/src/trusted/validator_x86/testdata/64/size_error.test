@hex:
  # The following checks if we catch the use of data 66/Rex.W specifying
  # undetermined operand size.
  
  # The following checks that we allow Rex.w.
  # 0000000000000000: 48 01 c3                                     add %rbx, %rax
  48 01 c3
  
  # The following checks that we allow data 66.
  # 0000000000000003: 66 01 c3                                     add %bx, %ax
  66 01 c3
  
  # The following checks that we don't allow Rex.w and data 66
  66 48 01 c3
@rval:
  VALIDATOR: 0000000000000006: 66 48 01                                     invalid
  VALIDATOR: ERROR: Opcode sequence doesn't define a valid x86 instruction
  VALIDATOR: 0000000000000006: 66 48 01                                     invalid
  VALIDATOR: ERROR: Use of DATA16 (66) prefix for instruction not allowed by Native Client
  VALIDATOR: 0000000000000009: c3                                           ret
  VALIDATOR: ERROR: This instruction has been marked illegal by Native Client
  VALIDATOR: 0000000000000009: c3                                           ret
  VALIDATOR: ERROR: Illegal assignment to RSP
  VALIDATOR: Checking jump targets: 0 to a
  VALIDATOR: Checking that basic blocks are aligned
  *** <input> IS UNSAFE ***
@dis:
  0000000000000000: 48 01 c3                                     add %rbx, %rax
  0000000000000003: 66 01 c3                                     add %bx, %ax
  0000000000000006: 66 48 01                                     invalid
  0000000000000009: c3                                           ret
@rdfa_output:
  6: [0] unrecognized instruction
  return code: 1
@validators_disagree:
  errors reported by old validator but not by rdfa one:
    0x9 - old validator recovered in the middle of invalid instruction
