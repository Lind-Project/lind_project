@hex:
  # Tests that push operand sizes work correctly.
  
  # The following tests the default size (which is 4 bytes).
  68 03 04 05 06
  
  # The following tests that rex.w doesn't effect the size.
  48 68 03 04 05 06
  
  # The following tests that data66 defines the size as 2 bytes.
  66 68 03 04
  
  # The following shows that we don't allow rex.w and a data 66 prefix.
  66 48 68 03 04
  
  90 90 90 90
@rval:
  VALIDATOR: 000000000000000f: 66 48 68                                     invalid
  VALIDATOR: ERROR: Opcode sequence doesn't define a valid x86 instruction
  VALIDATOR: 000000000000000f: 66 48 68                                     invalid
  VALIDATOR: ERROR: Use of DATA16 (66) prefix for instruction not allowed by Native Client
  VALIDATOR: 0000000000000012: 03 04 90                                     add %eax, [%rax+%rdx*4]
  VALIDATOR: ERROR: Invalid base register in memory offset
  VALIDATOR: Checking jump targets: 0 to 18
  VALIDATOR: Checking that basic blocks are aligned
  *** <input> IS UNSAFE ***
@dis:
  0000000000000000: 68 03 04 05 06                               push 0x6050403
  0000000000000005: 48 68 03 04 05 06                            push 0x6050403
  000000000000000b: 66 68 03 04                                  push 0x403
  000000000000000f: 66 48 68                                     invalid
  0000000000000012: 03 04 90                                     add %eax, [%rax+%rdx*4]
  0000000000000015: 90                                           nop
  0000000000000016: 90                                           nop
  0000000000000017: 90                                           nop
@rdfa_output:
  f: [0] unrecognized instruction
  return code: 1
@validators_disagree:
  errors reported by old validator but not by rdfa one:
    0x12 - old validators recovers in the middle of invalid instruction
