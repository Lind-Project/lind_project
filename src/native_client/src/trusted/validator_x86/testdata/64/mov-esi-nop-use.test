@hex:
  # Case where we should conclude that the index register rsi in the second move contains
  # only 32 bits, and is set by the mov, so it is legal (i.e. it zero extends).
  # That is, the two moves:
  #     mov %esi, %esi
  #     mov [%r15 + %rsi*1 + 0x8], %edx
  89 f6 \\
  41 89 54 37 08
@val:
  VALIDATOR: Checking jump targets: 0 to 7
  VALIDATOR: Checking that basic blocks are aligned
  *** <input> is safe ***
@rval:
  VALIDATOR: Checking jump targets: 0 to 7
  VALIDATOR: Checking that basic blocks are aligned
  *** <input> is safe ***
@rvald:
  VALIDATOR: Checking block alignment and jump targets: 0 to 7
  *** <input> is safe ***
@vd-rval:
  VALIDATOR: Checking jump targets: 0 to 7
  VALIDATOR: Checking that basic blocks are aligned
  *** <input> is safe ***
@dis:
  0000000000000000: 89 f6                                        mov %esi, %esi
  0000000000000002: 41 89 54 37 08                               mov [%r15+%rsi*1+0x8], %edx
@vdis:
  0000000000000000: 89 f6                                        mov %esi, %esi
  0000000000000002: 41 89 54 37 08                               mov [%r15+%rsi*1+0x8], %edx
@rdfa_output:
  return code: 0
