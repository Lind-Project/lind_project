# -*- python2 -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import distutils.sysconfig
import os
import sys

Import('env')


# TODO(mseaborn): Add a Scons option to allow the Python extension to
# be enabled or disabled to override the conditions below.

# While the Python extension does work on x86-32 Linux, it requires a
# full 32-bit userland.  Python does not really support multilib, so a
# 64-bit userland with 32-bit libraries installed via multilib is not
# enough.  Since 32-on-64 is a common development setup and is tested
# on the Buildbots, we disable the Python extension for 32-bit Linux
# for now.
# TODO(mseaborn): Find a good way to distinguish systems with and
# without 32-bit Python automatically.
if env.Bit('linux') and env.Bit('build_x86_32'):
  Return()
# On Windows we do not have an x86-64 version of Python
# installed, so we cannot build/test a 64-bit Python extension there.
# TODO(mseaborn): One solution would be to mix 32-bit and 64-bit in
# the same build, which requires more Scons configuration.
if env.Bit('windows') and env.Bit('build_x86_64'):
  Return()
# Similarly, on Mac OS X 10.5, we do not have an x86-64 version of
# Python installed.
if env.Bit('mac') and env.Bit('build_x86_64'):
  Return()
# ARM and MIPS cross toolchain tarballs do not contain a copy of Python.
if env.Bit('build_arm') or env.Bit('build_mips32'):
  Return()


def MakePythonExtension(env, module_name, sources):
  # We are building a dynamic library.
  env['COMPONENT_STATIC'] = False

  env.Append(CPPPATH=[distutils.sysconfig.get_python_inc()])

  # Python extensions do not have a "lib" prefix on Unix.
  env.Replace(SHLIBPREFIX='')

  # The library's entry point needs to be visible to the Python
  # interpreter.
  env.FilterOut(CCFLAGS=['-fvisibility=hidden'])

  # Avoid an error because __BIG_ENDIAN__ is not defined but a Python
  # header does "#if __BIG_ENDIAN__".
  env.FilterOut(CCFLAGS=['-Wundef'])

  # We are building a shared library, but clang++ passes LINKFLAGS
  # from linux_env, which contains "-pie" which is incompatible with
  # the "-shared" flag for shared libraries.
  env.FilterOut(LINKFLAGS=['-pie'])

  # We need to leave out the definitions of these symbols because they
  # conflict with pyconfig.h's own definitions of them.
  env['CPPDEFINES'] = [item for item in env['CPPDEFINES']
                       if '_POSIX_C_SOURCE' not in item
                       and '_XOPEN_SOURCE' not in item]

  # The PyTypeObject struct has a lot of optional fields towards the end.
  if env.Bit('linux') or env.Bit('mac'):
    env.Append(CPPFLAGS=['-Wno-missing-field-initializers'])

  if env.Bit('windows'):
    env.Append(LINKFLAGS=['/EXPORT:init%s' % module_name])
    # This copies Windows-specific logic in distutils/command/build_ext.py.
    env.Append(LIBPATH=[os.path.join(sys.exec_prefix, 'libs')])

  if env.Bit('mac'):
    env.Append(LINKFLAGS=['-bundle', '-undefined', 'dynamic_lookup'])
    module = env.ComponentProgram('%s.so' % module_name, sources)
  else:
    module = env.ComponentLibrary(module_name, sources)

  if env.Bit('windows'):
    # Python extension DLLs have the suffix ".pyd" on Windows.  Scons's
    # library builder only allows using the ".dll" suffix, so we have to
    # make a copy of the file with the new name as a separate step.
    module = env.InstallAs('%s.pyd' % module_name, module)[0]

  return module


libraries = [
    'nrd_xfer',
    'nacl_base',
    'imc',
    'platform',
    'gio',
    ]
if env['SHARED_LIBS_SPECIAL']:
  libraries = [lib + '_shared' for lib in libraries]
env.Append(EXTRA_LIBS=libraries)

module = MakePythonExtension(env, 'naclimc', ['python_imc.c'])

env_vars = ['PYTHONPATH=%s' % os.path.dirname(module.abspath)]
if env.Bit('mac') and env.Bit('build_x86_32'):
  # On Mac OS X 10.6, the system Python is a multi-architecture
  # executable, and since x86-64 is the default it will fail to load
  # our extension.  So we override the default.
  # TODO(mseaborn): A better solution would be to build the Python
  # extension as multi-arch too.
  python_prefix = ['arch', '-arch', 'i386']
  env_vars.append('PYTHON_ARCH=i386')
else:
  python_prefix = []

node = env.CommandTest(
    'python_imc_test.out',
    command=python_prefix + ['${PYTHON}', env.File('test_python_imc.py')],
    osenv=env_vars)
env.Depends(node, module)
env.AddNodeToTestSuite(node, ['small_tests'], 'run_python_imc_test',
                       is_broken=env.Bit('asan'))
