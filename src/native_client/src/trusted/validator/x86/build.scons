# -*- python2 -*-
# Copyright (c) 2011 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
import sys
Import('env')

#
# Build the x86 specific library.
#
if not env.Bit('target_x86'): Return()

# Create environment for building the common library for x86 validators.
lib_env = env.Clone()
lib_env.Append(CPPPATH=['${TARGET_ROOT}'])
lib_env.FilterOut(CCFLAGS=['-Wextra', '-Wswitch-enum', '-Wsign-compare'])

lib_env.ComponentLibrary(lib_env.NaClTargetArchSuffix('ncval_base'), [
    'error_reporter.c',
    'halt_trim.c',
    'ncinstbuffer.c',
    'x86_insts.c',
    'nc_segment.c',
    ])

lib_env.ComponentLibrary(lib_env.NaClTargetArchSuffix('ncval_base_verbose'), [
    'error_reporter_verbose.c',
    'x86_insts_verbose.c',
    ])

#---------- UNIT TESTS ---------------------------------

# Create an environment to run unit tests using Gtest.
gtest_env = env.MakeGTestEnv()

# List of (unit) test file prefixes to run unit tests on.
gtest_sources = [
    'halt_trim',
    'nc_remaining_memory',
    'nc_inst_bytes',
    ]

for source in gtest_sources:
  test_exe = gtest_env.ComponentProgram(
    'x86_validator_tests_' + source,
    [source+'_tests.cc'],
    EXTRA_LIBS=[gtest_env.NaClTargetArchSuffix('ncvalidate')])
  test_node = gtest_env.CommandTest(
      source+'Tests.out',
      command=[test_exe])
  gtest_env.AddNodeToTestSuite(test_node, ['small_tests'],
                               'run_x86_validator_tests')
