# The set of possible flags associated with expr nodes.
# Each line defines a separate type of expr node.

# Defines that a set occurs for this subexpression.
ExprSet
# Defines that a use occurs for this subexpression.
ExprUsed
# Defines that an address is computed by the subexpression.
ExprAddress
# Defines that the size of the data is 1 byte.
ExprSize8
# Defines that the size of the data is 2 bytes.
ExprSize16
# Defines that the size of the data is 4 bytes.
ExprSize32
# Defines that the size of the data is 6 bytes.
ExprSize48
# Defines that the size of the data is 8 bytes.
ExprSize64
# Defines that the constant is an unsigned hex value instead of an integer.
ExprUnsignedHex
# Defines that the constant is a signed hexidecimal value instead of
# an integer.
ExprSignedHex
# Defines that the constant is an unsigned integer instead of a hex value.
ExprUnsignedInt
# Defines that the constant is a signed integer instead of a hex value.
ExprSignedInt
# Defines an implicit argument that shouldn't be printed.
ExprImplicit
# Defines that the corresponding constant is a jump target.
ExprJumpTarget
# Defines that we have special case of segment register that should
# be printed in the segment address, even if the operand is implicit,
# which happens for instances of DS:[r].
ExprDSrCase
# Defines that we have special case of segment register that should
# be printed in the segment address, even if the operand is implicit,
# which happens for instances of ES:[r].
ExprESrCase
