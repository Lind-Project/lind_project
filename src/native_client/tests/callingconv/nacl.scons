# -*- python2 -*-
# Copyright 2012 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# This test does not make any sense for pure pnacl
if env.Bit('bitcode') and env.Bit('pnacl_generate_pexe'):
  Return()

# This test is disabled for MIPS because we do not have a MIPS-enabled nacl-gcc
# to test PNaCl against.
if env.Bit('target_mips32'):
  Return()

# If this test is failing on the bots, you can find the seed
# from the output of the bot. Look for "--seed=".
# To reproduce the exact problem, set settings['seed'] below
# to the fixed seed you found on the bot.

#
# Calling Convention Test
#
# The "generate.py" script generates 4 modules (module0.c ... module3.c).
# Each module has functions, and calls to other functions in other modules.
# Each function has multiple fixed and variable arguments.
# This tests (by brute force) the correctness of the calling convention.
#
# To test toolchain compatibility, some of the modules are built
# using PNaCl, and some with NNaCl.
#
# Note: having random tests has been a little controversial,
# we are also intentionally hiding the randomness from scons, c.f.:
#  http://codereview.chromium.org/7215028

base_env = env.Clone()
callingconv_h = base_env.File('callingconv.h').srcnode()
extra_cflags = [ '-Wno-long-long', '-I' + callingconv_h.dir.abspath ]

settings = {
  'num_functions'    : 200,
  'calls_per_func'   : 4,
  'max_args_per_func': 16,
  # Note: 'seed' is intentionally not mentioned here which results in
  #       generate.py picking one (see above)
  # Having a seed here would make the commandline flags random,
  # which would force scons to always rebuild.
}

# BUG: http://code.google.com/p/nativeclient/issues/detail?id=2381
if env.Bit('bitcode'):
  settings['allow_struct_va_arg'] = 0

# Structure passing for PNaCl X86-64 has a different ABI.
# BUG: http://code.google.com/p/nativeclient/issues/detail?id=1902
if env.Bit('bitcode') and env.Bit('target_x86_64'):
  settings['allow_struct'] = 0

# BUG: http://code.google.com/p/nativeclient/issues/detail?id=2378
if env.Bit('target_arm'):
  settings['allow_double'] = 0

# BUG: http://code.google.com/p/nativeclient/issues/detail?id=3143
if env.Bit('bitcode') and env.Bit('target_arm'):
  settings['allow_struct'] = 0

# Environments for building module sources
envlist = []

is_broken = False

if env.Bit('bitcode'):
  # For PNaCl, we do a mixed test.
  # Create environments for pnacl-clang, pnacl-gcc, and nacl-gcc.
  # For each environment, we compile a test module straight to native code.
  pnacl_env = base_env.Clone()
  pnacl_env.PNaClForceNative()

  if env.Bit('target_arm'):
    # For ARM, PNaCl only uses the standard ABI if given special flags.
    pnacl_env.Append(CCFLAGS=[
        '--pnacl-frontend-triple=armv7a-unknown-nacl-gnueabi',
        '-mfloat-abi=hard',
        ])

  envlist.append(pnacl_env)

  native_env = base_env.PNaClGetNNaClEnv()
  envlist.append(native_env)

  # TODO(mcgrathr): Remove after fix for:
  # https://code.google.com/p/nativeclient/issues/detail?id=3143
  is_broken = env.Bit('target_arm')

  link_env = pnacl_env
else:
  # For NNaCl toolchain, just test self-consistency
  link_env = base_env
  envlist.append(base_env)

# Add custom CFLAGS
# This must be done here, since PNaClGetNNaClEnv and
# PNaClChangeFrontend wipe CFLAGS.
for e in envlist:
  e.Append(CFLAGS = extra_cflags)

# Create two modules for each environment,
# so that we test toolchain self-interaction.
envlist = envlist + envlist

num_modules = len(envlist)
settings['num_modules'] = num_modules
module_filenames = [ 'module%d.c' % i for i in xrange(num_modules) ]

# Generate the module source files (module0.c, module1.c, ...)
settings_args = ['--%s=%s' % (k,str(v)) for k,v in settings.iteritems()]
base_env['GENERATOR_SETTINGS'] = ' '.join(settings_args)


if not env.Bit('built_elsewhere'):
  # on the QEMU bot, generate the golden file and c files
  nodes = base_env.Command(
      ['callingconv.golden'] + module_filenames,
      base_env.File('generate.py'),
      Action('${PYTHON} ${SOURCE} ${GENERATOR_SETTINGS} -- ${TARGETS}'))
else:
  # on the hardware bot, do not regenerate the files
  nodes = []
  nodes.append(base_env.File('callingconv.golden'))
  nodes.extend([base_env.File(module_filenames[i]) for i in xrange(num_modules)])

# Create the module objects
modules = []
for i in xrange(num_modules):
  obj = envlist[i].ComponentObject(nodes[i+1])
  envlist[i].Depends(obj, callingconv_h)
  modules.append(obj)

# Compile callingconv.c
callingconv = link_env.ComponentObject('callingconv.c')
link_env.Depends(callingconv, callingconv_h)


prog = link_env.ComponentProgram('callingconv',
                                 [callingconv] + modules,
                                 EXTRA_LIBS=['${NONIRT_LIBS}'])

node = link_env.CommandSelLdrTestNacl(
         'callingconv.out',
         prog,
         stdout_golden=nodes[0])

env.AddNodeToTestSuite(node, ['medium_tests', 'nonpexe_tests'],
                       'run_callingconv_test',
                       is_broken=is_broken)
