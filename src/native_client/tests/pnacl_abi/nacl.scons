# -*- python2 -*-
# Copyright 2010 The Native Client Authors.  All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

Import('env')

# Divide ABI check.
div_nexe = env.ComponentProgram('divide_by_zero',
                                'divide_by_zero.c',
                                EXTRA_LIBS=['${NONIRT_LIBS}'])

# On ARM we insert a trap instruction, whereas x86 faults in hardware.
if env.Bit('target_arm'):
  div_expected_exit_status = 'untrusted_sigill'
else:
  div_expected_exit_status = 'untrusted_sigfpe'
div_node = env.CommandSelLdrTestNacl('divide_by_zero.out',
                                     div_nexe,
                                     exit_status=div_expected_exit_status)

env.AddNodeToTestSuite(div_node,
                       ['pnacl_abi_tests', 'small_tests'],
                       'run_divide_by_zero_test',
                       # The bot lucid_64-newlib-dbg-asan demonstrates a
                       # bug wherein ASan's teardown code causes a crash of
                       # its own when exiting after the caught crash.
                       is_broken=env.Bit('asan'))

# These tests only make sense for the PNaCl toolchain
if not env.Bit('bitcode'):
  Return()

# we do not have llvm's ${DISASS} when we run on ARM boxes
if env.Bit('target_arm'):
  Return()

# Comparisons with golden bitcode files are bound to fail with optimizations.
# This hack makes sure they're always compiled at "default" level.
optflags = ['-O0','-O1','-O2','-O3']
env.FilterOut(CCFLAGS=optflags,
              LINKFLAGS=optflags,
              CXXFLAGS=optflags)

TESTS = ['small_structs_by_value.c',
         'data_type.c',
         'vaarg.c',
         ]

# TODO(jvoung): add a proper bug
# Enable when Clang's bitcode output is correct and stable
Return()

for src in TESTS:
   name = src.split('.')[0]
   node = env.ComponentObject(name + '.o', src)
   stdout_golden = env.File('%s.%s.stdout' % (name, frontend))
   test = env.CommandTest(name + '.out',
                          ['${DISASS}', '-o', '-', node],
                          stdout_golden=stdout_golden,
                          filter_regex='"; ModuleID = "',
                          filter_inverse='true',
                          )
   env.AddNodeToTestSuite(test,
                          ['pnacl_abi_tests', 'small_tests'],
                          'run_' + name + '_test')
