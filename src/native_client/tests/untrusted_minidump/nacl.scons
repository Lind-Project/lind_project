# -*- python2 -*-
# Copyright (c) 2013 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# Preserve debugging info (which is not ABI-stable under PNaCl).
if not env.AllowNonStableBitcode():
  Return()

if env.Bit('bitcode'):
  # With the PNaCl toolchain, special flags are required to get a build ID.
  env.Append(LINKFLAGS=['--pnacl-allow-nexe-build-id'])
  if env.Bit('pnacl_generate_pexe'):
    env.Append(TRANSLATEFLAGS=['--build-id'])
  else:
    env.Append(LINKFLAGS=['--pnacl-allow-native', '-Wn,--build-id'])

nexe = env.ComponentProgram('minidump_test', 'minidump_test.c',
                            EXTRA_LIBS=['minidump_generator'])

# Note that this doesn't check the crash dump that is produced yet.
# TODO(mseaborn): Test that Breakpad can extract a stack backtrace.
output_dump_file = env.File('minidump.dmp')
node = env.CommandSelLdrTestNacl(
    'minidump_test.out', nexe, [output_dump_file.abspath],
    declares_exit_status=True,
    sel_ldr_flags=['-e', # Enable exception handling for catching crash
                   '-a', # Enable file access for writing minidump file
                   ])
env.AddNodeToTestSuite(node,
                       ['small_tests', 'exception_tests', 'nonpexe_tests'],
                       'run_minidump_test',
                       # Nexe build IDs are not available under the
                       # sandboxed PNaCl translator.
                       is_broken=env.Bit('use_sandboxed_translator'))
