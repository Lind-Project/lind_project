# -*- python2 -*-
# Copyright (c) 2013 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

# Only for newlib for now, since the subprogram's library dependencies
# and ld.so-as-main would complicate the reverse channel emulation
# quite a bit.  Once we have a better handle on how to merge manifests
# and we need to test dynamic loading by the subprocess, we can
# revisit this.
if env.Bit('nacl_glibc'):
  Return()

env.ComponentLibrary('process_lib',
                     [ 'process_lib.cc', ])

init_nexe = env.ComponentProgram('init',
                                 'init.cc',
                                 EXTRA_LIBS=['process_lib',
                                             'srpc',
                                             'platform',
                                             'imc',
                                             'imc_syscalls',
                                             '${PTHREAD_LIBS}',
                                             '${NONIRT_LIBS}'])

subprogram_nexe = env.ComponentProgram('subprogram',
                                       'subprogram.c',
                                       EXTRA_LIBS=['${NONIRT_LIBS}',
                                                   'srpc',
                                                   'platform',
                                                   'imc',
                                                   'imc_syscalls',
                                                   '${PTHREAD_LIBS}',
                                                   '${NONIRT_LIBS}'])

subprogram_nexe = env.GetTranslatedNexe(subprogram_nexe)

node = env.SelUniversalTest('subprocess_test.out', init_nexe,
                            sel_universal_flags=[
                              '--uses_reverse_service',
                              '--var', 'subprogram', subprogram_nexe],
                            stdin=env.File('subprocess_test.stdin'),
                            filter_regex='"Hello world"',
                            stdout_golden=env.File('subprocess_test.stdout'))

env.AddNodeToTestSuite(node,
                       ['small_tests'],
                       'run_subprocess_test')
