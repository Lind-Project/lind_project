
	[[ "$#" -gt 2 ]] && return 1
	## duplicate arg or set both to zero
	[[ "$#" -eq 1 ]] && set -- "$1" "$1"
	[[ "$#" -eq 0 ]] && set -- 0 0
	local -A op
	op[NOT]='!$1, ~$1 :: !$2, ~$2'
	op[AND]='$1 & $2'
	op[OR]='$1 | $2'
	op[XOR]='$1 ^ $2'
	op[NAND]='~($1 & $2)'
	op[NOR]='~($1 | $2)'
	op[XNOR]='~($1 ^ $2)'
	echo
	## calculate operations and normalize with !!
	for i in "${(k)op[@]}"; do
		## handle the special NOT case
		if [[ "$i" == NOT ]]; then
			printf '%s\n' "${(e)op[$i]}"
			printf '%s' "$i $(( [#2] $1 )), COMPLEMENT $(( [#2] $2 )) = "
			printf '%s, %s\n' "$(( [#2] !$1 ))" "$(( [#2] ~$1 ))"
			printf '%s' "$i $(( [#2] $1 )), COMPLEMENT $(( [#2]$2 )) = "
			printf '%s, %s\n\n' "$(( [#2] !$2 ))" "$(( [#2] ~$2 ))"
		else
			printf '%s\n%s' "${(e)op[$i]}" "$(( [#2] $1 )) $i $(( [#2]$2 )) = "
			printf '%s (normalized: %s)\n\n' "$(( [#2] ${(e)op[$i]} ))" "$(( [#2] !! ${(e)op[$i]} ))"
		fi
	done

