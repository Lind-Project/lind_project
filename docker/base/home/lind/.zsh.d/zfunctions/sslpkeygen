
	echo -n '[input directory to store certificates:] ' ; read keydir
			#([~.]|${HOME})/*[^/]+ ) echo 'using '"${keydir}"'/private.'  | sed -r 's@\/\/+@\/@g' ;;
			#([~.]|${HOME}|[^/)* ) echo 'using '"${keydir}"'/private.' | sed -r 's@\/\/+@\/@g' ;;
			#[^/]* ) echo 'using "'"${keydir}"'/private".' ;;
			#"" ) echo 'nothing entered. Using '"${keydir:-$PWD/private}"'.' ;;
			#* ) echo 'please run "pushd '"${keydir}"'" first.'  ;;
	case "${keydir}" in
			"/"* ) printf '%s\n' 'please run '"'pushd ${keydir}'"' first.'  ;;
			""|[\~\.]|${HOME}* ) echo 'using "'${keydir:-"$PWD"}'/private".' | sed -r 's@\/\/+@\/@g' ;;
	esac
	[[ ${keydir} =~ ^[^\/].*  ]] || \
			{ echo 'please run "pushd '"${keydir}"'" first.'; echo "$keydir"; return 1; }
	echo 'using "'"${keydir}"'/private".'
	pushd ${keydir}
	[[ -d private ]] || mkdir -m0700 private
	touch private/key.pem
	chmod 0600 private/key.pem
	sslvar='
				List of Available SSL Options:
			[1] - 	Self-signed root certificate
				$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out req.pem
			[2] -  Create a private key and then generate a certificate request from it
				$ openssl genrsa -out private/key.pem 2048
				$ openssl req -new -key key.pem -out req.pem
				$ openssl req -newkey rsa:2048 -keyout key.pem -out req.pem
				$ openssl req -new -sha256 -key private/key.pem -out req.csr
				$ openssl req -key private/key.pem -x509 -new -days 3650 -out cacert.pem
			[3] - 	Remove password / encryption
				$ openssl req -new -key server.key -out server.csr
				cp server.key server.key.org
				$ openssl rsa -in server.key.org -out server.key
				$ openssl genpkey -aes-256-cbc -algorithm RSA \
					-out private/key.pem -pkeyopt rsa_keygen_bits:4096
			[5] -  Examine and verify certificate request:
				$ openssl req -in req.pem -text -verify -noout
				$ openssl x509 -req -days 365 -in req.csr -signkey server.key -out server.crt
				[6] -  Convert from PEM to DER for browsers
					$ openssl x509 -in ca.pem -outform DER -out ca.der
			[7] - 	Generate an RSA private key using default parameters:
				$ openssl genpkey -algorithm RSA -out key.pem
				Encrypt output private key using 128 bit AES and the passphrase "hello":
				$ openssl genpkey -algorithm RSA -out key.pem -aes-128-cbc -pass pass:hello
				Generate a 2048 bit RSA key using 3 as the public exponent:
				$ openssl genpkey -algorithm RSA -out key.pem -pkeyopt rsa_keygen_bits:2048 \
					-pkeyopt rsa_keygen_pubexp:3
			[8] - 	 Generate 1024 bit DH parameters:
				$ openssl genpkey -genparam -algorithm DH -out dhp.pem \
					-pkeyopt dh_paramgen_prime_len:1024
				Output RFC5114 2048 bit DH parameters with 224 bit subgroup:
				$ openssl genpkey -genparam -algorithm DH -out dhp.pem -pkeyopt dh_rfc5114:2
				Generate DH key from parameters:
				$ openssl genpkey -paramfile dhp.pem -out dhkey.pe
			[9] - 	 Generate EC parameters:
				$ openssl genpkey -genparam -algorithm EC -out ecp.pem \
						-pkeyopt ec_paramgen_curve:secp384r1 \
					-pkeyopt ec_param_enc:named_curve
				Generate EC key from parameters:
				$ openssl genpkey -paramfile ecp.pem -out eckey.pem
				Generate EC key directly:
				$ openssl ecparam -name secp256k1 -genkey -noout -out secp256k1-key.pem'"\n"
			#tee /dev/tty "${sslvar}"
			echo "${sslvar}"
			echo -n '[enter option #:(1-9)] ' ; read choice
	case "${choice}" in
			1) echo 1 ;;
			2) echo 2 ;;
			3) echo 3 ;;
			4) echo 4 ;;
			5) echo 5 ;;
			6) echo 6 ;;
			7) echo 7 ;;
			8) echo 8 ;;
			9) echo 9 ;;
			"") echo 'no option number entered.' ;;
		*) echo 'Option "'${choice}'" not found.'  ;;
	esac
	ls -l "${keydir}"
	popd
