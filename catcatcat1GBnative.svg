<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>pipe_write (1 samples, 0.22%)</title><rect x="149.6" y="245" width="2.5" height="15.0" fill="rgb(221,75,2)" rx="2" ry="2" />
<text  x="152.57" y="255.5" ></text>
</g>
<g >
<title>page_counter_uncharge (2 samples, 0.43%)</title><rect x="106.4" y="101" width="5.1" height="15.0" fill="rgb(225,156,33)" rx="2" ry="2" />
<text  x="109.43" y="111.5" ></text>
</g>
<g >
<title>__GI__dl_mcount_wrapper_check (1 samples, 0.22%)</title><rect x="1149.4" y="357" width="2.5" height="15.0" fill="rgb(242,57,12)" rx="2" ry="2" />
<text  x="1152.40" y="367.5" ></text>
</g>
<g >
<title>__mbsinit (1 samples, 0.22%)</title><rect x="1144.3" y="341" width="2.6" height="15.0" fill="rgb(253,190,12)" rx="2" ry="2" />
<text  x="1147.32" y="351.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (3 samples, 0.65%)</title><rect x="1060.6" y="181" width="7.6" height="15.0" fill="rgb(233,61,45)" rx="2" ry="2" />
<text  x="1063.58" y="191.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.22%)</title><rect x="327.2" y="245" width="2.5" height="15.0" fill="rgb(254,228,40)" rx="2" ry="2" />
<text  x="330.20" y="255.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (6 samples, 1.29%)</title><rect x="32.8" y="149" width="15.3" height="15.0" fill="rgb(218,26,7)" rx="2" ry="2" />
<text  x="35.84" y="159.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (1 samples, 0.22%)</title><rect x="60.8" y="197" width="2.5" height="15.0" fill="rgb(239,205,30)" rx="2" ry="2" />
<text  x="63.75" y="207.5" ></text>
</g>
<g >
<title>__gconv_transform_utf8_internal (1 samples, 0.22%)</title><rect x="1187.5" y="357" width="2.5" height="15.0" fill="rgb(213,54,27)" rx="2" ry="2" />
<text  x="1190.46" y="367.5" ></text>
</g>
<g >
<title>uncharge_batch (2 samples, 0.43%)</title><rect x="1055.5" y="133" width="5.1" height="15.0" fill="rgb(239,202,12)" rx="2" ry="2" />
<text  x="1058.51" y="143.5" ></text>
</g>
<g >
<title>sys_read (36 samples, 7.74%)</title><rect x="58.2" y="261" width="91.4" height="15.0" fill="rgb(230,183,26)" rx="2" ry="2" />
<text  x="61.22" y="271.5" >sys_read</text>
</g>
<g >
<title>do_syscall_64 (10 samples, 2.15%)</title><rect x="1045.4" y="293" width="25.3" height="15.0" fill="rgb(252,41,15)" rx="2" ry="2" />
<text  x="1048.35" y="303.5" >d..</text>
</g>
<g >
<title>wc (276 samples, 59.35%)</title><rect x="489.6" y="389" width="700.4" height="15.0" fill="rgb(221,67,30)" rx="2" ry="2" />
<text  x="492.61" y="399.5" >wc</text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.22%)</title><rect x="484.5" y="229" width="2.6" height="15.0" fill="rgb(220,77,31)" rx="2" ry="2" />
<text  x="487.54" y="239.5" ></text>
</g>
<g >
<title>pipe_wait (1 samples, 0.22%)</title><rect x="147.0" y="181" width="2.6" height="15.0" fill="rgb(216,191,53)" rx="2" ry="2" />
<text  x="150.03" y="191.5" ></text>
</g>
<g >
<title>__wake_up_common (2 samples, 0.43%)</title><rect x="1047.9" y="165" width="5.1" height="15.0" fill="rgb(249,13,15)" rx="2" ry="2" />
<text  x="1050.89" y="175.5" ></text>
</g>
<g >
<title>copy_page_from_iter (7 samples, 1.51%)</title><rect x="30.3" y="165" width="17.8" height="15.0" fill="rgb(251,160,18)" rx="2" ry="2" />
<text  x="33.30" y="175.5" ></text>
</g>
<g >
<title>pipe_read (9 samples, 1.94%)</title><rect x="1045.4" y="213" width="22.8" height="15.0" fill="rgb(229,152,38)" rx="2" ry="2" />
<text  x="1048.35" y="223.5" >p..</text>
</g>
<g >
<title>__page_cache_release (6 samples, 1.29%)</title><rect x="96.3" y="149" width="15.2" height="15.0" fill="rgb(210,106,9)" rx="2" ry="2" />
<text  x="99.28" y="159.5" ></text>
</g>
<g >
<title>memcg_kmem_charge_memcg (3 samples, 0.65%)</title><rect x="22.7" y="117" width="7.6" height="15.0" fill="rgb(207,168,23)" rx="2" ry="2" />
<text  x="25.69" y="127.5" ></text>
</g>
<g >
<title>vfs_write (19 samples, 4.09%)</title><rect x="10.0" y="229" width="48.2" height="15.0" fill="rgb(234,208,8)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >vfs_..</text>
</g>
<g >
<title>perf_evsel__run_ioctl (64 samples, 13.76%)</title><rect x="152.1" y="357" width="162.4" height="15.0" fill="rgb(232,223,0)" rx="2" ry="2" />
<text  x="155.11" y="367.5" >perf_evsel__run_ioctl</text>
</g>
<g >
<title>perf_evsel__enable_cpu (64 samples, 13.76%)</title><rect x="152.1" y="373" width="162.4" height="15.0" fill="rgb(206,154,24)" rx="2" ry="2" />
<text  x="155.11" y="383.5" >perf_evsel__enable_cpu</text>
</g>
<g >
<title>[unknown] (273 samples, 58.71%)</title><rect x="497.2" y="373" width="692.8" height="15.0" fill="rgb(252,217,24)" rx="2" ry="2" />
<text  x="500.23" y="383.5" >[unknown]</text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (64 samples, 13.76%)</title><rect x="152.1" y="69" width="162.4" height="15.0" fill="rgb(206,65,24)" rx="2" ry="2" />
<text  x="155.11" y="79.5" >__intel_pmu_enable_a..</text>
</g>
<g >
<title>__switch_to_asm (1 samples, 0.22%)</title><rect x="322.1" y="373" width="2.6" height="15.0" fill="rgb(235,47,33)" rx="2" ry="2" />
<text  x="325.13" y="383.5" ></text>
</g>
<g >
<title>find_next_bit (1 samples, 0.22%)</title><rect x="476.9" y="245" width="2.6" height="15.0" fill="rgb(238,29,14)" rx="2" ry="2" />
<text  x="479.92" y="255.5" ></text>
</g>
<g >
<title>__page_cache_release (2 samples, 0.43%)</title><rect x="1055.5" y="165" width="5.1" height="15.0" fill="rgb(239,87,38)" rx="2" ry="2" />
<text  x="1058.51" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (19 samples, 4.09%)</title><rect x="10.0" y="261" width="48.2" height="15.0" fill="rgb(214,78,17)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >do_s..</text>
</g>
<g >
<title>free_unref_page_prepare.part.65 (1 samples, 0.22%)</title><rect x="114.0" y="133" width="2.6" height="15.0" fill="rgb(214,46,26)" rx="2" ry="2" />
<text  x="117.04" y="143.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.22%)</title><rect x="324.7" y="373" width="2.5" height="15.0" fill="rgb(214,63,31)" rx="2" ry="2" />
<text  x="327.67" y="383.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.22%)</title><rect x="149.6" y="357" width="2.5" height="15.0" fill="rgb(244,3,10)" rx="2" ry="2" />
<text  x="152.57" y="367.5" ></text>
</g>
<g >
<title>__vfs_read (9 samples, 1.94%)</title><rect x="1045.4" y="245" width="22.8" height="15.0" fill="rgb(235,102,48)" rx="2" ry="2" />
<text  x="1048.35" y="255.5" >_..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.22%)</title><rect x="1146.9" y="325" width="2.5" height="15.0" fill="rgb(223,98,38)" rx="2" ry="2" />
<text  x="1149.86" y="335.5" ></text>
</g>
<g >
<title>__GI_mbrtowc (18 samples, 3.87%)</title><rect x="1070.7" y="325" width="45.7" height="15.0" fill="rgb(254,52,39)" rx="2" ry="2" />
<text  x="1073.73" y="335.5" >__GI..</text>
</g>
<g >
<title>sys_write (1 samples, 0.22%)</title><rect x="149.6" y="309" width="2.5" height="15.0" fill="rgb(225,18,27)" rx="2" ry="2" />
<text  x="152.57" y="319.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.22%)</title><rect x="324.7" y="357" width="2.5" height="15.0" fill="rgb(211,192,19)" rx="2" ry="2" />
<text  x="327.67" y="367.5" ></text>
</g>
<g >
<title>cpu_startup_entry (63 samples, 13.55%)</title><rect x="327.2" y="341" width="159.9" height="15.0" fill="rgb(233,69,30)" rx="2" ry="2" />
<text  x="330.20" y="351.5" >cpu_startup_entry</text>
</g>
<g >
<title>do_syscall_64 (64 samples, 13.76%)</title><rect x="152.1" y="309" width="162.4" height="15.0" fill="rgb(225,117,29)" rx="2" ry="2" />
<text  x="155.11" y="319.5" >do_syscall_64</text>
</g>
<g >
<title>radix_tree_lookup_slot (1 samples, 0.22%)</title><rect x="88.7" y="133" width="2.5" height="15.0" fill="rgb(217,43,15)" rx="2" ry="2" />
<text  x="91.67" y="143.5" ></text>
</g>
<g >
<title>__GI___read (10 samples, 2.15%)</title><rect x="1045.4" y="325" width="25.3" height="15.0" fill="rgb(249,134,43)" rx="2" ry="2" />
<text  x="1048.35" y="335.5" >_..</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (8 samples, 1.72%)</title><rect x="65.8" y="149" width="20.3" height="15.0" fill="rgb(224,181,21)" rx="2" ry="2" />
<text  x="68.83" y="159.5" ></text>
</g>
<g >
<title>[cat] (55 samples, 11.83%)</title><rect x="10.0" y="325" width="139.6" height="15.0" fill="rgb(221,152,49)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >[cat]</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.22%)</title><rect x="91.2" y="165" width="2.5" height="15.0" fill="rgb(235,226,23)" rx="2" ry="2" />
<text  x="94.20" y="175.5" ></text>
</g>
<g >
<title>pipe_wait (4 samples, 0.86%)</title><rect x="48.1" y="165" width="10.1" height="15.0" fill="rgb(249,223,5)" rx="2" ry="2" />
<text  x="51.06" y="175.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (1 samples, 0.22%)</title><rect x="487.1" y="341" width="2.5" height="15.0" fill="rgb(246,139,39)" rx="2" ry="2" />
<text  x="490.08" y="351.5" ></text>
</g>
<g >
<title>__put_page (8 samples, 1.72%)</title><rect x="96.3" y="165" width="20.3" height="15.0" fill="rgb(214,139,46)" rx="2" ry="2" />
<text  x="99.28" y="175.5" ></text>
</g>
<g >
<title>mutex_unlock (1 samples, 0.22%)</title><rect x="149.6" y="229" width="2.5" height="15.0" fill="rgb(238,202,17)" rx="2" ry="2" />
<text  x="152.57" y="239.5" ></text>
</g>
<g >
<title>__next_zones_zonelist (2 samples, 0.43%)</title><rect x="15.1" y="133" width="5.1" height="15.0" fill="rgb(227,20,15)" rx="2" ry="2" />
<text  x="18.08" y="143.5" ></text>
</g>
<g >
<title>switch_mm_irqs_off (2 samples, 0.43%)</title><rect x="471.8" y="277" width="5.1" height="15.0" fill="rgb(238,213,29)" rx="2" ry="2" />
<text  x="474.85" y="287.5" ></text>
</g>
<g >
<title>uncharge_batch (4 samples, 0.86%)</title><rect x="101.4" y="117" width="10.1" height="15.0" fill="rgb(254,165,25)" rx="2" ry="2" />
<text  x="104.35" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.22%)</title><rect x="149.6" y="325" width="2.5" height="15.0" fill="rgb(211,198,40)" rx="2" ry="2" />
<text  x="152.57" y="335.5" ></text>
</g>
<g >
<title>rest_init (1 samples, 0.22%)</title><rect x="487.1" y="309" width="2.5" height="15.0" fill="rgb(234,109,6)" rx="2" ry="2" />
<text  x="490.08" y="319.5" ></text>
</g>
<g >
<title>__sched_text_start (1 samples, 0.22%)</title><rect x="324.7" y="309" width="2.5" height="15.0" fill="rgb(248,111,54)" rx="2" ry="2" />
<text  x="327.67" y="319.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.22%)</title><rect x="327.2" y="197" width="2.5" height="15.0" fill="rgb(222,61,8)" rx="2" ry="2" />
<text  x="330.20" y="207.5" ></text>
</g>
<g >
<title>deactivate_task (1 samples, 0.22%)</title><rect x="147.0" y="133" width="2.6" height="15.0" fill="rgb(238,36,42)" rx="2" ry="2" />
<text  x="150.03" y="143.5" ></text>
</g>
<g >
<title>native_write_msr (48 samples, 10.32%)</title><rect x="172.4" y="53" width="121.8" height="15.0" fill="rgb(239,213,17)" rx="2" ry="2" />
<text  x="175.41" y="63.5" >native_write_msr</text>
</g>
<g >
<title>do_syscall_64 (36 samples, 7.74%)</title><rect x="58.2" y="277" width="91.4" height="15.0" fill="rgb(223,178,33)" rx="2" ry="2" />
<text  x="61.22" y="287.5" >do_syscall..</text>
</g>
<g >
<title>__vfs_write (1 samples, 0.22%)</title><rect x="149.6" y="277" width="2.5" height="15.0" fill="rgb(228,52,48)" rx="2" ry="2" />
<text  x="152.57" y="287.5" ></text>
</g>
<g >
<title>deactivate_task (2 samples, 0.43%)</title><rect x="53.1" y="117" width="5.1" height="15.0" fill="rgb(226,73,18)" rx="2" ry="2" />
<text  x="56.14" y="127.5" ></text>
</g>
<g >
<title>__put_page (2 samples, 0.43%)</title><rect x="1055.5" y="181" width="5.1" height="15.0" fill="rgb(228,49,19)" rx="2" ry="2" />
<text  x="1058.51" y="191.5" ></text>
</g>
<g >
<title>update_curr (1 samples, 0.22%)</title><rect x="147.0" y="85" width="2.6" height="15.0" fill="rgb(210,164,23)" rx="2" ry="2" />
<text  x="150.03" y="95.5" ></text>
</g>
<g >
<title>[wc] (257 samples, 55.27%)</title><rect x="497.2" y="357" width="652.2" height="15.0" fill="rgb(251,66,18)" rx="2" ry="2" />
<text  x="500.23" y="367.5" >[wc]</text>
</g>
<g >
<title>cpuidle_enter_state (56 samples, 12.04%)</title><rect x="327.2" y="277" width="142.1" height="15.0" fill="rgb(253,5,46)" rx="2" ry="2" />
<text  x="330.20" y="287.5" >cpuidle_enter_state</text>
</g>
<g >
<title>__tick_nohz_idle_enter (4 samples, 0.86%)</title><rect x="476.9" y="293" width="10.2" height="15.0" fill="rgb(226,53,42)" rx="2" ry="2" />
<text  x="479.92" y="303.5" ></text>
</g>
<g >
<title>nmi_cpu_backtrace_handler (1 samples, 0.22%)</title><rect x="306.9" y="53" width="2.5" height="15.0" fill="rgb(235,3,23)" rx="2" ry="2" />
<text  x="309.90" y="63.5" ></text>
</g>
<g >
<title>cat (55 samples, 11.83%)</title><rect x="10.0" y="389" width="139.6" height="15.0" fill="rgb(225,122,37)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >cat</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (19 samples, 4.09%)</title><rect x="10.0" y="277" width="48.2" height="15.0" fill="rgb(232,101,43)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >entr..</text>
</g>
<g >
<title>new_sync_write (19 samples, 4.09%)</title><rect x="10.0" y="197" width="48.2" height="15.0" fill="rgb(234,14,31)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >new_..</text>
</g>
<g >
<title>copy_page_to_iter (8 samples, 1.72%)</title><rect x="65.8" y="165" width="20.3" height="15.0" fill="rgb(236,170,43)" rx="2" ry="2" />
<text  x="68.83" y="175.5" ></text>
</g>
<g >
<title>worker_thread (1 samples, 0.22%)</title><rect x="324.7" y="341" width="2.5" height="15.0" fill="rgb(222,104,41)" rx="2" ry="2" />
<text  x="327.67" y="351.5" ></text>
</g>
<g >
<title>all (465 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(250,63,49)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.22%)</title><rect x="1146.9" y="309" width="2.5" height="15.0" fill="rgb(226,84,8)" rx="2" ry="2" />
<text  x="1149.86" y="319.5" ></text>
</g>
<g >
<title>dequeue_entity (1 samples, 0.22%)</title><rect x="53.1" y="85" width="2.6" height="15.0" fill="rgb(240,90,28)" rx="2" ry="2" />
<text  x="56.14" y="95.5" ></text>
</g>
<g >
<title>pick_next_task_idle (1 samples, 0.22%)</title><rect x="324.7" y="293" width="2.5" height="15.0" fill="rgb(222,184,1)" rx="2" ry="2" />
<text  x="327.67" y="303.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge (2 samples, 0.43%)</title><rect x="1055.5" y="149" width="5.1" height="15.0" fill="rgb(254,126,0)" rx="2" ry="2" />
<text  x="1058.51" y="159.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (8 samples, 1.72%)</title><rect x="96.3" y="181" width="20.3" height="15.0" fill="rgb(222,146,13)" rx="2" ry="2" />
<text  x="99.28" y="191.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (12 samples, 2.58%)</title><rect x="116.6" y="165" width="30.4" height="15.0" fill="rgb(253,26,6)" rx="2" ry="2" />
<text  x="119.58" y="175.5" >co..</text>
</g>
<g >
<title>vfs_read (9 samples, 1.94%)</title><rect x="1045.4" y="261" width="22.8" height="15.0" fill="rgb(224,75,18)" rx="2" ry="2" />
<text  x="1048.35" y="271.5" >v..</text>
</g>
<g >
<title>_perf_event_enable (64 samples, 13.76%)</title><rect x="152.1" y="229" width="162.4" height="15.0" fill="rgb(215,72,39)" rx="2" ry="2" />
<text  x="155.11" y="239.5" >_perf_event_enable</text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.22%)</title><rect x="20.2" y="133" width="2.5" height="15.0" fill="rgb(242,32,29)" rx="2" ry="2" />
<text  x="23.15" y="143.5" ></text>
</g>
<g >
<title>perf_evlist__start_workload (1 samples, 0.22%)</title><rect x="149.6" y="373" width="2.5" height="15.0" fill="rgb(254,170,48)" rx="2" ry="2" />
<text  x="152.57" y="383.5" ></text>
</g>
<g >
<title>event_function (64 samples, 13.76%)</title><rect x="152.1" y="149" width="162.4" height="15.0" fill="rgb(239,103,42)" rx="2" ry="2" />
<text  x="155.11" y="159.5" >event_function</text>
</g>
<g >
<title>__calc_delta (1 samples, 0.22%)</title><rect x="147.0" y="69" width="2.6" height="15.0" fill="rgb(224,128,51)" rx="2" ry="2" />
<text  x="150.03" y="79.5" ></text>
</g>
<g >
<title>[cat] (19 samples, 4.09%)</title><rect x="10.0" y="309" width="48.2" height="15.0" fill="rgb(236,103,51)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >[cat]</text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.22%)</title><rect x="1146.9" y="341" width="2.5" height="15.0" fill="rgb(206,87,47)" rx="2" ry="2" />
<text  x="1149.86" y="351.5" ></text>
</g>
<g >
<title>do_idle (63 samples, 13.55%)</title><rect x="327.2" y="325" width="159.9" height="15.0" fill="rgb(209,114,4)" rx="2" ry="2" />
<text  x="330.20" y="335.5" >do_idle</text>
</g>
<g >
<title>[cat] (55 samples, 11.83%)</title><rect x="10.0" y="373" width="139.6" height="15.0" fill="rgb(251,64,47)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >[cat]</text>
</g>
<g >
<title>__alloc_pages_nodemask (6 samples, 1.29%)</title><rect x="15.1" y="149" width="15.2" height="15.0" fill="rgb(211,82,16)" rx="2" ry="2" />
<text  x="18.08" y="159.5" ></text>
</g>
<g >
<title>__remove_hrtimer (2 samples, 0.43%)</title><rect x="479.5" y="261" width="5.0" height="15.0" fill="rgb(209,107,31)" rx="2" ry="2" />
<text  x="482.46" y="271.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.22%)</title><rect x="327.2" y="181" width="2.5" height="15.0" fill="rgb(235,60,16)" rx="2" ry="2" />
<text  x="330.20" y="191.5" ></text>
</g>
<g >
<title>[wc] (28 samples, 6.02%)</title><rect x="1045.4" y="341" width="71.0" height="15.0" fill="rgb(216,39,10)" rx="2" ry="2" />
<text  x="1048.35" y="351.5" >[wc]</text>
</g>
<g >
<title>__vfs_write (19 samples, 4.09%)</title><rect x="10.0" y="213" width="48.2" height="15.0" fill="rgb(223,110,48)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >__vf..</text>
</g>
<g >
<title>sys_write (19 samples, 4.09%)</title><rect x="10.0" y="245" width="48.2" height="15.0" fill="rgb(219,182,2)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >sys_..</text>
</g>
<g >
<title>__gconv_transform_utf8_internal (10 samples, 2.15%)</title><rect x="1091.0" y="309" width="25.4" height="15.0" fill="rgb(238,176,15)" rx="2" ry="2" />
<text  x="1094.03" y="319.5" >_..</text>
</g>
<g >
<title>dequeue_entity (1 samples, 0.22%)</title><rect x="147.0" y="101" width="2.6" height="15.0" fill="rgb(247,122,0)" rx="2" ry="2" />
<text  x="150.03" y="111.5" ></text>
</g>
<g >
<title>dequeue_task_fair (2 samples, 0.43%)</title><rect x="53.1" y="101" width="5.1" height="15.0" fill="rgb(226,114,32)" rx="2" ry="2" />
<text  x="56.14" y="111.5" ></text>
</g>
<g >
<title>sched_ttwu_pending (1 samples, 0.22%)</title><rect x="469.3" y="309" width="2.5" height="15.0" fill="rgb(224,170,3)" rx="2" ry="2" />
<text  x="472.31" y="319.5" ></text>
</g>
<g >
<title>vfs_read (1 samples, 0.22%)</title><rect x="1068.2" y="277" width="2.5" height="15.0" fill="rgb(248,26,42)" rx="2" ry="2" />
<text  x="1071.19" y="287.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (1 samples, 0.22%)</title><rect x="91.2" y="181" width="2.5" height="15.0" fill="rgb(234,164,23)" rx="2" ry="2" />
<text  x="94.20" y="191.5" ></text>
</g>
<g >
<title>__radix_tree_lookup (1 samples, 0.22%)</title><rect x="88.7" y="117" width="2.5" height="15.0" fill="rgb(232,89,13)" rx="2" ry="2" />
<text  x="91.67" y="127.5" ></text>
</g>
<g >
<title>default_wake_function (2 samples, 0.43%)</title><rect x="1047.9" y="133" width="5.1" height="15.0" fill="rgb(229,82,50)" rx="2" ry="2" />
<text  x="1050.89" y="143.5" ></text>
</g>
<g >
<title>ctx_resched (64 samples, 13.76%)</title><rect x="152.1" y="117" width="162.4" height="15.0" fill="rgb(223,150,40)" rx="2" ry="2" />
<text  x="155.11" y="127.5" >ctx_resched</text>
</g>
<g >
<title>x86_pmu_enable (64 samples, 13.76%)</title><rect x="152.1" y="101" width="162.4" height="15.0" fill="rgb(243,55,37)" rx="2" ry="2" />
<text  x="155.11" y="111.5" >x86_pmu_enable</text>
</g>
<g >
<title>ext4_file_read_iter (11 samples, 2.37%)</title><rect x="63.3" y="197" width="27.9" height="15.0" fill="rgb(226,67,48)" rx="2" ry="2" />
<text  x="66.29" y="207.5" >e..</text>
</g>
<g >
<title>cpuidle_enter (1 samples, 0.22%)</title><rect x="487.1" y="245" width="2.5" height="15.0" fill="rgb(250,159,20)" rx="2" ry="2" />
<text  x="490.08" y="255.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.22%)</title><rect x="324.7" y="325" width="2.5" height="15.0" fill="rgb(206,189,7)" rx="2" ry="2" />
<text  x="327.67" y="335.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.22%)</title><rect x="479.5" y="181" width="2.5" height="15.0" fill="rgb(214,168,3)" rx="2" ry="2" />
<text  x="482.46" y="191.5" ></text>
</g>
<g >
<title>read_hpet (1 samples, 0.22%)</title><rect x="327.2" y="149" width="2.5" height="15.0" fill="rgb(216,98,41)" rx="2" ry="2" />
<text  x="330.20" y="159.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.22%)</title><rect x="93.7" y="181" width="2.6" height="15.0" fill="rgb(229,220,17)" rx="2" ry="2" />
<text  x="96.74" y="191.5" ></text>
</g>
<g >
<title>vfs_read (35 samples, 7.53%)</title><rect x="60.8" y="245" width="88.8" height="15.0" fill="rgb(239,80,16)" rx="2" ry="2" />
<text  x="63.75" y="255.5" >vfs_read</text>
</g>
<g >
<title>[[stack]] (3 samples, 0.65%)</title><rect x="489.6" y="373" width="7.6" height="15.0" fill="rgb(224,17,16)" rx="2" ry="2" />
<text  x="492.61" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_current (7 samples, 1.51%)</title><rect x="12.5" y="165" width="17.8" height="15.0" fill="rgb(246,4,24)" rx="2" ry="2" />
<text  x="15.54" y="175.5" ></text>
</g>
<g >
<title>sched_clock_idle_sleep_event (1 samples, 0.22%)</title><rect x="484.5" y="277" width="2.6" height="15.0" fill="rgb(222,143,12)" rx="2" ry="2" />
<text  x="487.54" y="287.5" ></text>
</g>
<g >
<title>dequeue_task_fair (1 samples, 0.22%)</title><rect x="147.0" y="117" width="2.6" height="15.0" fill="rgb(237,216,20)" rx="2" ry="2" />
<text  x="150.03" y="127.5" ></text>
</g>
<g >
<title>__sched_text_start (2 samples, 0.43%)</title><rect x="471.8" y="293" width="5.1" height="15.0" fill="rgb(224,180,0)" rx="2" ry="2" />
<text  x="474.85" y="303.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge (6 samples, 1.29%)</title><rect x="96.3" y="133" width="15.2" height="15.0" fill="rgb(224,171,5)" rx="2" ry="2" />
<text  x="99.28" y="143.5" ></text>
</g>
<g >
<title>generic_exec_single (64 samples, 13.76%)</title><rect x="152.1" y="181" width="162.4" height="15.0" fill="rgb(207,176,13)" rx="2" ry="2" />
<text  x="155.11" y="191.5" >generic_exec_single</text>
</g>
<g >
<title>__GI___read (36 samples, 7.74%)</title><rect x="58.2" y="309" width="91.4" height="15.0" fill="rgb(248,51,38)" rx="2" ry="2" />
<text  x="61.22" y="319.5" >__GI___read</text>
</g>
<g >
<title>update_min_vruntime (1 samples, 0.22%)</title><rect x="55.7" y="85" width="2.5" height="15.0" fill="rgb(247,130,3)" rx="2" ry="2" />
<text  x="58.68" y="95.5" ></text>
</g>
<g >
<title>__ctype_b_loc (11 samples, 2.37%)</title><rect x="1159.5" y="357" width="28.0" height="15.0" fill="rgb(213,156,40)" rx="2" ry="2" />
<text  x="1162.55" y="367.5" >_..</text>
</g>
<g >
<title>cpuidle_enter (56 samples, 12.04%)</title><rect x="327.2" y="293" width="142.1" height="15.0" fill="rgb(245,127,52)" rx="2" ry="2" />
<text  x="330.20" y="303.5" >cpuidle_enter</text>
</g>
<g >
<title>generic_file_read_iter (11 samples, 2.37%)</title><rect x="63.3" y="181" width="27.9" height="15.0" fill="rgb(213,223,45)" rx="2" ry="2" />
<text  x="66.29" y="191.5" >g..</text>
</g>
<g >
<title>remote_function (64 samples, 13.76%)</title><rect x="152.1" y="165" width="162.4" height="15.0" fill="rgb(234,202,36)" rx="2" ry="2" />
<text  x="155.11" y="175.5" >remote_function</text>
</g>
<g >
<title>lapic_next_deadline (1 samples, 0.22%)</title><rect x="482.0" y="213" width="2.5" height="15.0" fill="rgb(235,2,24)" rx="2" ry="2" />
<text  x="485.00" y="223.5" ></text>
</g>
<g >
<title>intel_idle (1 samples, 0.22%)</title><rect x="487.1" y="213" width="2.5" height="15.0" fill="rgb(233,103,51)" rx="2" ry="2" />
<text  x="490.08" y="223.5" ></text>
</g>
<g >
<title>page_counter_cancel (2 samples, 0.43%)</title><rect x="106.4" y="85" width="5.1" height="15.0" fill="rgb(248,118,50)" rx="2" ry="2" />
<text  x="109.43" y="95.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1 samples, 0.22%)</title><rect x="487.1" y="293" width="2.5" height="15.0" fill="rgb(243,104,37)" rx="2" ry="2" />
<text  x="490.08" y="303.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.22%)</title><rect x="479.5" y="197" width="2.5" height="15.0" fill="rgb(252,191,52)" rx="2" ry="2" />
<text  x="482.46" y="207.5" ></text>
</g>
<g >
<title>free_unref_page (2 samples, 0.43%)</title><rect x="111.5" y="149" width="5.1" height="15.0" fill="rgb(225,41,54)" rx="2" ry="2" />
<text  x="114.51" y="159.5" ></text>
</g>
<g >
<title>autoremove_wake_function (2 samples, 0.43%)</title><rect x="1047.9" y="149" width="5.1" height="15.0" fill="rgb(206,130,5)" rx="2" ry="2" />
<text  x="1050.89" y="159.5" ></text>
</g>
<g >
<title>clocksource_watchdog (1 samples, 0.22%)</title><rect x="327.2" y="165" width="2.5" height="15.0" fill="rgb(239,3,6)" rx="2" ry="2" />
<text  x="330.20" y="175.5" ></text>
</g>
<g >
<title>__GI_mbrtowc (3 samples, 0.65%)</title><rect x="1151.9" y="357" width="7.6" height="15.0" fill="rgb(224,104,14)" rx="2" ry="2" />
<text  x="1154.94" y="367.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.22%)</title><rect x="58.2" y="229" width="2.6" height="15.0" fill="rgb(219,71,8)" rx="2" ry="2" />
<text  x="61.22" y="239.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (64 samples, 13.76%)</title><rect x="152.1" y="85" width="162.4" height="15.0" fill="rgb(212,212,21)" rx="2" ry="2" />
<text  x="155.11" y="95.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>schedule (1 samples, 0.22%)</title><rect x="147.0" y="165" width="2.6" height="15.0" fill="rgb(219,164,53)" rx="2" ry="2" />
<text  x="150.03" y="175.5" ></text>
</g>
<g >
<title>tick_nohz_idle_enter (4 samples, 0.86%)</title><rect x="476.9" y="309" width="10.2" height="15.0" fill="rgb(241,119,16)" rx="2" ry="2" />
<text  x="479.92" y="319.5" ></text>
</g>
<g >
<title>try_charge (3 samples, 0.65%)</title><rect x="22.7" y="101" width="7.6" height="15.0" fill="rgb(241,214,46)" rx="2" ry="2" />
<text  x="25.69" y="111.5" ></text>
</g>
<g >
<title>memcg_kmem_charge (3 samples, 0.65%)</title><rect x="22.7" y="133" width="7.6" height="15.0" fill="rgb(226,216,36)" rx="2" ry="2" />
<text  x="25.69" y="143.5" ></text>
</g>
<g >
<title>__update_idle_core (1 samples, 0.22%)</title><rect x="50.6" y="117" width="2.5" height="15.0" fill="rgb(221,207,31)" rx="2" ry="2" />
<text  x="53.60" y="127.5" ></text>
</g>
<g >
<title>call_cpuidle (1 samples, 0.22%)</title><rect x="487.1" y="261" width="2.5" height="15.0" fill="rgb(217,16,5)" rx="2" ry="2" />
<text  x="490.08" y="271.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.22%)</title><rect x="327.2" y="261" width="2.5" height="15.0" fill="rgb(236,24,9)" rx="2" ry="2" />
<text  x="330.20" y="271.5" ></text>
</g>
<g >
<title>[cat] (55 samples, 11.83%)</title><rect x="10.0" y="341" width="139.6" height="15.0" fill="rgb(241,32,8)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >[cat]</text>
</g>
<g >
<title>pipe_write (19 samples, 4.09%)</title><rect x="10.0" y="181" width="48.2" height="15.0" fill="rgb(248,97,7)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >pipe..</text>
</g>
<g >
<title>tick_program_event (2 samples, 0.43%)</title><rect x="479.5" y="229" width="5.0" height="15.0" fill="rgb(217,192,27)" rx="2" ry="2" />
<text  x="482.46" y="239.5" ></text>
</g>
<g >
<title>pipe_read (23 samples, 4.95%)</title><rect x="91.2" y="197" width="58.4" height="15.0" fill="rgb(211,171,31)" rx="2" ry="2" />
<text  x="94.20" y="207.5" >pipe_r..</text>
</g>
<g >
<title>__GI___libc_write (19 samples, 4.09%)</title><rect x="10.0" y="293" width="48.2" height="15.0" fill="rgb(222,166,31)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >__GI..</text>
</g>
<g >
<title>copy_page_to_iter (3 samples, 0.65%)</title><rect x="1060.6" y="197" width="7.6" height="15.0" fill="rgb(238,175,18)" rx="2" ry="2" />
<text  x="1063.58" y="207.5" ></text>
</g>
<g >
<title>start_kernel (1 samples, 0.22%)</title><rect x="487.1" y="325" width="2.5" height="15.0" fill="rgb(227,43,1)" rx="2" ry="2" />
<text  x="490.08" y="335.5" ></text>
</g>
<g >
<title>do_idle (1 samples, 0.22%)</title><rect x="487.1" y="277" width="2.5" height="15.0" fill="rgb(226,14,28)" rx="2" ry="2" />
<text  x="490.08" y="287.5" ></text>
</g>
<g >
<title>nmi_cpu_backtrace (5 samples, 1.08%)</title><rect x="294.2" y="53" width="12.7" height="15.0" fill="rgb(254,96,18)" rx="2" ry="2" />
<text  x="297.22" y="63.5" ></text>
</g>
<g >
<title>perf_ioctl (64 samples, 13.76%)</title><rect x="152.1" y="261" width="162.4" height="15.0" fill="rgb(231,122,12)" rx="2" ry="2" />
<text  x="155.11" y="271.5" >perf_ioctl</text>
</g>
<g >
<title>update_load_avg (1 samples, 0.22%)</title><rect x="1050.4" y="37" width="2.6" height="15.0" fill="rgb(252,175,47)" rx="2" ry="2" />
<text  x="1053.43" y="47.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (2 samples, 0.43%)</title><rect x="1047.9" y="197" width="5.1" height="15.0" fill="rgb(245,194,37)" rx="2" ry="2" />
<text  x="1050.89" y="207.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1 samples, 0.22%)</title><rect x="487.1" y="229" width="2.5" height="15.0" fill="rgb(251,36,9)" rx="2" ry="2" />
<text  x="490.08" y="239.5" ></text>
</g>
<g >
<title>pagecache_get_page (2 samples, 0.43%)</title><rect x="86.1" y="165" width="5.1" height="15.0" fill="rgb(241,77,14)" rx="2" ry="2" />
<text  x="89.13" y="175.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (3 samples, 0.65%)</title><rect x="1053.0" y="197" width="7.6" height="15.0" fill="rgb(212,217,20)" rx="2" ry="2" />
<text  x="1055.97" y="207.5" ></text>
</g>
<g >
<title>new_sync_read (9 samples, 1.94%)</title><rect x="1045.4" y="229" width="22.8" height="15.0" fill="rgb(246,74,36)" rx="2" ry="2" />
<text  x="1048.35" y="239.5" >n..</text>
</g>
<g >
<title>secondary_startup_64 (64 samples, 13.76%)</title><rect x="327.2" y="373" width="162.4" height="15.0" fill="rgb(221,151,54)" rx="2" ry="2" />
<text  x="330.20" y="383.5" >secondary_startup_64</text>
</g>
<g >
<title>do_vfs_ioctl (64 samples, 13.76%)</title><rect x="152.1" y="277" width="162.4" height="15.0" fill="rgb(231,204,34)" rx="2" ry="2" />
<text  x="155.11" y="287.5" >do_vfs_ioctl</text>
</g>
<g >
<title>sched_clock (1 samples, 0.22%)</title><rect x="484.5" y="245" width="2.6" height="15.0" fill="rgb(250,107,34)" rx="2" ry="2" />
<text  x="487.54" y="255.5" ></text>
</g>
<g >
<title>__next_timer_interrupt (1 samples, 0.22%)</title><rect x="476.9" y="261" width="2.6" height="15.0" fill="rgb(250,41,31)" rx="2" ry="2" />
<text  x="479.92" y="271.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.43%)</title><rect x="1047.9" y="117" width="5.1" height="15.0" fill="rgb(216,86,52)" rx="2" ry="2" />
<text  x="1050.89" y="127.5" ></text>
</g>
<g >
<title>find_get_entry (2 samples, 0.43%)</title><rect x="86.1" y="149" width="5.1" height="15.0" fill="rgb(210,154,5)" rx="2" ry="2" />
<text  x="89.13" y="159.5" ></text>
</g>
<g >
<title>get_next_timer_interrupt (1 samples, 0.22%)</title><rect x="476.9" y="277" width="2.6" height="15.0" fill="rgb(209,219,34)" rx="2" ry="2" />
<text  x="479.92" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (64 samples, 13.76%)</title><rect x="152.1" y="325" width="162.4" height="15.0" fill="rgb(248,16,10)" rx="2" ry="2" />
<text  x="155.11" y="335.5" >entry_SYSCALL_64_aft..</text>
</g>
<g >
<title>__perf_event_enable (64 samples, 13.76%)</title><rect x="152.1" y="133" width="162.4" height="15.0" fill="rgb(251,60,16)" rx="2" ry="2" />
<text  x="155.11" y="143.5" >__perf_event_enable</text>
</g>
<g >
<title>event_function_call (64 samples, 13.76%)</title><rect x="152.1" y="213" width="162.4" height="15.0" fill="rgb(235,111,48)" rx="2" ry="2" />
<text  x="155.11" y="223.5" >event_function_call</text>
</g>
<g >
<title>sys_ioctl (64 samples, 13.76%)</title><rect x="152.1" y="293" width="162.4" height="15.0" fill="rgb(240,182,36)" rx="2" ry="2" />
<text  x="155.11" y="303.5" >sys_ioctl</text>
</g>
<g >
<title>__ioctl (64 samples, 13.76%)</title><rect x="152.1" y="341" width="162.4" height="15.0" fill="rgb(226,186,22)" rx="2" ry="2" />
<text  x="155.11" y="351.5" >__ioctl</text>
</g>
<g >
<title>nmi_handle (2 samples, 0.43%)</title><rect x="309.4" y="53" width="5.1" height="15.0" fill="rgb(233,38,9)" rx="2" ry="2" />
<text  x="312.44" y="63.5" ></text>
</g>
<g >
<title>enqueue_entity (1 samples, 0.22%)</title><rect x="1050.4" y="53" width="2.6" height="15.0" fill="rgb(222,92,28)" rx="2" ry="2" />
<text  x="1053.43" y="63.5" ></text>
</g>
<g >
<title>update_min_vruntime (1 samples, 0.22%)</title><rect x="53.1" y="53" width="2.6" height="15.0" fill="rgb(212,33,46)" rx="2" ry="2" />
<text  x="56.14" y="63.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (2 samples, 0.43%)</title><rect x="479.5" y="277" width="5.0" height="15.0" fill="rgb(226,136,5)" rx="2" ry="2" />
<text  x="482.46" y="287.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.22%)</title><rect x="484.5" y="261" width="2.6" height="15.0" fill="rgb(253,114,24)" rx="2" ry="2" />
<text  x="487.54" y="271.5" ></text>
</g>
<g >
<title>call_cpuidle (56 samples, 12.04%)</title><rect x="327.2" y="309" width="142.1" height="15.0" fill="rgb(224,174,45)" rx="2" ry="2" />
<text  x="330.20" y="319.5" >call_cpuidle</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10 samples, 2.15%)</title><rect x="1045.4" y="309" width="25.3" height="15.0" fill="rgb(253,125,52)" rx="2" ry="2" />
<text  x="1048.35" y="319.5" >e..</text>
</g>
<g >
<title>intel_idle (55 samples, 11.83%)</title><rect x="329.7" y="261" width="139.6" height="15.0" fill="rgb(239,34,31)" rx="2" ry="2" />
<text  x="332.74" y="271.5" >intel_idle</text>
</g>
<g >
<title>clockevents_program_event (1 samples, 0.22%)</title><rect x="479.5" y="213" width="2.5" height="15.0" fill="rgb(241,92,11)" rx="2" ry="2" />
<text  x="482.46" y="223.5" ></text>
</g>
<g >
<title>[wc] (3 samples, 0.65%)</title><rect x="489.6" y="357" width="7.6" height="15.0" fill="rgb(250,22,38)" rx="2" ry="2" />
<text  x="492.61" y="367.5" ></text>
</g>
<g >
<title>schedule (4 samples, 0.86%)</title><rect x="48.1" y="149" width="10.1" height="15.0" fill="rgb(241,39,35)" rx="2" ry="2" />
<text  x="51.06" y="159.5" ></text>
</g>
<g >
<title>__fdget_pos (1 samples, 0.22%)</title><rect x="58.2" y="245" width="2.6" height="15.0" fill="rgb(215,122,2)" rx="2" ry="2" />
<text  x="61.22" y="255.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (2 samples, 0.43%)</title><rect x="1047.9" y="181" width="5.1" height="15.0" fill="rgb(237,189,11)" rx="2" ry="2" />
<text  x="1050.89" y="191.5" ></text>
</g>
<g >
<title>__vfs_read (35 samples, 7.53%)</title><rect x="60.8" y="229" width="88.8" height="15.0" fill="rgb(210,30,26)" rx="2" ry="2" />
<text  x="63.75" y="239.5" >__vfs_read</text>
</g>
<g >
<title>copy_page_to_iter (12 samples, 2.58%)</title><rect x="116.6" y="181" width="30.4" height="15.0" fill="rgb(241,83,11)" rx="2" ry="2" />
<text  x="119.58" y="191.5" >co..</text>
</g>
<g >
<title>enqueue_task_fair (1 samples, 0.22%)</title><rect x="1050.4" y="69" width="2.6" height="15.0" fill="rgb(235,191,8)" rx="2" ry="2" />
<text  x="1053.43" y="79.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (36 samples, 7.74%)</title><rect x="58.2" y="293" width="91.4" height="15.0" fill="rgb(252,210,52)" rx="2" ry="2" />
<text  x="61.22" y="303.5" >entry_SYSC..</text>
</g>
<g >
<title>page_counter_uncharge (1 samples, 0.22%)</title><rect x="1058.0" y="117" width="2.6" height="15.0" fill="rgb(248,56,40)" rx="2" ry="2" />
<text  x="1061.04" y="127.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.22%)</title><rect x="327.2" y="229" width="2.5" height="15.0" fill="rgb(250,165,51)" rx="2" ry="2" />
<text  x="330.20" y="239.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (1 samples, 0.22%)</title><rect x="487.1" y="357" width="2.5" height="15.0" fill="rgb(250,208,38)" rx="2" ry="2" />
<text  x="490.08" y="367.5" ></text>
</g>
<g >
<title>hrtimer_force_reprogram (2 samples, 0.43%)</title><rect x="479.5" y="245" width="5.0" height="15.0" fill="rgb(218,211,4)" rx="2" ry="2" />
<text  x="482.46" y="255.5" ></text>
</g>
<g >
<title>page_counter_try_charge (1 samples, 0.22%)</title><rect x="27.8" y="85" width="2.5" height="15.0" fill="rgb(254,118,29)" rx="2" ry="2" />
<text  x="30.76" y="95.5" ></text>
</g>
<g >
<title>activate_task (1 samples, 0.22%)</title><rect x="1050.4" y="85" width="2.6" height="15.0" fill="rgb(236,28,33)" rx="2" ry="2" />
<text  x="1053.43" y="95.5" ></text>
</g>
<g >
<title>update_curr (1 samples, 0.22%)</title><rect x="53.1" y="69" width="2.6" height="15.0" fill="rgb(212,174,41)" rx="2" ry="2" />
<text  x="56.14" y="79.5" ></text>
</g>
<g >
<title>sys_read (9 samples, 1.94%)</title><rect x="1045.4" y="277" width="22.8" height="15.0" fill="rgb(253,61,26)" rx="2" ry="2" />
<text  x="1048.35" y="287.5" >s..</text>
</g>
<g >
<title>__sched_text_start (4 samples, 0.86%)</title><rect x="48.1" y="133" width="10.1" height="15.0" fill="rgb(240,225,54)" rx="2" ry="2" />
<text  x="51.06" y="143.5" ></text>
</g>
<g >
<title>schedule_idle (2 samples, 0.43%)</title><rect x="471.8" y="309" width="5.1" height="15.0" fill="rgb(254,215,38)" rx="2" ry="2" />
<text  x="474.85" y="319.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.22%)</title><rect x="327.2" y="213" width="2.5" height="15.0" fill="rgb(224,158,3)" rx="2" ry="2" />
<text  x="330.20" y="223.5" ></text>
</g>
<g >
<title>__ctype_b_loc (11 samples, 2.37%)</title><rect x="1116.4" y="341" width="27.9" height="15.0" fill="rgb(236,216,22)" rx="2" ry="2" />
<text  x="1119.41" y="351.5" >_..</text>
</g>
<g >
<title>new_sync_read (35 samples, 7.53%)</title><rect x="60.8" y="213" width="88.8" height="15.0" fill="rgb(250,146,6)" rx="2" ry="2" />
<text  x="63.75" y="223.5" >new_sync_r..</text>
</g>
<g >
<title>__sched_text_start (1 samples, 0.22%)</title><rect x="147.0" y="149" width="2.6" height="15.0" fill="rgb(214,102,10)" rx="2" ry="2" />
<text  x="150.03" y="159.5" ></text>
</g>
<g >
<title>__libc_start_main (55 samples, 11.83%)</title><rect x="10.0" y="357" width="139.6" height="15.0" fill="rgb(232,218,27)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >__libc_start_main</text>
</g>
<g >
<title>start_secondary (63 samples, 13.55%)</title><rect x="327.2" y="357" width="159.9" height="15.0" fill="rgb(212,111,33)" rx="2" ry="2" />
<text  x="330.20" y="367.5" >start_secondary</text>
</g>
<g >
<title>perf_event_for_each_child (64 samples, 13.76%)</title><rect x="152.1" y="245" width="162.4" height="15.0" fill="rgb(213,58,11)" rx="2" ry="2" />
<text  x="155.11" y="255.5" >perf_event_for_each_..</text>
</g>
<g >
<title>page_counter_cancel (1 samples, 0.22%)</title><rect x="1058.0" y="101" width="2.6" height="15.0" fill="rgb(206,155,52)" rx="2" ry="2" />
<text  x="1061.04" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.22%)</title><rect x="149.6" y="341" width="2.5" height="15.0" fill="rgb(225,34,25)" rx="2" ry="2" />
<text  x="152.57" y="351.5" ></text>
</g>
<g >
<title>perf (65 samples, 13.98%)</title><rect x="149.6" y="389" width="164.9" height="15.0" fill="rgb(250,169,39)" rx="2" ry="2" />
<text  x="152.57" y="399.5" >perf</text>
</g>
<g >
<title>new_sync_write (1 samples, 0.22%)</title><rect x="149.6" y="261" width="2.5" height="15.0" fill="rgb(213,31,9)" rx="2" ry="2" />
<text  x="152.57" y="271.5" ></text>
</g>
<g >
<title>native_sched_clock (8 samples, 1.72%)</title><rect x="152.1" y="53" width="20.3" height="15.0" fill="rgb(246,133,47)" rx="2" ry="2" />
<text  x="155.11" y="63.5" ></text>
</g>
<g >
<title>ttwu_do_activate (1 samples, 0.22%)</title><rect x="1050.4" y="101" width="2.6" height="15.0" fill="rgb(208,157,24)" rx="2" ry="2" />
<text  x="1053.43" y="111.5" ></text>
</g>
<g >
<title>smp_call_function_single (64 samples, 13.76%)</title><rect x="152.1" y="197" width="162.4" height="15.0" fill="rgb(239,86,48)" rx="2" ry="2" />
<text  x="155.11" y="207.5" >smp_call_function_si..</text>
</g>
<g >
<title>vfs_write (1 samples, 0.22%)</title><rect x="149.6" y="293" width="2.5" height="15.0" fill="rgb(246,116,30)" rx="2" ry="2" />
<text  x="152.57" y="303.5" ></text>
</g>
<g >
<title>swapper (69 samples, 14.84%)</title><rect x="314.5" y="389" width="175.1" height="15.0" fill="rgb(217,108,0)" rx="2" ry="2" />
<text  x="317.52" y="399.5" >swapper</text>
</g>
</g>
</svg>
