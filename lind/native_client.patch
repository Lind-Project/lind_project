diff --git a/SConstruct b/SConstruct
index 5afd2652cffa0081c9..0bc0fe1b617d07d78c 100755
--- a/SConstruct
+++ b/SConstruct
@@ -1,4 +1,4 @@
-#! -*- python -*-
+#! -*- python2 -*-
 # Copyright (c) 2012 The Native Client Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
@@ -292,7 +292,7 @@ def SetUpArgumentBits(env):
     desc='Collect and display information about which commands are executed '
       'during the build process')
 
-  BitFromArgument(env, 'werror', default=True,
+  BitFromArgument(env, 'werror', default=False,
     desc='Treat warnings as errors (-Werror)')
 
   BitFromArgument(env, 'disable_nosys_linker_warnings', default=False,
@@ -2718,8 +2718,10 @@ def MakeLinuxEnv(platform=None):
   #              header that causes the kernel to set the READ_IMPLIES_EXEC
   #              personality flag, which disables NX page protection.
   linux_env.Prepend(
+      CFLAGS=['-O2'],
+      CXXFLAGS=['-O2'],
       CPPDEFINES=[['-D_FORTIFY_SOURCE', '2']],
-      LINKFLAGS=['-pie', '-Wl,-z,relro', '-Wl,-z,now', '-Wl,-z,noexecstack'],
+      LINKFLAGS=['-O2', '-pie', '-Wl,-z,relro', '-Wl,-z,now', '-Wl,-z,noexecstack'],
       )
   # The ARM toolchain has a linker that doesn't handle the code its
   # compiler generates under -fPIE.
diff --git a/tools/Makefile b/tools/Makefile
index df922ac047476ef944..1ec07ac66ef6dbc6d5 100644
--- a/tools/Makefile
+++ b/tools/Makefile
@@ -34,16 +34,16 @@ THISMAKEFILE := $(lastword $(MAKEFILE_LIST))
 SHELL = /bin/bash
 
 # By default, checkout from read-only repository:
-#   http://git.chromium.org/native_client
+#   http://chromium.googlesource.com/native_client
 # Maintainers can either override this with read-write repository:
 #   ssh://gerrit.chromium.org/native_client
 # or add to git config:
 #   [url "ssh://gerrit.chromium.org"]
-#     pushinsteadof = http://git.chromium.org
+#     pushinsteadof = http://chromium.googlesource.com
 # or add to git-cl codereview.settings:
 #   PUSH_URL_CONFIG: url.ssh://gerrit.chromium.org.pushinsteadof
-#   ORIGIN_URL_CONFIG: http://git.chromium.org
-GIT_BASE_URL = http://git.chromium.org/native_client
+#   ORIGIN_URL_CONFIG: http://chromium.googlesource.com
+GIT_BASE_URL = http://chromium.googlesource.com/native_client
 
 CROSSARCH = x86_64-nacl
 TOOLCHAINLOC ?= out
@@ -63,7 +63,7 @@ USER_LDFLAGS = -s
 HOST_TOOLCHAIN_BITS = 32
 
 # If CANNED_REVISION is "no" then it's "from git build": Makefile uses file
-# named "REVISIONS" to pull infomation from git and builds that.
+# named "REVISIONS" to pull information from git and builds that.
 # If CANNED_REVISION is set to some revision then Makefile will try to download
 # sources from commondatastorage.googleapis.com and use them.
 # You can also set CANNED_REVISION to "yes" if you want to just build sources
@@ -111,31 +111,31 @@ endif
 SRCDIR = ../../../third_party
 
 ifeq ($(PLATFORM), win)
-  # Ugh, Cygwin and spaces in paths don't work well.
-  # I'm explicitly coding the path.
-  BUILDPATH = $(DESTDIR)$(PREFIX)/bin:/usr/local/bin:/usr/bin:/bin
-  SCONS ?= scons.bat
-  SVN ?= svn.bat
-  SVNVERSION ?= svnversion.bat | tr -d $$"\r"
-  PREFIX_NATIVE = $(shell cygpath -m $(PREFIX))
-  CREATE_REDIRECTORS = ./create_redirectors_cygwin.sh
+	# Ugh, Cygwin and spaces in paths don't work well.
+	# I'm explicitly coding the path.
+	BUILDPATH = $(DESTDIR)$(PREFIX)/bin:/usr/local/bin:/usr/bin:/bin
+	SCONS ?= scons.bat
+	SVN ?= svn.bat
+	SVNVERSION ?= svnversion.bat | tr -d $$"\r"
+	PREFIX_NATIVE = $(shell cygpath -m $(PREFIX))
+	CREATE_REDIRECTORS = ./create_redirectors_cygwin.sh
 else
-  BUILDPATH = $(DESTDIR)$(PREFIX)/bin:$(PATH)
-  SCONS ?= scons
-  SVN ?= svn
-  SVNVERSION ?= svnversion
-  PREFIX_NATIVE = $(DESTDIR)$(PREFIX)
-  CREATE_REDIRECTORS = ./create_redirectors.sh
+	BUILDPATH = $(DESTDIR)$(PREFIX)/bin:$(PATH)
+	SCONS ?= scons
+	SVN ?= svn
+	SVNVERSION ?= svnversion
+	PREFIX_NATIVE = $(DESTDIR)$(PREFIX)
+	CREATE_REDIRECTORS = ./create_redirectors.sh
 endif
 
 ##################################################################
 #  The version numbers for the tools we will be building.
 ##################################################################
-GMP_VERSION = 5.0.2
-MPFR_VERSION = 3.0.1
-MPC_VERSION = 0.9
-PPL_VERSION = 0.11.2
-CLOOG_PPL_VERSION = 0.15.9
+GMP_VERSION = 6.1.0
+MPFR_VERSION = 3.1.4
+MPC_VERSION = 1.0.3
+PPL_VERSION = 1.2pre4
+CLOOG_PPL_VERSION = 0.15.11
 define GCC_EXTRAS
 gmp: $(GMP_VERSION), \
 mpfr: $(MPFR_VERSION), \
@@ -203,21 +203,27 @@ sync: | $(all-latest-git-sources)
 .PHONY: gcc-extras
 gcc-extras:
 	if [[ "$$(cat BUILD/.gcc-extras-version)" != "$(GCC_EXTRAS)" ]]; then \
-	    rm -rf BUILD/.gcc-extra-* SRC/.gcc-extra-* && \
-	    $(MAKE) -f $(THISMAKEFILE) install-gcc-extras && \
-	    echo -n "$(GCC_EXTRAS)" > BUILD/.gcc-extras-version; \
+		rm -rf BUILD/.gcc-extra-* SRC/.gcc-extra-* && \
+			$(MAKE) -f $(THISMAKEFILE) install-gcc-extras && \
+			echo -n "$(GCC_EXTRAS)" > BUILD/.gcc-extras-version; \
 	fi
 
-gcc-extras := gmp mpfr mpc ppl cloog-ppl
+# TODO: fix ppl linking errors
+# gcc-extras := gmp mpfr mpc ppl cloog-ppl
+gcc-extras := gmp mpfr mpc ppl
 
 gcc_extra_dir = $(subst cloog-ppl,cloog,$*)
 gcc_extra_version = $($(shell echo $*| tr '[:lower:]-' '[:upper:]_')_VERSION)
 
 all-src-gcc-extras = $(gcc-extras:%=SRC/.gcc-extra-%)
+
 $(all-src-gcc-extras): SRC/.gcc-extra-%: | SRC
 	rm -rf SRC/.gcc-extra-$*
-	cd SRC && tar xpf $(SRCDIR)/$(gcc_extra_dir)/$*-$(gcc_extra_version).tar.*
-	mv SRC/$*-$(gcc_extra_version) SRC/.gcc-extra-$*
+	cd SRC && \
+		tar xpf $(SRCDIR)/$(gcc_extra_dir)/$*-$(gcc_extra_version).tar.*
+	mv \
+		SRC/$*-$(gcc_extra_version) \
+		SRC/.gcc-extra-$*
 
 # All Macs need Core2 assembly and --enable-fat is broken with stock MacOS gcc.
 ifneq ($(PLATFORM), mac)
@@ -242,53 +248,83 @@ endef
 
 BUILD/.gcc-extra-build-gmp: | BUILD SRC/.gcc-extra-gmp
 	$(gcc-extra-configure) \
-	    --enable-cxx $(gmp_use_fat_binary) \
-	    ABI="$(HOST_TOOLCHAIN_BITS)"
+		--enable-cxx \
+		$(gmp_use_fat_binary) \
+		ABI="$(HOST_TOOLCHAIN_BITS)"
 
-BUILD/.gcc-extra-build-mpfr: | SRC/.gcc-extra-mpfr BUILD/.gcc-extra-install-gmp
-	$(gcc-extra-configure) --with-gmp=$$BUILD/.gcc-extra-install-gmp
+BUILD/.gcc-extra-build-mpfr: | SRC/.gcc-extra-mpfr \
+					BUILD/.gcc-extra-install-gmp
+	CFLAGS=-I$$BUILD/.gcc-extra-build-gmp/include \
+		CXXFLAGS=-I$$BUILD/.gcc-extra-build-gmp/include \
+		LDFLAGS=-L$$BUILD/.gcc-extra-build-gmp/lib \
+		$(gcc-extra-configure) \
+			--with-gmp=$$BUILD/.gcc-extra-install-gmp
 
-BUILD/.gcc-extra-build-mpc: | SRC/.gcc-extra-mpc BUILD/.gcc-extra-install-gmp \
-                                                 BUILD/.gcc-extra-install-mpfr
-	$(gcc-extra-configure) \
-	    --with-gmp=$$BUILD/.gcc-extra-install-gmp \
-	    --with-mpfr=$$BUILD/.gcc-extra-install-mpfr
+BUILD/.gcc-extra-build-mpc: | SRC/.gcc-extra-mpc \
+					BUILD/.gcc-extra-install-gmp \
+					BUILD/.gcc-extra-install-mpfr
+	CFLAGS=-I$$BUILD/.gcc-extra-build-gmp/include \
+		CXXFLAGS=-I$$BUILD/.gcc-extra-build-gmp/include \
+		LDFLAGS=-L$$BUILD/.gcc-extra-build-gmp/lib \
+		$(gcc-extra-configure) \
+			--with-gmp=$$BUILD/.gcc-extra-install-gmp \
+			--with-mpfr=$$BUILD/.gcc-extra-install-mpfr
 
-BUILD/.gcc-extra-build-ppl: | SRC/.gcc-extra-ppl BUILD/.gcc-extra-install-gmp
-	$(gcc-extra-configure) \
-	    --enable-interfaces="cxx c" \
-	    --with-gmp-prefix=$$BUILD/.gcc-extra-install-gmp
+BUILD/.gcc-extra-build-ppl: | SRC/.gcc-extra-ppl \
+					BUILD/.gcc-extra-install-gmp
+	CFLAGS=-I$$BUILD/.gcc-extra-build-gmp/include \
+		CXXFLAGS=-I$$BUILD/.gcc-extra-build-gmp/include \
+		LDFLAGS=-L$$BUILD/.gcc-extra-build-gmp/lib \
+		$(gcc-extra-configure) \
+			--enable-interfaces="cxx c" \
+			--with-gmp=$$BUILD/.gcc-extra-install-gmp
+	sed -e 's|demos ||g' \
+		<BUILD/.gcc-extra-build-ppl/Makefile \
+		>BUILD/.gcc-extra-build-ppl/Makefile.out
+	cat \
+		<BUILD/.gcc-extra-build-ppl/Makefile.out \
+		>BUILD/.gcc-extra-build-ppl/Makefile
+	$(RM) BUILD/.gcc-extra-build-ppl/Makefile.out
 
 .PHONY: fix-cloog-ppl-check
 fix-cloog-ppl-check: | SRC/.gcc-extra-cloog-ppl
-	for i in SRC/.gcc-extra-cloog-ppl/configure{.in,} ; do \
-	    sed -e s'|ppl_minor_version=10|ppl_minor_version=11|'<$$i >$$i.out;\
-	    cat $$i.out >$$i; \
-	    rm $$i.out; \
+	for i in SRC/.gcc-extra-cloog-ppl/configure{.in,}; do \
+		sed -e s'|ppl_minor_version=10|ppl_minor_version=11|' \
+			<$$i \
+			>$$i.out;\
+		cat \
+			<$$i.out \
+			>$$i; \
+		rm $$i.out; \
 	done
 	sed -e s'|LIBS = @LIBS@|LIBS = @LIBS@ -lstdc++ -lm |' \
-	    <SRC/.gcc-extra-cloog-ppl/Makefile.in \
-	    >SRC/.gcc-extra-cloog-ppl/Makefile.in.out
-	cat SRC/.gcc-extra-cloog-ppl/Makefile.in.out \
-	    >SRC/.gcc-extra-cloog-ppl/Makefile.in
-	rm SRC/.gcc-extra-cloog-ppl/Makefile.in.out
+		<SRC/.gcc-extra-cloog-ppl/Makefile.in \
+		>SRC/.gcc-extra-cloog-ppl/Makefile.in.out
+	cat \
+		<SRC/.gcc-extra-cloog-ppl/Makefile.in.out \
+		>SRC/.gcc-extra-cloog-ppl/Makefile.in
+	$(RM) SRC/.gcc-extra-cloog-ppl/Makefile.in.out
 	find SRC/.gcc-extra-cloog-ppl -print0 | \
-	    xargs -0 touch -r SRC/.gcc-extra-cloog-ppl
+		xargs -0 touch -r SRC/.gcc-extra-cloog-ppl
 
 BUILD/.gcc-extra-build-cloog-ppl: fix-cloog-ppl-check | \
-                                                    BUILD/.gcc-extra-install-ppl
-	$(gcc-extra-configure) \
-	    --with-gmp=$$BUILD/.gcc-extra-install-gmp \
-	    --with-ppl=$$BUILD/.gcc-extra-install-ppl
+					BUILD/.gcc-extra-install-gmp \
+					BUILD/.gcc-extra-install-ppl
+	CFLAGS=-I$$BUILD/.gcc-extra-build-ppl/include \
+		CXXFLAGS=-I$$BUILD/.gcc-extra-build-ppl/include \
+		LDFLAGS=-L$$BUILD/.gcc-extra-build-ppl/lib \
+		$(gcc-extra-configure) \
+			--with-gmp=$$BUILD/.gcc-extra-install-gmp \
+			--with-ppl=$$BUILD/.gcc-extra-install-ppl
 
 all-install-gcc-extras = $(gcc-extras:%=BUILD/.gcc-extra-install-%)
 $(all-install-gcc-extras): BUILD/.gcc-extra-install-%: | SRC \
-                                                        BUILD/.gcc-extra-build-%
+					BUILD/.gcc-extra-build-%
 	if mkdir BUILD/.gcc-extra-install-$*; then \
-	    mkdir BUILD/.gcc-extra-install-$*/include && \
-	    mkdir BUILD/.gcc-extra-install-$*/lib && \
-	    ln -s lib BUILD/.gcc-extra-install-$*/lib64 && \
-	    ln -s lib BUILD/.gcc-extra-install-$*/lib32; \
+		mkdir BUILD/.gcc-extra-install-$*/include && \
+		mkdir BUILD/.gcc-extra-install-$*/lib && \
+		ln -s lib BUILD/.gcc-extra-install-$*/lib64 && \
+		ln -s lib BUILD/.gcc-extra-install-$*/lib32; \
 	fi
 	cd BUILD/.gcc-extra-build-$* && $(MAKE) install
 
@@ -364,7 +400,7 @@ binutils: BUILD/stamp-$(CROSSARCH)-binutils
 # Builds the cross gcc used to build the libraries.
 ##################################################################
 
-GCC_SRC_DIR = $(abspath SRC/gcc)
+GCC_SRC_DIR = $(abspath SRC/gcc/src)
 
 GMP_DIR = $(abspath BUILD/.gcc-extra-install-gmp)
 MPFR_DIR = $(abspath BUILD/.gcc-extra-install-mpfr)
@@ -377,34 +413,35 @@ CLOOG_DIR = $(abspath BUILD/.gcc-extra-install-cloog-ppl)
 ifeq ($(PLATFORM),linux)
 lstdc++ = -Wl,-Bstatic -lstdc++ -Wl,-Bdynamic
 else
-lstdc++ = -lstdc++
+lstdc++ = -lpwl -lstdc++
 endif
 
+# TODO: fix cloog build
 ifneq ($(SRCDIR),)
 GCC_EXTRAS_FLAGS = \
-    --with-gmp=$(GMP_DIR) \
-    --with-mpfr=$(MPFR_DIR) \
-    --with-ppl=$(PPL_DIR) \
-    --with-host-libstdcxx="-lpwl $(lstdc++) -lm" \
-    --with-cloog=$(CLOOG_DIR) \
-    --disable-ppl-version-check
+	--with-gmp=$(GMP_DIR) \
+	--with-mpfr=$(MPFR_DIR) \
+	--with-ppl=$(PPL_DIR) \
+	--with-host-libstdcxx="$(lstdc++) -lm" \
+	--disable-ppl-version-check
+	# --with-cloog=$(CLOOG_DIR)
 else
 GCC_EXTRAS_FLAGS = \
-    --with-gmp \
-    --with-mpfr \
-    --with-ppl \
-    --with-cloog
+	--with-gmp \
+	--with-mpfr \
+	--with-ppl
+	# --with-cloog
 endif
 
 GCC_CONFIGURE_FLAGS = \
-    --disable-decimal-float \
-    --disable-libgomp \
-    --disable-libmudflap \
-    --disable-libssp \
-    --disable-libstdcxx-pch \
-    --target=$(CROSSARCH) \
-    --enable-linker-build-id \
-    $(GCC_EXTRAS_FLAGS)
+	--disable-decimal-float \
+	--disable-libgomp \
+	--disable-libmudflap \
+	--disable-libssp \
+	--disable-libstdcxx-pch \
+	--target=$(CROSSARCH) \
+	--enable-linker-build-id \
+	$(GCC_EXTRAS_FLAGS)
 
 ifdef MULTILIB
 ifeq ($(MULTILIB),no)
@@ -423,8 +460,8 @@ GCC_CXX = g++ -m$(HOST_TOOLCHAIN_BITS)
 endif
 
 GCC_DEFINES = \
-    -Dinhibit_libc \
-    -D__gthr_posix_h
+	-Dinhibit_libc \
+	-D__gthr_posix_h
 
 
 GCC_CFLAGS_FOR_TARGET-nolibc =
@@ -453,30 +490,34 @@ ifneq ($(SRCDIR),)
 	$(MAKE) -f $(THISMAKEFILE) gcc-extras
 endif
 	rm -rf BUILD/build-pregcc-$(CROSSARCH)
-	mkdir BUILD/build-pregcc-$(CROSSARCH)
+	mkdir -p BUILD/build-pregcc-$(CROSSARCH)
 	cd BUILD/build-pregcc-$(CROSSARCH) && \
 	PATH=$(BUILDPATH) \
 	$(GCC_SRC_DIR)/configure \
-	    CC="$(GCC_CC)" \
-	    CFLAGS="$(USER_CFLAGS) $(GCC_DEFINES)" \
-	    LDFLAGS="$(USER_LDFLAGS)" \
-	    CFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-nolibc)" \
-	    CXXFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-nolibc)" \
-	    --prefix=$(PREFIX) \
-	    $(GCC_CONFIGURE_FLAGS) \
-	    $(GCC_CONFIGURE_FLAGS-nolibc)
+		CC="$(GCC_CC)" \
+		CFLAGS="$(USER_CFLAGS) $(GCC_DEFINES)" \
+		LDFLAGS="$(USER_LDFLAGS)" \
+		CFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-nolibc)" \
+		CXXFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-nolibc)" \
+		--prefix=$(PREFIX) \
+		$(GCC_CONFIGURE_FLAGS) \
+		$(GCC_CONFIGURE_FLAGS-nolibc)
 	PATH=$(BUILDPATH) $(MAKE) \
-	    -C BUILD/build-pregcc-$(CROSSARCH) \
-	    all-gcc all-target-libgcc
+		-C BUILD/build-pregcc-$(CROSSARCH) \
+		all-gcc
 	PATH=$(BUILDPATH) $(MAKE) \
-	    -C BUILD/build-pregcc-$(CROSSARCH) \
-	    DESTDIR=$(DESTDIR) \
-	    install-gcc install-target-libgcc
-	cp $(DESTDIR)$(PREFIX)/lib/gcc/$(CROSSARCH)/$(GCC_VERSION)/libgcc.a \
+		-C BUILD/build-pregcc-$(CROSSARCH) \
+		all-target-libgcc
+	PATH=$(BUILDPATH) $(MAKE) \
+		-C BUILD/build-pregcc-$(CROSSARCH) \
+		DESTDIR=$(DESTDIR) \
+		install-gcc install-target-libgcc
+	cp -f \
+		$(DESTDIR)$(PREFIX)/lib/gcc/$(CROSSARCH)/$(GCC_VERSION)/libgcc.a \
 		$(DESTDIR)$(PREFIX)/lib/gcc/$(CROSSARCH)/$(GCC_VERSION)/libgcc_eh.a
-	cp $(DESTDIR)$(PREFIX)/lib/gcc/$(CROSSARCH)/$(GCC_VERSION)/32/libgcc.a \
-		$(DESTDIR)$(PREFIX)/lib/gcc/$(CROSSARCH)/$(GCC_VERSION)/32/libgcc_eh.a |\
-	true
+	cp -f \
+		$(DESTDIR)$(PREFIX)/lib/gcc/$(CROSSARCH)/$(GCC_VERSION)/32/libgcc.a \
+		$(DESTDIR)$(PREFIX)/lib/gcc/$(CROSSARCH)/$(GCC_VERSION)/32/libgcc_eh.a
 	touch $@
 
 .PHONY: pregcc
@@ -508,38 +549,46 @@ PREGCC_BUILD_DIR = BUILD/build-pregcc-$(CROSSARCH)
 # make install:
 #   DESTDIR should be ignored at this step.
 BUILD/stamp-$(CROSSARCH)-pregcc-standalone: \
-  BUILD/stamp-$(CROSSARCH)-binutils | SRC/gcc BUILD
+	BUILD/stamp-$(CROSSARCH)-binutils | SRC/gcc BUILD
 ifneq ($(SRCDIR),)
 	$(MAKE) -f $(THISMAKEFILE) gcc-extras
 endif
 	rm -rf $(PREGCC_PREFIX)
 	mkdir -p $(PREGCC_PREFIX)/$(CROSSARCH)/bin
 	for f in '$(DESTDIR)$(PREFIX)/$(CROSSARCH)/bin/*'; do \
-	    ln -s $$f $(PREGCC_PREFIX)/$(CROSSARCH)/bin; \
-	    done
+		ln -s $$f $(PREGCC_PREFIX)/$(CROSSARCH)/bin; \
+	done
 	rm -rf $(PREGCC_BUILD_DIR)
 	mkdir $(PREGCC_BUILD_DIR)
 	cd $(PREGCC_BUILD_DIR) && \
 	PATH=$(BUILDPATH) \
-	$(GCC_SRC_DIR)/configure \
-	    CC="$(GCC_CC)" \
-	    CFLAGS="$(USER_CFLAGS) $(GCC_DEFINES)" \
-	    LDFLAGS="$(USER_LDFLAGS)" \
-	    CFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-nolibc)" \
-	    CXXFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-nolibc)" \
-	    --prefix=$(PREGCC_PREFIX) \
-	    $(GCC_CONFIGURE_FLAGS) \
-	    $(GCC_CONFIGURE_FLAGS-nolibc)
-	PATH=$(BUILDPATH) $(MAKE) \
-	    -C $(PREGCC_BUILD_DIR) \
-	    all-gcc \
-	    all-target-libgcc \
-	    DESTDIR=
-	PATH=$(BUILDPATH) $(MAKE) \
-	    -C $(PREGCC_BUILD_DIR) \
-	    install-gcc \
-	    install-target-libgcc \
-	    DESTDIR=
+		$(GCC_SRC_DIR)/configure \
+			CC="$(GCC_CC)" \
+			CFLAGS="$(USER_CFLAGS) $(GCC_DEFINES)" \
+			LDFLAGS="$(USER_LDFLAGS)" \
+			CFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-nolibc)" \
+			CXXFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-nolibc)" \
+			--prefix=$(PREGCC_PREFIX) \
+			$(GCC_CONFIGURE_FLAGS) \
+			$(GCC_CONFIGURE_FLAGS-nolibc)
+	sed -e s'|--split-size=5000000|--force --no-validate &|' \
+		<BUILD/build-pregcc-x86_64-nacl/Makefile \
+		>BUILD/build-pregcc-x86_64-nacl/Makefile.new
+	cat \
+		<BUILD/build-pregcc-x86_64-nacl/Makefile.new \
+		>BUILD/build-pregcc-x86_64-nacl/Makefile
+	PATH=$(BUILDPATH) \
+		$(MAKE) \
+		-C $(PREGCC_BUILD_DIR) \
+		all-gcc \
+		all-target-libgcc \
+		DESTDIR=
+	PATH=$(BUILDPATH) \
+		$(MAKE) \
+		-C $(PREGCC_BUILD_DIR) \
+		install-gcc \
+		install-target-libgcc \
+		DESTDIR=
 	touch $@
 
 
@@ -555,40 +604,41 @@ NEWLIB_CFLAGS = -O2
 BUILD/stamp-$(CROSSARCH)-newlib: | SRC/newlib BUILD newlib-libc-script
 	rm -rf BUILD/build-newlib-$(CROSSARCH)
 	mkdir BUILD/build-newlib-$(CROSSARCH)
-	PATH=$(BUILDPATH) && export PATH && \
-	  cd BUILD/build-newlib-$(CROSSARCH) && \
-	  ../../SRC/newlib/configure \
-		      --disable-libgloss \
-		      --enable-newlib-iconv \
-		      --enable-newlib-iconv-from-encodings=UTF-8,UTF-16LE,UCS-4LE,UTF-16,UCS-4 \
-		      --enable-newlib-iconv-to-encodings=UTF-8,UTF-16LE,UCS-4LE,UTF-16,UCS-4 \
-		      --enable-newlib-io-long-long \
-		      --enable-newlib-io-long-double \
-		      --enable-newlib-io-c99-formats \
-		      --enable-newlib-mb \
-	    --prefix=$(PREFIX) \
-	    CFLAGS="$(USER_CFLAGS)" \
-	    CFLAGS_FOR_TARGET='$(NEWLIB_CFLAGS)' \
-	    CXXFLAGS_FOR_TARGET='$(NEWLIB_CFLAGS)' \
-	    --target=$(CROSSARCH) && \
-	  $(MAKE) && \
-	  $(MAKE) DESTDIR=$(DESTDIR) install
+	PATH=$(BUILDPATH) && \
+		export PATH && \
+		cd BUILD/build-newlib-$(CROSSARCH) && \
+		../../SRC/newlib/configure \
+			--disable-libgloss \
+			--enable-newlib-iconv \
+			--enable-newlib-iconv-from-encodings=UTF-8,UTF-16LE,UCS-4LE,UTF-16,UCS-4 \
+			--enable-newlib-iconv-to-encodings=UTF-8,UTF-16LE,UCS-4LE,UTF-16,UCS-4 \
+			--enable-newlib-io-long-long \
+			--enable-newlib-io-long-double \
+			--enable-newlib-io-c99-formats \
+			--enable-newlib-mb \
+			--prefix=$(PREFIX) \
+			CFLAGS="$(USER_CFLAGS)" \
+			CFLAGS_FOR_TARGET='$(NEWLIB_CFLAGS)' \
+			CXXFLAGS_FOR_TARGET='$(NEWLIB_CFLAGS)' \
+			--target=$(CROSSARCH) && \
+		$(MAKE) && \
+		$(MAKE) DESTDIR=$(DESTDIR) install
 ifeq ($(CANNED_REVISION), no)
 # The buildbot script that creates the source tarball adds all the headers to
 # the tarball itself (see buildbot/buildbot_linux-glibc-makefile.sh)
 	cp -f $(addprefix ../src/untrusted/pthread/, pthread.h semaphore.h) \
-	  $(DESTDIR)$(PREFIX)/$(CROSSARCH)/include
+		$(DESTDIR)$(PREFIX)/$(CROSSARCH)/include
 endif
 	for bits in 32 64; do \
-	  mv $(DESTDIR)$(PREFIX)/$(CROSSARCH)/lib$$bits/libc.a \
-	     $(DESTDIR)$(PREFIX)/$(CROSSARCH)/lib$$bits/libcrt_common.a; \
-	  if [[ "$$bits" = "32" ]]; then \
-	    objformat=elf32-i386-nacl ; \
-	  else \
-	    objformat=elf64-x86-64-nacl ; \
-	  fi ; \
-	  sed "s/@OBJFORMAT@/$$objformat/" newlib-libc-script \
-	    > $(DESTDIR)$(PREFIX)/$(CROSSARCH)/lib$$bits/libc.a; \
+		mv $(DESTDIR)$(PREFIX)/$(CROSSARCH)/lib$$bits/libc.a \
+			$(DESTDIR)$(PREFIX)/$(CROSSARCH)/lib$$bits/libcrt_common.a; \
+		if [[ "$$bits" = "32" ]]; then \
+			objformat=elf32-i386-nacl; \
+		else \
+			objformat=elf64-x86-64-nacl; \
+		fi; \
+		sed "s/@OBJFORMAT@/$$objformat/" newlib-libc-script \
+			> $(DESTDIR)$(PREFIX)/$(CROSSARCH)/lib$$bits/libc.a; \
 	done
 	touch $@
 
@@ -619,50 +669,76 @@ ARCH_DEST_INC_NATIVE = $(PREFIX_NATIVE)/$(CROSSARCH)/include
 LIB_BITS ?= 64
 ARCH_DEST_LIB_NATIVE = $(PREFIX_NATIVE)/$(CROSSARCH)/$(if $(filter 32,$(LIB_BITS)),lib32,lib)
 
+# MAKE_VERSION is checked because we need to use the compat version if
+# make is too new (versions after 4.x fail when building glibc32).
+VERSION_TEST := $(MAKE_VERSION:4.%=)
+ifeq ($(VERSION_TEST),)
+	MAKE_COMPAT := make-3.81
+else
+	MAKE_COMPAT := make
+endif
+
 BUILD/stamp-glibc32: BUILD/stamp-$(CROSSARCH)-pregcc-standalone | SRC/glibc
-	if [[ ! -d $(LINUX_HEADERS) ]] ; then \
-	  $(MAKE) -f $(THISMAKEFILE) SRC/linux-headers-for-nacl ; \
+	if [[ ! -d $(LINUX_HEADERS) ]]; then \
+		$(MAKE) -f $(THISMAKEFILE) SRC/linux-headers-for-nacl; \
 	fi
 	rm -rf BUILD/build-glibc32
 	mkdir -p BUILD/build-glibc32/lib
-	cd BUILD/build-glibc32 && ../../SRC/glibc/configure \
-	    BUILD_CC="gcc -O2 -g" \
-	    CC="$(GLIBC_CC) -m32" \
-	    CFLAGS="-pipe -fno-strict-aliasing -mno-tls-direct-seg-refs -march=i486 $(GLIBC_CFLAGS)" \
-	    libc_cv_forced_unwind=yes \
-	    libc_cv_c_cleanup=yes \
-	    libc_cv_slibdir=/lib32 \
-	    libc_cv_z_combreloc=no \
-	    --prefix= \
-	    --libdir=/lib32 \
-	    --host=i486-linux-gnu \
-	    --with-headers=$(LINUX_HEADERS) \
-	    --enable-kernel=2.6.18
-	$(MAKE) -C BUILD/build-glibc32
-	$(MAKE) -C BUILD/build-glibc32 install_root=$(DESTDIR)$(PREFIX)/$(CROSSARCH) install
+	cd BUILD/build-glibc32 && \
+		../../SRC/glibc/configure \
+			BUILD_CC="gcc -O2 -g" \
+			CC="$(GLIBC_CC) -m32" \
+			CFLAGS="-pipe -fno-strict-aliasing -mno-tls-direct-seg-refs -march=i486 $(GLIBC_CFLAGS)" \
+			MAKE="$(MAKE_COMPAT)" \
+			libc_cv_forced_unwind=yes \
+			libc_cv_c_cleanup=yes \
+			libc_cv_slibdir=/lib32 \
+			libc_cv_z_combreloc=no \
+			--prefix= \
+			--libdir=/lib32 \
+			--host=i486-linux-gnu \
+			--with-headers=$(LINUX_HEADERS) \
+			--enable-kernel=2.6.18
+	$(MAKE_COMPAT) \
+		-C BUILD/build-glibc32
+	$(MAKE_COMPAT) \
+		-C BUILD/build-glibc32 \
+		install_root=$(DESTDIR)$(PREFIX)/$(CROSSARCH) \
+		install
 	touch $@
 
 BUILD/stamp-glibc64: BUILD/stamp-$(CROSSARCH)-pregcc-standalone | SRC/glibc
-	if [[ ! -d $(LINUX_HEADERS) ]] ; then \
-	  $(MAKE) -f $(THISMAKEFILE) SRC/linux-headers-for-nacl ; \
+	if [[ ! -d $(LINUX_HEADERS) ]]; then \
+		$(MAKE) -f $(THISMAKEFILE) SRC/linux-headers-for-nacl; \
 	fi
 	rm -rf BUILD/build-glibc64
 	mkdir -p BUILD/build-glibc64
-	cd BUILD/build-glibc64 && ../../SRC/glibc/configure \
-	    BUILD_CC="gcc -O2 -g" \
-	    CC="$(GLIBC_CC) -m64" \
-	    CFLAGS="-pipe -fno-strict-aliasing -mno-tls-direct-seg-refs $(GLIBC_CFLAGS)" \
-	    libc_cv_forced_unwind=yes \
-	    libc_cv_c_cleanup=yes \
-	    libc_cv_slibdir=/lib \
-	    libc_cv_z_combreloc=no \
-	    --prefix= \
-	    --libdir=/lib \
-	    --host=x86_64-linux-gnu \
-	    --with-headers=$(LINUX_HEADERS) \
-	    --enable-kernel=2.6.18
-	$(MAKE) -C BUILD/build-glibc64
-	$(MAKE) -C BUILD/build-glibc64 install_root=$(DESTDIR)$(PREFIX)/$(CROSSARCH) install
+	if type make-3.81; then \
+		MAKE_COMPAT="make-3.81"; \
+	else \
+		MAKE_COMPAT="make"; \
+	fi
+	cd BUILD/build-glibc64 && \
+		../../SRC/glibc/configure \
+			BUILD_CC="gcc -O2 -g" \
+			CC="$(GLIBC_CC) -m64" \
+			CFLAGS="-pipe -fno-strict-aliasing -mno-tls-direct-seg-refs $(GLIBC_CFLAGS)" \
+			MAKE="$(MAKE_COMPAT)" \
+			libc_cv_forced_unwind=yes \
+			libc_cv_c_cleanup=yes \
+			libc_cv_slibdir=/lib \
+			libc_cv_z_combreloc=no \
+			--prefix= \
+			--libdir=/lib \
+			--host=x86_64-linux-gnu \
+			--with-headers=$(LINUX_HEADERS) \
+			--enable-kernel=2.6.18
+	$(MAKE_COMPAT) \
+		-C BUILD/build-glibc64
+	$(MAKE_COMPAT) \
+		-C BUILD/build-glibc64 \
+		install_root=$(DESTDIR)$(PREFIX)/$(CROSSARCH) \
+		install
 	touch $@
 
 # Can be used to make a glibc archive separately from the main install tree.
@@ -672,19 +748,28 @@ INST_GLIBC_PREFIX ?= $(PREFIX)
 install-glibc: BUILD/stamp-glibc32 BUILD/stamp-glibc64
 	rm -rf "$(INST_GLIBC_PREFIX)"/glibc
 	mkdir "$(INST_GLIBC_PREFIX)"/glibc
-	$(MAKE) -f $(THISMAKEFILE) sdkdirs \
-	  DESTDIR="" PREFIX="$(INST_GLIBC_PREFIX)/glibc"
-	$(MAKE) -f $(THISMAKEFILE) -C BUILD/build-glibc32 \
-	  install_root="$(INST_GLIBC_PREFIX)/glibc/$(CROSSARCH)" install
-	$(MAKE) -f $(THISMAKEFILE) -C BUILD/build-glibc64 \
-	  install_root="$(INST_GLIBC_PREFIX)/glibc/$(CROSSARCH)" install
+	$(MAKE) \
+		-f $(THISMAKEFILE) \
+		sdkdirs \
+		DESTDIR="" \
+		PREFIX="$(INST_GLIBC_PREFIX)/glibc"
+	$(MAKE) \
+		-f $(THISMAKEFILE) \
+		-C BUILD/build-glibc32 \
+		install_root="$(INST_GLIBC_PREFIX)/glibc/$(CROSSARCH)" \
+		install
+	$(MAKE) \
+		-f $(THISMAKEFILE) \
+		-C BUILD/build-glibc64 \
+		install_root="$(INST_GLIBC_PREFIX)/glibc/$(CROSSARCH)" \
+		install
 
 .PHONY: export-headers
 export-headers: SRC/newlib
 ifeq ($(CANNED_REVISION), no)
 	rm -rf $(HPREFIX)/{bits,sys,machine}
 	../src/trusted/service_runtime/export_header.py \
-	  ../src/trusted/service_runtime/include $(HPREFIX)
+		../src/trusted/service_runtime/include $(HPREFIX)
 else
 	true
 endif
@@ -694,24 +779,24 @@ endif
 ##################################################################
 .PHONY: glibc-adhoc-files
 glibc-adhoc-files: | SRC/glibc
-	if [[ ! -d $(LINUX_HEADERS) ]] ; then \
-	  $(MAKE) -f $(THISMAKEFILE) SRC/linux-headers-for-nacl ; \
+	if [[ ! -d $(LINUX_HEADERS) ]]; then \
+		$(MAKE) -f $(THISMAKEFILE) SRC/linux-headers-for-nacl; \
 	fi
-	install -m 755 -d  $(ARCH_DEST)/lib/ldscripts
+	install -m 755 -d $(ARCH_DEST)/lib/ldscripts
 	cp -f SRC/glibc/nacl/dyn-link/ldscripts/* \
-	    $(ARCH_DEST)/lib/ldscripts/
+		$(ARCH_DEST)/lib/ldscripts/
 	mkdir -p $(ARCH_DEST)/include/machine
 	cp -rf $(LINUX_HEADERS)/{asm*,linux} $(ARCH_DEST)/include
 ifeq ($(CANNED_REVISION), no)
 	cp ../src/untrusted/include/machine/_default_types.h \
-	    $(ARCH_DEST)/include/machine/_default_types.h
+		$(ARCH_DEST)/include/machine/_default_types.h
 else
 	cp _default_types.h \
-	    $(ARCH_DEST)/include/machine/_default_types.h
+		$(ARCH_DEST)/include/machine/_default_types.h
 endif
 	for f in catchsegv gencat getconf getent iconv ldd locale \
-	    localedef mtrace pcprofiledump rpcgen sprof tzselect xtrace; do \
-	    rm -f $(ARCH_DEST)/bin/$$f ; \
+		localedef mtrace pcprofiledump rpcgen sprof tzselect xtrace; do \
+		rm -f $(ARCH_DEST)/bin/$$f; \
 	done
 	# These libraries are in link lines because newlib needs them.
 	# Since glibc doesn't need them, we just stub them out as empty
@@ -719,10 +804,10 @@ endif
 	# and then libfoo.a, but only the latter under -static, so install
 	# under .a names to cover both cases.
 	for libdir in lib32 lib; do \
-	  for lib in nacl nosys; do \
-	    echo '/* Intentionally empty */' > \
-		$(PREFIX_NATIVE)/$(CROSSARCH)/$${libdir}/lib$${lib}.a; \
-	  done; \
+		for lib in nacl nosys; do \
+			echo '/* Intentionally empty */' \
+				> $(PREFIX_NATIVE)/$(CROSSARCH)/$${libdir}/lib$${lib}.a; \
+		done; \
 	done
 
 ##################################################################
@@ -738,45 +823,42 @@ endif
 	rm -rf BUILD/build-full-gcc-$(CROSSARCH)
 	mkdir BUILD/build-full-gcc-$(CROSSARCH){,/lib}
 	ln -s $(DESTDIR)$(PREFIX)/$(CROSSARCH)/lib \
-	  BUILD/build-full-gcc-$(CROSSARCH)/lib/gcc
+		BUILD/build-full-gcc-$(CROSSARCH)/lib/gcc
 	# See http://code.google.com/p/nativeclient/issues/detail?id=854
 	rm -rf $(SYSINCLUDE_HACK_TARGET)
 	ln -s include $(SYSINCLUDE_HACK_TARGET)
 	cd BUILD/build-full-gcc-$(CROSSARCH) && \
-	PATH=$(BUILDPATH) \
-	$(GCC_SRC_DIR)/configure \
-	    CC="$(GCC_CC)" \
-	    CFLAGS="$(USER_CFLAGS) $(GCC_DEFINES)" \
-	    LDFLAGS="$(USER_LDFLAGS)" \
-	    CFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-glibc)" \
-	    CXXFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-glibc)" \
-	    --prefix=$(PREFIX) \
-	    $(GCC_CONFIGURE_FLAGS) \
-	    $(GCC_CONFIGURE_FLAGS-glibc)
+		PATH=$(BUILDPATH) $(GCC_SRC_DIR)/configure \
+			CC="$(GCC_CC)" \
+			CFLAGS="$(USER_CFLAGS) $(GCC_DEFINES)" \
+			LDFLAGS="$(USER_LDFLAGS)" \
+			CFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-glibc)" \
+			CXXFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-glibc)" \
+			--prefix=$(PREFIX) \
+			$(GCC_CONFIGURE_FLAGS) \
+			$(GCC_CONFIGURE_FLAGS-glibc)
 ifeq ($(PLATFORM), linux)
-	if [[ "$(CROSSARCH)" = "x86_64-nacl" ]] ; then \
-	  if file BUILD/build-pregcc-x86_64-nacl/gcc/cc1 | grep -q x86-64; \
-	  then \
-	    export LD_PRELOAD=/lib64/libgcc_s.so.1 ; \
-	  fi ; \
+	if [[ "$(CROSSARCH)" = "x86_64-nacl" ]]; then \
+		if file BUILD/build-pregcc-x86_64-nacl/gcc/cc1 | grep -q x86-64; then \
+			export LD_PRELOAD=/lib64/libgcc_s.so.1; \
+		fi; \
 	else \
-	  if ! (file BUILD/build-pregcc-x86_64-nacl/gcc/cc1 | grep -q x86-64); \
-	  then \
-	    export LD_PRELOAD=/lib/libgcc_s.so.1 ; \
-	  fi ; \
-	fi ; \
+		if ! (file BUILD/build-pregcc-x86_64-nacl/gcc/cc1 | grep -q x86-64); then \
+			export LD_PRELOAD=/lib/libgcc_s.so.1; \
+		fi; \
+	fi; \
 	PATH=$(BUILDPATH) $(MAKE) \
-	    -C BUILD/build-full-gcc-$(CROSSARCH) \
-	    all
+		-C BUILD/build-full-gcc-$(CROSSARCH) \
+		all
 else
 	PATH=$(BUILDPATH) $(MAKE) \
-	    -C BUILD/build-full-gcc-$(CROSSARCH) \
-	    all
+		-C BUILD/build-full-gcc-$(CROSSARCH) \
+		all
 endif
 	PATH=$(BUILDPATH) $(MAKE) \
-	    -C BUILD/build-full-gcc-$(CROSSARCH) \
-	    DESTDIR=$(DESTDIR) \
-	    install
+		-C BUILD/build-full-gcc-$(CROSSARCH) \
+		DESTDIR=$(DESTDIR) \
+		install
 	# See http://code.google.com/p/nativeclient/issues/detail?id=854
 	rm -rf $(SYSINCLUDE_HACK_TARGET)
 	touch $@
@@ -797,23 +879,23 @@ endif
 	rm -rf $(SYSINCLUDE_HACK_TARGET)
 	ln -s include $(SYSINCLUDE_HACK_TARGET)
 	cd BUILD/build-gcc-$(CROSSARCH) && \
-	PATH=$(BUILDPATH) \
-	$(GCC_SRC_DIR)/configure \
-	    CC="$(GCC_CC)" \
-	    CFLAGS="$(USER_CFLAGS) $(GCC_DEFINES)" \
-	    LDFLAGS="$(USER_LDFLAGS)" \
-	    CFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-newlib)" \
-	    CXXFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-newlib)" \
-	    --prefix=$(PREFIX) \
-	    $(GCC_CONFIGURE_FLAGS) \
-	    $(GCC_CONFIGURE_FLAGS-newlib)
+		PATH=$(BUILDPATH) \
+		$(GCC_SRC_DIR)/configure \
+			CC="$(GCC_CC)" \
+			CFLAGS="$(USER_CFLAGS) $(GCC_DEFINES)" \
+			LDFLAGS="$(USER_LDFLAGS)" \
+			CFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-newlib)" \
+			CXXFLAGS_FOR_TARGET="-O2 -g $(GCC_CFLAGS_FOR_TARGET-newlib)" \
+			--prefix=$(PREFIX) \
+			$(GCC_CONFIGURE_FLAGS) \
+			$(GCC_CONFIGURE_FLAGS-newlib)
 	PATH=$(BUILDPATH) $(MAKE) \
-	    -C BUILD/build-gcc-$(CROSSARCH) \
-	    all
+		-C BUILD/build-gcc-$(CROSSARCH) \
+		all
 	PATH=$(BUILDPATH) $(MAKE) \
-	    -C BUILD/build-gcc-$(CROSSARCH) \
-	    DESTDIR=$(DESTDIR) \
-	    install
+		-C BUILD/build-gcc-$(CROSSARCH) \
+		DESTDIR=$(DESTDIR) \
+		install
 	# See http://code.google.com/p/nativeclient/issues/detail?id=854
 	rm -rf $(SYSINCLUDE_HACK_TARGET)
 	touch $@
@@ -831,27 +913,27 @@ BUILD/stamp-$(CROSSARCH)-gdb: | SRC/gdb BUILD
 	mkdir BUILD/build-gdb-$(CROSSARCH)
 ifeq ($(PLATFORM),win)
 	cd BUILD/build-gdb-$(CROSSARCH) && \
-	  CC="x86_64-w64-mingw32-gcc -m32" \
-	  CC_FOR_BUILD="x86_64-w64-mingw32-gcc -m32" \
-	  LDFLAGS="$(USER_LDFLAGS)" \
-	  CFLAGS="$(USER_CFLAGS)" \
-	  ../../SRC/gdb/configure \
-	    --prefix=$(PREFIX) \
-	    --without-python \
-	    --host=x86_64-w64-mingw32 \
-	    --target=x86_64-nacl \
-	    --enable-targets=arm-none-nacl-eabi
+		CC="x86_64-w64-mingw32-gcc -m32" \
+		CC_FOR_BUILD="x86_64-w64-mingw32-gcc -m32" \
+		LDFLAGS="$(USER_LDFLAGS)" \
+		CFLAGS="$(USER_CFLAGS)" \
+		../../SRC/gdb/configure \
+		--prefix=$(PREFIX) \
+		--without-python \
+		--host=x86_64-w64-mingw32 \
+		--target=x86_64-nacl \
+		--enable-targets=arm-none-nacl-eabi
 	$(MAKE) -C BUILD/build-gdb-$(CROSSARCH) all
 	$(MAKE) -C BUILD/build-gdb-$(CROSSARCH) DESTDIR=$(DESTDIR) install
 else
 	cd BUILD/build-gdb-$(CROSSARCH) && \
-	  CC="gcc -m32" \
-	  LDFLAGS="$(USER_LDFLAGS)" \
-	  CFLAGS="$(USER_CFLAGS)" \
-	  ../../SRC/gdb/configure \
-	    --prefix=$(PREFIX) \
-	    --target=x86_64-nacl \
-	    --enable-targets=arm-none-eabi-nacl
+		CC="gcc -m32" \
+		LDFLAGS="$(USER_LDFLAGS)" \
+		CFLAGS="$(USER_CFLAGS)" \
+		../../SRC/gdb/configure \
+			--prefix=$(PREFIX) \
+			--target=x86_64-nacl \
+			--enable-targets=arm-none-eabi-nacl
 	$(MAKE) -C BUILD/build-gdb-$(CROSSARCH) all
 	$(MAKE) -C BUILD/build-gdb-$(CROSSARCH) DESTDIR=$(DESTDIR) install
 endif
@@ -890,7 +972,7 @@ INST_GLIBC_PROGRAM ?= none
 .PHONY: build-with-glibc
 build-with-glibc: SRC/gcc
 	$(MAKE) -f $(THISMAKEFILE) sdkdirs
-	cp -f SRC/gcc/COPYING* $(DESTDIR)$(PREFIX)
+	cp -f SRC/gcc/src/COPYING* $(DESTDIR)$(PREFIX)
 	$(MAKE) -f $(THISMAKEFILE) BUILD/stamp-$(CROSSARCH)-binutils
 ifeq ($(INST_GLIBC_PROGRAM), none)
 	$(MAKE) -f $(THISMAKEFILE) BUILD/stamp-$(CROSSARCH)-pregcc-standalone
@@ -911,50 +993,50 @@ else
 endif
 endif
 	$(CREATE_REDIRECTORS) "$(DESTDIR)$(PREFIX)"
-	for dir in lib32 lib64 ; do ( \
-	  cd $(DESTDIR)$(PREFIX)/$(CROSSARCH)/$$dir ; \
-	  for lib in BrokenLocale anl c cidn crypt dl m nsl \
-	    nss_{compat,dns,files,hesiod,nis,nisplus} pthread \
-	    resolv rt util ; do \
-	    for fulllib in lib$$lib.so.* ; do \
-	      mv lib$$lib-$(GLIBC_VERSION).so "$$fulllib" ; \
-	      ln -sfn "$$fulllib" lib$$lib-$(GLIBC_VERSION).so ; \
-	    done ; \
-	  done ; \
-	  for fulllib in ld-linux.so.* ld-linux-x86-64.so.* ; do \
-	    if [[ "$$fulllib" != *\** ]] ; then \
-	      mv ld-$(GLIBC_VERSION).so "$$fulllib" ; \
-	      ln -sfn "$$fulllib" ld-$(GLIBC_VERSION).so ; \
-	    fi ; \
-	  done ; \
-	  for fulllib in libthread_db.so.* ; do \
-	    mv libthread_db-1.0.so "$$fulllib" ; \
-	    ln -sfn "$$fulllib" libthread_db-1.0.so ; \
-	  done ; \
-	  chmod a+x libgcc_s.so.1 ; \
-	  for fulllib in libgfortran.so.3.* ; do \
-	    mv "$$fulllib" libgfortran.so.3 ; \
-	    ln -sfn libgfortran.so.3 "$$fulllib" ; \
-	    ln -sfn libgfortran.so.3 libgfortran.so ; \
-	  done ; \
-	  for fulllib in libobjc.so.2.* ; do \
-	    mv "$$fulllib" libobjc.so.2 ; \
-	    ln -sfn libobjc.so.2 "$$fulllib" ; \
-	    ln -sfn libobjc.so.2 libobjc.so ; \
-	  done ; \
-	  for fulllib in libstdc++.so.6.* ; do \
-	    mv "$$fulllib" libstdc++.so.6 ; \
-	    ln -sfn libstdc++.so.6 "$$fulllib" ; \
-	    ln -sfn libstdc++.so.6 libstdc++.so ; \
-	  done ; \
-	) ; done
+	for dir in lib32 lib64; do ( \
+		cd $(DESTDIR)$(PREFIX)/$(CROSSARCH)/$$dir; \
+		for lib in BrokenLocale anl c cidn crypt dl m nsl \
+			nss_{compat,dns,files,hesiod,nis,nisplus} pthread \
+			resolv rt util; do \
+			for fulllib in lib$$lib.so.*; do \
+				mv lib$$lib-$(GLIBC_VERSION).so "$$fulllib"; \
+				ln -sfn "$$fulllib" lib$$lib-$(GLIBC_VERSION).so; \
+			done; \
+		done; \
+		for fulllib in ld-linux.so.* ld-linux-x86-64.so.*; do \
+			if [[ "$$fulllib" != *\** ]]; then \
+				mv ld-$(GLIBC_VERSION).so "$$fulllib"; \
+				ln -sfn "$$fulllib" ld-$(GLIBC_VERSION).so; \
+			fi; \
+		done; \
+		for fulllib in libthread_db.so.*; do \
+			mv libthread_db-1.0.so "$$fulllib"; \
+			ln -sfn "$$fulllib" libthread_db-1.0.so; \
+		done; \
+		chmod a+x libgcc_s.so.1; \
+		for fulllib in libgfortran.so.3.*; do \
+			mv "$$fulllib" libgfortran.so.3; \
+			ln -sfn libgfortran.so.3 "$$fulllib"; \
+			ln -sfn libgfortran.so.3 libgfortran.so; \
+		done; \
+		for fulllib in libobjc.so.2.*; do \
+			mv "$$fulllib" libobjc.so.2; \
+			ln -sfn libobjc.so.2 "$$fulllib"; \
+			ln -sfn libobjc.so.2 libobjc.so; \
+		done; \
+		for fulllib in libstdc++.so.6.*; do \
+			mv "$$fulllib" libstdc++.so.6; \
+			ln -sfn libstdc++.so.6 "$$fulllib"; \
+			ln -sfn libstdc++.so.6 libstdc++.so; \
+		done; \
+	); done
 	rm -rf "$(DESTDIR)$(PREFIX)"/{include,lib/*.a*,$(CROSSARCH)/lib{,32}/*.la}
 	rm -rf "$(DESTDIR)$(PREFIX)"/{lib/{*/*/*/*{,/*}.la,*.so*},lib{32,64}}
 
 .PHONY: build-with-newlib
 build-with-newlib: SRC/gcc
 	$(MAKE) -f $(THISMAKEFILE) sdkdirs
-	cp -f SRC/gcc/COPYING* $(DESTDIR)$(PREFIX)
+	cp -f SRC/gcc/src/COPYING* $(DESTDIR)$(PREFIX)
 	$(MAKE) -f $(THISMAKEFILE) BUILD/stamp-$(CROSSARCH)-binutils
 	$(MAKE) -f $(THISMAKEFILE) BUILD/stamp-$(CROSSARCH)-pregcc
 	$(MAKE) -f $(THISMAKEFILE) export-headers
@@ -986,7 +1068,7 @@ buildbot-build-with-newlib: | \
 # because these are not changed from upstream.
 BINUTILS_PATCHNAME := naclbinutils-$(BINUTILS_VERSION)-r$(shell $(SVNVERSION) | tr : _)
 GCC_PATCHNAME := naclgcc-$(GCC_VERSION)-r$(shell $(SVNVERSION) | tr : _)
-#GDB_PATCHNAME := naclgdb-$(GDB_VERSION)-r$(shell $(SVNVERSION) | tr : _)
+GDB_PATCHNAME := naclgdb-$(GDB_VERSION)-r$(shell $(SVNVERSION) | tr : _)
 GLIBC_PATCHNAME := naclglibc-$(GLIBC_VERSION)-r$(shell $(SVNVERSION) | tr : _)
 NEWLIB_PATCHNAME := naclnewlib-$(NEWLIB_VERSION)-r$(shell $(SVNVERSION) | tr : _)
 
@@ -1102,10 +1184,10 @@ glibc-check32: $(SEL_LDR)
 .PHONY: nacl-check
 nacl-check:
 	(cd .. && \
-	  ./$(SCONS) -k \
-	    $(SCONS_DESTINATIONS_NOLIB) \
-	    --mode=opt-host,nacl platform=x86-$(BITSPLATFORM) \
-	    --nacl_glibc --verbose small_tests)
+		./$(SCONS) -k \
+			$(SCONS_DESTINATIONS_NOLIB) \
+			--mode=opt-host,nacl platform=x86-$(BITSPLATFORM) \
+			--nacl_glibc --verbose small_tests)
 
 
 ##################################################################
