<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>intel_pmu_enable_all (62 samples, 15.62%)</title><rect x="78.4" y="69" width="184.2" height="15.0" fill="rgb(247,139,32)" rx="2" ry="2" />
<text  x="81.36" y="79.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>sock_poll (1 samples, 0.25%)</title><rect x="277.5" y="293" width="3.0" height="15.0" fill="rgb(240,203,49)" rx="2" ry="2" />
<text  x="280.51" y="303.5" ></text>
</g>
<g >
<title>__page_cache_release (1 samples, 0.25%)</title><rect x="1074.1" y="149" width="3.0" height="15.0" fill="rgb(239,220,49)" rx="2" ry="2" />
<text  x="1077.08" y="159.5" ></text>
</g>
<g >
<title>call_cpuidle (1 samples, 0.25%)</title><rect x="399.4" y="245" width="2.9" height="15.0" fill="rgb(234,29,39)" rx="2" ry="2" />
<text  x="402.37" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.50%)</title><rect x="60.5" y="357" width="6.0" height="15.0" fill="rgb(254,116,19)" rx="2" ry="2" />
<text  x="63.53" y="367.5" ></text>
</g>
<g >
<title>ctx_resched (62 samples, 15.62%)</title><rect x="78.4" y="101" width="184.2" height="15.0" fill="rgb(219,182,14)" rx="2" ry="2" />
<text  x="81.36" y="111.5" >ctx_resched</text>
</g>
<g >
<title>nmi_handle (1 samples, 0.25%)</title><rect x="253.7" y="37" width="3.0" height="15.0" fill="rgb(225,48,30)" rx="2" ry="2" />
<text  x="256.73" y="47.5" ></text>
</g>
<g >
<title>event_function (62 samples, 15.62%)</title><rect x="78.4" y="133" width="184.2" height="15.0" fill="rgb(218,35,23)" rx="2" ry="2" />
<text  x="81.36" y="143.5" >event_function</text>
</g>
<g >
<title>trace_ignore_this_task (1 samples, 0.25%)</title><rect x="393.4" y="261" width="3.0" height="15.0" fill="rgb(212,3,19)" rx="2" ry="2" />
<text  x="396.43" y="271.5" ></text>
</g>
<g >
<title>[cat] (17 samples, 4.28%)</title><rect x="10.0" y="309" width="50.5" height="15.0" fill="rgb(238,108,52)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >[cat]</text>
</g>
<g >
<title>do_syscall_64 (62 samples, 15.62%)</title><rect x="78.4" y="293" width="184.2" height="15.0" fill="rgb(246,68,16)" rx="2" ry="2" />
<text  x="81.36" y="303.5" >do_syscall_64</text>
</g>
<g >
<title>load_new_mm_cr3 (2 samples, 0.50%)</title><rect x="60.5" y="149" width="6.0" height="15.0" fill="rgb(212,32,4)" rx="2" ry="2" />
<text  x="63.53" y="159.5" ></text>
</g>
<g >
<title>__pollwait (1 samples, 0.25%)</title><rect x="277.5" y="245" width="3.0" height="15.0" fill="rgb(236,201,9)" rx="2" ry="2" />
<text  x="280.51" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.50%)</title><rect x="60.5" y="341" width="6.0" height="15.0" fill="rgb(248,125,52)" rx="2" ry="2" />
<text  x="63.53" y="351.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="277.5" y="213" width="3.0" height="15.0" fill="rgb(233,32,19)" rx="2" ry="2" />
<text  x="280.51" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (62 samples, 15.62%)</title><rect x="78.4" y="309" width="184.2" height="15.0" fill="rgb(207,134,30)" rx="2" ry="2" />
<text  x="81.36" y="319.5" >entry_SYSCALL_64_after_h..</text>
</g>
<g >
<title>sys_read (9 samples, 2.27%)</title><rect x="1065.2" y="261" width="26.7" height="15.0" fill="rgb(227,17,52)" rx="2" ry="2" />
<text  x="1068.16" y="271.5" >s..</text>
</g>
<g >
<title>__vfs_write (8 samples, 2.02%)</title><rect x="10.0" y="197" width="23.8" height="15.0" fill="rgb(209,174,16)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >_..</text>
</g>
<g >
<title>cpuidle_enter (1 samples, 0.25%)</title><rect x="399.4" y="229" width="2.9" height="15.0" fill="rgb(216,84,30)" rx="2" ry="2" />
<text  x="402.37" y="239.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2 samples, 0.50%)</title><rect x="1083.0" y="165" width="5.9" height="15.0" fill="rgb(235,156,37)" rx="2" ry="2" />
<text  x="1086.00" y="175.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (62 samples, 15.62%)</title><rect x="78.4" y="53" width="184.2" height="15.0" fill="rgb(241,105,54)" rx="2" ry="2" />
<text  x="81.36" y="63.5" >__intel_pmu_enable_all.c..</text>
</g>
<g >
<title>__sched_text_start (4 samples, 1.01%)</title><rect x="384.5" y="277" width="11.9" height="15.0" fill="rgb(218,74,48)" rx="2" ry="2" />
<text  x="387.51" y="287.5" ></text>
</g>
<g >
<title>[wc] (252 samples, 63.48%)</title><rect x="402.3" y="341" width="749.1" height="15.0" fill="rgb(225,82,3)" rx="2" ry="2" />
<text  x="405.34" y="351.5" >[wc]</text>
</g>
<g >
<title>__GI_mbrtowc (12 samples, 3.02%)</title><rect x="1094.9" y="309" width="35.7" height="15.0" fill="rgb(218,167,38)" rx="2" ry="2" />
<text  x="1097.89" y="319.5" >__G..</text>
</g>
<g >
<title>cpu_startup_entry (1 samples, 0.25%)</title><rect x="399.4" y="277" width="2.9" height="15.0" fill="rgb(230,108,14)" rx="2" ry="2" />
<text  x="402.37" y="287.5" ></text>
</g>
<g >
<title>__gconv_transform_utf8_internal (3 samples, 0.76%)</title><rect x="1121.6" y="293" width="9.0" height="15.0" fill="rgb(224,173,1)" rx="2" ry="2" />
<text  x="1124.64" y="303.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.50%)</title><rect x="60.5" y="229" width="6.0" height="15.0" fill="rgb(252,138,27)" rx="2" ry="2" />
<text  x="63.53" y="239.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (1 samples, 0.25%)</title><rect x="399.4" y="325" width="2.9" height="15.0" fill="rgb(238,49,30)" rx="2" ry="2" />
<text  x="402.37" y="335.5" ></text>
</g>
<g >
<title>cpuidle_select (1 samples, 0.25%)</title><rect x="381.5" y="293" width="3.0" height="15.0" fill="rgb(227,82,6)" rx="2" ry="2" />
<text  x="384.54" y="303.5" ></text>
</g>
<g >
<title>perf_event_task_tick (1 samples, 0.25%)</title><rect x="280.5" y="117" width="3.0" height="15.0" fill="rgb(211,132,48)" rx="2" ry="2" />
<text  x="283.48" y="127.5" ></text>
</g>
<g >
<title>default_do_nmi (2 samples, 0.50%)</title><rect x="78.4" y="37" width="5.9" height="15.0" fill="rgb(227,106,48)" rx="2" ry="2" />
<text  x="81.36" y="47.5" ></text>
</g>
<g >
<title>__next_timer_interrupt (1 samples, 0.25%)</title><rect x="396.4" y="245" width="3.0" height="15.0" fill="rgb(227,47,35)" rx="2" ry="2" />
<text  x="399.40" y="255.5" ></text>
</g>
<g >
<title>vfs_read (9 samples, 2.27%)</title><rect x="33.8" y="229" width="26.7" height="15.0" fill="rgb(212,84,16)" rx="2" ry="2" />
<text  x="36.78" y="239.5" >v..</text>
</g>
<g >
<title>syscall_return_via_sysret (1 samples, 0.25%)</title><rect x="1091.9" y="293" width="3.0" height="15.0" fill="rgb(227,74,53)" rx="2" ry="2" />
<text  x="1094.91" y="303.5" ></text>
</g>
<g >
<title>switch_mm (2 samples, 0.50%)</title><rect x="60.5" y="181" width="6.0" height="15.0" fill="rgb(252,56,29)" rx="2" ry="2" />
<text  x="63.53" y="191.5" ></text>
</g>
<g >
<title>_perf_event_enable (62 samples, 15.62%)</title><rect x="78.4" y="213" width="184.2" height="15.0" fill="rgb(233,224,22)" rx="2" ry="2" />
<text  x="81.36" y="223.5" >_perf_event_enable</text>
</g>
<g >
<title>cat (19 samples, 4.79%)</title><rect x="10.0" y="373" width="56.5" height="15.0" fill="rgb(247,69,50)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >cat</text>
</g>
<g >
<title>new_sync_write (2 samples, 0.50%)</title><rect x="60.5" y="277" width="6.0" height="15.0" fill="rgb(209,124,28)" rx="2" ry="2" />
<text  x="63.53" y="287.5" ></text>
</g>
<g >
<title>menu_select (1 samples, 0.25%)</title><rect x="381.5" y="277" width="3.0" height="15.0" fill="rgb(242,120,43)" rx="2" ry="2" />
<text  x="384.54" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.25%)</title><rect x="277.5" y="357" width="3.0" height="15.0" fill="rgb(246,185,40)" rx="2" ry="2" />
<text  x="280.51" y="367.5" ></text>
</g>
<g >
<title>udp_poll (1 samples, 0.25%)</title><rect x="277.5" y="277" width="3.0" height="15.0" fill="rgb(211,156,26)" rx="2" ry="2" />
<text  x="280.51" y="287.5" ></text>
</g>
<g >
<title>__vfs_write (2 samples, 0.50%)</title><rect x="60.5" y="293" width="6.0" height="15.0" fill="rgb(215,79,32)" rx="2" ry="2" />
<text  x="63.53" y="303.5" ></text>
</g>
<g >
<title>wc (265 samples, 66.75%)</title><rect x="402.3" y="373" width="787.7" height="15.0" fill="rgb(224,212,1)" rx="2" ry="2" />
<text  x="405.34" y="383.5" >wc</text>
</g>
<g >
<title>new_sync_read (9 samples, 2.27%)</title><rect x="1065.2" y="213" width="26.7" height="15.0" fill="rgb(232,130,18)" rx="2" ry="2" />
<text  x="1068.16" y="223.5" >n..</text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.25%)</title><rect x="280.5" y="165" width="3.0" height="15.0" fill="rgb(209,118,45)" rx="2" ry="2" />
<text  x="283.48" y="175.5" ></text>
</g>
<g >
<title>[cat] (17 samples, 4.28%)</title><rect x="10.0" y="357" width="50.5" height="15.0" fill="rgb(224,133,38)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >[cat]</text>
</g>
<g >
<title>sys_read (9 samples, 2.27%)</title><rect x="33.8" y="245" width="26.7" height="15.0" fill="rgb(224,54,31)" rx="2" ry="2" />
<text  x="36.78" y="255.5" >s..</text>
</g>
<g >
<title>__mod_zone_page_state (1 samples, 0.25%)</title><rect x="1077.1" y="101" width="2.9" height="15.0" fill="rgb(227,218,15)" rx="2" ry="2" />
<text  x="1080.05" y="111.5" ></text>
</g>
<g >
<title>vfs_read (9 samples, 2.27%)</title><rect x="1065.2" y="245" width="26.7" height="15.0" fill="rgb(234,13,24)" rx="2" ry="2" />
<text  x="1068.16" y="255.5" >v..</text>
</g>
<g >
<title>do_syscall_64 (8 samples, 2.02%)</title><rect x="10.0" y="245" width="23.8" height="15.0" fill="rgb(225,101,39)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >d..</text>
</g>
<g >
<title>__vfs_read (9 samples, 2.27%)</title><rect x="33.8" y="213" width="26.7" height="15.0" fill="rgb(220,214,51)" rx="2" ry="2" />
<text  x="36.78" y="223.5" >_..</text>
</g>
<g >
<title>swapper (47 samples, 11.84%)</title><rect x="262.6" y="373" width="139.7" height="15.0" fill="rgb(238,166,44)" rx="2" ry="2" />
<text  x="265.64" y="383.5" >swapper</text>
</g>
<g >
<title>alloc_pages_current (5 samples, 1.26%)</title><rect x="10.0" y="149" width="14.9" height="15.0" fill="rgb(213,207,26)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>irq_enter (1 samples, 0.25%)</title><rect x="283.5" y="213" width="2.9" height="15.0" fill="rgb(233,24,31)" rx="2" ry="2" />
<text  x="286.45" y="223.5" ></text>
</g>
<g >
<title>find_get_entry (1 samples, 0.25%)</title><rect x="57.6" y="133" width="2.9" height="15.0" fill="rgb(229,175,11)" rx="2" ry="2" />
<text  x="60.56" y="143.5" ></text>
</g>
<g >
<title>enqueue_task_fair (1 samples, 0.25%)</title><rect x="1065.2" y="53" width="2.9" height="15.0" fill="rgb(211,1,21)" rx="2" ry="2" />
<text  x="1068.16" y="63.5" ></text>
</g>
<g >
<title>do_syscall_64 (9 samples, 2.27%)</title><rect x="1065.2" y="277" width="26.7" height="15.0" fill="rgb(236,40,48)" rx="2" ry="2" />
<text  x="1068.16" y="287.5" >d..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.25%)</title><rect x="75.4" y="277" width="3.0" height="15.0" fill="rgb(245,222,31)" rx="2" ry="2" />
<text  x="78.39" y="287.5" ></text>
</g>
<g >
<title>nr_iowait_cpu (1 samples, 0.25%)</title><rect x="283.5" y="181" width="2.9" height="15.0" fill="rgb(248,120,42)" rx="2" ry="2" />
<text  x="286.45" y="191.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.50%)</title><rect x="1065.2" y="101" width="5.9" height="15.0" fill="rgb(217,124,47)" rx="2" ry="2" />
<text  x="1068.16" y="111.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.25%)</title><rect x="30.8" y="117" width="3.0" height="15.0" fill="rgb(249,11,7)" rx="2" ry="2" />
<text  x="33.81" y="127.5" ></text>
</g>
<g >
<title>__ctype_b_loc (6 samples, 1.51%)</title><rect x="1130.6" y="325" width="17.8" height="15.0" fill="rgb(219,160,19)" rx="2" ry="2" />
<text  x="1133.55" y="335.5" ></text>
</g>
<g >
<title>copy_page_from_iter (2 samples, 0.50%)</title><rect x="24.9" y="149" width="5.9" height="15.0" fill="rgb(234,201,15)" rx="2" ry="2" />
<text  x="27.86" y="159.5" ></text>
</g>
<g >
<title>pipe_write (8 samples, 2.02%)</title><rect x="10.0" y="165" width="23.8" height="15.0" fill="rgb(222,111,23)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >p..</text>
</g>
<g >
<title>autoremove_wake_function (2 samples, 0.50%)</title><rect x="1065.2" y="133" width="5.9" height="15.0" fill="rgb(235,170,51)" rx="2" ry="2" />
<text  x="1068.16" y="143.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.25%)</title><rect x="1077.1" y="117" width="2.9" height="15.0" fill="rgb(213,10,9)" rx="2" ry="2" />
<text  x="1080.05" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (9 samples, 2.27%)</title><rect x="33.8" y="261" width="26.7" height="15.0" fill="rgb(247,176,6)" rx="2" ry="2" />
<text  x="36.78" y="271.5" >d..</text>
</g>
<g >
<title>smp_call_function_single (62 samples, 15.62%)</title><rect x="78.4" y="181" width="184.2" height="15.0" fill="rgb(228,213,3)" rx="2" ry="2" />
<text  x="81.36" y="191.5" >smp_call_function_single</text>
</g>
<g >
<title>do_idle (1 samples, 0.25%)</title><rect x="399.4" y="261" width="2.9" height="15.0" fill="rgb(233,217,17)" rx="2" ry="2" />
<text  x="402.37" y="271.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (62 samples, 15.62%)</title><rect x="78.4" y="229" width="184.2" height="15.0" fill="rgb(239,192,51)" rx="2" ry="2" />
<text  x="81.36" y="239.5" >perf_event_for_each_child</text>
</g>
<g >
<title>vfs_write (8 samples, 2.02%)</title><rect x="10.0" y="213" width="23.8" height="15.0" fill="rgb(238,28,21)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >v..</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (7 samples, 1.76%)</title><rect x="36.8" y="133" width="20.8" height="15.0" fill="rgb(222,130,1)" rx="2" ry="2" />
<text  x="39.75" y="143.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.25%)</title><rect x="280.5" y="197" width="3.0" height="15.0" fill="rgb(215,181,21)" rx="2" ry="2" />
<text  x="283.48" y="207.5" ></text>
</g>
<g >
<title>__put_page (2 samples, 0.50%)</title><rect x="1074.1" y="165" width="5.9" height="15.0" fill="rgb(221,51,45)" rx="2" ry="2" />
<text  x="1077.08" y="175.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.25%)</title><rect x="280.5" y="213" width="3.0" height="15.0" fill="rgb(249,113,8)" rx="2" ry="2" />
<text  x="283.48" y="223.5" ></text>
</g>
<g >
<title>add_wait_queue (1 samples, 0.25%)</title><rect x="277.5" y="229" width="3.0" height="15.0" fill="rgb(206,203,5)" rx="2" ry="2" />
<text  x="280.51" y="239.5" ></text>
</g>
<g >
<title>__GI_mbrtowc (3 samples, 0.76%)</title><rect x="1151.4" y="341" width="8.9" height="15.0" fill="rgb(234,67,6)" rx="2" ry="2" />
<text  x="1154.36" y="351.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.25%)</title><rect x="259.7" y="37" width="2.9" height="15.0" fill="rgb(250,132,1)" rx="2" ry="2" />
<text  x="262.67" y="47.5" ></text>
</g>
<g >
<title>mutex_lock (1 samples, 0.25%)</title><rect x="30.8" y="133" width="3.0" height="15.0" fill="rgb(208,138,3)" rx="2" ry="2" />
<text  x="33.81" y="143.5" ></text>
</g>
<g >
<title>page_counter_try_charge (2 samples, 0.50%)</title><rect x="18.9" y="85" width="6.0" height="15.0" fill="rgb(231,77,11)" rx="2" ry="2" />
<text  x="21.92" y="95.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (1 samples, 0.25%)</title><rect x="15.9" y="101" width="3.0" height="15.0" fill="rgb(205,189,30)" rx="2" ry="2" />
<text  x="18.94" y="111.5" ></text>
</g>
<g >
<title>start_kernel (1 samples, 0.25%)</title><rect x="399.4" y="309" width="2.9" height="15.0" fill="rgb(243,147,9)" rx="2" ry="2" />
<text  x="402.37" y="319.5" ></text>
</g>
<g >
<title>__ctype_b_loc (9 samples, 2.27%)</title><rect x="1160.3" y="341" width="26.7" height="15.0" fill="rgb(240,20,22)" rx="2" ry="2" />
<text  x="1163.28" y="351.5" >_..</text>
</g>
<g >
<title>secondary_startup_64 (41 samples, 10.33%)</title><rect x="280.5" y="357" width="121.8" height="15.0" fill="rgb(211,36,47)" rx="2" ry="2" />
<text  x="283.48" y="367.5" >secondary_start..</text>
</g>
<g >
<title>get_next_timer_interrupt (1 samples, 0.25%)</title><rect x="396.4" y="261" width="3.0" height="15.0" fill="rgb(208,219,15)" rx="2" ry="2" />
<text  x="399.40" y="271.5" ></text>
</g>
<g >
<title>start_secondary (40 samples, 10.08%)</title><rect x="280.5" y="341" width="118.9" height="15.0" fill="rgb(230,88,49)" rx="2" ry="2" />
<text  x="283.48" y="351.5" >start_secondary</text>
</g>
<g >
<title>__wake_up_common (2 samples, 0.50%)</title><rect x="1065.2" y="149" width="5.9" height="15.0" fill="rgb(205,225,47)" rx="2" ry="2" />
<text  x="1068.16" y="159.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (3 samples, 0.76%)</title><rect x="1071.1" y="181" width="8.9" height="15.0" fill="rgb(228,11,47)" rx="2" ry="2" />
<text  x="1074.11" y="191.5" ></text>
</g>
<g >
<title>switch_mm_irqs_off (2 samples, 0.50%)</title><rect x="60.5" y="165" width="6.0" height="15.0" fill="rgb(249,14,41)" rx="2" ry="2" />
<text  x="63.53" y="175.5" ></text>
</g>
<g >
<title>[cat] (8 samples, 2.02%)</title><rect x="10.0" y="293" width="23.8" height="15.0" fill="rgb(218,74,22)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >[..</text>
</g>
<g >
<title>__GI___libc_write (8 samples, 2.02%)</title><rect x="10.0" y="277" width="23.8" height="15.0" fill="rgb(249,179,10)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >_..</text>
</g>
<g >
<title>native_sched_clock (6 samples, 1.51%)</title><rect x="84.3" y="37" width="17.8" height="15.0" fill="rgb(215,110,20)" rx="2" ry="2" />
<text  x="87.31" y="47.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (2 samples, 0.50%)</title><rect x="1065.2" y="165" width="5.9" height="15.0" fill="rgb(244,143,30)" rx="2" ry="2" />
<text  x="1068.16" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (9 samples, 2.27%)</title><rect x="1065.2" y="293" width="26.7" height="15.0" fill="rgb(207,142,34)" rx="2" ry="2" />
<text  x="1068.16" y="303.5" >e..</text>
</g>
<g >
<title>ttwu_do_activate (1 samples, 0.25%)</title><rect x="1065.2" y="85" width="2.9" height="15.0" fill="rgb(238,41,50)" rx="2" ry="2" />
<text  x="1068.16" y="95.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (9 samples, 2.27%)</title><rect x="33.8" y="181" width="26.7" height="15.0" fill="rgb(228,131,32)" rx="2" ry="2" />
<text  x="36.78" y="191.5" >e..</text>
</g>
<g >
<title>perf_ioctl (62 samples, 15.62%)</title><rect x="78.4" y="245" width="184.2" height="15.0" fill="rgb(218,130,24)" rx="2" ry="2" />
<text  x="81.36" y="255.5" >perf_ioctl</text>
</g>
<g >
<title>perf_evsel__run_ioctl (62 samples, 15.62%)</title><rect x="78.4" y="341" width="184.2" height="15.0" fill="rgb(231,0,16)" rx="2" ry="2" />
<text  x="81.36" y="351.5" >perf_evsel__run_ioctl</text>
</g>
<g >
<title>cpuidle_enter_state (1 samples, 0.25%)</title><rect x="399.4" y="213" width="2.9" height="15.0" fill="rgb(226,45,48)" rx="2" ry="2" />
<text  x="402.37" y="223.5" ></text>
</g>
<g >
<title>[cat] (17 samples, 4.28%)</title><rect x="10.0" y="325" width="50.5" height="15.0" fill="rgb(235,40,11)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >[cat]</text>
</g>
<g >
<title>__GI___read (10 samples, 2.52%)</title><rect x="1065.2" y="309" width="29.7" height="15.0" fill="rgb(227,190,19)" rx="2" ry="2" />
<text  x="1068.16" y="319.5" >__..</text>
</g>
<g >
<title>copy_page_to_iter (3 samples, 0.76%)</title><rect x="1080.0" y="181" width="8.9" height="15.0" fill="rgb(236,229,40)" rx="2" ry="2" />
<text  x="1083.03" y="191.5" ></text>
</g>
<g >
<title>enter_lazy_tlb (2 samples, 0.50%)</title><rect x="60.5" y="197" width="6.0" height="15.0" fill="rgb(219,34,19)" rx="2" ry="2" />
<text  x="63.53" y="207.5" ></text>
</g>
<g >
<title>pipe_read (9 samples, 2.27%)</title><rect x="1065.2" y="197" width="26.7" height="15.0" fill="rgb(224,135,42)" rx="2" ry="2" />
<text  x="1068.16" y="207.5" >p..</text>
</g>
<g >
<title>perf_evsel__enable_cpu (62 samples, 15.62%)</title><rect x="78.4" y="357" width="184.2" height="15.0" fill="rgb(218,3,54)" rx="2" ry="2" />
<text  x="81.36" y="367.5" >perf_evsel__enable_cpu</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 2.02%)</title><rect x="10.0" y="261" width="23.8" height="15.0" fill="rgb(253,146,37)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >e..</text>
</g>
<g >
<title>sys_write (8 samples, 2.02%)</title><rect x="10.0" y="229" width="23.8" height="15.0" fill="rgb(225,201,5)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >s..</text>
</g>
<g >
<title>[wc] (22 samples, 5.54%)</title><rect x="1065.2" y="325" width="65.4" height="15.0" fill="rgb(215,74,46)" rx="2" ry="2" />
<text  x="1068.16" y="335.5" >[wc]</text>
</g>
<g >
<title>do_sys_poll (1 samples, 0.25%)</title><rect x="277.5" y="309" width="3.0" height="15.0" fill="rgb(226,103,31)" rx="2" ry="2" />
<text  x="280.51" y="319.5" ></text>
</g>
<g >
<title>event_function_call (62 samples, 15.62%)</title><rect x="78.4" y="197" width="184.2" height="15.0" fill="rgb(248,3,13)" rx="2" ry="2" />
<text  x="81.36" y="207.5" >event_function_call</text>
</g>
<g >
<title>__wake_up_sync_key (2 samples, 0.50%)</title><rect x="1065.2" y="181" width="5.9" height="15.0" fill="rgb(206,191,32)" rx="2" ry="2" />
<text  x="1068.16" y="191.5" ></text>
</g>
<g >
<title>memcg_kmem_charge (3 samples, 0.76%)</title><rect x="15.9" y="117" width="9.0" height="15.0" fill="rgb(215,172,52)" rx="2" ry="2" />
<text  x="18.94" y="127.5" ></text>
</g>
<g >
<title>[perf] (1 samples, 0.25%)</title><rect x="72.4" y="309" width="3.0" height="15.0" fill="rgb(217,212,7)" rx="2" ry="2" />
<text  x="75.42" y="319.5" ></text>
</g>
<g >
<title>__libc_start_main (17 samples, 4.28%)</title><rect x="10.0" y="341" width="50.5" height="15.0" fill="rgb(228,173,32)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >__lib..</text>
</g>
<g >
<title>datagram_poll (1 samples, 0.25%)</title><rect x="277.5" y="261" width="3.0" height="15.0" fill="rgb(221,103,30)" rx="2" ry="2" />
<text  x="280.51" y="271.5" ></text>
</g>
<g >
<title>do_vfs_ioctl (62 samples, 15.62%)</title><rect x="78.4" y="261" width="184.2" height="15.0" fill="rgb(248,185,3)" rx="2" ry="2" />
<text  x="81.36" y="271.5" >do_vfs_ioctl</text>
</g>
<g >
<title>__cmd_record (1 samples, 0.25%)</title><rect x="72.4" y="325" width="3.0" height="15.0" fill="rgb(225,72,44)" rx="2" ry="2" />
<text  x="75.42" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.25%)</title><rect x="277.5" y="341" width="3.0" height="15.0" fill="rgb(247,63,37)" rx="2" ry="2" />
<text  x="280.51" y="351.5" ></text>
</g>
<g >
<title>filemap_map_pages (1 samples, 0.25%)</title><rect x="75.4" y="245" width="3.0" height="15.0" fill="rgb(216,92,41)" rx="2" ry="2" />
<text  x="78.39" y="255.5" ></text>
</g>
<g >
<title>call_cpuidle (34 samples, 8.56%)</title><rect x="280.5" y="293" width="101.0" height="15.0" fill="rgb(233,36,19)" rx="2" ry="2" />
<text  x="283.48" y="303.5" >call_cpuidle</text>
</g>
<g >
<title>vfs_write (2 samples, 0.50%)</title><rect x="60.5" y="309" width="6.0" height="15.0" fill="rgb(227,128,13)" rx="2" ry="2" />
<text  x="63.53" y="319.5" ></text>
</g>
<g >
<title>__vfs_read (9 samples, 2.27%)</title><rect x="1065.2" y="229" width="26.7" height="15.0" fill="rgb(224,191,0)" rx="2" ry="2" />
<text  x="1068.16" y="239.5" >_..</text>
</g>
<g >
<title>intel_idle (1 samples, 0.25%)</title><rect x="399.4" y="197" width="2.9" height="15.0" fill="rgb(205,225,50)" rx="2" ry="2" />
<text  x="402.37" y="207.5" ></text>
</g>
<g >
<title>nmi_cpu_backtrace_handler (2 samples, 0.50%)</title><rect x="247.8" y="37" width="5.9" height="15.0" fill="rgb(241,188,5)" rx="2" ry="2" />
<text  x="250.78" y="47.5" ></text>
</g>
<g >
<title>perf (66 samples, 16.62%)</title><rect x="66.5" y="373" width="196.1" height="15.0" fill="rgb(219,207,35)" rx="2" ry="2" />
<text  x="69.47" y="383.5" >perf</text>
</g>
<g >
<title>__gconv_transform_utf8_internal (1 samples, 0.25%)</title><rect x="1187.0" y="341" width="3.0" height="15.0" fill="rgb(224,104,21)" rx="2" ry="2" />
<text  x="1190.03" y="351.5" ></text>
</g>
<g >
<title>sys_poll (1 samples, 0.25%)</title><rect x="277.5" y="325" width="3.0" height="15.0" fill="rgb(230,114,24)" rx="2" ry="2" />
<text  x="280.51" y="335.5" ></text>
</g>
<g >
<title>native_write_cr2 (1 samples, 0.25%)</title><rect x="102.1" y="37" width="3.0" height="15.0" fill="rgb(252,150,23)" rx="2" ry="2" />
<text  x="105.14" y="47.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.25%)</title><rect x="75.4" y="293" width="3.0" height="15.0" fill="rgb(205,40,24)" rx="2" ry="2" />
<text  x="78.39" y="303.5" ></text>
</g>
<g >
<title>native_write_msr (46 samples, 11.59%)</title><rect x="105.1" y="37" width="136.7" height="15.0" fill="rgb(233,199,54)" rx="2" ry="2" />
<text  x="108.11" y="47.5" >native_write_msr</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2 samples, 0.50%)</title><rect x="24.9" y="133" width="5.9" height="15.0" fill="rgb(217,8,50)" rx="2" ry="2" />
<text  x="27.86" y="143.5" ></text>
</g>
<g >
<title>generic_exec_single (62 samples, 15.62%)</title><rect x="78.4" y="165" width="184.2" height="15.0" fill="rgb(237,39,48)" rx="2" ry="2" />
<text  x="81.36" y="175.5" >generic_exec_single</text>
</g>
<g >
<title>cpu_startup_entry (40 samples, 10.08%)</title><rect x="280.5" y="325" width="118.9" height="15.0" fill="rgb(244,48,46)" rx="2" ry="2" />
<text  x="283.48" y="335.5" >cpu_startup_en..</text>
</g>
<g >
<title>memcg_kmem_charge_memcg (2 samples, 0.50%)</title><rect x="18.9" y="101" width="6.0" height="15.0" fill="rgb(216,206,37)" rx="2" ry="2" />
<text  x="21.92" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (9 samples, 2.27%)</title><rect x="33.8" y="277" width="26.7" height="15.0" fill="rgb(245,10,7)" rx="2" ry="2" />
<text  x="36.78" y="287.5" >e..</text>
</g>
<g >
<title>free_unref_page (1 samples, 0.25%)</title><rect x="1077.1" y="149" width="2.9" height="15.0" fill="rgb(223,117,43)" rx="2" ry="2" />
<text  x="1080.05" y="159.5" ></text>
</g>
<g >
<title>page_counter_uncharge (1 samples, 0.25%)</title><rect x="1074.1" y="117" width="3.0" height="15.0" fill="rgb(232,37,1)" rx="2" ry="2" />
<text  x="1077.08" y="127.5" ></text>
</g>
<g >
<title>__perf_event_enable (62 samples, 15.62%)</title><rect x="78.4" y="117" width="184.2" height="15.0" fill="rgb(227,178,50)" rx="2" ry="2" />
<text  x="81.36" y="127.5" >__perf_event_enable</text>
</g>
<g >
<title>all (397 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(222,172,51)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>do_idle (40 samples, 10.08%)</title><rect x="280.5" y="309" width="118.9" height="15.0" fill="rgb(210,130,11)" rx="2" ry="2" />
<text  x="283.48" y="319.5" >do_idle</text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.25%)</title><rect x="13.0" y="117" width="2.9" height="15.0" fill="rgb(219,118,16)" rx="2" ry="2" />
<text  x="15.97" y="127.5" ></text>
</g>
<g >
<title>copy_page_to_iter (8 samples, 2.02%)</title><rect x="33.8" y="149" width="23.8" height="15.0" fill="rgb(212,159,35)" rx="2" ry="2" />
<text  x="36.78" y="159.5" >c..</text>
</g>
<g >
<title>update_rq_clock (1 samples, 0.25%)</title><rect x="1068.1" y="85" width="3.0" height="15.0" fill="rgb(208,185,52)" rx="2" ry="2" />
<text  x="1071.14" y="95.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.50%)</title><rect x="280.5" y="245" width="5.9" height="15.0" fill="rgb(241,160,29)" rx="2" ry="2" />
<text  x="283.48" y="255.5" ></text>
</g>
<g >
<title>__tick_nohz_idle_enter (1 samples, 0.25%)</title><rect x="396.4" y="277" width="3.0" height="15.0" fill="rgb(232,125,8)" rx="2" ry="2" />
<text  x="399.40" y="287.5" ></text>
</g>
<g >
<title>tick_irq_enter (1 samples, 0.25%)</title><rect x="283.5" y="197" width="2.9" height="15.0" fill="rgb(213,59,0)" rx="2" ry="2" />
<text  x="286.45" y="207.5" ></text>
</g>
<g >
<title>new_sync_read (9 samples, 2.27%)</title><rect x="33.8" y="197" width="26.7" height="15.0" fill="rgb(252,10,21)" rx="2" ry="2" />
<text  x="36.78" y="207.5" >n..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.50%)</title><rect x="280.5" y="229" width="5.9" height="15.0" fill="rgb(214,158,13)" rx="2" ry="2" />
<text  x="283.48" y="239.5" ></text>
</g>
<g >
<title>nmi_restore (1 samples, 0.25%)</title><rect x="256.7" y="37" width="3.0" height="15.0" fill="rgb(219,64,20)" rx="2" ry="2" />
<text  x="259.70" y="47.5" ></text>
</g>
<g >
<title>pipe_wait (1 samples, 0.25%)</title><rect x="30.8" y="149" width="3.0" height="15.0" fill="rgb(237,144,8)" rx="2" ry="2" />
<text  x="33.81" y="159.5" ></text>
</g>
<g >
<title>rest_init (1 samples, 0.25%)</title><rect x="399.4" y="293" width="2.9" height="15.0" fill="rgb(245,165,51)" rx="2" ry="2" />
<text  x="402.37" y="303.5" ></text>
</g>
<g >
<title>pagecache_get_page (1 samples, 0.25%)</title><rect x="57.6" y="149" width="2.9" height="15.0" fill="rgb(213,186,39)" rx="2" ry="2" />
<text  x="60.56" y="159.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.25%)</title><rect x="280.5" y="149" width="3.0" height="15.0" fill="rgb(250,119,31)" rx="2" ry="2" />
<text  x="283.48" y="159.5" ></text>
</g>
<g >
<title>mutex_lock (1 samples, 0.25%)</title><rect x="1088.9" y="181" width="3.0" height="15.0" fill="rgb(208,108,3)" rx="2" ry="2" />
<text  x="1091.94" y="191.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.25%)</title><rect x="280.5" y="181" width="3.0" height="15.0" fill="rgb(235,223,2)" rx="2" ry="2" />
<text  x="283.48" y="191.5" ></text>
</g>
<g >
<title>cmd_record (1 samples, 0.25%)</title><rect x="72.4" y="341" width="3.0" height="15.0" fill="rgb(213,52,13)" rx="2" ry="2" />
<text  x="75.42" y="351.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.25%)</title><rect x="75.4" y="309" width="3.0" height="15.0" fill="rgb(250,156,18)" rx="2" ry="2" />
<text  x="78.39" y="319.5" ></text>
</g>
<g >
<title>sys_ioctl (62 samples, 15.62%)</title><rect x="78.4" y="277" width="184.2" height="15.0" fill="rgb(222,89,53)" rx="2" ry="2" />
<text  x="81.36" y="287.5" >sys_ioctl</text>
</g>
<g >
<title>generic_file_read_iter (9 samples, 2.27%)</title><rect x="33.8" y="165" width="26.7" height="15.0" fill="rgb(251,108,11)" rx="2" ry="2" />
<text  x="36.78" y="175.5" >g..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.25%)</title><rect x="75.4" y="261" width="3.0" height="15.0" fill="rgb(245,9,20)" rx="2" ry="2" />
<text  x="78.39" y="271.5" ></text>
</g>
<g >
<title>activate_task (1 samples, 0.25%)</title><rect x="1065.2" y="69" width="2.9" height="15.0" fill="rgb(234,47,35)" rx="2" ry="2" />
<text  x="1068.16" y="79.5" ></text>
</g>
<g >
<title>schedule_idle (4 samples, 1.01%)</title><rect x="384.5" y="293" width="11.9" height="15.0" fill="rgb(246,5,29)" rx="2" ry="2" />
<text  x="387.51" y="303.5" ></text>
</g>
<g >
<title>remote_function (62 samples, 15.62%)</title><rect x="78.4" y="149" width="184.2" height="15.0" fill="rgb(214,201,0)" rx="2" ry="2" />
<text  x="81.36" y="159.5" >remote_function</text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.25%)</title><rect x="1077.1" y="133" width="2.9" height="15.0" fill="rgb(250,114,48)" rx="2" ry="2" />
<text  x="1080.05" y="143.5" ></text>
</g>
<g >
<title>__strchr_avx2 (1 samples, 0.25%)</title><rect x="75.4" y="341" width="3.0" height="15.0" fill="rgb(239,22,34)" rx="2" ry="2" />
<text  x="78.39" y="351.5" ></text>
</g>
<g >
<title>intel_pmu_disable_all (1 samples, 0.25%)</title><rect x="280.5" y="101" width="3.0" height="15.0" fill="rgb(225,37,36)" rx="2" ry="2" />
<text  x="283.48" y="111.5" ></text>
</g>
<g >
<title>default_wake_function (2 samples, 0.50%)</title><rect x="1065.2" y="117" width="5.9" height="15.0" fill="rgb(237,139,11)" rx="2" ry="2" />
<text  x="1068.16" y="127.5" ></text>
</g>
<g >
<title>__mbsinit (1 samples, 0.25%)</title><rect x="1148.4" y="325" width="3.0" height="15.0" fill="rgb(241,15,44)" rx="2" ry="2" />
<text  x="1151.39" y="335.5" ></text>
</g>
<g >
<title>__execvpe_common (1 samples, 0.25%)</title><rect x="75.4" y="357" width="3.0" height="15.0" fill="rgb(252,72,11)" rx="2" ry="2" />
<text  x="78.39" y="367.5" ></text>
</g>
<g >
<title>intel_idle (32 samples, 8.06%)</title><rect x="286.4" y="245" width="95.1" height="15.0" fill="rgb(232,168,33)" rx="2" ry="2" />
<text  x="289.42" y="255.5" >intel_idle</text>
</g>
<g >
<title>[unknown] (265 samples, 66.75%)</title><rect x="402.3" y="357" width="787.7" height="15.0" fill="rgb(236,176,14)" rx="2" ry="2" />
<text  x="405.34" y="367.5" >[unknown]</text>
</g>
<g >
<title>__GI___read (9 samples, 2.27%)</title><rect x="33.8" y="293" width="26.7" height="15.0" fill="rgb(254,48,0)" rx="2" ry="2" />
<text  x="36.78" y="303.5" >_..</text>
</g>
<g >
<title>__ioctl (62 samples, 15.62%)</title><rect x="78.4" y="325" width="184.2" height="15.0" fill="rgb(209,127,25)" rx="2" ry="2" />
<text  x="81.36" y="335.5" >__ioctl</text>
</g>
<g >
<title>nmi_cpu_backtrace (2 samples, 0.50%)</title><rect x="241.8" y="37" width="6.0" height="15.0" fill="rgb(221,206,41)" rx="2" ry="2" />
<text  x="244.84" y="47.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.25%)</title><rect x="75.4" y="325" width="3.0" height="15.0" fill="rgb(231,215,25)" rx="2" ry="2" />
<text  x="78.39" y="335.5" ></text>
</g>
<g >
<title>cpuidle_enter (34 samples, 8.56%)</title><rect x="280.5" y="277" width="101.0" height="15.0" fill="rgb(242,173,43)" rx="2" ry="2" />
<text  x="283.48" y="287.5" >cpuidle_enter</text>
</g>
<g >
<title>[unknown] (1 samples, 0.25%)</title><rect x="72.4" y="357" width="3.0" height="15.0" fill="rgb(241,89,14)" rx="2" ry="2" />
<text  x="75.42" y="367.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.25%)</title><rect x="280.5" y="133" width="3.0" height="15.0" fill="rgb(230,221,47)" rx="2" ry="2" />
<text  x="283.48" y="143.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (1 samples, 0.25%)</title><rect x="399.4" y="341" width="2.9" height="15.0" fill="rgb(221,38,50)" rx="2" ry="2" />
<text  x="402.37" y="351.5" ></text>
</g>
<g >
<title>tick_nohz_idle_enter (1 samples, 0.25%)</title><rect x="396.4" y="293" width="3.0" height="15.0" fill="rgb(205,31,46)" rx="2" ry="2" />
<text  x="399.40" y="303.5" ></text>
</g>
<g >
<title>x86_pmu_enable (62 samples, 15.62%)</title><rect x="78.4" y="85" width="184.2" height="15.0" fill="rgb(223,90,41)" rx="2" ry="2" />
<text  x="81.36" y="95.5" >x86_pmu_enable</text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 1.01%)</title><rect x="13.0" y="133" width="11.9" height="15.0" fill="rgb(232,131,12)" rx="2" ry="2" />
<text  x="15.97" y="143.5" ></text>
</g>
<g >
<title>__sched_text_start (2 samples, 0.50%)</title><rect x="60.5" y="213" width="6.0" height="15.0" fill="rgb(205,132,44)" rx="2" ry="2" />
<text  x="63.53" y="223.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (34 samples, 8.56%)</title><rect x="280.5" y="261" width="101.0" height="15.0" fill="rgb(229,202,17)" rx="2" ry="2" />
<text  x="283.48" y="271.5" >cpuidle_ente..</text>
</g>
<g >
<title>new_sync_write (8 samples, 2.02%)</title><rect x="10.0" y="181" width="23.8" height="15.0" fill="rgb(214,87,5)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >n..</text>
</g>
<g >
<title>pipe_write (2 samples, 0.50%)</title><rect x="60.5" y="261" width="6.0" height="15.0" fill="rgb(215,81,23)" rx="2" ry="2" />
<text  x="63.53" y="271.5" ></text>
</g>
<g >
<title>sys_write (2 samples, 0.50%)</title><rect x="60.5" y="325" width="6.0" height="15.0" fill="rgb(210,21,52)" rx="2" ry="2" />
<text  x="63.53" y="335.5" ></text>
</g>
<g >
<title>pipe_wait (2 samples, 0.50%)</title><rect x="60.5" y="245" width="6.0" height="15.0" fill="rgb(220,31,28)" rx="2" ry="2" />
<text  x="63.53" y="255.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge (1 samples, 0.25%)</title><rect x="1074.1" y="133" width="3.0" height="15.0" fill="rgb(221,162,26)" rx="2" ry="2" />
<text  x="1077.08" y="143.5" ></text>
</g>
</g>
</svg>
