<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>cpu_startup_entry (2,666,239,574 samples, 0.07%)</title><rect x="1188.3" y="341" width="0.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1191.26" y="351.5" ></text>
</g>
<g >
<title>cpu_startup_entry (444,883,404 samples, 0.01%)</title><rect x="11.1" y="341" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="14.12" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (348,933,229 samples, 0.01%)</title><rect x="1189.3" y="421" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.31" y="431.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1,732,597,110 samples, 0.05%)</title><rect x="1188.3" y="261" width="0.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1191.32" y="271.5" ></text>
</g>
<g >
<title>call_cpuidle (313,378,385 samples, 0.01%)</title><rect x="11.0" y="357" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="14.00" y="367.5" ></text>
</g>
<g >
<title>[sel_ldr] (416,668,433,148 samples, 11.67%)</title><rect x="1002.9" y="421" width="137.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1005.90" y="431.5" >[sel_ldr]</text>
</g>
<g >
<title>NaClRawUserStackAddrNormalize (4,053,462,669 samples, 0.11%)</title><rect x="1156.3" y="421" width="1.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1159.32" y="431.5" ></text>
</g>
<g >
<title>arch_call_rest_init (2,667,221,273 samples, 0.07%)</title><rect x="1188.3" y="373" width="0.8" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1191.26" y="383.5" ></text>
</g>
<g >
<title>perf_mmap__push (1,980,613,068 samples, 0.06%)</title><rect x="11.5" y="373" width="0.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="14.48" y="383.5" ></text>
</g>
<g >
<title>ret_from_fork_asm (1,258,897,651 samples, 0.04%)</title><rect x="1187.2" y="437" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1190.23" y="447.5" ></text>
</g>
<g >
<title>schedule (348,933,229 samples, 0.01%)</title><rect x="1189.3" y="325" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1192.31" y="335.5" ></text>
</g>
<g >
<title>[unknown] (2,149,630,325 samples, 0.06%)</title><rect x="11.4" y="437" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.43" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (309,678,381 samples, 0.01%)</title><rect x="610.3" y="261" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="613.34" y="271.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (1,306,562,455 samples, 0.04%)</title><rect x="1189.5" y="373" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1192.50" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,611,488,914 samples, 0.05%)</title><rect x="1186.7" y="437" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1189.69" y="447.5" ></text>
</g>
<g >
<title>CompareAndSwap (8,525,881,092 samples, 0.24%)</title><rect x="80.2" y="405" width="2.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="83.23" y="415.5" ></text>
</g>
<g >
<title>do_sys_poll (489,604,808 samples, 0.01%)</title><rect x="1186.9" y="389" width="0.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1189.89" y="399.5" ></text>
</g>
<g >
<title>kthread (1,258,897,651 samples, 0.04%)</title><rect x="1187.2" y="405" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1190.23" y="415.5" ></text>
</g>
<g >
<title>NaClCopyInFromUserAndDropLock (35,300,603,898 samples, 0.99%)</title><rect x="252.2" y="389" width="11.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="255.20" y="399.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (818,844,689,161 samples, 22.93%)</title><rect x="339.9" y="341" width="270.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="342.92" y="351.5" >rustposix::safeposix::dispatcher::di..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common (2,771,516,430 samples, 0.08%)</title><rect x="24.6" y="421" width="0.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="27.62" y="431.5" ></text>
</g>
<g >
<title>do_idle (379,935,995 samples, 0.01%)</title><rect x="11.0" y="389" width="0.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="14.00" y="399.5" ></text>
</g>
<g >
<title>ion (1,963,464,705 samples, 0.05%)</title><rect x="11.5" y="325" width="0.6" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="14.49" y="335.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (445,112,302 samples, 0.01%)</title><rect x="11.1" y="405" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="14.12" y="415.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (1,934,344,028 samples, 0.05%)</title><rect x="11.5" y="133" width="0.6" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="14.49" y="143.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (509,808,375 samples, 0.01%)</title><rect x="1188.3" y="229" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1191.34" y="239.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRangeProt (3,233,376,947 samples, 0.09%)</title><rect x="1165.1" y="421" width="1.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1168.09" y="431.5" ></text>
</g>
<g >
<title>[librustposix.so] (4,260,142,508 samples, 0.12%)</title><rect x="27.7" y="437" width="1.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="30.69" y="447.5" ></text>
</g>
<g >
<title>__writeback_inodes_wb (811,207,669 samples, 0.02%)</title><rect x="1187.4" y="309" width="0.2" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1190.35" y="319.5" ></text>
</g>
<g >
<title>ksys_write (1,949,622,784 samples, 0.05%)</title><rect x="11.5" y="245" width="0.6" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="14.49" y="255.5" ></text>
</g>
<g >
<title>NaClAppThreadSetSuspendState (5,338,318,056 samples, 0.15%)</title><rect x="35.9" y="421" width="1.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="38.86" y="431.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (348,933,229 samples, 0.01%)</title><rect x="1189.3" y="357" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1192.31" y="367.5" ></text>
</g>
<g >
<title>ret_from_fork (1,258,897,651 samples, 0.04%)</title><rect x="1187.2" y="421" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1190.23" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (348,933,229 samples, 0.01%)</title><rect x="1189.3" y="437" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.31" y="447.5" ></text>
</g>
<g >
<title>NaClVmmapCheckAddrMapping (26,077,658,209 samples, 0.73%)</title><rect x="291.1" y="357" width="8.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="294.11" y="367.5" ></text>
</g>
<g >
<title>all (3,571,114,820,873 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (511,516,990 samples, 0.01%)</title><rect x="1188.3" y="245" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1191.34" y="255.5" ></text>
</g>
<g >
<title>cpuidle_enter (1,812,628,636 samples, 0.05%)</title><rect x="1188.3" y="277" width="0.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1191.31" y="287.5" ></text>
</g>
<g >
<title>start_secondary (1,375,757,255 samples, 0.04%)</title><rect x="1189.5" y="421" width="0.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.50" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,955,670,308 samples, 0.05%)</title><rect x="11.5" y="293" width="0.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="14.49" y="303.5" ></text>
</g>
<g >
<title>NaClStackSafetyNowOnUntrustedStack (3,747,057,338 samples, 0.10%)</title><rect x="41.5" y="421" width="1.2" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="44.47" y="431.5" ></text>
</g>
<g >
<title>writeback_sb_inodes (811,207,669 samples, 0.02%)</title><rect x="1187.4" y="293" width="0.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1190.35" y="303.5" ></text>
</g>
<g >
<title>NaClSysRecvDecoder (1,104,414,038,561 samples, 30.93%)</title><rect x="247.1" y="405" width="364.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="250.05" y="415.5" >NaClSysRecvDecoder</text>
</g>
<g >
<title>__sched_yield (361,957,321 samples, 0.01%)</title><rect x="610.3" y="277" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="613.34" y="287.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRange (15,497,060,772 samples, 0.43%)</title><rect x="257.2" y="373" width="5.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="260.22" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,415,023,240 samples, 0.12%)</title><rect x="1167.8" y="421" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1170.76" y="431.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::send_syscall (2,207,018,006 samples, 0.06%)</title><rect x="27.0" y="421" width="0.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="29.96" y="431.5" ></text>
</g>
<g >
<title>kworker/dying (2,928,450,054 samples, 0.08%)</title><rect x="10.3" y="453" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="13.31" y="463.5" ></text>
</g>
<g >
<title>sel_ldr (3,533,702,814,840 samples, 98.95%)</title><rect x="12.2" y="453" width="1167.6" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="15.16" y="463.5" >sel_ldr</text>
</g>
<g >
<title>NaClGetThreadCtxSp (4,054,076,009 samples, 0.11%)</title><rect x="128.9" y="389" width="1.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="131.88" y="399.5" ></text>
</g>
<g >
<title>vfs_iter_write (1,935,372,589 samples, 0.05%)</title><rect x="11.5" y="197" width="0.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="14.49" y="207.5" ></text>
</g>
<g >
<title>wb_writeback (811,317,813 samples, 0.02%)</title><rect x="1187.4" y="325" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1190.35" y="335.5" ></text>
</g>
<g >
<title>NaClLog (16,888,125,053 samples, 0.47%)</title><rect x="1149.1" y="421" width="5.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1152.11" y="431.5" ></text>
</g>
<g >
<title>generic_perform_write (1,921,654,311 samples, 0.05%)</title><rect x="11.5" y="117" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="14.49" y="127.5" ></text>
</g>
<g >
<title>process_one_work (1,041,194,035 samples, 0.03%)</title><rect x="1187.3" y="373" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1190.28" y="383.5" ></text>
</g>
<g >
<title>NaClAppThreadSetSuspendState (245,082,317,490 samples, 6.86%)</title><rect x="140.5" y="405" width="80.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="143.46" y="415.5" >NaClAppTh..</text>
</g>
<g >
<title>cpuidle_enter (1,232,818,805 samples, 0.03%)</title><rect x="1187.7" y="341" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1190.66" y="351.5" ></text>
</g>
<g >
<title>start_secondary (381,605,499 samples, 0.01%)</title><rect x="11.0" y="421" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="14.00" y="431.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (1,086,631,613 samples, 0.03%)</title><rect x="11.6" y="101" width="0.3" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="14.56" y="111.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (2,129,867,055 samples, 0.06%)</title><rect x="1188.3" y="309" width="0.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1191.31" y="319.5" ></text>
</g>
<g >
<title>ext4_da_write_end (587,295,121 samples, 0.02%)</title><rect x="11.9" y="101" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="14.92" y="111.5" ></text>
</g>
<g >
<title>worker_thread (1,118,965,933 samples, 0.03%)</title><rect x="1187.3" y="389" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1190.28" y="399.5" ></text>
</g>
<g >
<title>[unknown] (118,108,114,119 samples, 3.31%)</title><rect x="1140.6" y="437" width="39.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1143.58" y="447.5" >[un..</text>
</g>
<g >
<title>__cmd_record (2,143,493,007 samples, 0.06%)</title><rect x="11.4" y="421" width="0.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="14.43" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_poll (348,933,229 samples, 0.01%)</title><rect x="1189.3" y="405" width="0.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1192.31" y="415.5" ></text>
</g>
<g >
<title>NaClUserToSysStackAddr (4,567,748,687 samples, 0.13%)</title><rect x="17.2" y="421" width="1.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="20.17" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (116,095,442,254 samples, 3.25%)</title><rect x="572.0" y="277" width="38.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="574.98" y="287.5" >[li..</text>
</g>
<g >
<title>NaClVmmapCheckAddrMapping (4,865,184,018 samples, 0.14%)</title><rect x="1166.2" y="421" width="1.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1169.15" y="431.5" ></text>
</g>
<g >
<title>NaClGetThreadCtxSp (4,460,534,504 samples, 0.12%)</title><rect x="14.1" y="421" width="1.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="17.14" y="431.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (3,285,444,813 samples, 0.09%)</title><rect x="705.5" y="341" width="1.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="708.53" y="351.5" ></text>
</g>
<g >
<title>journal-offline (921,446,645 samples, 0.03%)</title><rect x="10.0" y="453" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1,375,757,255 samples, 0.04%)</title><rect x="1189.5" y="405" width="0.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.50" y="415.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (4,260,142,508 samples, 0.12%)</title><rect x="27.7" y="421" width="1.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="30.69" y="431.5" ></text>
</g>
<g >
<title>do_idle (1,375,757,255 samples, 0.04%)</title><rect x="1189.5" y="389" width="0.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1192.50" y="399.5" ></text>
</g>
<g >
<title>ovl_write_iter (1,946,476,551 samples, 0.05%)</title><rect x="11.5" y="213" width="0.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="14.49" y="223.5" ></text>
</g>
<g >
<title>NaClVmmapCheckAddrMapping (25,099,792,198 samples, 0.70%)</title><rect x="658.1" y="357" width="8.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="661.09" y="367.5" ></text>
</g>
<g >
<title>swapper (2,601,266,763 samples, 0.07%)</title><rect x="1189.1" y="453" width="0.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1192.14" y="463.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::send_syscall (6,005,330,980 samples, 0.17%)</title><rect x="12.2" y="421" width="1.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="15.16" y="431.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (2,834,521,930,798 samples, 79.37%)</title><rect x="42.7" y="421" width="936.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="45.71" y="431.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>NaClUserToSysAddrRangeProt (49,897,456,181 samples, 1.40%)</title><rect x="283.2" y="373" width="16.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="286.24" y="383.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (382,311,639 samples, 0.01%)</title><rect x="1187.7" y="293" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1190.70" y="303.5" ></text>
</g>
<g >
<title>lind_recv (2,104,612,585 samples, 0.06%)</title><rect x="611.3" y="389" width="0.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="614.29" y="399.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (4,515,777,342 samples, 0.13%)</title><rect x="1187.6" y="437" width="1.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1190.65" y="447.5" ></text>
</g>
<g >
<title>dispatcher@plt (1,796,282,833 samples, 0.05%)</title><rect x="978.0" y="357" width="0.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="981.04" y="367.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common (814,636,527,252 samples, 22.81%)</title><rect x="341.3" y="325" width="269.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="344.31" y="335.5" >rustposix::safeposix::syscalls::net_..</text>
</g>
<g >
<title>NaClUserToSysAddrRangeProt (50,043,417,546 samples, 1.40%)</title><rect x="649.8" y="373" width="16.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="652.85" y="383.5" ></text>
</g>
<g >
<title>cpuidle_enter (1,306,562,455 samples, 0.04%)</title><rect x="1189.5" y="341" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.50" y="351.5" ></text>
</g>
<g >
<title>filemap_add_folio (615,053,903 samples, 0.02%)</title><rect x="11.6" y="69" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="14.56" y="79.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (4,774,644,259 samples, 0.13%)</title><rect x="22.5" y="421" width="1.5" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="25.47" y="431.5" ></text>
</g>
<g >
<title>NaClSysSend (1,050,542,592,964 samples, 29.42%)</title><rect x="631.5" y="389" width="347.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="634.50" y="399.5" >NaClSysSend</text>
</g>
<g >
<title>cpuidle_enter (313,378,385 samples, 0.01%)</title><rect x="11.0" y="341" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="14.00" y="351.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (4,311,898,324 samples, 0.12%)</title><rect x="1173.8" y="421" width="1.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1176.82" y="431.5" ></text>
</g>
<g >
<title>arch_call_rest_init (445,112,302 samples, 0.01%)</title><rect x="11.1" y="373" width="0.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="14.12" y="383.5" ></text>
</g>
<g >
<title>call_cpuidle (1,233,207,894 samples, 0.03%)</title><rect x="1187.7" y="357" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1190.66" y="367.5" ></text>
</g>
<g >
<title>dispatcher (888,699,174,671 samples, 24.89%)</title><rect x="316.8" y="357" width="293.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="319.84" y="367.5" >dispatcher</text>
</g>
<g >
<title>NaClAppThreadSetSuspendState (6,159,452,261 samples, 0.17%)</title><rect x="1146.7" y="421" width="2.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1149.75" y="431.5" ></text>
</g>
<g >
<title>mpage_map_and_submit_extent (467,316,573 samples, 0.01%)</title><rect x="1187.4" y="213" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1190.35" y="223.5" ></text>
</g>
<g >
<title>NaClLog (4,158,874,343 samples, 0.12%)</title><rect x="263.9" y="389" width="1.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="266.87" y="399.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common (6,468,027,481 samples, 0.18%)</title><rect x="1175.3" y="421" width="2.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1178.26" y="431.5" ></text>
</g>
<g >
<title>NaClStackSafetyNowOnTrustedStack (4,414,085,902 samples, 0.12%)</title><rect x="40.0" y="421" width="1.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="43.01" y="431.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (353,835,730 samples, 0.01%)</title><rect x="11.0" y="373" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="14.00" y="383.5" ></text>
</g>
<g >
<title>do_idle (2,647,139,208 samples, 0.07%)</title><rect x="1188.3" y="325" width="0.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1191.26" y="335.5" ></text>
</g>
<g >
<title>NaClUserToSysStackAddr (4,208,446,266 samples, 0.12%)</title><rect x="137.5" y="389" width="1.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="140.47" y="399.5" ></text>
</g>
<g >
<title>NaClSysRecvDecoder (2,052,690,805 samples, 0.06%)</title><rect x="1161.4" y="421" width="0.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1164.42" y="431.5" ></text>
</g>
<g >
<title>[anon] (41,017,455,476 samples, 1.15%)</title><rect x="14.1" y="437" width="13.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="17.14" y="447.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common_inner (6,671,705,389 samples, 0.19%)</title><rect x="1177.4" y="421" width="2.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1180.40" y="431.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (393,716,639 samples, 0.01%)</title><rect x="11.9" y="69" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="14.92" y="79.5" ></text>
</g>
<g >
<title>NaClLog (7,237,469,591 samples, 0.20%)</title><rect x="37.6" y="421" width="2.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="40.62" y="431.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (310,860,593 samples, 0.01%)</title><rect x="11.0" y="325" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="14.00" y="335.5" ></text>
</g>
<g >
<title>[[heap]] (6,005,330,980 samples, 0.17%)</title><rect x="12.2" y="437" width="1.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="15.16" y="447.5" ></text>
</g>
<g >
<title>__clone (472,686,898 samples, 0.01%)</title><rect x="1179.6" y="437" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1182.60" y="447.5" ></text>
</g>
<g >
<title>intel_idle (884,247,526 samples, 0.02%)</title><rect x="1189.6" y="309" width="0.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.64" y="319.5" ></text>
</g>
<g >
<title>ext4_writepages (811,068,532 samples, 0.02%)</title><rect x="1187.4" y="245" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1190.35" y="255.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (408,223,504 samples, 0.01%)</title><rect x="1186.9" y="373" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1189.90" y="383.5" ></text>
</g>
<g >
<title>HandleStackContext (168,908,360,075 samples, 4.73%)</title><rect x="83.1" y="405" width="55.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="86.05" y="415.5" >Handl..</text>
</g>
<g >
<title>cpu_startup_entry (1,841,795,497 samples, 0.05%)</title><rect x="1187.6" y="405" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1190.65" y="415.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRange (3,694,621,801 samples, 0.10%)</title><rect x="1163.9" y="421" width="1.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1166.87" y="431.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1,211,969,017 samples, 0.03%)</title><rect x="1187.7" y="325" width="0.4" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1190.66" y="335.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common_inner (4,311,443,680 samples, 0.12%)</title><rect x="25.5" y="421" width="1.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="28.54" y="431.5" ></text>
</g>
<g >
<title>perf (2,183,521,221 samples, 0.06%)</title><rect x="11.4" y="453" width="0.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="14.43" y="463.5" ></text>
</g>
<g >
<title>lind_recv (2,052,644,244 samples, 0.06%)</title><rect x="1172.3" y="421" width="0.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1175.34" y="431.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (348,933,229 samples, 0.01%)</title><rect x="1189.3" y="373" width="0.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1192.31" y="383.5" ></text>
</g>
<g >
<title>__filemap_add_folio (552,109,174 samples, 0.02%)</title><rect x="11.6" y="53" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="14.56" y="63.5" ></text>
</g>
<g >
<title>dispatcher (894,376,951,988 samples, 25.04%)</title><rect x="682.5" y="357" width="295.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="685.51" y="367.5" >dispatcher</text>
</g>
<g >
<title>start_secondary (1,848,556,069 samples, 0.05%)</title><rect x="1187.6" y="421" width="0.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1190.65" y="431.5" ></text>
</g>
<g >
<title>NaClLog (18,632,182,443 samples, 0.52%)</title><rect x="277.1" y="373" width="6.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="280.08" y="383.5" ></text>
</g>
<g >
<title>NaClMaskRestore (14,163,601,648 samples, 0.40%)</title><rect x="241.9" y="389" width="4.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="244.88" y="399.5" ></text>
</g>
<g >
<title>CompareAndSwap (8,880,688,126 samples, 0.25%)</title><rect x="1140.6" y="421" width="2.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1143.58" y="431.5" ></text>
</g>
<g >
<title>NaClCopyInFromUserAndDropLock (3,233,424,054 samples, 0.09%)</title><rect x="221.4" y="405" width="1.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="224.44" y="415.5" ></text>
</g>
<g >
<title>mpage_map_and_submit_buffers (392,105,713 samples, 0.01%)</title><rect x="1187.4" y="197" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1190.37" y="207.5" ></text>
</g>
<g >
<title>ext4_do_writepages (811,068,532 samples, 0.02%)</title><rect x="1187.4" y="229" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1190.35" y="239.5" ></text>
</g>
<g >
<title>NaClSysRecv (1,950,828,745 samples, 0.05%)</title><rect x="1160.8" y="421" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1163.78" y="431.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (383,169,990 samples, 0.01%)</title><rect x="1187.7" y="309" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1190.70" y="319.5" ></text>
</g>
<g >
<title>NaClSysSendDecoder (2,669,295,380 samples, 0.07%)</title><rect x="1163.0" y="421" width="0.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1165.98" y="431.5" ></text>
</g>
<g >
<title>NaClStackSafetyNowOnUntrustedStack (4,877,018,248 samples, 0.14%)</title><rect x="1159.2" y="421" width="1.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1162.17" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_poll (497,721,146 samples, 0.01%)</title><rect x="1186.9" y="405" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1189.89" y="415.5" ></text>
</g>
<g >
<title>sshd (28,284,524,783 samples, 0.79%)</title><rect x="1179.8" y="453" width="9.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1182.79" y="463.5" ></text>
</g>
<g >
<title>do_iter_write (1,935,372,589 samples, 0.05%)</title><rect x="11.5" y="181" width="0.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="14.49" y="191.5" ></text>
</g>
<g >
<title>__x64_sys_write (1,949,622,784 samples, 0.05%)</title><rect x="11.5" y="261" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="14.49" y="271.5" ></text>
</g>
<g >
<title>wb_do_writeback (823,684,619 samples, 0.02%)</title><rect x="1187.3" y="341" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1190.35" y="351.5" ></text>
</g>
<g >
<title>NaClCopyInFromUserAndDropLock (36,444,659,762 samples, 1.02%)</title><rect x="617.9" y="389" width="12.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="620.94" y="399.5" ></text>
</g>
<g >
<title>lind_send (1,767,562,224 samples, 0.05%)</title><rect x="978.6" y="389" width="0.6" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="981.63" y="399.5" ></text>
</g>
<g >
<title>NaClLog (4,618,602,263 samples, 0.13%)</title><rect x="630.0" y="389" width="1.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="632.98" y="399.5" ></text>
</g>
<g >
<title>intel_idle (1,138,844,821 samples, 0.03%)</title><rect x="1188.5" y="245" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.51" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (314,582,900 samples, 0.01%)</title><rect x="1186.4" y="437" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1189.39" y="447.5" ></text>
</g>
<g >
<title>call_cpuidle (1,814,783,523 samples, 0.05%)</title><rect x="1188.3" y="293" width="0.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1191.31" y="303.5" ></text>
</g>
<g >
<title>__writeback_single_inode (811,207,669 samples, 0.02%)</title><rect x="1187.4" y="277" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1190.35" y="287.5" ></text>
</g>
<g >
<title>NaClRawUserStackAddrNormalize (4,003,903,972 samples, 0.11%)</title><rect x="234.7" y="405" width="1.3" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="237.71" y="415.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (381,513,236 samples, 0.01%)</title><rect x="11.9" y="53" width="0.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="14.92" y="63.5" ></text>
</g>
<g >
<title>__schedule (348,933,229 samples, 0.01%)</title><rect x="1189.3" y="309" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1192.31" y="319.5" ></text>
</g>
<g >
<title>intel_idle (639,174,278 samples, 0.02%)</title><rect x="1187.8" y="309" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1190.84" y="319.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (1,500,317,336 samples, 0.04%)</title><rect x="1189.5" y="437" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1192.50" y="447.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (2,667,221,273 samples, 0.07%)</title><rect x="1188.3" y="421" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1191.26" y="431.5" ></text>
</g>
<g >
<title>NaClSysSend (2,669,081,839 samples, 0.07%)</title><rect x="1162.1" y="421" width="0.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1165.10" y="431.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1,758,724,333 samples, 0.05%)</title><rect x="24.0" y="421" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="27.04" y="431.5" ></text>
</g>
<g >
<title>[unknown]  (488,018,417,820 samples, 13.67%)</title><rect x="979.3" y="437" width="161.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="982.32" y="447.5" >[unknown] </text>
</g>
<g >
<title>memcpy@plt (872,787,440 samples, 0.02%)</title><rect x="263.6" y="373" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="266.58" y="383.5" ></text>
</g>
<g >
<title>NaClLog (36,921,127,787 samples, 1.03%)</title><rect x="222.5" y="405" width="12.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="225.51" y="415.5" ></text>
</g>
<g >
<title>NaClSysSendDecoder (1,109,433,263,651 samples, 31.07%)</title><rect x="612.6" y="405" width="366.6" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="615.63" y="415.5" >NaClSysSendDecoder</text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (5,901,360,835 samples, 0.17%)</title><rect x="20.5" y="421" width="2.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="23.52" y="431.5" ></text>
</g>
<g >
<title>start_kernel (445,112,302 samples, 0.01%)</title><rect x="11.1" y="389" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="14.12" y="399.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (483,336,695,715 samples, 13.53%)</title><rect x="450.8" y="293" width="159.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="453.78" y="303.5" >rustposix::interface..</text>
</g>
<g >
<title>call_cpuidle (1,306,562,455 samples, 0.04%)</title><rect x="1189.5" y="357" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1192.50" y="367.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (348,933,229 samples, 0.01%)</title><rect x="1189.3" y="341" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1192.31" y="351.5" ></text>
</g>
<g >
<title>record__pushfn (1,963,464,705 samples, 0.05%)</title><rect x="11.5" y="357" width="0.6" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="14.49" y="367.5" ></text>
</g>
<g >
<title>lind_recv (942,853,255,598 samples, 26.40%)</title><rect x="299.7" y="373" width="311.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="302.73" y="383.5" >lind_recv</text>
</g>
<g >
<title>do_writepages (811,068,532 samples, 0.02%)</title><rect x="1187.4" y="261" width="0.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1190.35" y="271.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::send_syscall (821,439,820,142 samples, 23.00%)</title><rect x="706.6" y="341" width="271.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="709.61" y="351.5" >rustposix::safeposix::syscalls::net_..</text>
</g>
<g >
<title>NaClSandboxCodeAddr (21,967,039,415 samples, 0.62%)</title><rect x="130.2" y="389" width="7.3" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="133.21" y="399.5" ></text>
</g>
<g >
<title>dispatcher (9,446,097,807 samples, 0.26%)</title><rect x="1169.2" y="421" width="3.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1172.22" y="431.5" ></text>
</g>
<g >
<title>dispatcher (3,181,637,998 samples, 0.09%)</title><rect x="19.5" y="421" width="1.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="22.46" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,361,289,720 samples, 0.07%)</title><rect x="18.7" y="421" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="21.68" y="431.5" ></text>
</g>
<g >
<title>[sel_ldr] (2,867,895,493,242 samples, 80.31%)</title><rect x="31.7" y="437" width="947.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="34.68" y="447.5" >[sel_ldr]</text>
</g>
<g >
<title>wb_workfn (823,909,785 samples, 0.02%)</title><rect x="1187.3" y="357" width="0.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1190.35" y="367.5" ></text>
</g>
<g >
<title>cpu_startup_entry (381,605,499 samples, 0.01%)</title><rect x="11.0" y="405" width="0.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="14.00" y="415.5" ></text>
</g>
<g >
<title>__filemap_get_folio (784,039,815 samples, 0.02%)</title><rect x="11.6" y="85" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="14.56" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,955,670,308 samples, 0.05%)</title><rect x="11.5" y="277" width="0.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="14.49" y="287.5" ></text>
</g>
<g >
<title>rest_init (445,112,302 samples, 0.01%)</title><rect x="11.1" y="357" width="0.2" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="14.12" y="367.5" ></text>
</g>
<g >
<title>do_idle (1,833,115,700 samples, 0.05%)</title><rect x="1187.6" y="389" width="0.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1190.65" y="399.5" ></text>
</g>
<g >
<title>generic_write_end (580,318,575 samples, 0.02%)</title><rect x="11.9" y="85" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="14.92" y="95.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (2,667,221,273 samples, 0.07%)</title><rect x="1188.3" y="405" width="0.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1191.26" y="415.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (2,008,858,171 samples, 0.06%)</title><rect x="11.5" y="389" width="0.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="14.48" y="399.5" ></text>
</g>
<g >
<title>NaClCopyInFromUserAndDropLock (975,538,517 samples, 0.03%)</title><rect x="1148.8" y="421" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1151.78" y="431.5" ></text>
</g>
<g >
<title>write (1,956,372,613 samples, 0.05%)</title><rect x="11.5" y="309" width="0.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="14.49" y="319.5" ></text>
</g>
<g >
<title>NaClAppThreadFromThreadContext (4,825,223,747 samples, 0.14%)</title><rect x="1145.2" y="421" width="1.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1148.15" y="431.5" ></text>
</g>
<g >
<title>do_idle (440,582,238 samples, 0.01%)</title><rect x="11.1" y="325" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="14.13" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,209,270,875 samples, 0.12%)</title><rect x="628.3" y="373" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="631.35" y="383.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common_inner (698,468,214,501 samples, 19.56%)</title><rect x="379.7" y="309" width="230.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="382.70" y="319.5" >rustposix::safeposix::syscalls..</text>
</g>
<g >
<title>do_syscall_64 (1,591,261,858 samples, 0.04%)</title><rect x="1186.7" y="421" width="0.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1189.70" y="431.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (329,737,558 samples, 0.01%)</title><rect x="1186.3" y="437" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1189.28" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (7,801,141,928 samples, 0.22%)</title><rect x="975.4" y="309" width="2.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="978.43" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,745,964,443 samples, 0.10%)</title><rect x="262.3" y="373" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="265.34" y="383.5" ></text>
</g>
<g >
<title>CompareAndSwap (170,450,117,175 samples, 4.77%)</title><rect x="165.1" y="389" width="56.3" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="168.10" y="399.5" >Compa..</text>
</g>
<g >
<title>NaClAppThreadFromThreadContext (4,832,138,527 samples, 0.14%)</title><rect x="138.9" y="405" width="1.6" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="141.86" y="415.5" ></text>
</g>
<g >
<title>lind_send (2,412,568,098 samples, 0.07%)</title><rect x="1173.0" y="421" width="0.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1176.02" y="431.5" ></text>
</g>
<g >
<title>NaClSwitchToApp (31,861,381,161 samples, 0.89%)</title><rect x="236.0" y="405" width="10.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="239.03" y="415.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (363,409,090 samples, 0.01%)</title><rect x="11.6" y="37" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="14.60" y="47.5" ></text>
</g>
<g >
<title>[perf-832.map] (7,813,899,322 samples, 0.22%)</title><rect x="29.1" y="437" width="2.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="32.10" y="447.5" ></text>
</g>
<g >
<title>memcpy@plt (718,721,270 samples, 0.02%)</title><rect x="629.7" y="373" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="632.74" y="383.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1,934,344,028 samples, 0.05%)</title><rect x="11.5" y="149" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="14.49" y="159.5" ></text>
</g>
<g >
<title>NaClSandboxCodeAddr (4,721,537,024 samples, 0.13%)</title><rect x="15.6" y="421" width="1.6" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="18.61" y="431.5" ></text>
</g>
<g >
<title>record__mmap_read_all (2,008,858,171 samples, 0.06%)</title><rect x="11.5" y="405" width="0.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="14.48" y="415.5" ></text>
</g>
<g >
<title>do_sys_poll (348,933,229 samples, 0.01%)</title><rect x="1189.3" y="389" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.31" y="399.5" ></text>
</g>
<g >
<title>rest_init (2,667,221,273 samples, 0.07%)</title><rect x="1188.3" y="357" width="0.8" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1191.26" y="367.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (434,899,170,768 samples, 12.18%)</title><rect x="834.3" y="325" width="143.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="837.34" y="335.5" >rustposix::interfa..</text>
</g>
<g >
<title>dispatcher@plt (2,360,577,865 samples, 0.07%)</title><rect x="610.5" y="357" width="0.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="613.49" y="367.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (351,993,233 samples, 0.01%)</title><rect x="11.1" y="309" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="14.13" y="319.5" ></text>
</g>
<g >
<title>NaClSysSend (1,950,833,341 samples, 0.05%)</title><rect x="612.0" y="405" width="0.6" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="614.98" y="415.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRange (16,231,131,024 samples, 0.45%)</title><rect x="623.0" y="373" width="5.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="625.99" y="383.5" ></text>
</g>
<g >
<title>record__write (1,963,464,705 samples, 0.05%)</title><rect x="11.5" y="341" width="0.6" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="14.49" y="351.5" ></text>
</g>
<g >
<title>NaClSysRecv (1,047,220,067,252 samples, 29.32%)</title><rect x="265.2" y="389" width="346.1" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="268.24" y="399.5" >NaClSysRecv</text>
</g>
<g >
<title>cpuidle_enter_state (1,306,562,455 samples, 0.04%)</title><rect x="1189.5" y="325" width="0.4" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1192.50" y="335.5" ></text>
</g>
<g >
<title>mpage_prepare_extent_to_map (338,447,424 samples, 0.01%)</title><rect x="1187.5" y="213" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1190.51" y="223.5" ></text>
</g>
<g >
<title>NaClLog (18,858,050,464 samples, 0.53%)</title><rect x="643.6" y="373" width="6.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="646.61" y="383.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (826,717,801 samples, 0.02%)</title><rect x="11.0" y="437" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="14.00" y="447.5" ></text>
</g>
<g >
<title>start_kernel (2,667,221,273 samples, 0.07%)</title><rect x="1188.3" y="389" width="0.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1191.26" y="399.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (1,429,285,112 samples, 0.04%)</title><rect x="1187.7" y="373" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1190.66" y="383.5" ></text>
</g>
<g >
<title>lind_send (944,992,034,257 samples, 26.46%)</title><rect x="666.4" y="373" width="312.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="669.38" y="383.5" >lind_send</text>
</g>
<g >
<title>NaClStackSafetyNowOnTrustedStack (4,568,557,015 samples, 0.13%)</title><rect x="1157.7" y="421" width="1.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1160.66" y="431.5" ></text>
</g>
<g >
<title>NaClSysRecv (1,488,597,808 samples, 0.04%)</title><rect x="246.6" y="405" width="0.5" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="249.56" y="415.5" ></text>
</g>
<g >
<title>NaClMaskRestore (4,937,804,284 samples, 0.14%)</title><rect x="1154.7" y="421" width="1.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1157.69" y="431.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (445,112,302 samples, 0.01%)</title><rect x="11.1" y="421" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="14.12" y="431.5" ></text>
</g>
<g >
<title>HandleStackContext (4,977,860,366 samples, 0.14%)</title><rect x="1143.5" y="421" width="1.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1146.51" y="431.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (1,934,588,061 samples, 0.05%)</title><rect x="11.5" y="165" width="0.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="14.49" y="175.5" ></text>
</g>
<g >
<title>vfs_write (1,948,333,340 samples, 0.05%)</title><rect x="11.5" y="229" width="0.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="14.49" y="239.5" ></text>
</g>
</g>
</svg>
