<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="202" onload="init(evt)" viewBox="0 0 1200 202" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="202" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="191.00"> </text><svg id="frames" x="10" width="1180"><g><title>_process_args (namespace.py:1141) (59 samples, 1.49%)</title><rect x="3.0594%" y="116" width="1.4918%" height="15" fill="rgb(227,0,7)"/><text x="3.3094%" y="126.50"></text></g><g><title>copy (namespace.py:273) (50 samples, 1.26%)</title><rect x="3.2870%" y="132" width="1.2642%" height="15" fill="rgb(217,0,24)"/><text x="3.5370%" y="142.50"></text></g><g><title>wrapped_function (namespace.py:1239) (117 samples, 2.96%)</title><rect x="2.2756%" y="100" width="2.9583%" height="15" fill="rgb(221,193,54)"/><text x="2.5256%" y="110.50">wra..</text></g><g><title>_process_retval (namespace.py:1188) (59 samples, 1.49%)</title><rect x="6.6245%" y="116" width="1.4918%" height="15" fill="rgb(248,212,6)"/><text x="6.8745%" y="126.50"></text></g><g><title>__do_func_call (namespace.py:1003) (264 samples, 6.68%)</title><rect x="1.4665%" y="84" width="6.6751%" height="15" fill="rgb(208,68,35)"/><text x="1.7165%" y="94.50">__do_func..</text></g><g><title>wrapped_function (namespace.py:1268) (71 samples, 1.80%)</title><rect x="6.3464%" y="100" width="1.7952%" height="15" fill="rgb(232,128,0)"/><text x="6.5964%" y="110.50">w..</text></g><g><title>LindSyscall (lind_server.py:9839) (330 samples, 8.34%)</title><rect x="0.3287%" y="68" width="8.3439%" height="15" fill="rgb(207,160,47)"/><text x="0.5787%" y="78.50">LindSyscall ..</text></g><g><title>__do_func_call (namespace.py:1003) (43 samples, 1.09%)</title><rect x="10.4425%" y="132" width="1.0872%" height="15" fill="rgb(228,23,34)"/><text x="10.6925%" y="142.50"></text></g><g><title>close_syscall (lind_server.py:3890) (50 samples, 1.26%)</title><rect x="10.3666%" y="116" width="1.2642%" height="15" fill="rgb(218,30,26)"/><text x="10.6166%" y="126.50"></text></g><g><title>close_syscall (lind_server.py:3897) (41 samples, 1.04%)</title><rect x="11.6308%" y="116" width="1.0367%" height="15" fill="rgb(220,122,19)"/><text x="11.8808%" y="126.50"></text></g><g><title>_close_helper (lind_server.py:3855) (60 samples, 1.52%)</title><rect x="13.0973%" y="132" width="1.5171%" height="15" fill="rgb(250,228,42)"/><text x="13.3473%" y="142.50"></text></g><g><title>wrapped_function (namespace.py:1266) (42 samples, 1.06%)</title><rect x="15.3982%" y="164" width="1.0619%" height="15" fill="rgb(240,193,28)"/><text x="15.6482%" y="174.50"></text></g><g><title>__do_func_call (namespace.py:1003) (76 samples, 1.92%)</title><rect x="14.8673%" y="148" width="1.9216%" height="15" fill="rgb(216,20,37)"/><text x="15.1173%" y="158.50">_..</text></g><g><title>_close_helper (lind_server.py:3866) (84 samples, 2.12%)</title><rect x="14.6903%" y="132" width="2.1239%" height="15" fill="rgb(206,188,39)"/><text x="14.9403%" y="142.50">_..</text></g><g><title>_close_helper (lind_server.py:3867) (51 samples, 1.29%)</title><rect x="16.8142%" y="132" width="1.2895%" height="15" fill="rgb(217,207,13)"/><text x="17.0642%" y="142.50"></text></g><g><title>close_syscall (lind_server.py:3902) (217 samples, 5.49%)</title><rect x="12.6675%" y="116" width="5.4867%" height="15" fill="rgb(231,73,38)"/><text x="12.9175%" y="126.50">close_s..</text></g><g><title>lind_fs_close (lind_server.py:6893) (450 samples, 11.38%)</title><rect x="9.7598%" y="100" width="11.3780%" height="15" fill="rgb(225,20,46)"/><text x="10.0098%" y="110.50">lind_fs_close (li..</text></g><g><title>lind_fs_fxstat (lind_server.py:6847) (96 samples, 2.43%)</title><rect x="21.4918%" y="100" width="2.4273%" height="15" fill="rgb(210,31,41)"/><text x="21.7418%" y="110.50">li..</text></g><g><title>_convert_number_to_big_endian_string (lind_server.py:46) (89 samples, 2.25%)</title><rect x="30.7965%" y="148" width="2.2503%" height="15" fill="rgb(221,200,47)"/><text x="31.0465%" y="158.50">_..</text></g><g><title>struct_pack (lind_server.py:296) (169 samples, 4.27%)</title><rect x="28.8496%" y="132" width="4.2731%" height="15" fill="rgb(226,26,5)"/><text x="29.0996%" y="142.50">struc..</text></g><g><title>pack_stat_struct (lind_server.py:1006) (386 samples, 9.76%)</title><rect x="23.9697%" y="116" width="9.7598%" height="15" fill="rgb(249,33,26)"/><text x="24.2197%" y="126.50">pack_stat_stru..</text></g><g><title>lind_fs_fxstat (lind_server.py:6853) (394 samples, 9.96%)</title><rect x="23.9191%" y="100" width="9.9621%" height="15" fill="rgb(235,183,28)"/><text x="24.1691%" y="110.50">lind_fs_fxstat..</text></g><g><title>lseek_syscall (lind_server.py:3466) (41 samples, 1.04%)</title><rect x="36.3590%" y="116" width="1.0367%" height="15" fill="rgb(221,5,38)"/><text x="36.6090%" y="126.50"></text></g><g><title>lind_fs_lseek (lind_server.py:6941) (160 samples, 4.05%)</title><rect x="34.2857%" y="100" width="4.0455%" height="15" fill="rgb(247,18,42)"/><text x="34.5357%" y="110.50">lind..</text></g><g><title>lind_fs_lseek (lind_server.py:6945) (49 samples, 1.24%)</title><rect x="38.3312%" y="100" width="1.2389%" height="15" fill="rgb(241,131,45)"/><text x="38.5812%" y="110.50"></text></g><g><title>open_syscall (lind_server.py:3281) (53 samples, 1.34%)</title><rect x="41.7193%" y="116" width="1.3401%" height="15" fill="rgb(249,31,29)"/><text x="41.9693%" y="126.50"></text></g><g><title>open_syscall (lind_server.py:3382) (51 samples, 1.29%)</title><rect x="44.0708%" y="116" width="1.2895%" height="15" fill="rgb(225,111,53)"/><text x="44.3208%" y="126.50"></text></g><g><title>__init__ (emulfile.py:276) (63 samples, 1.59%)</title><rect x="47.5853%" y="164" width="1.5929%" height="15" fill="rgb(238,160,17)"/><text x="47.8353%" y="174.50"></text></g><g><title>__init__ (emulfile.py:287) (41 samples, 1.04%)</title><rect x="49.5575%" y="164" width="1.0367%" height="15" fill="rgb(214,148,48)"/><text x="49.8075%" y="174.50"></text></g><g><title>__init__ (emulfile.py:302) (44 samples, 1.11%)</title><rect x="50.6195%" y="164" width="1.1125%" height="15" fill="rgb(232,36,49)"/><text x="50.8695%" y="174.50"></text></g><g><title>wrapped_function (namespace.py:1266) (217 samples, 5.49%)</title><rect x="46.7762%" y="132" width="5.4867%" height="15" fill="rgb(209,103,24)"/><text x="47.0262%" y="142.50">wrapped..</text></g><g><title>emulated_open (emulfile.py:183) (215 samples, 5.44%)</title><rect x="46.8268%" y="148" width="5.4362%" height="15" fill="rgb(229,88,8)"/><text x="47.0768%" y="158.50">emulate..</text></g><g><title>open_syscall (lind_server.py:3393) (284 samples, 7.18%)</title><rect x="45.6384%" y="116" width="7.1808%" height="15" fill="rgb(213,181,19)"/><text x="45.8884%" y="126.50">open_sysca..</text></g><g><title>lind_fs_open (lind_server.py:6496) (581 samples, 14.69%)</title><rect x="40.0253%" y="100" width="14.6903%" height="15" fill="rgb(254,191,54)"/><text x="40.2753%" y="110.50">lind_fs_open (lind_ser..</text></g><g><title>open_syscall (lind_server.py:3415) (40 samples, 1.01%)</title><rect x="53.7042%" y="116" width="1.0114%" height="15" fill="rgb(241,83,37)"/><text x="53.9542%" y="126.50"></text></g><g><title>read_syscall (lind_server.py:3582) (44 samples, 1.11%)</title><rect x="56.5866%" y="116" width="1.1125%" height="15" fill="rgb(233,36,39)"/><text x="56.8366%" y="126.50"></text></g><g><title>wrapped_function (namespace.py:1266) (40 samples, 1.01%)</title><rect x="59.1150%" y="148" width="1.0114%" height="15" fill="rgb(226,3,54)"/><text x="59.3650%" y="158.50"></text></g><g><title>__do_func_call (namespace.py:1003) (100 samples, 2.53%)</title><rect x="58.1290%" y="132" width="2.5284%" height="15" fill="rgb(245,192,40)"/><text x="58.3790%" y="142.50">__..</text></g><g><title>read_syscall (lind_server.py:3605) (110 samples, 2.78%)</title><rect x="57.9014%" y="116" width="2.7813%" height="15" fill="rgb(238,167,29)"/><text x="58.1514%" y="126.50">re..</text></g><g><title>lind_fs_read (lind_server.py:6783) (264 samples, 6.68%)</title><rect x="55.1454%" y="100" width="6.6751%" height="15" fill="rgb(232,182,51)"/><text x="55.3954%" y="110.50">lind_fs_r..</text></g><g><title>read_syscall (lind_server.py:3614) (43 samples, 1.09%)</title><rect x="60.7332%" y="116" width="1.0872%" height="15" fill="rgb(231,60,39)"/><text x="60.9832%" y="126.50"></text></g><g><title>write_syscall (lind_server.py:3666) (51 samples, 1.29%)</title><rect x="64.5006%" y="116" width="1.2895%" height="15" fill="rgb(208,69,12)"/><text x="64.7506%" y="126.50"></text></g><g><title>wrapped_function (namespace.py:1266) (49 samples, 1.24%)</title><rect x="68.3692%" y="148" width="1.2389%" height="15" fill="rgb(235,93,37)"/><text x="68.6192%" y="158.50"></text></g><g><title>write_syscall (lind_server.py:3704) (118 samples, 2.98%)</title><rect x="66.8015%" y="116" width="2.9836%" height="15" fill="rgb(213,116,39)"/><text x="67.0515%" y="126.50">wri..</text></g><g><title>__do_func_call (namespace.py:1003) (107 samples, 2.71%)</title><rect x="67.0796%" y="132" width="2.7054%" height="15" fill="rgb(222,207,29)"/><text x="67.3296%" y="142.50">__..</text></g><g><title>lind_fs_write (lind_server.py:6557) (356 samples, 9.00%)</title><rect x="62.2756%" y="100" width="9.0013%" height="15" fill="rgb(206,96,30)"/><text x="62.5256%" y="110.50">lind_fs_write..</text></g><g><title>__do_func_call (namespace.py:1003) (43 samples, 1.09%)</title><rect x="73.4513%" y="132" width="1.0872%" height="15" fill="rgb(218,138,4)"/><text x="73.7013%" y="142.50"></text></g><g><title>stat_syscall (lind_server.py:3156) (53 samples, 1.34%)</title><rect x="73.2491%" y="116" width="1.3401%" height="15" fill="rgb(250,191,14)"/><text x="73.4991%" y="126.50"></text></g><g><title>stat_syscall (lind_server.py:3160) (43 samples, 1.09%)</title><rect x="74.5891%" y="116" width="1.0872%" height="15" fill="rgb(239,60,40)"/><text x="74.8391%" y="126.50"></text></g><g><title>lind_fs_xstat (lind_server.py:7232) (200 samples, 5.06%)</title><rect x="71.5803%" y="100" width="5.0569%" height="15" fill="rgb(206,27,48)"/><text x="71.8303%" y="110.50">lind_f..</text></g><g><title>_convert_number_to_big_endian_string (lind_server.py:46) (81 samples, 2.05%)</title><rect x="84.1466%" y="148" width="2.0480%" height="15" fill="rgb(225,35,8)"/><text x="84.3966%" y="158.50">_..</text></g><g><title>struct_pack (lind_server.py:296) (160 samples, 4.05%)</title><rect x="82.2503%" y="132" width="4.0455%" height="15" fill="rgb(250,213,24)"/><text x="82.5003%" y="142.50">stru..</text></g><g><title>pack_stat_struct (lind_server.py:1006) (408 samples, 10.32%)</title><rect x="76.7383%" y="116" width="10.3161%" height="15" fill="rgb(247,123,22)"/><text x="76.9883%" y="126.50">pack_stat_struc..</text></g><g><title>lind_fs_xstat (lind_server.py:7241) (420 samples, 10.62%)</title><rect x="76.6372%" y="100" width="10.6195%" height="15" fill="rgb(231,138,38)"/><text x="76.8872%" y="110.50">lind_fs_xstat (..</text></g><g><title>dispatch_syscall (lind_server.py:9787) (3,085 samples, 78.00%)</title><rect x="9.5575%" y="84" width="78.0025%" height="15" fill="rgb(231,145,46)"/><text x="9.8075%" y="94.50">dispatch_syscall (lind_server.py:9787)</text></g><g><title>LindSyscall (lind_server.py:9843) (3,119 samples, 78.86%)</title><rect x="8.8496%" y="68" width="78.8622%" height="15" fill="rgb(251,118,11)"/><text x="9.0996%" y="78.50">LindSyscall (lind_server.py:9843)</text></g><g><title>__do_func_call (namespace.py:1003) (111 samples, 2.81%)</title><rect x="88.7484%" y="84" width="2.8066%" height="15" fill="rgb(217,147,25)"/><text x="88.9984%" y="94.50">__..</text></g><g><title>LindSyscall (lind_server.py:9852) (165 samples, 4.17%)</title><rect x="87.8635%" y="68" width="4.1719%" height="15" fill="rgb(247,81,37)"/><text x="88.1135%" y="78.50">LindS..</text></g><g><title>LindSyscall (lind_server.py:9853) (49 samples, 1.24%)</title><rect x="92.0354%" y="68" width="1.2389%" height="15" fill="rgb(209,12,38)"/><text x="92.2854%" y="78.50"></text></g><g><title>pthread_cond_wait@@GLIBC_2.3.2 (libpthread-2.31.so) (235 samples, 5.94%)</title><rect x="94.0076%" y="68" width="5.9418%" height="15" fill="rgb(227,1,9)"/><text x="94.2576%" y="78.50">pthread_..</text></g><g><title>all (3,955 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(248,47,43)"/><text x="0.2500%" y="62.50"></text></g></svg></svg>