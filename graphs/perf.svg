<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>perf_event_context_sched_in (12 samples, 10.91%)</title><rect x="846.7" y="341" width="128.8" height="15.0" fill="rgb(235,140,4)" rx="2" ry="2" />
<text  x="849.73" y="351.5" >perf_event_conte..</text>
</g>
<g >
<title>generic_file_buffered_read_get_pages (1 samples, 0.91%)</title><rect x="1072.0" y="197" width="10.7" height="15.0" fill="rgb(214,60,23)" rx="2" ry="2" />
<text  x="1075.00" y="207.5" ></text>
</g>
<g >
<title>perf_event_enable_on_exec (4 samples, 3.64%)</title><rect x="10.0" y="245" width="42.9" height="15.0" fill="rgb(252,83,2)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >perf..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (4 samples, 3.64%)</title><rect x="986.2" y="373" width="42.9" height="15.0" fill="rgb(230,143,2)" rx="2" ry="2" />
<text  x="989.18" y="383.5" >sysc..</text>
</g>
<g >
<title>copy_page_to_iter_iovec (4 samples, 3.64%)</title><rect x="1029.1" y="181" width="42.9" height="15.0" fill="rgb(241,17,41)" rx="2" ry="2" />
<text  x="1032.09" y="191.5" >copy..</text>
</g>
<g >
<title>___sys_recvmsg (8 samples, 7.27%)</title><rect x="1082.7" y="341" width="85.8" height="15.0" fill="rgb(235,186,15)" rx="2" ry="2" />
<text  x="1085.73" y="351.5" >___sys_rec..</text>
</g>
<g >
<title>begin_new_exec (4 samples, 3.64%)</title><rect x="10.0" y="277" width="42.9" height="15.0" fill="rgb(210,68,18)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >begi..</text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 3.64%)</title><rect x="986.2" y="229" width="42.9" height="15.0" fill="rgb(240,198,47)" rx="2" ry="2" />
<text  x="989.18" y="239.5" >__pe..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.91%)</title><rect x="1179.3" y="165" width="10.7" height="15.0" fill="rgb(209,172,53)" rx="2" ry="2" />
<text  x="1182.27" y="175.5" ></text>
</g>
<g >
<title>bprm_execve (4 samples, 3.64%)</title><rect x="10.0" y="357" width="42.9" height="15.0" fill="rgb(254,121,35)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >bprm..</text>
</g>
<g >
<title>search_binary_handler (4 samples, 3.64%)</title><rect x="10.0" y="309" width="42.9" height="15.0" fill="rgb(251,116,14)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >sear..</text>
</g>
<g >
<title>arch_do_signal_or_restart (4 samples, 3.64%)</title><rect x="986.2" y="325" width="42.9" height="15.0" fill="rgb(244,175,21)" rx="2" ry="2" />
<text  x="989.18" y="335.5" >arch..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.91%)</title><rect x="1168.5" y="389" width="10.8" height="15.0" fill="rgb(228,187,2)" rx="2" ry="2" />
<text  x="1171.55" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 3.64%)</title><rect x="986.2" y="405" width="42.9" height="15.0" fill="rgb(243,221,43)" rx="2" ry="2" />
<text  x="989.18" y="415.5" >entr..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.91%)</title><rect x="1179.3" y="197" width="10.7" height="15.0" fill="rgb(243,155,18)" rx="2" ry="2" />
<text  x="1182.27" y="207.5" ></text>
</g>
<g >
<title>do_signal_stop (4 samples, 3.64%)</title><rect x="803.8" y="277" width="42.9" height="15.0" fill="rgb(211,149,4)" rx="2" ry="2" />
<text  x="806.82" y="287.5" >do_s..</text>
</g>
<g >
<title>generic_file_read_iter (5 samples, 4.55%)</title><rect x="1029.1" y="229" width="53.6" height="15.0" fill="rgb(239,54,39)" rx="2" ry="2" />
<text  x="1032.09" y="239.5" >gener..</text>
</g>
<g >
<title>finish_task_switch.isra.0 (4 samples, 3.64%)</title><rect x="803.8" y="229" width="42.9" height="15.0" fill="rgb(223,49,14)" rx="2" ry="2" />
<text  x="806.82" y="239.5" >fini..</text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.91%)</title><rect x="1179.3" y="101" width="10.7" height="15.0" fill="rgb(229,62,50)" rx="2" ry="2" />
<text  x="1182.27" y="111.5" ></text>
</g>
<g >
<title>native_write_msr (4 samples, 3.64%)</title><rect x="803.8" y="149" width="42.9" height="15.0" fill="rgb(213,37,52)" rx="2" ry="2" />
<text  x="806.82" y="159.5" >nati..</text>
</g>
<g >
<title>do_iter_readv_writev (5 samples, 4.55%)</title><rect x="1029.1" y="261" width="53.6" height="15.0" fill="rgb(244,30,15)" rx="2" ry="2" />
<text  x="1032.09" y="271.5" >do_it..</text>
</g>
<g >
<title>unix_seqpacket_recvmsg (8 samples, 7.27%)</title><rect x="1082.7" y="293" width="85.8" height="15.0" fill="rgb(232,162,3)" rx="2" ry="2" />
<text  x="1085.73" y="303.5" >unix_seqpa..</text>
</g>
<g >
<title>bprm_execve.part.0 (4 samples, 3.64%)</title><rect x="10.0" y="341" width="42.9" height="15.0" fill="rgb(205,178,41)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >bprm..</text>
</g>
<g >
<title>__libc_recvmsg (8 samples, 7.27%)</title><rect x="1082.7" y="421" width="85.8" height="15.0" fill="rgb(229,70,39)" rx="2" ry="2" />
<text  x="1085.73" y="431.5" >__libc_rec..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.91%)</title><rect x="1179.3" y="213" width="10.7" height="15.0" fill="rgb(228,44,17)" rx="2" ry="2" />
<text  x="1182.27" y="223.5" ></text>
</g>
<g >
<title>x86_pmu_enable (12 samples, 10.91%)</title><rect x="846.7" y="325" width="128.8" height="15.0" fill="rgb(243,171,32)" rx="2" ry="2" />
<text  x="849.73" y="335.5" >x86_pmu_enable</text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.91%)</title><rect x="1179.3" y="117" width="10.7" height="15.0" fill="rgb(252,184,21)" rx="2" ry="2" />
<text  x="1182.27" y="127.5" ></text>
</g>
<g >
<title>sel_ldr (106 samples, 96.36%)</title><rect x="52.9" y="437" width="1137.1" height="15.0" fill="rgb(213,219,21)" rx="2" ry="2" />
<text  x="55.91" y="447.5" >sel_ldr</text>
</g>
<g >
<title>schedule_tail (12 samples, 10.91%)</title><rect x="846.7" y="389" width="128.8" height="15.0" fill="rgb(252,179,38)" rx="2" ry="2" />
<text  x="849.73" y="399.5" >schedule_tail</text>
</g>
<g >
<title>intel_pmu_enable_all (12 samples, 10.91%)</title><rect x="846.7" y="309" width="128.8" height="15.0" fill="rgb(243,189,31)" rx="2" ry="2" />
<text  x="849.73" y="319.5" >intel_pmu_enable..</text>
</g>
<g >
<title>perf_event_context_sched_in (8 samples, 7.27%)</title><rect x="1082.7" y="165" width="85.8" height="15.0" fill="rgb(231,37,21)" rx="2" ry="2" />
<text  x="1085.73" y="175.5" >perf_event..</text>
</g>
<g >
<title>__GI___clone (12 samples, 10.91%)</title><rect x="846.7" y="421" width="128.8" height="15.0" fill="rgb(245,103,42)" rx="2" ry="2" />
<text  x="849.73" y="431.5" >__GI___clone</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.91%)</title><rect x="1179.3" y="181" width="10.7" height="15.0" fill="rgb(245,116,32)" rx="2" ry="2" />
<text  x="1182.27" y="191.5" ></text>
</g>
<g >
<title>all (110 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(226,164,32)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (8 samples, 7.27%)</title><rect x="1082.7" y="197" width="85.8" height="15.0" fill="rgb(208,128,22)" rx="2" ry="2" />
<text  x="1085.73" y="207.5" >finish_tas..</text>
</g>
<g >
<title>search_binary_handler (1 samples, 0.91%)</title><rect x="1179.3" y="309" width="10.7" height="15.0" fill="rgb(242,66,7)" rx="2" ry="2" />
<text  x="1182.27" y="319.5" ></text>
</g>
<g >
<title>ovl_read_iter (5 samples, 4.55%)</title><rect x="1029.1" y="309" width="53.6" height="15.0" fill="rgb(225,21,52)" rx="2" ry="2" />
<text  x="1032.09" y="319.5" >ovl_r..</text>
</g>
<g >
<title>native_write_msr (4 samples, 3.64%)</title><rect x="10.0" y="181" width="42.9" height="15.0" fill="rgb(242,119,53)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >nati..</text>
</g>
<g >
<title>intel_pmu_enable_all (8 samples, 7.27%)</title><rect x="1082.7" y="133" width="85.8" height="15.0" fill="rgb(223,143,48)" rx="2" ry="2" />
<text  x="1085.73" y="143.5" >intel_pmu_..</text>
</g>
<g >
<title>anon_vma_clone (1 samples, 0.91%)</title><rect x="975.5" y="325" width="10.7" height="15.0" fill="rgb(211,209,31)" rx="2" ry="2" />
<text  x="978.45" y="335.5" ></text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.91%)</title><rect x="1179.3" y="293" width="10.7" height="15.0" fill="rgb(216,204,26)" rx="2" ry="2" />
<text  x="1182.27" y="303.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (4 samples, 3.64%)</title><rect x="986.2" y="341" width="42.9" height="15.0" fill="rgb(212,203,4)" rx="2" ry="2" />
<text  x="989.18" y="351.5" >exit..</text>
</g>
<g >
<title>__x64_sys_read (5 samples, 4.55%)</title><rect x="1029.1" y="373" width="53.6" height="15.0" fill="rgb(218,84,13)" rx="2" ry="2" />
<text  x="1032.09" y="383.5" >__x64..</text>
</g>
<g >
<title>load_elf_binary (4 samples, 3.64%)</title><rect x="10.0" y="293" width="42.9" height="15.0" fill="rgb(241,52,19)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >load..</text>
</g>
<g >
<title>__sys_recvmsg (8 samples, 7.27%)</title><rect x="1082.7" y="357" width="85.8" height="15.0" fill="rgb(239,124,27)" rx="2" ry="2" />
<text  x="1085.73" y="367.5" >__sys_recv..</text>
</g>
<g >
<title>__x64_sys_recvmsg (8 samples, 7.27%)</title><rect x="1082.7" y="373" width="85.8" height="15.0" fill="rgb(235,219,46)" rx="2" ry="2" />
<text  x="1085.73" y="383.5" >__x64_sys_..</text>
</g>
<g >
<title>do_syscall_64 (8 samples, 7.27%)</title><rect x="1082.7" y="389" width="85.8" height="15.0" fill="rgb(218,163,1)" rx="2" ry="2" />
<text  x="1085.73" y="399.5" >do_syscall..</text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 3.64%)</title><rect x="10.0" y="197" width="42.9" height="15.0" fill="rgb(252,195,5)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >inte..</text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.91%)</title><rect x="1168.5" y="405" width="10.8" height="15.0" fill="rgb(222,90,30)" rx="2" ry="2" />
<text  x="1171.55" y="415.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 3.64%)</title><rect x="803.8" y="165" width="42.9" height="15.0" fill="rgb(252,106,46)" rx="2" ry="2" />
<text  x="806.82" y="175.5" >inte..</text>
</g>
<g >
<title>schedule_timeout (8 samples, 7.27%)</title><rect x="1082.7" y="245" width="85.8" height="15.0" fill="rgb(214,215,15)" rx="2" ry="2" />
<text  x="1085.73" y="255.5" >schedule_t..</text>
</g>
<g >
<title>exec_binprm (1 samples, 0.91%)</title><rect x="1179.3" y="325" width="10.7" height="15.0" fill="rgb(231,110,34)" rx="2" ry="2" />
<text  x="1182.27" y="335.5" ></text>
</g>
<g >
<title>clear_user (1 samples, 0.91%)</title><rect x="1179.3" y="261" width="10.7" height="15.0" fill="rgb(234,70,46)" rx="2" ry="2" />
<text  x="1182.27" y="271.5" ></text>
</g>
<g >
<title>____sys_recvmsg (8 samples, 7.27%)</title><rect x="1082.7" y="325" width="85.8" height="15.0" fill="rgb(209,26,44)" rx="2" ry="2" />
<text  x="1085.73" y="335.5" >____sys_re..</text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 3.64%)</title><rect x="986.2" y="181" width="42.9" height="15.0" fill="rgb(222,153,27)" rx="2" ry="2" />
<text  x="989.18" y="191.5" >inte..</text>
</g>
<g >
<title>schedule (4 samples, 3.64%)</title><rect x="803.8" y="261" width="42.9" height="15.0" fill="rgb(235,99,29)" rx="2" ry="2" />
<text  x="806.82" y="271.5" >sche..</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (4 samples, 3.64%)</title><rect x="1029.1" y="165" width="42.9" height="15.0" fill="rgb(246,0,21)" rx="2" ry="2" />
<text  x="1032.09" y="175.5" >copy..</text>
</g>
<g >
<title>ret_from_fork (12 samples, 10.91%)</title><rect x="846.7" y="405" width="128.8" height="15.0" fill="rgb(248,95,23)" rx="2" ry="2" />
<text  x="849.73" y="415.5" >ret_from_fork</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.91%)</title><rect x="1168.5" y="341" width="10.8" height="15.0" fill="rgb(221,25,8)" rx="2" ry="2" />
<text  x="1171.55" y="351.5" ></text>
</g>
<g >
<title>do_execveat_common (1 samples, 0.91%)</title><rect x="1179.3" y="373" width="10.7" height="15.0" fill="rgb(210,97,45)" rx="2" ry="2" />
<text  x="1182.27" y="383.5" ></text>
</g>
<g >
<title>__do_munmap (1 samples, 0.91%)</title><rect x="975.5" y="341" width="10.7" height="15.0" fill="rgb(224,102,47)" rx="2" ry="2" />
<text  x="978.45" y="351.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 3.64%)</title><rect x="803.8" y="181" width="42.9" height="15.0" fill="rgb(229,146,3)" rx="2" ry="2" />
<text  x="806.82" y="191.5" >x86_..</text>
</g>
<g >
<title>native_write_msr (4 samples, 3.64%)</title><rect x="986.2" y="165" width="42.9" height="15.0" fill="rgb(248,99,40)" rx="2" ry="2" />
<text  x="989.18" y="175.5" >nati..</text>
</g>
<g >
<title>load_elf_interp.constprop.0 (1 samples, 0.91%)</title><rect x="1179.3" y="277" width="10.7" height="15.0" fill="rgb(245,37,19)" rx="2" ry="2" />
<text  x="1182.27" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 7.27%)</title><rect x="1082.7" y="405" width="85.8" height="15.0" fill="rgb(244,157,13)" rx="2" ry="2" />
<text  x="1085.73" y="415.5" >entry_SYSC..</text>
</g>
<g >
<title>sysvec_reschedule_ipi (4 samples, 3.64%)</title><rect x="803.8" y="389" width="42.9" height="15.0" fill="rgb(223,132,10)" rx="2" ry="2" />
<text  x="806.82" y="399.5" >sysv..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.91%)</title><rect x="975.5" y="389" width="10.7" height="15.0" fill="rgb(205,107,35)" rx="2" ry="2" />
<text  x="978.45" y="399.5" ></text>
</g>
<g >
<title>arch_do_signal_or_restart (4 samples, 3.64%)</title><rect x="803.8" y="309" width="42.9" height="15.0" fill="rgb(248,6,24)" rx="2" ry="2" />
<text  x="806.82" y="319.5" >arch..</text>
</g>
<g >
<title>do_syscall_64 (4 samples, 3.64%)</title><rect x="10.0" y="405" width="42.9" height="15.0" fill="rgb(233,126,3)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >do_s..</text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.91%)</title><rect x="1179.3" y="389" width="10.7" height="15.0" fill="rgb(236,220,25)" rx="2" ry="2" />
<text  x="1182.27" y="399.5" ></text>
</g>
<g >
<title>ksys_read (5 samples, 4.55%)</title><rect x="1029.1" y="357" width="53.6" height="15.0" fill="rgb(229,90,9)" rx="2" ry="2" />
<text  x="1032.09" y="367.5" >ksys_..</text>
</g>
<g >
<title>__x64_sys_execve (4 samples, 3.64%)</title><rect x="10.0" y="389" width="42.9" height="15.0" fill="rgb(239,70,16)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >__x6..</text>
</g>
<g >
<title>get_signal (4 samples, 3.64%)</title><rect x="986.2" y="309" width="42.9" height="15.0" fill="rgb(242,103,12)" rx="2" ry="2" />
<text  x="989.18" y="319.5" >get_..</text>
</g>
<g >
<title>perf_event_context_sched_in (4 samples, 3.64%)</title><rect x="803.8" y="197" width="42.9" height="15.0" fill="rgb(232,33,17)" rx="2" ry="2" />
<text  x="806.82" y="207.5" >perf..</text>
</g>
<g >
<title>vfs_iter_read (5 samples, 4.55%)</title><rect x="1029.1" y="293" width="53.6" height="15.0" fill="rgb(233,168,5)" rx="2" ry="2" />
<text  x="1032.09" y="303.5" >vfs_i..</text>
</g>
<g >
<title>exit_to_user_mode_prepare (4 samples, 3.64%)</title><rect x="803.8" y="341" width="42.9" height="15.0" fill="rgb(232,97,13)" rx="2" ry="2" />
<text  x="806.82" y="351.5" >exit..</text>
</g>
<g >
<title>exit_to_user_mode_loop (4 samples, 3.64%)</title><rect x="803.8" y="325" width="42.9" height="15.0" fill="rgb(205,159,14)" rx="2" ry="2" />
<text  x="806.82" y="335.5" >exit..</text>
</g>
<g >
<title>schedule (8 samples, 7.27%)</title><rect x="1082.7" y="229" width="85.8" height="15.0" fill="rgb(205,46,6)" rx="2" ry="2" />
<text  x="1085.73" y="239.5" >schedule</text>
</g>
<g >
<title>__schedule (4 samples, 3.64%)</title><rect x="986.2" y="261" width="42.9" height="15.0" fill="rgb(208,122,22)" rx="2" ry="2" />
<text  x="989.18" y="271.5" >__sc..</text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 3.64%)</title><rect x="10.0" y="213" width="42.9" height="15.0" fill="rgb(231,169,42)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >x86_..</text>
</g>
<g >
<title>new_sync_read (5 samples, 4.55%)</title><rect x="1029.1" y="325" width="53.6" height="15.0" fill="rgb(240,12,52)" rx="2" ry="2" />
<text  x="1032.09" y="335.5" >new_s..</text>
</g>
<g >
<title>rmqueue_bulk.constprop.0 (1 samples, 0.91%)</title><rect x="1179.3" y="37" width="10.7" height="15.0" fill="rgb(233,84,49)" rx="2" ry="2" />
<text  x="1182.27" y="47.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 3.64%)</title><rect x="10.0" y="421" width="42.9" height="15.0" fill="rgb(222,184,48)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >entr..</text>
</g>
<g >
<title>perf_event_context_sched_in (4 samples, 3.64%)</title><rect x="986.2" y="213" width="42.9" height="15.0" fill="rgb(241,125,12)" rx="2" ry="2" />
<text  x="989.18" y="223.5" >perf..</text>
</g>
<g >
<title>__schedule (8 samples, 7.27%)</title><rect x="1082.7" y="213" width="85.8" height="15.0" fill="rgb(215,73,45)" rx="2" ry="2" />
<text  x="1085.73" y="223.5" >__schedule</text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 3.64%)</title><rect x="986.2" y="197" width="42.9" height="15.0" fill="rgb(229,226,54)" rx="2" ry="2" />
<text  x="989.18" y="207.5" >x86_..</text>
</g>
<g >
<title>bprm_execve.part.0 (1 samples, 0.91%)</title><rect x="1179.3" y="341" width="10.7" height="15.0" fill="rgb(245,119,16)" rx="2" ry="2" />
<text  x="1182.27" y="351.5" ></text>
</g>
<g >
<title>ctx_resched (4 samples, 3.64%)</title><rect x="10.0" y="229" width="42.9" height="15.0" fill="rgb(205,142,41)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >ctx_..</text>
</g>
<g >
<title>schedule (4 samples, 3.64%)</title><rect x="986.2" y="277" width="42.9" height="15.0" fill="rgb(208,120,30)" rx="2" ry="2" />
<text  x="989.18" y="287.5" >sche..</text>
</g>
<g >
<title>rmqueue (1 samples, 0.91%)</title><rect x="1179.3" y="69" width="10.7" height="15.0" fill="rgb(252,52,11)" rx="2" ry="2" />
<text  x="1182.27" y="79.5" ></text>
</g>
<g >
<title>vfs_read (5 samples, 4.55%)</title><rect x="1029.1" y="341" width="53.6" height="15.0" fill="rgb(205,229,9)" rx="2" ry="2" />
<text  x="1032.09" y="351.5" >vfs_r..</text>
</g>
<g >
<title>finish_task_switch.isra.0 (12 samples, 10.91%)</title><rect x="846.7" y="373" width="128.8" height="15.0" fill="rgb(228,30,5)" rx="2" ry="2" />
<text  x="849.73" y="383.5" >finish_task_swit..</text>
</g>
<g >
<title>do_syscall_64 (4 samples, 3.64%)</title><rect x="986.2" y="389" width="42.9" height="15.0" fill="rgb(225,9,50)" rx="2" ry="2" />
<text  x="989.18" y="399.5" >do_s..</text>
</g>
<g >
<title>__schedule (4 samples, 3.64%)</title><rect x="803.8" y="245" width="42.9" height="15.0" fill="rgb(243,122,5)" rx="2" ry="2" />
<text  x="806.82" y="255.5" >__sc..</text>
</g>
<g >
<title>copy_page_to_iter (4 samples, 3.64%)</title><rect x="1029.1" y="197" width="42.9" height="15.0" fill="rgb(247,65,23)" rx="2" ry="2" />
<text  x="1032.09" y="207.5" >copy..</text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.91%)</title><rect x="1168.5" y="421" width="10.8" height="15.0" fill="rgb(237,214,20)" rx="2" ry="2" />
<text  x="1171.55" y="431.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.91%)</title><rect x="1168.5" y="357" width="10.8" height="15.0" fill="rgb(244,74,54)" rx="2" ry="2" />
<text  x="1171.55" y="367.5" ></text>
</g>
<g >
<title>find_get_pages_contig (1 samples, 0.91%)</title><rect x="1072.0" y="181" width="10.7" height="15.0" fill="rgb(232,59,14)" rx="2" ry="2" />
<text  x="1075.00" y="191.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (8 samples, 7.27%)</title><rect x="1082.7" y="181" width="85.8" height="15.0" fill="rgb(230,86,33)" rx="2" ry="2" />
<text  x="1085.73" y="191.5" >__perf_eve..</text>
</g>
<g >
<title>__clear_user (1 samples, 0.91%)</title><rect x="1179.3" y="245" width="10.7" height="15.0" fill="rgb(207,196,7)" rx="2" ry="2" />
<text  x="1182.27" y="255.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 3.64%)</title><rect x="803.8" y="213" width="42.9" height="15.0" fill="rgb(246,138,41)" rx="2" ry="2" />
<text  x="806.82" y="223.5" >__pe..</text>
</g>
<g >
<title>x86_pmu_enable (8 samples, 7.27%)</title><rect x="1082.7" y="149" width="85.8" height="15.0" fill="rgb(246,153,28)" rx="2" ry="2" />
<text  x="1085.73" y="159.5" >x86_pmu_en..</text>
</g>
<g >
<title>__x64_sys_munmap (1 samples, 0.91%)</title><rect x="975.5" y="373" width="10.7" height="15.0" fill="rgb(224,80,0)" rx="2" ry="2" />
<text  x="978.45" y="383.5" ></text>
</g>
<g >
<title>perf-exec (4 samples, 3.64%)</title><rect x="10.0" y="437" width="42.9" height="15.0" fill="rgb(224,139,1)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >perf..</text>
</g>
<g >
<title>exec_binprm (4 samples, 3.64%)</title><rect x="10.0" y="325" width="42.9" height="15.0" fill="rgb(231,213,50)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >exec..</text>
</g>
<g >
<title>generic_file_buffered_read (5 samples, 4.55%)</title><rect x="1029.1" y="213" width="53.6" height="15.0" fill="rgb(232,219,43)" rx="2" ry="2" />
<text  x="1032.09" y="223.5" >gener..</text>
</g>
<g >
<title>__GI_munmap (1 samples, 0.91%)</title><rect x="975.5" y="421" width="10.7" height="15.0" fill="rgb(233,157,14)" rx="2" ry="2" />
<text  x="978.45" y="431.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.91%)</title><rect x="1168.5" y="373" width="10.8" height="15.0" fill="rgb(245,162,30)" rx="2" ry="2" />
<text  x="1171.55" y="383.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (5 samples, 4.55%)</title><rect x="1029.1" y="245" width="53.6" height="15.0" fill="rgb(213,4,42)" rx="2" ry="2" />
<text  x="1032.09" y="255.5" >ext4_..</text>
</g>
<g >
<title>ValidateChunkAMD64 (1 samples, 0.91%)</title><rect x="52.9" y="421" width="10.7" height="15.0" fill="rgb(218,78,49)" rx="2" ry="2" />
<text  x="55.91" y="431.5" ></text>
</g>
<g >
<title>do_signal_stop (4 samples, 3.64%)</title><rect x="986.2" y="293" width="42.9" height="15.0" fill="rgb(235,44,32)" rx="2" ry="2" />
<text  x="989.18" y="303.5" >do_s..</text>
</g>
<g >
<title>exit_to_user_mode_prepare (4 samples, 3.64%)</title><rect x="986.2" y="357" width="42.9" height="15.0" fill="rgb(233,64,46)" rx="2" ry="2" />
<text  x="989.18" y="367.5" >exit..</text>
</g>
<g >
<title>__perf_event_task_sched_in (12 samples, 10.91%)</title><rect x="846.7" y="357" width="128.8" height="15.0" fill="rgb(241,133,49)" rx="2" ry="2" />
<text  x="849.73" y="367.5" >__perf_event_tas..</text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (4 samples, 3.64%)</title><rect x="803.8" y="405" width="42.9" height="15.0" fill="rgb(206,145,27)" rx="2" ry="2" />
<text  x="806.82" y="415.5" >asm_..</text>
</g>
<g >
<title>perf_event_exec (4 samples, 3.64%)</title><rect x="10.0" y="261" width="42.9" height="15.0" fill="rgb(206,182,13)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >perf..</text>
</g>
<g >
<title>__skb_wait_for_more_packets (8 samples, 7.27%)</title><rect x="1082.7" y="261" width="85.8" height="15.0" fill="rgb(220,21,45)" rx="2" ry="2" />
<text  x="1085.73" y="271.5" >__skb_wait..</text>
</g>
<g >
<title>get_zeroed_page (1 samples, 0.91%)</title><rect x="1179.3" y="133" width="10.7" height="15.0" fill="rgb(237,140,6)" rx="2" ry="2" />
<text  x="1182.27" y="143.5" ></text>
</g>
<g >
<title>do_execveat_common (4 samples, 3.64%)</title><rect x="10.0" y="373" width="42.9" height="15.0" fill="rgb(236,227,22)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >do_e..</text>
</g>
<g >
<title>__futex_abstimed_wait_common64 (4 samples, 3.64%)</title><rect x="986.2" y="421" width="42.9" height="15.0" fill="rgb(228,125,27)" rx="2" ry="2" />
<text  x="989.18" y="431.5" >__fu..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.91%)</title><rect x="975.5" y="405" width="10.7" height="15.0" fill="rgb(241,38,46)" rx="2" ry="2" />
<text  x="978.45" y="415.5" ></text>
</g>
<g >
<title>native_write_msr (8 samples, 7.27%)</title><rect x="1082.7" y="117" width="85.8" height="15.0" fill="rgb(235,106,5)" rx="2" ry="2" />
<text  x="1085.73" y="127.5" >native_wri..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.91%)</title><rect x="1179.3" y="421" width="10.7" height="15.0" fill="rgb(239,36,44)" rx="2" ry="2" />
<text  x="1182.27" y="431.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.91%)</title><rect x="1179.3" y="85" width="10.7" height="15.0" fill="rgb(212,228,0)" rx="2" ry="2" />
<text  x="1182.27" y="95.5" ></text>
</g>
<g >
<title>__pud_alloc (1 samples, 0.91%)</title><rect x="1179.3" y="149" width="10.7" height="15.0" fill="rgb(220,19,22)" rx="2" ry="2" />
<text  x="1182.27" y="159.5" ></text>
</g>
<g >
<title>unix_dgram_recvmsg (8 samples, 7.27%)</title><rect x="1082.7" y="277" width="85.8" height="15.0" fill="rgb(218,199,36)" rx="2" ry="2" />
<text  x="1085.73" y="287.5" >unix_dgram..</text>
</g>
<g >
<title>get_signal (4 samples, 3.64%)</title><rect x="803.8" y="293" width="42.9" height="15.0" fill="rgb(234,28,45)" rx="2" ry="2" />
<text  x="806.82" y="303.5" >get_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 4.55%)</title><rect x="1029.1" y="405" width="53.6" height="15.0" fill="rgb(222,117,21)" rx="2" ry="2" />
<text  x="1032.09" y="415.5" >entry..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.91%)</title><rect x="1179.3" y="405" width="10.7" height="15.0" fill="rgb(235,113,2)" rx="2" ry="2" />
<text  x="1182.27" y="415.5" ></text>
</g>
<g >
<title>native_write_msr (12 samples, 10.91%)</title><rect x="846.7" y="293" width="128.8" height="15.0" fill="rgb(221,7,38)" rx="2" ry="2" />
<text  x="849.73" y="303.5" >native_write_msr</text>
</g>
<g >
<title>[unknown]  (73 samples, 66.36%)</title><rect x="63.6" y="421" width="783.1" height="15.0" fill="rgb(209,131,29)" rx="2" ry="2" />
<text  x="66.64" y="431.5" >[unknown] </text>
</g>
<g >
<title>irqentry_exit (4 samples, 3.64%)</title><rect x="803.8" y="373" width="42.9" height="15.0" fill="rgb(238,188,37)" rx="2" ry="2" />
<text  x="806.82" y="383.5" >irqe..</text>
</g>
<g >
<title>__vm_munmap (1 samples, 0.91%)</title><rect x="975.5" y="357" width="10.7" height="15.0" fill="rgb(227,50,16)" rx="2" ry="2" />
<text  x="978.45" y="367.5" ></text>
</g>
<g >
<title>do_iter_read (5 samples, 4.55%)</title><rect x="1029.1" y="277" width="53.6" height="15.0" fill="rgb(217,51,50)" rx="2" ry="2" />
<text  x="1032.09" y="287.5" >do_it..</text>
</g>
<g >
<title>finish_task_switch.isra.0 (4 samples, 3.64%)</title><rect x="986.2" y="245" width="42.9" height="15.0" fill="rgb(205,99,17)" rx="2" ry="2" />
<text  x="989.18" y="255.5" >fini..</text>
</g>
<g >
<title>__libc_read (5 samples, 4.55%)</title><rect x="1029.1" y="421" width="53.6" height="15.0" fill="rgb(208,221,13)" rx="2" ry="2" />
<text  x="1032.09" y="431.5" >__lib..</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (4 samples, 3.64%)</title><rect x="803.8" y="357" width="42.9" height="15.0" fill="rgb(238,12,30)" rx="2" ry="2" />
<text  x="806.82" y="367.5" >irqe..</text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.91%)</title><rect x="1179.3" y="229" width="10.7" height="15.0" fill="rgb(221,207,21)" rx="2" ry="2" />
<text  x="1182.27" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 4.55%)</title><rect x="1029.1" y="389" width="53.6" height="15.0" fill="rgb(209,76,34)" rx="2" ry="2" />
<text  x="1032.09" y="399.5" >do_sy..</text>
</g>
<g >
<title>sock_recvmsg (8 samples, 7.27%)</title><rect x="1082.7" y="309" width="85.8" height="15.0" fill="rgb(215,126,26)" rx="2" ry="2" />
<text  x="1085.73" y="319.5" >sock_recvmsg</text>
</g>
<g >
<title>rmqueue_pcplist.constprop.0 (1 samples, 0.91%)</title><rect x="1179.3" y="53" width="10.7" height="15.0" fill="rgb(218,13,18)" rx="2" ry="2" />
<text  x="1182.27" y="63.5" ></text>
</g>
<g >
<title>bprm_execve (1 samples, 0.91%)</title><rect x="1179.3" y="357" width="10.7" height="15.0" fill="rgb(240,112,16)" rx="2" ry="2" />
<text  x="1182.27" y="367.5" ></text>
</g>
</g>
</svg>
