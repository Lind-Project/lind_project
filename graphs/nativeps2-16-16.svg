<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>__mutex_lock.constprop.0 (12 samples, 7.79%)</title><rect x="1082.7" y="261" width="92.0" height="15.0" fill="rgb(243,44,54)" rx="2" ry="2" />
<text  x="1085.73" y="271.5" >__mutex_lo..</text>
</g>
<g >
<title>mem_cgroup_charge (3 samples, 1.95%)</title><rect x="730.3" y="133" width="22.9" height="15.0" fill="rgb(237,14,16)" rx="2" ry="2" />
<text  x="733.26" y="143.5" >m..</text>
</g>
<g >
<title>mutex_spin_on_owner (5 samples, 3.25%)</title><rect x="768.6" y="245" width="38.3" height="15.0" fill="rgb(226,73,1)" rx="2" ry="2" />
<text  x="771.57" y="255.5" >mut..</text>
</g>
<g >
<title>__memcg_kmem_charge (3 samples, 1.95%)</title><rect x="1029.1" y="245" width="23.0" height="15.0" fill="rgb(229,141,13)" rx="2" ry="2" />
<text  x="1032.09" y="255.5" >_..</text>
</g>
<g >
<title>start_kernel (2 samples, 1.30%)</title><rect x="998.4" y="437" width="15.4" height="15.0" fill="rgb(245,108,38)" rx="2" ry="2" />
<text  x="1001.44" y="447.5" ></text>
</g>
<g >
<title>make_bare_word (1 samples, 0.65%)</title><rect x="17.7" y="293" width="7.6" height="15.0" fill="rgb(248,63,32)" rx="2" ry="2" />
<text  x="20.66" y="303.5" ></text>
</g>
<g >
<title>find_attach (1 samples, 0.65%)</title><rect x="25.3" y="261" width="7.7" height="15.0" fill="rgb(214,126,11)" rx="2" ry="2" />
<text  x="28.32" y="271.5" ></text>
</g>
<g >
<title>get_page_from_freelist (6 samples, 3.90%)</title><rect x="676.6" y="101" width="46.0" height="15.0" fill="rgb(232,178,12)" rx="2" ry="2" />
<text  x="679.62" y="111.5" >get_..</text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.65%)</title><rect x="822.2" y="293" width="7.7" height="15.0" fill="rgb(235,188,17)" rx="2" ry="2" />
<text  x="825.21" y="303.5" ></text>
</g>
<g >
<title>_start (1 samples, 0.65%)</title><rect x="17.7" y="485" width="7.6" height="15.0" fill="rgb(205,180,23)" rx="2" ry="2" />
<text  x="20.66" y="495.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.65%)</title><rect x="990.8" y="405" width="7.6" height="15.0" fill="rgb(213,34,11)" rx="2" ry="2" />
<text  x="993.78" y="415.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (2 samples, 1.30%)</title><rect x="998.4" y="453" width="15.4" height="15.0" fill="rgb(234,219,14)" rx="2" ry="2" />
<text  x="1001.44" y="463.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.65%)</title><rect x="1044.4" y="229" width="7.7" height="15.0" fill="rgb(228,142,30)" rx="2" ry="2" />
<text  x="1047.42" y="239.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (1 samples, 0.65%)</title><rect x="1021.4" y="293" width="7.7" height="15.0" fill="rgb(226,29,48)" rx="2" ry="2" />
<text  x="1024.43" y="303.5" ></text>
</g>
<g >
<title>__libc_start_main (36 samples, 23.38%)</title><rect x="531.0" y="469" width="275.9" height="15.0" fill="rgb(207,166,30)" rx="2" ry="2" />
<text  x="534.04" y="479.5" >__libc_start_main</text>
</g>
<g >
<title>__mod_zone_page_state (1 samples, 0.65%)</title><rect x="561.7" y="197" width="7.7" height="15.0" fill="rgb(226,1,7)" rx="2" ry="2" />
<text  x="564.69" y="207.5" ></text>
</g>
<g >
<title>record__pushfn (1 samples, 0.65%)</title><rect x="523.4" y="405" width="7.6" height="15.0" fill="rgb(244,164,24)" rx="2" ry="2" />
<text  x="526.38" y="415.5" ></text>
</g>
<g >
<title>write (22 samples, 14.29%)</title><rect x="1013.8" y="421" width="168.5" height="15.0" fill="rgb(226,13,14)" rx="2" ry="2" />
<text  x="1016.77" y="431.5" >write</text>
</g>
<g >
<title>[bash] (1 samples, 0.65%)</title><rect x="17.7" y="325" width="7.6" height="15.0" fill="rgb(205,196,39)" rx="2" ry="2" />
<text  x="20.66" y="335.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 3.25%)</title><rect x="1029.1" y="277" width="38.3" height="15.0" fill="rgb(232,145,0)" rx="2" ry="2" />
<text  x="1032.09" y="287.5" >__a..</text>
</g>
<g >
<title>do_syscall_64 (64 samples, 41.56%)</title><rect x="33.0" y="373" width="490.4" height="15.0" fill="rgb(207,120,35)" rx="2" ry="2" />
<text  x="35.99" y="383.5" >do_syscall_64</text>
</g>
<g >
<title>unmap_single_vma (3 samples, 1.95%)</title><rect x="531.0" y="277" width="23.0" height="15.0" fill="rgb(218,168,53)" rx="2" ry="2" />
<text  x="534.04" y="287.5" >u..</text>
</g>
<g >
<title>start_secondary (23 samples, 14.94%)</title><rect x="822.2" y="469" width="176.2" height="15.0" fill="rgb(246,154,42)" rx="2" ry="2" />
<text  x="825.21" y="479.5" >start_secondary</text>
</g>
<g >
<title>__x64_sys_munmap (3 samples, 1.95%)</title><rect x="531.0" y="357" width="23.0" height="15.0" fill="rgb(235,176,27)" rx="2" ry="2" />
<text  x="534.04" y="367.5" >_..</text>
</g>
<g >
<title>mutex_lock (5 samples, 3.25%)</title><rect x="768.6" y="293" width="38.3" height="15.0" fill="rgb(216,81,53)" rx="2" ry="2" />
<text  x="771.57" y="303.5" >mut..</text>
</g>
<g >
<title>[unknown] (65 samples, 42.21%)</title><rect x="33.0" y="485" width="498.0" height="15.0" fill="rgb(205,86,36)" rx="2" ry="2" />
<text  x="35.99" y="495.5" >[unknown]</text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 1.30%)</title><rect x="1052.1" y="261" width="15.3" height="15.0" fill="rgb(219,3,9)" rx="2" ry="2" />
<text  x="1055.08" y="271.5" ></text>
</g>
<g >
<title>cpus_share_cache (1 samples, 0.65%)</title><rect x="1021.4" y="181" width="7.7" height="15.0" fill="rgb(233,207,41)" rx="2" ry="2" />
<text  x="1024.43" y="191.5" ></text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.65%)</title><rect x="523.4" y="85" width="7.6" height="15.0" fill="rgb(226,189,34)" rx="2" ry="2" />
<text  x="526.38" y="95.5" ></text>
</g>
<g >
<title>do_anonymous_page (12 samples, 7.79%)</title><rect x="661.3" y="149" width="91.9" height="15.0" fill="rgb(233,66,26)" rx="2" ry="2" />
<text  x="664.30" y="159.5" >do_anonymo..</text>
</g>
<g >
<title>copy_page_to_iter (25 samples, 16.23%)</title><rect x="577.0" y="293" width="191.6" height="15.0" fill="rgb(226,204,51)" rx="2" ry="2" />
<text  x="580.01" y="303.5" >copy_page_to_iter</text>
</g>
<g >
<title>ext4_file_write_iter (1 samples, 0.65%)</title><rect x="523.4" y="181" width="7.6" height="15.0" fill="rgb(234,108,0)" rx="2" ry="2" />
<text  x="526.38" y="191.5" ></text>
</g>
<g >
<title>mutex_lock (12 samples, 7.79%)</title><rect x="1082.7" y="293" width="92.0" height="15.0" fill="rgb(247,73,8)" rx="2" ry="2" />
<text  x="1085.73" y="303.5" >mutex_lock</text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.65%)</title><rect x="1182.3" y="453" width="7.7" height="15.0" fill="rgb(240,21,41)" rx="2" ry="2" />
<text  x="1185.34" y="463.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.65%)</title><rect x="822.2" y="325" width="7.7" height="15.0" fill="rgb(208,118,33)" rx="2" ry="2" />
<text  x="825.21" y="335.5" ></text>
</g>
<g >
<title>filemap_map_pages (1 samples, 0.65%)</title><rect x="17.7" y="133" width="7.6" height="15.0" fill="rgb(223,148,3)" rx="2" ry="2" />
<text  x="20.66" y="143.5" ></text>
</g>
<g >
<title>__free_one_page (1 samples, 0.65%)</title><rect x="561.7" y="213" width="7.7" height="15.0" fill="rgb(235,105,1)" rx="2" ry="2" />
<text  x="564.69" y="223.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.65%)</title><rect x="1182.3" y="437" width="7.7" height="15.0" fill="rgb(250,107,45)" rx="2" ry="2" />
<text  x="1185.34" y="447.5" ></text>
</g>
<g >
<title>evlist__prepare_workload (1 samples, 0.65%)</title><rect x="25.3" y="453" width="7.7" height="15.0" fill="rgb(209,132,41)" rx="2" ry="2" />
<text  x="28.32" y="463.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (3 samples, 1.95%)</title><rect x="531.0" y="245" width="23.0" height="15.0" fill="rgb(217,7,43)" rx="2" ry="2" />
<text  x="534.04" y="255.5" >z..</text>
</g>
<g >
<title>swapper (27 samples, 17.53%)</title><rect x="806.9" y="501" width="206.9" height="15.0" fill="rgb(224,40,22)" rx="2" ry="2" />
<text  x="809.88" y="511.5" >swapper</text>
</g>
<g >
<title>do_idle (2 samples, 1.30%)</title><rect x="998.4" y="373" width="15.4" height="15.0" fill="rgb(220,93,12)" rx="2" ry="2" />
<text  x="1001.44" y="383.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.65%)</title><rect x="822.2" y="309" width="7.7" height="15.0" fill="rgb(254,33,24)" rx="2" ry="2" />
<text  x="825.21" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_read (33 samples, 21.43%)</title><rect x="554.0" y="373" width="252.9" height="15.0" fill="rgb(223,84,27)" rx="2" ry="2" />
<text  x="557.03" y="383.5" >__x64_sys_read</text>
</g>
<g >
<title>rcu_read_unlock_strict (1 samples, 0.65%)</title><rect x="753.2" y="197" width="7.7" height="15.0" fill="rgb(249,24,37)" rx="2" ry="2" />
<text  x="756.25" y="207.5" ></text>
</g>
<g >
<title>exc_page_fault (14 samples, 9.09%)</title><rect x="653.6" y="229" width="107.3" height="15.0" fill="rgb(210,125,18)" rx="2" ry="2" />
<text  x="656.64" y="239.5" >exc_page_fault</text>
</g>
<g >
<title>__x64_sys_ioctl (64 samples, 41.56%)</title><rect x="33.0" y="357" width="490.4" height="15.0" fill="rgb(235,205,22)" rx="2" ry="2" />
<text  x="35.99" y="367.5" >__x64_sys_ioctl</text>
</g>
<g >
<title>read (33 samples, 21.43%)</title><rect x="554.0" y="421" width="252.9" height="15.0" fill="rgb(236,138,44)" rx="2" ry="2" />
<text  x="557.03" y="431.5" >read</text>
</g>
<g >
<title>[libc.so.6] (1 samples, 0.65%)</title><rect x="25.3" y="437" width="7.7" height="15.0" fill="rgb(208,224,26)" rx="2" ry="2" />
<text  x="28.32" y="447.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (1 samples, 0.65%)</title><rect x="523.4" y="117" width="7.6" height="15.0" fill="rgb(229,208,50)" rx="2" ry="2" />
<text  x="526.38" y="127.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.65%)</title><rect x="523.4" y="53" width="7.6" height="15.0" fill="rgb(233,221,6)" rx="2" ry="2" />
<text  x="526.38" y="63.5" ></text>
</g>
<g >
<title>__mutex_lock_slowpath (12 samples, 7.79%)</title><rect x="1082.7" y="277" width="92.0" height="15.0" fill="rgb(228,48,35)" rx="2" ry="2" />
<text  x="1085.73" y="287.5" >__mutex_lo..</text>
</g>
<g >
<title>[bash] (1 samples, 0.65%)</title><rect x="17.7" y="373" width="7.6" height="15.0" fill="rgb(239,214,7)" rx="2" ry="2" />
<text  x="20.66" y="383.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (64 samples, 41.56%)</title><rect x="33.0" y="149" width="490.4" height="15.0" fill="rgb(218,31,39)" rx="2" ry="2" />
<text  x="35.99" y="159.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>__close (1 samples, 0.65%)</title><rect x="10.0" y="437" width="7.7" height="15.0" fill="rgb(241,192,47)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.65%)</title><rect x="523.4" y="69" width="7.6" height="15.0" fill="rgb(247,52,44)" rx="2" ry="2" />
<text  x="526.38" y="79.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 1.30%)</title><rect x="538.7" y="197" width="15.3" height="15.0" fill="rgb(206,28,29)" rx="2" ry="2" />
<text  x="541.70" y="207.5" ></text>
</g>
<g >
<title>security_bprm_creds_for_exec (1 samples, 0.65%)</title><rect x="25.3" y="309" width="7.7" height="15.0" fill="rgb(217,79,5)" rx="2" ry="2" />
<text  x="28.32" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (36 samples, 23.38%)</title><rect x="531.0" y="453" width="275.9" height="15.0" fill="rgb(252,151,42)" rx="2" ry="2" />
<text  x="534.04" y="463.5" >[libc.so.6]</text>
</g>
<g >
<title>record__mmap_read_evlist (1 samples, 0.65%)</title><rect x="523.4" y="437" width="7.6" height="15.0" fill="rgb(213,123,25)" rx="2" ry="2" />
<text  x="526.38" y="447.5" ></text>
</g>
<g >
<title>page_counter_try_charge (2 samples, 1.30%)</title><rect x="1029.1" y="229" width="15.3" height="15.0" fill="rgb(233,30,15)" rx="2" ry="2" />
<text  x="1032.09" y="239.5" ></text>
</g>
<g >
<title>handle_mm_fault (13 samples, 8.44%)</title><rect x="653.6" y="197" width="99.6" height="15.0" fill="rgb(250,33,26)" rx="2" ry="2" />
<text  x="656.64" y="207.5" >handle_mm_fa..</text>
</g>
<g >
<title>ion (1 samples, 0.65%)</title><rect x="523.4" y="373" width="7.6" height="15.0" fill="rgb(213,109,52)" rx="2" ry="2" />
<text  x="526.38" y="383.5" ></text>
</g>
<g >
<title>uncharge_page (1 samples, 0.65%)</title><rect x="546.4" y="165" width="7.6" height="15.0" fill="rgb(238,78,47)" rx="2" ry="2" />
<text  x="549.36" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.65%)</title><rect x="25.3" y="405" width="7.7" height="15.0" fill="rgb(250,226,51)" rx="2" ry="2" />
<text  x="28.32" y="415.5" ></text>
</g>
<g >
<title>write_to_pipe (23 samples, 14.94%)</title><rect x="1013.8" y="501" width="176.2" height="15.0" fill="rgb(221,119,36)" rx="2" ry="2" />
<text  x="1016.77" y="511.5" >write_to_pipe</text>
</g>
<g >
<title>default_wake_function (1 samples, 0.65%)</title><rect x="1021.4" y="229" width="7.7" height="15.0" fill="rgb(251,102,33)" rx="2" ry="2" />
<text  x="1024.43" y="239.5" ></text>
</g>
<g >
<title>vfs_write (22 samples, 14.29%)</title><rect x="1013.8" y="341" width="168.5" height="15.0" fill="rgb(254,151,13)" rx="2" ry="2" />
<text  x="1016.77" y="351.5" >vfs_write</text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.65%)</title><rect x="17.7" y="181" width="7.6" height="15.0" fill="rgb(208,57,28)" rx="2" ry="2" />
<text  x="20.66" y="191.5" ></text>
</g>
<g >
<title>__libc_start_main (1 samples, 0.65%)</title><rect x="17.7" y="469" width="7.6" height="15.0" fill="rgb(232,64,3)" rx="2" ry="2" />
<text  x="20.66" y="479.5" ></text>
</g>
<g >
<title>write (1 samples, 0.65%)</title><rect x="523.4" y="357" width="7.6" height="15.0" fill="rgb(217,31,37)" rx="2" ry="2" />
<text  x="526.38" y="367.5" ></text>
</g>
<g >
<title>ioctl (64 samples, 41.56%)</title><rect x="33.0" y="405" width="490.4" height="15.0" fill="rgb(230,139,18)" rx="2" ry="2" />
<text  x="35.99" y="415.5" >ioctl</text>
</g>
<g >
<title>__vm_munmap (3 samples, 1.95%)</title><rect x="531.0" y="341" width="23.0" height="15.0" fill="rgb(242,156,40)" rx="2" ry="2" />
<text  x="534.04" y="351.5" >_..</text>
</g>
<g >
<title>[libc.so.6] (1 samples, 0.65%)</title><rect x="17.7" y="453" width="7.6" height="15.0" fill="rgb(231,169,3)" rx="2" ry="2" />
<text  x="20.66" y="463.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (64 samples, 41.56%)</title><rect x="33.0" y="309" width="490.4" height="15.0" fill="rgb(249,23,11)" rx="2" ry="2" />
<text  x="35.99" y="319.5" >perf_event_for_each_child</text>
</g>
<g >
<title>__mutex_lock.constprop.0 (1 samples, 0.65%)</title><rect x="1182.3" y="341" width="7.7" height="15.0" fill="rgb(209,107,15)" rx="2" ry="2" />
<text  x="1185.34" y="351.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.65%)</title><rect x="561.7" y="229" width="7.7" height="15.0" fill="rgb(216,4,8)" rx="2" ry="2" />
<text  x="564.69" y="239.5" ></text>
</g>
<g >
<title>cgroup_throttle_swaprate (1 samples, 0.65%)</title><rect x="722.6" y="133" width="7.7" height="15.0" fill="rgb(237,127,30)" rx="2" ry="2" />
<text  x="725.60" y="143.5" ></text>
</g>
<g >
<title>bash (2 samples, 1.30%)</title><rect x="10.0" y="501" width="15.3" height="15.0" fill="rgb(219,63,53)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (22 samples, 14.29%)</title><rect x="822.2" y="389" width="168.6" height="15.0" fill="rgb(234,105,14)" rx="2" ry="2" />
<text  x="825.21" y="399.5" >cpuidle_enter_state</text>
</g>
<g >
<title>execute_command_internal (1 samples, 0.65%)</title><rect x="17.7" y="341" width="7.6" height="15.0" fill="rgb(246,193,43)" rx="2" ry="2" />
<text  x="20.66" y="351.5" ></text>
</g>
<g >
<title>page_counter_uncharge (1 samples, 0.65%)</title><rect x="569.4" y="229" width="7.6" height="15.0" fill="rgb(234,175,50)" rx="2" ry="2" />
<text  x="572.35" y="239.5" ></text>
</g>
<g >
<title>rest_init (2 samples, 1.30%)</title><rect x="998.4" y="405" width="15.4" height="15.0" fill="rgb(229,185,8)" rx="2" ry="2" />
<text  x="1001.44" y="415.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (15 samples, 9.74%)</title><rect x="646.0" y="261" width="114.9" height="15.0" fill="rgb(247,82,0)" rx="2" ry="2" />
<text  x="648.97" y="271.5" >copy_user_enha..</text>
</g>
<g >
<title>rcu_all_qs (1 samples, 0.65%)</title><rect x="760.9" y="261" width="7.7" height="15.0" fill="rgb(220,93,51)" rx="2" ry="2" />
<text  x="763.91" y="271.5" ></text>
</g>
<g >
<title>copy_page_from_iter_iovec (2 samples, 1.30%)</title><rect x="1067.4" y="277" width="15.3" height="15.0" fill="rgb(222,222,54)" rx="2" ry="2" />
<text  x="1070.40" y="287.5" ></text>
</g>
<g >
<title>alloc_pages_current (5 samples, 3.25%)</title><rect x="1029.1" y="293" width="38.3" height="15.0" fill="rgb(242,126,26)" rx="2" ry="2" />
<text  x="1032.09" y="303.5" >all..</text>
</g>
<g >
<title>main (22 samples, 14.29%)</title><rect x="1013.8" y="437" width="168.5" height="15.0" fill="rgb(246,160,36)" rx="2" ry="2" />
<text  x="1016.77" y="447.5" >main</text>
</g>
<g >
<title>x86_pmu_enable (64 samples, 41.56%)</title><rect x="33.0" y="165" width="490.4" height="15.0" fill="rgb(206,87,39)" rx="2" ry="2" />
<text  x="35.99" y="175.5" >x86_pmu_enable</text>
</g>
<g >
<title>unmap_vmas (3 samples, 1.95%)</title><rect x="531.0" y="293" width="23.0" height="15.0" fill="rgb(216,224,48)" rx="2" ry="2" />
<text  x="534.04" y="303.5" >u..</text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (21 samples, 13.64%)</title><rect x="829.9" y="373" width="160.9" height="15.0" fill="rgb(253,111,6)" rx="2" ry="2" />
<text  x="832.87" y="383.5" >mwait_idle_with_hint..</text>
</g>
<g >
<title>perf (65 samples, 42.21%)</title><rect x="33.0" y="501" width="498.0" height="15.0" fill="rgb(234,188,0)" rx="2" ry="2" />
<text  x="35.99" y="511.5" >perf</text>
</g>
<g >
<title>pipe_write (22 samples, 14.29%)</title><rect x="1013.8" y="309" width="168.5" height="15.0" fill="rgb(253,182,37)" rx="2" ry="2" />
<text  x="1016.77" y="319.5" >pipe_write</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.65%)</title><rect x="17.7" y="213" width="7.6" height="15.0" fill="rgb(217,166,12)" rx="2" ry="2" />
<text  x="20.66" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (22 samples, 14.29%)</title><rect x="1013.8" y="405" width="168.5" height="15.0" fill="rgb(247,131,4)" rx="2" ry="2" />
<text  x="1016.77" y="415.5" >entry_SYSCALL_64_afte..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.65%)</title><rect x="10.0" y="485" width="7.7" height="15.0" fill="rgb(212,52,32)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>perf_ioctl (64 samples, 41.56%)</title><rect x="33.0" y="341" width="490.4" height="15.0" fill="rgb(209,49,6)" rx="2" ry="2" />
<text  x="35.99" y="351.5" >perf_ioctl</text>
</g>
<g >
<title>do_fault (1 samples, 0.65%)</title><rect x="17.7" y="165" width="7.6" height="15.0" fill="rgb(249,217,8)" rx="2" ry="2" />
<text  x="20.66" y="175.5" ></text>
</g>
<g >
<title>copy_page_to_iter_iovec (25 samples, 16.23%)</title><rect x="577.0" y="277" width="191.6" height="15.0" fill="rgb(224,101,12)" rx="2" ry="2" />
<text  x="580.01" y="287.5" >copy_page_to_iter_iovec</text>
</g>
<g >
<title>xmalloc (1 samples, 0.65%)</title><rect x="17.7" y="277" width="7.6" height="15.0" fill="rgb(253,76,27)" rx="2" ry="2" />
<text  x="20.66" y="287.5" ></text>
</g>
<g >
<title>ksys_read (33 samples, 21.43%)</title><rect x="554.0" y="357" width="252.9" height="15.0" fill="rgb(220,140,13)" rx="2" ry="2" />
<text  x="557.03" y="367.5" >ksys_read</text>
</g>
<g >
<title>bprm_execve.part.0 (1 samples, 0.65%)</title><rect x="25.3" y="325" width="7.7" height="15.0" fill="rgb(226,138,54)" rx="2" ry="2" />
<text  x="28.32" y="335.5" ></text>
</g>
<g >
<title>new_sync_read (33 samples, 21.43%)</title><rect x="554.0" y="325" width="252.9" height="15.0" fill="rgb(216,165,51)" rx="2" ry="2" />
<text  x="557.03" y="335.5" >new_sync_read</text>
</g>
<g >
<title>vfs_iter_write (1 samples, 0.65%)</title><rect x="523.4" y="229" width="7.6" height="15.0" fill="rgb(211,134,14)" rx="2" ry="2" />
<text  x="526.38" y="239.5" ></text>
</g>
<g >
<title>_start (22 samples, 14.29%)</title><rect x="1013.8" y="485" width="168.5" height="15.0" fill="rgb(206,131,49)" rx="2" ry="2" />
<text  x="1016.77" y="495.5" >_start</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.65%)</title><rect x="17.7" y="229" width="7.6" height="15.0" fill="rgb(213,187,30)" rx="2" ry="2" />
<text  x="20.66" y="239.5" ></text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.65%)</title><rect x="561.7" y="245" width="7.7" height="15.0" fill="rgb(239,215,43)" rx="2" ry="2" />
<text  x="564.69" y="255.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.65%)</title><rect x="523.4" y="277" width="7.6" height="15.0" fill="rgb(228,194,37)" rx="2" ry="2" />
<text  x="526.38" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.65%)</title><rect x="523.4" y="325" width="7.6" height="15.0" fill="rgb(251,81,33)" rx="2" ry="2" />
<text  x="526.38" y="335.5" ></text>
</g>
<g >
<title>execute_command_internal (1 samples, 0.65%)</title><rect x="17.7" y="389" width="7.6" height="15.0" fill="rgb(229,23,37)" rx="2" ry="2" />
<text  x="20.66" y="399.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (1 samples, 0.65%)</title><rect x="1021.4" y="277" width="7.7" height="15.0" fill="rgb(223,44,42)" rx="2" ry="2" />
<text  x="1024.43" y="287.5" ></text>
</g>
<g >
<title>execve (1 samples, 0.65%)</title><rect x="25.3" y="421" width="7.7" height="15.0" fill="rgb(221,88,22)" rx="2" ry="2" />
<text  x="28.32" y="431.5" ></text>
</g>
<g >
<title>new_sync_write (1 samples, 0.65%)</title><rect x="523.4" y="261" width="7.6" height="15.0" fill="rgb(228,186,47)" rx="2" ry="2" />
<text  x="526.38" y="271.5" ></text>
</g>
<g >
<title>native_write_msr (64 samples, 41.56%)</title><rect x="33.0" y="133" width="490.4" height="15.0" fill="rgb(230,100,9)" rx="2" ry="2" />
<text  x="35.99" y="143.5" >native_write_msr</text>
</g>
<g >
<title>cpu_startup_entry (2 samples, 1.30%)</title><rect x="998.4" y="389" width="15.4" height="15.0" fill="rgb(244,93,3)" rx="2" ry="2" />
<text  x="1001.44" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.65%)</title><rect x="1182.3" y="485" width="7.7" height="15.0" fill="rgb(232,32,15)" rx="2" ry="2" />
<text  x="1185.34" y="495.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.65%)</title><rect x="1059.7" y="245" width="7.7" height="15.0" fill="rgb(228,177,28)" rx="2" ry="2" />
<text  x="1062.74" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (22 samples, 14.29%)</title><rect x="1013.8" y="389" width="168.5" height="15.0" fill="rgb(209,151,44)" rx="2" ry="2" />
<text  x="1016.77" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>record__mmap_read_all (1 samples, 0.65%)</title><rect x="523.4" y="453" width="7.6" height="15.0" fill="rgb(226,69,2)" rx="2" ry="2" />
<text  x="526.38" y="463.5" ></text>
</g>
<g >
<title>perf-exec (1 samples, 0.65%)</title><rect x="25.3" y="501" width="7.7" height="15.0" fill="rgb(247,32,53)" rx="2" ry="2" />
<text  x="28.32" y="511.5" ></text>
</g>
<g >
<title>[libc.so.6] (1 samples, 0.65%)</title><rect x="10.0" y="469" width="7.7" height="15.0" fill="rgb(231,196,20)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 1.30%)</title><rect x="538.7" y="181" width="15.3" height="15.0" fill="rgb(246,126,46)" rx="2" ry="2" />
<text  x="541.70" y="191.5" ></text>
</g>
<g >
<title>remote_function (64 samples, 41.56%)</title><rect x="33.0" y="229" width="490.4" height="15.0" fill="rgb(248,205,54)" rx="2" ry="2" />
<text  x="35.99" y="239.5" >remote_function</text>
</g>
<g >
<title>leftmatch_fb (1 samples, 0.65%)</title><rect x="25.3" y="245" width="7.7" height="15.0" fill="rgb(252,151,42)" rx="2" ry="2" />
<text  x="28.32" y="255.5" ></text>
</g>
<g >
<title>__wake_up_common (1 samples, 0.65%)</title><rect x="1021.4" y="261" width="7.7" height="15.0" fill="rgb(237,33,54)" rx="2" ry="2" />
<text  x="1024.43" y="271.5" ></text>
</g>
<g >
<title>__libc_start_main (22 samples, 14.29%)</title><rect x="1013.8" y="469" width="168.5" height="15.0" fill="rgb(223,82,50)" rx="2" ry="2" />
<text  x="1016.77" y="479.5" >__libc_start_main</text>
</g>
<g >
<title>[bash] (1 samples, 0.65%)</title><rect x="10.0" y="453" width="7.7" height="15.0" fill="rgb(251,178,26)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>__put_page (2 samples, 1.30%)</title><rect x="561.7" y="277" width="15.3" height="15.0" fill="rgb(206,197,33)" rx="2" ry="2" />
<text  x="564.69" y="287.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (2 samples, 1.30%)</title><rect x="998.4" y="357" width="15.4" height="15.0" fill="rgb(251,5,39)" rx="2" ry="2" />
<text  x="1001.44" y="367.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (1 samples, 0.65%)</title><rect x="523.4" y="197" width="7.6" height="15.0" fill="rgb(236,41,31)" rx="2" ry="2" />
<text  x="526.38" y="207.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (2 samples, 1.30%)</title><rect x="998.4" y="309" width="15.4" height="15.0" fill="rgb(244,38,1)" rx="2" ry="2" />
<text  x="1001.44" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (33 samples, 21.43%)</title><rect x="554.0" y="389" width="252.9" height="15.0" fill="rgb(242,22,31)" rx="2" ry="2" />
<text  x="557.03" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>pagecache_get_page (1 samples, 0.65%)</title><rect x="523.4" y="101" width="7.6" height="15.0" fill="rgb(250,158,45)" rx="2" ry="2" />
<text  x="526.38" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (22 samples, 14.29%)</title><rect x="1013.8" y="453" width="168.5" height="15.0" fill="rgb(229,91,16)" rx="2" ry="2" />
<text  x="1016.77" y="463.5" >[libc.so.6]</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.65%)</title><rect x="1182.3" y="469" width="7.7" height="15.0" fill="rgb(217,140,16)" rx="2" ry="2" />
<text  x="1185.34" y="479.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (7 samples, 4.55%)</title><rect x="669.0" y="117" width="53.6" height="15.0" fill="rgb(215,4,43)" rx="2" ry="2" />
<text  x="671.96" y="127.5" >__all..</text>
</g>
<g >
<title>uncharge_batch (1 samples, 0.65%)</title><rect x="569.4" y="245" width="7.6" height="15.0" fill="rgb(226,165,51)" rx="2" ry="2" />
<text  x="572.35" y="255.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (1 samples, 0.65%)</title><rect x="523.4" y="165" width="7.6" height="15.0" fill="rgb(233,198,32)" rx="2" ry="2" />
<text  x="526.38" y="175.5" ></text>
</g>
<g >
<title>copy_word_list (1 samples, 0.65%)</title><rect x="17.7" y="309" width="7.6" height="15.0" fill="rgb(250,194,29)" rx="2" ry="2" />
<text  x="20.66" y="319.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (1 samples, 0.65%)</title><rect x="523.4" y="133" width="7.6" height="15.0" fill="rgb(213,10,23)" rx="2" ry="2" />
<text  x="526.38" y="143.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (14 samples, 9.09%)</title><rect x="653.6" y="245" width="107.3" height="15.0" fill="rgb(223,203,48)" rx="2" ry="2" />
<text  x="656.64" y="255.5" >asm_exc_page_..</text>
</g>
<g >
<title>rmqueue (2 samples, 1.30%)</title><rect x="707.3" y="85" width="15.3" height="15.0" fill="rgb(253,215,16)" rx="2" ry="2" />
<text  x="710.27" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 1.95%)</title><rect x="531.0" y="389" width="23.0" height="15.0" fill="rgb(206,170,48)" rx="2" ry="2" />
<text  x="534.04" y="399.5" >e..</text>
</g>
<g >
<title>vfs_write (1 samples, 0.65%)</title><rect x="1182.3" y="421" width="7.7" height="15.0" fill="rgb(239,42,3)" rx="2" ry="2" />
<text  x="1185.34" y="431.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (9 samples, 5.84%)</title><rect x="577.0" y="261" width="69.0" height="15.0" fill="rgb(231,118,41)" rx="2" ry="2" />
<text  x="580.01" y="271.5" >asm_exc..</text>
</g>
<g >
<title>mem_cgroup_uncharge (1 samples, 0.65%)</title><rect x="569.4" y="261" width="7.6" height="15.0" fill="rgb(244,66,14)" rx="2" ry="2" />
<text  x="572.35" y="271.5" ></text>
</g>
<g >
<title>__do_munmap (3 samples, 1.95%)</title><rect x="531.0" y="325" width="23.0" height="15.0" fill="rgb(242,159,6)" rx="2" ry="2" />
<text  x="534.04" y="335.5" >_..</text>
</g>
<g >
<title>__mutex_lock.constprop.0 (5 samples, 3.25%)</title><rect x="768.6" y="261" width="38.3" height="15.0" fill="rgb(226,71,42)" rx="2" ry="2" />
<text  x="771.57" y="271.5" >__m..</text>
</g>
<g >
<title>ksys_write (1 samples, 0.65%)</title><rect x="523.4" y="293" width="7.6" height="15.0" fill="rgb(218,221,43)" rx="2" ry="2" />
<text  x="526.38" y="303.5" ></text>
</g>
<g >
<title>autoremove_wake_function (1 samples, 0.65%)</title><rect x="1021.4" y="245" width="7.7" height="15.0" fill="rgb(252,205,4)" rx="2" ry="2" />
<text  x="1024.43" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (13 samples, 8.44%)</title><rect x="653.6" y="181" width="99.6" height="15.0" fill="rgb(214,87,39)" rx="2" ry="2" />
<text  x="656.64" y="191.5" >__handle_mm_..</text>
</g>
<g >
<title>perf_evsel__run_ioctl (64 samples, 41.56%)</title><rect x="33.0" y="421" width="490.4" height="15.0" fill="rgb(207,51,40)" rx="2" ry="2" />
<text  x="35.99" y="431.5" >perf_evsel__run_ioctl</text>
</g>
<g >
<title>__mod_zone_page_state (1 samples, 0.65%)</title><rect x="538.7" y="117" width="7.7" height="15.0" fill="rgb(250,52,37)" rx="2" ry="2" />
<text  x="541.70" y="127.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (2 samples, 1.30%)</title><rect x="998.4" y="469" width="15.4" height="15.0" fill="rgb(242,187,30)" rx="2" ry="2" />
<text  x="1001.44" y="479.5" ></text>
</g>
<g >
<title>pipe_write (1 samples, 0.65%)</title><rect x="1182.3" y="389" width="7.7" height="15.0" fill="rgb(253,2,30)" rx="2" ry="2" />
<text  x="1185.34" y="399.5" ></text>
</g>
<g >
<title>reader_loop (1 samples, 0.65%)</title><rect x="17.7" y="421" width="7.6" height="15.0" fill="rgb(253,75,43)" rx="2" ry="2" />
<text  x="20.66" y="431.5" ></text>
</g>
<g >
<title>__cmd_record (65 samples, 42.21%)</title><rect x="33.0" y="469" width="498.0" height="15.0" fill="rgb(232,224,32)" rx="2" ry="2" />
<text  x="35.99" y="479.5" >__cmd_record</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.65%)</title><rect x="523.4" y="341" width="7.6" height="15.0" fill="rgb(230,213,54)" rx="2" ry="2" />
<text  x="526.38" y="351.5" ></text>
</g>
<g >
<title>event_function_call (64 samples, 41.56%)</title><rect x="33.0" y="277" width="490.4" height="15.0" fill="rgb(221,159,29)" rx="2" ry="2" />
<text  x="35.99" y="287.5" >event_function_call</text>
</g>
<g >
<title>unmap_page_range (3 samples, 1.95%)</title><rect x="531.0" y="261" width="23.0" height="15.0" fill="rgb(238,139,46)" rx="2" ry="2" />
<text  x="534.04" y="271.5" >u..</text>
</g>
<g >
<title>zap_pte_range (3 samples, 1.95%)</title><rect x="531.0" y="229" width="23.0" height="15.0" fill="rgb(214,57,13)" rx="2" ry="2" />
<text  x="534.04" y="239.5" >z..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (64 samples, 41.56%)</title><rect x="33.0" y="389" width="490.4" height="15.0" fill="rgb(240,60,26)" rx="2" ry="2" />
<text  x="35.99" y="399.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>do_execveat_common (1 samples, 0.65%)</title><rect x="25.3" y="357" width="7.7" height="15.0" fill="rgb(222,199,39)" rx="2" ry="2" />
<text  x="28.32" y="367.5" ></text>
</g>
<g >
<title>bprm_execve (1 samples, 0.65%)</title><rect x="25.3" y="341" width="7.7" height="15.0" fill="rgb(248,9,29)" rx="2" ry="2" />
<text  x="28.32" y="351.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.65%)</title><rect x="17.7" y="261" width="7.6" height="15.0" fill="rgb(243,198,21)" rx="2" ry="2" />
<text  x="20.66" y="271.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.65%)</title><rect x="822.2" y="341" width="7.7" height="15.0" fill="rgb(242,199,16)" rx="2" ry="2" />
<text  x="825.21" y="351.5" ></text>
</g>
<g >
<title>rmqueue_pcplist.constprop.0 (2 samples, 1.30%)</title><rect x="707.3" y="69" width="15.3" height="15.0" fill="rgb(217,221,10)" rx="2" ry="2" />
<text  x="710.27" y="79.5" ></text>
</g>
<g >
<title>perf_mmap__push (1 samples, 0.65%)</title><rect x="523.4" y="421" width="7.6" height="15.0" fill="rgb(225,133,29)" rx="2" ry="2" />
<text  x="526.38" y="431.5" ></text>
</g>
<g >
<title>generic_exec_single (64 samples, 41.56%)</title><rect x="33.0" y="245" width="490.4" height="15.0" fill="rgb(222,177,14)" rx="2" ry="2" />
<text  x="35.99" y="255.5" >generic_exec_single</text>
</g>
<g >
<title>ovl_write_iter (1 samples, 0.65%)</title><rect x="523.4" y="245" width="7.6" height="15.0" fill="rgb(208,112,49)" rx="2" ry="2" />
<text  x="526.38" y="255.5" ></text>
</g>
<g >
<title>vfs_read (33 samples, 21.43%)</title><rect x="554.0" y="341" width="252.9" height="15.0" fill="rgb(215,121,52)" rx="2" ry="2" />
<text  x="557.03" y="351.5" >vfs_read</text>
</g>
<g >
<title>try_charge (2 samples, 1.30%)</title><rect x="737.9" y="117" width="15.3" height="15.0" fill="rgb(237,6,50)" rx="2" ry="2" />
<text  x="740.92" y="127.5" ></text>
</g>
<g >
<title>arch_call_rest_init (2 samples, 1.30%)</title><rect x="998.4" y="421" width="15.4" height="15.0" fill="rgb(235,100,16)" rx="2" ry="2" />
<text  x="1001.44" y="431.5" ></text>
</g>
<g >
<title>__perf_event_enable (64 samples, 41.56%)</title><rect x="33.0" y="197" width="490.4" height="15.0" fill="rgb(241,185,43)" rx="2" ry="2" />
<text  x="35.99" y="207.5" >__perf_event_enable</text>
</g>
<g >
<title>do_syscall_64 (3 samples, 1.95%)</title><rect x="531.0" y="373" width="23.0" height="15.0" fill="rgb(230,13,20)" rx="2" ry="2" />
<text  x="534.04" y="383.5" >d..</text>
</g>
<g >
<title>__cmd_record (1 samples, 0.65%)</title><rect x="25.3" y="469" width="7.7" height="15.0" fill="rgb(223,54,18)" rx="2" ry="2" />
<text  x="28.32" y="479.5" ></text>
</g>
<g >
<title>_perf_ioctl (64 samples, 41.56%)</title><rect x="33.0" y="325" width="490.4" height="15.0" fill="rgb(241,136,42)" rx="2" ry="2" />
<text  x="35.99" y="335.5" >_perf_ioctl</text>
</g>
<g >
<title>all (154 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(229,121,33)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>execute_command (1 samples, 0.65%)</title><rect x="17.7" y="405" width="7.6" height="15.0" fill="rgb(216,88,1)" rx="2" ry="2" />
<text  x="20.66" y="415.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.65%)</title><rect x="1021.4" y="213" width="7.7" height="15.0" fill="rgb(224,102,49)" rx="2" ry="2" />
<text  x="1024.43" y="223.5" ></text>
</g>
<g >
<title>__munmap (3 samples, 1.95%)</title><rect x="531.0" y="405" width="23.0" height="15.0" fill="rgb(249,148,29)" rx="2" ry="2" />
<text  x="534.04" y="415.5" >_..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.65%)</title><rect x="17.7" y="197" width="7.6" height="15.0" fill="rgb(224,31,49)" rx="2" ry="2" />
<text  x="20.66" y="207.5" ></text>
</g>
<g >
<title>profile_transition (1 samples, 0.65%)</title><rect x="25.3" y="277" width="7.7" height="15.0" fill="rgb(231,119,31)" rx="2" ry="2" />
<text  x="28.32" y="287.5" ></text>
</g>
<g >
<title>apparmor_bprm_creds_for_exec (1 samples, 0.65%)</title><rect x="25.3" y="293" width="7.7" height="15.0" fill="rgb(236,112,54)" rx="2" ry="2" />
<text  x="28.32" y="303.5" ></text>
</g>
<g >
<title>mutex_spin_on_owner (12 samples, 7.79%)</title><rect x="1082.7" y="245" width="92.0" height="15.0" fill="rgb(220,56,29)" rx="2" ry="2" />
<text  x="1085.73" y="255.5" >mutex_spin..</text>
</g>
<g >
<title>new_sync_write (1 samples, 0.65%)</title><rect x="1182.3" y="405" width="7.7" height="15.0" fill="rgb(216,35,14)" rx="2" ry="2" />
<text  x="1185.34" y="415.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.65%)</title><rect x="822.2" y="357" width="7.7" height="15.0" fill="rgb(208,222,41)" rx="2" ry="2" />
<text  x="825.21" y="367.5" ></text>
</g>
<g >
<title>read_from_pipe_ (36 samples, 23.38%)</title><rect x="531.0" y="501" width="275.9" height="15.0" fill="rgb(222,85,7)" rx="2" ry="2" />
<text  x="534.04" y="511.5" >read_from_pipe_</text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.65%)</title><rect x="538.7" y="149" width="7.7" height="15.0" fill="rgb(217,124,13)" rx="2" ry="2" />
<text  x="541.70" y="159.5" ></text>
</g>
<g >
<title>cpu_startup_entry (23 samples, 14.94%)</title><rect x="822.2" y="453" width="176.2" height="15.0" fill="rgb(218,26,51)" rx="2" ry="2" />
<text  x="825.21" y="463.5" >cpu_startup_entry</text>
</g>
<g >
<title>do_idle (23 samples, 14.94%)</title><rect x="822.2" y="437" width="176.2" height="15.0" fill="rgb(237,50,18)" rx="2" ry="2" />
<text  x="825.21" y="447.5" >do_idle</text>
</g>
<g >
<title>cfree (3 samples, 1.95%)</title><rect x="531.0" y="421" width="23.0" height="15.0" fill="rgb(228,192,41)" rx="2" ry="2" />
<text  x="534.04" y="431.5" >c..</text>
</g>
<g >
<title>perf_evsel__enable_cpu (64 samples, 41.56%)</title><rect x="33.0" y="437" width="490.4" height="15.0" fill="rgb(243,93,52)" rx="2" ry="2" />
<text  x="35.99" y="447.5" >perf_evsel__enable_cpu</text>
</g>
<g >
<title>do_user_addr_fault (14 samples, 9.09%)</title><rect x="653.6" y="213" width="107.3" height="15.0" fill="rgb(246,73,8)" rx="2" ry="2" />
<text  x="656.64" y="223.5" >do_user_addr_..</text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.65%)</title><rect x="25.3" y="373" width="7.7" height="15.0" fill="rgb(236,163,41)" rx="2" ry="2" />
<text  x="28.32" y="383.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.65%)</title><rect x="822.2" y="373" width="7.7" height="15.0" fill="rgb(223,147,22)" rx="2" ry="2" />
<text  x="825.21" y="383.5" ></text>
</g>
<g >
<title>new_sync_write (22 samples, 14.29%)</title><rect x="1013.8" y="325" width="168.5" height="15.0" fill="rgb(245,15,53)" rx="2" ry="2" />
<text  x="1016.77" y="335.5" >new_sync_write</text>
</g>
<g >
<title>do_fault_around (1 samples, 0.65%)</title><rect x="17.7" y="149" width="7.6" height="15.0" fill="rgb(205,169,48)" rx="2" ry="2" />
<text  x="20.66" y="159.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.65%)</title><rect x="538.7" y="165" width="7.7" height="15.0" fill="rgb(209,206,18)" rx="2" ry="2" />
<text  x="541.70" y="175.5" ></text>
</g>
<g >
<title>record__write (1 samples, 0.65%)</title><rect x="523.4" y="389" width="7.6" height="15.0" fill="rgb(227,151,24)" rx="2" ry="2" />
<text  x="526.38" y="399.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (2 samples, 1.30%)</title><rect x="1067.4" y="261" width="15.3" height="15.0" fill="rgb(224,35,38)" rx="2" ry="2" />
<text  x="1070.40" y="271.5" ></text>
</g>
<g >
<title>mutex_spin_on_owner (1 samples, 0.65%)</title><rect x="1182.3" y="325" width="7.7" height="15.0" fill="rgb(240,36,17)" rx="2" ry="2" />
<text  x="1185.34" y="335.5" ></text>
</g>
<g >
<title>cpuidle_enter (2 samples, 1.30%)</title><rect x="998.4" y="341" width="15.4" height="15.0" fill="rgb(213,77,42)" rx="2" ry="2" />
<text  x="1001.44" y="351.5" ></text>
</g>
<g >
<title>select_task_rq_fair (1 samples, 0.65%)</title><rect x="1021.4" y="197" width="7.7" height="15.0" fill="rgb(216,197,35)" rx="2" ry="2" />
<text  x="1024.43" y="207.5" ></text>
</g>
<g >
<title>main (1 samples, 0.65%)</title><rect x="17.7" y="437" width="7.6" height="15.0" fill="rgb(241,105,2)" rx="2" ry="2" />
<text  x="20.66" y="447.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.65%)</title><rect x="523.4" y="37" width="7.6" height="15.0" fill="rgb(219,22,32)" rx="2" ry="2" />
<text  x="526.38" y="47.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.65%)</title><rect x="25.3" y="485" width="7.7" height="15.0" fill="rgb(216,106,19)" rx="2" ry="2" />
<text  x="28.32" y="495.5" ></text>
</g>
<g >
<title>generic_perform_write (1 samples, 0.65%)</title><rect x="523.4" y="149" width="7.6" height="15.0" fill="rgb(236,3,6)" rx="2" ry="2" />
<text  x="526.38" y="159.5" ></text>
</g>
<g >
<title>ctx_resched (64 samples, 41.56%)</title><rect x="33.0" y="181" width="490.4" height="15.0" fill="rgb(220,86,20)" rx="2" ry="2" />
<text  x="35.99" y="191.5" >ctx_resched</text>
</g>
<g >
<title>__x64_sys_write (22 samples, 14.29%)</title><rect x="1013.8" y="373" width="168.5" height="15.0" fill="rgb(245,15,22)" rx="2" ry="2" />
<text  x="1016.77" y="383.5" >__x64_sys_write</text>
</g>
<g >
<title>secondary_startup_64_no_verify (25 samples, 16.23%)</title><rect x="822.2" y="485" width="191.6" height="15.0" fill="rgb(221,152,9)" rx="2" ry="2" />
<text  x="825.21" y="495.5" >secondary_startup_64_no_v..</text>
</g>
<g >
<title>_perf_event_enable (64 samples, 41.56%)</title><rect x="33.0" y="293" width="490.4" height="15.0" fill="rgb(220,153,22)" rx="2" ry="2" />
<text  x="35.99" y="303.5" >_perf_event_enable</text>
</g>
<g >
<title>schedule (1 samples, 0.65%)</title><rect x="1174.7" y="293" width="7.6" height="15.0" fill="rgb(219,17,8)" rx="2" ry="2" />
<text  x="1177.68" y="303.5" ></text>
</g>
<g >
<title>copy_page_from_iter (2 samples, 1.30%)</title><rect x="1067.4" y="293" width="15.3" height="15.0" fill="rgb(233,225,51)" rx="2" ry="2" />
<text  x="1070.40" y="303.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (3 samples, 1.95%)</title><rect x="1029.1" y="261" width="23.0" height="15.0" fill="rgb(209,75,28)" rx="2" ry="2" />
<text  x="1032.09" y="271.5" >_..</text>
</g>
<g >
<title>ksys_write (22 samples, 14.29%)</title><rect x="1013.8" y="357" width="168.5" height="15.0" fill="rgb(254,188,33)" rx="2" ry="2" />
<text  x="1016.77" y="367.5" >ksys_write</text>
</g>
<g >
<title>tick_nohz_idle_exit (1 samples, 0.65%)</title><rect x="990.8" y="421" width="7.6" height="15.0" fill="rgb(241,113,32)" rx="2" ry="2" />
<text  x="993.78" y="431.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (22 samples, 14.29%)</title><rect x="822.2" y="421" width="168.6" height="15.0" fill="rgb(215,165,14)" rx="2" ry="2" />
<text  x="825.21" y="431.5" >cpuidle_idle_call</text>
</g>
<g >
<title>event_function (64 samples, 41.56%)</title><rect x="33.0" y="213" width="490.4" height="15.0" fill="rgb(224,187,47)" rx="2" ry="2" />
<text  x="35.99" y="223.5" >event_function</text>
</g>
<g >
<title>__mutex_lock_slowpath (5 samples, 3.25%)</title><rect x="768.6" y="277" width="38.3" height="15.0" fill="rgb(213,104,7)" rx="2" ry="2" />
<text  x="771.57" y="287.5" >__m..</text>
</g>
<g >
<title>handle_pte_fault (12 samples, 7.79%)</title><rect x="661.3" y="165" width="91.9" height="15.0" fill="rgb(246,135,38)" rx="2" ry="2" />
<text  x="664.30" y="175.5" >handle_pte..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.65%)</title><rect x="25.3" y="389" width="7.7" height="15.0" fill="rgb(229,188,3)" rx="2" ry="2" />
<text  x="28.32" y="399.5" ></text>
</g>
<g >
<title>free_unref_page (1 samples, 0.65%)</title><rect x="561.7" y="261" width="7.7" height="15.0" fill="rgb(208,101,27)" rx="2" ry="2" />
<text  x="564.69" y="271.5" ></text>
</g>
<g >
<title>anon_pipe_buf_release (3 samples, 1.95%)</title><rect x="554.0" y="293" width="23.0" height="15.0" fill="rgb(244,220,19)" rx="2" ry="2" />
<text  x="557.03" y="303.5" >a..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.65%)</title><rect x="17.7" y="245" width="7.6" height="15.0" fill="rgb(236,224,5)" rx="2" ry="2" />
<text  x="20.66" y="255.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.65%)</title><rect x="538.7" y="133" width="7.7" height="15.0" fill="rgb(221,196,38)" rx="2" ry="2" />
<text  x="541.70" y="143.5" ></text>
</g>
<g >
<title>smp_call_function_single (64 samples, 41.56%)</title><rect x="33.0" y="261" width="490.4" height="15.0" fill="rgb(214,167,24)" rx="2" ry="2" />
<text  x="35.99" y="271.5" >smp_call_function_single</text>
</g>
<g >
<title>alloc_pages_vma (8 samples, 5.19%)</title><rect x="661.3" y="133" width="61.3" height="15.0" fill="rgb(232,193,43)" rx="2" ry="2" />
<text  x="664.30" y="143.5" >alloc_..</text>
</g>
<g >
<title>cpuidle_enter (22 samples, 14.29%)</title><rect x="822.2" y="405" width="168.6" height="15.0" fill="rgb(245,228,39)" rx="2" ry="2" />
<text  x="825.21" y="415.5" >cpuidle_enter</text>
</g>
<g >
<title>pipe_read (33 samples, 21.43%)</title><rect x="554.0" y="309" width="252.9" height="15.0" fill="rgb(205,9,4)" rx="2" ry="2" />
<text  x="557.03" y="319.5" >pipe_read</text>
</g>
<g >
<title>cpuidle_enter_state (2 samples, 1.30%)</title><rect x="998.4" y="325" width="15.4" height="15.0" fill="rgb(216,27,23)" rx="2" ry="2" />
<text  x="1001.44" y="335.5" ></text>
</g>
<g >
<title>__mutex_lock_slowpath (1 samples, 0.65%)</title><rect x="1182.3" y="357" width="7.7" height="15.0" fill="rgb(213,126,28)" rx="2" ry="2" />
<text  x="1185.34" y="367.5" ></text>
</g>
<g >
<title>__evlist__enable (64 samples, 41.56%)</title><rect x="33.0" y="453" width="490.4" height="15.0" fill="rgb(225,102,5)" rx="2" ry="2" />
<text  x="35.99" y="463.5" >__evlist__enable</text>
</g>
<g >
<title>mutex_lock (1 samples, 0.65%)</title><rect x="1182.3" y="373" width="7.7" height="15.0" fill="rgb(214,95,14)" rx="2" ry="2" />
<text  x="1185.34" y="383.5" ></text>
</g>
<g >
<title>clear_page_erms (4 samples, 2.60%)</title><rect x="676.6" y="85" width="30.7" height="15.0" fill="rgb(213,205,7)" rx="2" ry="2" />
<text  x="679.62" y="95.5" >cl..</text>
</g>
<g >
<title>_start (36 samples, 23.38%)</title><rect x="531.0" y="485" width="275.9" height="15.0" fill="rgb(216,25,10)" rx="2" ry="2" />
<text  x="534.04" y="495.5" >_start</text>
</g>
<g >
<title>main (36 samples, 23.38%)</title><rect x="531.0" y="437" width="275.9" height="15.0" fill="rgb(224,93,26)" rx="2" ry="2" />
<text  x="534.04" y="447.5" >main</text>
</g>
<g >
<title>do_iter_write (1 samples, 0.65%)</title><rect x="523.4" y="213" width="7.6" height="15.0" fill="rgb(237,91,15)" rx="2" ry="2" />
<text  x="526.38" y="223.5" ></text>
</g>
<g >
<title>unmap_region (3 samples, 1.95%)</title><rect x="531.0" y="309" width="23.0" height="15.0" fill="rgb(222,3,48)" rx="2" ry="2" />
<text  x="534.04" y="319.5" >u..</text>
</g>
<g >
<title>tlb_flush_mmu (2 samples, 1.30%)</title><rect x="538.7" y="213" width="15.3" height="15.0" fill="rgb(245,229,22)" rx="2" ry="2" />
<text  x="541.70" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (33 samples, 21.43%)</title><rect x="554.0" y="405" width="252.9" height="15.0" fill="rgb(230,168,19)" rx="2" ry="2" />
<text  x="557.03" y="415.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.65%)</title><rect x="523.4" y="309" width="7.6" height="15.0" fill="rgb(215,130,28)" rx="2" ry="2" />
<text  x="526.38" y="319.5" ></text>
</g>
<g >
<title>[bash] (1 samples, 0.65%)</title><rect x="17.7" y="357" width="7.6" height="15.0" fill="rgb(243,48,52)" rx="2" ry="2" />
<text  x="20.66" y="367.5" ></text>
</g>
</g>
</svg>
