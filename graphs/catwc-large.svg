<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>NaClDyncodeVisit (1 samples, 0.81%)</title><rect x="657.1" y="181" width="9.5" height="15.0" fill="rgb(205,64,48)" rx="2" ry="2" />
<text  x="660.10" y="191.5" ></text>
</g>
<g >
<title>ttwu_do_activate (1 samples, 0.81%)</title><rect x="1009.2" y="293" width="9.5" height="15.0" fill="rgb(247,137,40)" rx="2" ry="2" />
<text  x="1012.19" y="303.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.81%)</title><rect x="657.1" y="37" width="9.5" height="15.0" fill="rgb(212,62,28)" rx="2" ry="2" />
<text  x="660.10" y="47.5" ></text>
</g>
<g >
<title>[unknown] (29 samples, 23.39%)</title><rect x="647.6" y="501" width="275.9" height="15.0" fill="rgb(244,108,16)" rx="2" ry="2" />
<text  x="650.58" y="511.5" >[unknown]</text>
</g>
<g >
<title>tupledealloc.lto_priv.0 (2 samples, 1.61%)</title><rect x="942.6" y="501" width="19.0" height="15.0" fill="rgb(205,159,43)" rx="2" ry="2" />
<text  x="945.58" y="511.5" ></text>
</g>
<g >
<title>handle_mm_fault (10 samples, 8.06%)</title><rect x="828.4" y="101" width="95.1" height="15.0" fill="rgb(208,180,27)" rx="2" ry="2" />
<text  x="831.39" y="111.5" >handle_mm_f..</text>
</g>
<g >
<title>[unknown] (65 samples, 52.42%)</title><rect x="10.0" y="517" width="618.5" height="15.0" fill="rgb(211,0,4)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >[unknown]</text>
</g>
<g >
<title>call_cpuidle (17 samples, 13.71%)</title><rect x="1009.2" y="453" width="161.8" height="15.0" fill="rgb(236,127,4)" rx="2" ry="2" />
<text  x="1012.19" y="463.5" >call_cpuidle</text>
</g>
<g >
<title>NaClSyscallCSegHook (28 samples, 22.58%)</title><rect x="657.1" y="309" width="266.4" height="15.0" fill="rgb(208,81,29)" rx="2" ry="2" />
<text  x="660.10" y="319.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>__tick_nohz_idle_enter (1 samples, 0.81%)</title><rect x="1180.5" y="389" width="9.5" height="15.0" fill="rgb(250,72,49)" rx="2" ry="2" />
<text  x="1183.48" y="399.5" ></text>
</g>
<g >
<title>NaClCopyDynamicText (28 samples, 22.58%)</title><rect x="657.1" y="197" width="266.4" height="15.0" fill="rgb(247,58,44)" rx="2" ry="2" />
<text  x="660.10" y="207.5" >NaClCopyDynamicText</text>
</g>
<g >
<title>load_new_mm_cr3 (1 samples, 0.81%)</title><rect x="990.2" y="293" width="9.5" height="15.0" fill="rgb(242,70,48)" rx="2" ry="2" />
<text  x="993.16" y="303.5" ></text>
</g>
<g >
<title>NaClPatchAddr (6 samples, 4.84%)</title><rect x="666.6" y="149" width="57.1" height="15.0" fill="rgb(226,140,53)" rx="2" ry="2" />
<text  x="669.61" y="159.5" >NaClPa..</text>
</g>
<g >
<title>intel_idle (1 samples, 0.81%)</title><rect x="1171.0" y="357" width="9.5" height="15.0" fill="rgb(220,30,7)" rx="2" ry="2" />
<text  x="1173.97" y="367.5" ></text>
</g>
<g >
<title>remote_function (63 samples, 50.81%)</title><rect x="29.0" y="245" width="599.5" height="15.0" fill="rgb(219,189,44)" rx="2" ry="2" />
<text  x="32.03" y="255.5" >remote_function</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.81%)</title><rect x="657.1" y="165" width="9.5" height="15.0" fill="rgb(227,163,52)" rx="2" ry="2" />
<text  x="660.10" y="175.5" ></text>
</g>
<g >
<title>[unknown]  (28 samples, 22.58%)</title><rect x="657.1" y="437" width="266.4" height="15.0" fill="rgb(213,63,38)" rx="2" ry="2" />
<text  x="660.10" y="447.5" >[unknown] </text>
</g>
<g >
<title>core_sys_select (1 samples, 0.81%)</title><rect x="990.2" y="453" width="9.5" height="15.0" fill="rgb(252,146,47)" rx="2" ry="2" />
<text  x="993.16" y="463.5" ></text>
</g>
<g >
<title>NaClAppThreadSpawn (28 samples, 22.58%)</title><rect x="657.1" y="245" width="266.4" height="15.0" fill="rgb(211,144,6)" rx="2" ry="2" />
<text  x="660.10" y="255.5" >NaClAppThreadSpawn</text>
</g>
<g >
<title>PyEval_EvalFrameEx (1 samples, 0.81%)</title><rect x="647.6" y="485" width="9.5" height="15.0" fill="rgb(234,105,16)" rx="2" ry="2" />
<text  x="650.58" y="495.5" ></text>
</g>
<g >
<title>[unknown]  (28 samples, 22.58%)</title><rect x="657.1" y="341" width="266.4" height="15.0" fill="rgb(213,188,41)" rx="2" ry="2" />
<text  x="660.10" y="351.5" >[unknown] </text>
</g>
<g >
<title>nmi_restore (14 samples, 11.29%)</title><rect x="495.3" y="133" width="133.2" height="15.0" fill="rgb(228,21,4)" rx="2" ry="2" />
<text  x="498.32" y="143.5" >nmi_restore</text>
</g>
<g >
<title>PyEval_EvalFrameEx (1 samples, 0.81%)</title><rect x="628.5" y="517" width="9.6" height="15.0" fill="rgb(222,131,8)" rx="2" ry="2" />
<text  x="631.55" y="527.5" ></text>
</g>
<g >
<title>poll_idle (1 samples, 0.81%)</title><rect x="1161.5" y="405" width="9.5" height="15.0" fill="rgb(219,212,9)" rx="2" ry="2" />
<text  x="1164.45" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.81%)</title><rect x="990.2" y="501" width="9.5" height="15.0" fill="rgb(235,149,50)" rx="2" ry="2" />
<text  x="993.16" y="511.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.81%)</title><rect x="1009.2" y="389" width="9.5" height="15.0" fill="rgb(248,89,14)" rx="2" ry="2" />
<text  x="1012.19" y="399.5" ></text>
</g>
<g >
<title>tick_nohz_idle_enter (1 samples, 0.81%)</title><rect x="1180.5" y="405" width="9.5" height="15.0" fill="rgb(239,48,13)" rx="2" ry="2" />
<text  x="1183.48" y="415.5" ></text>
</g>
<g >
<title>sync_regs (1 samples, 0.81%)</title><rect x="790.3" y="133" width="9.5" height="15.0" fill="rgb(223,186,39)" rx="2" ry="2" />
<text  x="793.32" y="143.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.81%)</title><rect x="1009.2" y="309" width="9.5" height="15.0" fill="rgb(218,229,35)" rx="2" ry="2" />
<text  x="1012.19" y="319.5" ></text>
</g>
<g >
<title>native_irq_return_iret (2 samples, 1.61%)</title><rect x="799.8" y="149" width="19.1" height="15.0" fill="rgb(231,174,24)" rx="2" ry="2" />
<text  x="802.84" y="159.5" ></text>
</g>
<g >
<title>[perf-1795.map] (28 samples, 22.58%)</title><rect x="657.1" y="485" width="266.4" height="15.0" fill="rgb(242,152,40)" rx="2" ry="2" />
<text  x="660.10" y="495.5" >[perf-1795.map]</text>
</g>
<g >
<title>[unknown] (34 samples, 27.42%)</title><rect x="638.1" y="517" width="323.5" height="15.0" fill="rgb(249,81,29)" rx="2" ry="2" />
<text  x="641.06" y="527.5" >[unknown]</text>
</g>
<g >
<title>NaClCopyExecutionContext (28 samples, 22.58%)</title><rect x="657.1" y="213" width="266.4" height="15.0" fill="rgb(240,56,32)" rx="2" ry="2" />
<text  x="660.10" y="223.5" >NaClCopyExecutionContext</text>
</g>
<g >
<title>smp_call_function_single (63 samples, 50.81%)</title><rect x="29.0" y="277" width="599.5" height="15.0" fill="rgb(210,44,25)" rx="2" ry="2" />
<text  x="32.03" y="287.5" >smp_call_function_single</text>
</g>
<g >
<title>sys_ioctl (63 samples, 50.81%)</title><rect x="29.0" y="373" width="599.5" height="15.0" fill="rgb(219,187,17)" rx="2" ry="2" />
<text  x="32.03" y="383.5" >sys_ioctl</text>
</g>
<g >
<title>swapper (21 samples, 16.94%)</title><rect x="990.2" y="533" width="199.8" height="15.0" fill="rgb(251,52,3)" rx="2" ry="2" />
<text  x="993.16" y="543.5" >swapper</text>
</g>
<g >
<title>sys_pselect6 (1 samples, 0.81%)</title><rect x="990.2" y="469" width="9.5" height="15.0" fill="rgb(229,62,10)" rx="2" ry="2" />
<text  x="993.16" y="479.5" ></text>
</g>
<g >
<title>enter_lazy_tlb (1 samples, 0.81%)</title><rect x="990.2" y="341" width="9.5" height="15.0" fill="rgb(212,98,24)" rx="2" ry="2" />
<text  x="993.16" y="351.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.81%)</title><rect x="1009.2" y="373" width="9.5" height="15.0" fill="rgb(208,37,18)" rx="2" ry="2" />
<text  x="1012.19" y="383.5" ></text>
</g>
<g >
<title>cpuidle_enter (17 samples, 13.71%)</title><rect x="1009.2" y="437" width="161.8" height="15.0" fill="rgb(246,88,38)" rx="2" ry="2" />
<text  x="1012.19" y="447.5" >cpuidle_enter</text>
</g>
<g >
<title>page_fault (1 samples, 0.81%)</title><rect x="657.1" y="149" width="9.5" height="15.0" fill="rgb(206,71,39)" rx="2" ry="2" />
<text  x="660.10" y="159.5" ></text>
</g>
<g >
<title>NaClVmmapVisit (27 samples, 21.77%)</title><rect x="666.6" y="181" width="256.9" height="15.0" fill="rgb(215,77,49)" rx="2" ry="2" />
<text  x="669.61" y="191.5" >NaClVmmapVisit</text>
</g>
<g >
<title>generic_exec_single (63 samples, 50.81%)</title><rect x="29.0" y="261" width="599.5" height="15.0" fill="rgb(248,131,11)" rx="2" ry="2" />
<text  x="32.03" y="271.5" >generic_exec_single</text>
</g>
<g >
<title>switch_mm_irqs_off (1 samples, 0.81%)</title><rect x="990.2" y="309" width="9.5" height="15.0" fill="rgb(249,137,5)" rx="2" ry="2" />
<text  x="993.16" y="319.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (1 samples, 0.81%)</title><rect x="990.2" y="389" width="9.5" height="15.0" fill="rgb(214,146,6)" rx="2" ry="2" />
<text  x="993.16" y="399.5" ></text>
</g>
<g >
<title>__do_fault (2 samples, 1.61%)</title><rect x="828.4" y="69" width="19.0" height="15.0" fill="rgb(240,24,0)" rx="2" ry="2" />
<text  x="831.39" y="79.5" ></text>
</g>
<g >
<title>call_cpuidle (1 samples, 0.81%)</title><rect x="1171.0" y="405" width="9.5" height="15.0" fill="rgb(217,52,28)" rx="2" ry="2" />
<text  x="1173.97" y="415.5" ></text>
</g>
<g >
<title>event_function_call (63 samples, 50.81%)</title><rect x="29.0" y="293" width="599.5" height="15.0" fill="rgb(245,227,24)" rx="2" ry="2" />
<text  x="32.03" y="303.5" >event_function_call</text>
</g>
<g >
<title>NaClSysFork (28 samples, 22.58%)</title><rect x="657.1" y="277" width="266.4" height="15.0" fill="rgb(207,133,5)" rx="2" ry="2" />
<text  x="660.10" y="287.5" >NaClSysFork</text>
</g>
<g >
<title>start_kernel (2 samples, 1.61%)</title><rect x="1171.0" y="469" width="19.0" height="15.0" fill="rgb(225,28,28)" rx="2" ry="2" />
<text  x="1173.97" y="479.5" ></text>
</g>
<g >
<title>shmem_fault (2 samples, 1.61%)</title><rect x="828.4" y="53" width="19.0" height="15.0" fill="rgb(224,1,25)" rx="2" ry="2" />
<text  x="831.39" y="63.5" ></text>
</g>
<g >
<title>NaClForkThreadContextSetup (28 samples, 22.58%)</title><rect x="657.1" y="229" width="266.4" height="15.0" fill="rgb(218,222,27)" rx="2" ry="2" />
<text  x="660.10" y="239.5" >NaClForkThreadContextSetup</text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.81%)</title><rect x="1180.5" y="357" width="9.5" height="15.0" fill="rgb(252,149,12)" rx="2" ry="2" />
<text  x="1183.48" y="367.5" ></text>
</g>
<g >
<title>get_page_from_freelist (2 samples, 1.61%)</title><rect x="876.0" y="37" width="19.0" height="15.0" fill="rgb(223,135,43)" rx="2" ry="2" />
<text  x="878.97" y="47.5" ></text>
</g>
<g >
<title>cmd_record (63 samples, 50.81%)</title><rect x="29.0" y="453" width="599.5" height="15.0" fill="rgb(249,51,49)" rx="2" ry="2" />
<text  x="32.03" y="463.5" >cmd_record</text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.81%)</title><rect x="1009.2" y="357" width="9.5" height="15.0" fill="rgb(244,222,12)" rx="2" ry="2" />
<text  x="1012.19" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.81%)</title><rect x="990.2" y="485" width="9.5" height="15.0" fill="rgb(207,134,29)" rx="2" ry="2" />
<text  x="993.16" y="495.5" ></text>
</g>
<g >
<title>switch_mm (1 samples, 0.81%)</title><rect x="990.2" y="325" width="9.5" height="15.0" fill="rgb(248,119,10)" rx="2" ry="2" />
<text  x="993.16" y="335.5" ></text>
</g>
<g >
<title>__do_page_fault (11 samples, 8.87%)</title><rect x="818.9" y="117" width="104.6" height="15.0" fill="rgb(254,27,17)" rx="2" ry="2" />
<text  x="821.87" y="127.5" >__do_page_fa..</text>
</g>
<g >
<title>[unknown]  (28 samples, 22.58%)</title><rect x="657.1" y="405" width="266.4" height="15.0" fill="rgb(227,41,28)" rx="2" ry="2" />
<text  x="660.10" y="415.5" >[unknown] </text>
</g>
<g >
<title>filemap_map_pages (3 samples, 2.42%)</title><rect x="895.0" y="69" width="28.5" height="15.0" fill="rgb(213,224,36)" rx="2" ry="2" />
<text  x="898.00" y="79.5" >fi..</text>
</g>
<g >
<title>perf (65 samples, 52.42%)</title><rect x="10.0" y="533" width="618.5" height="15.0" fill="rgb(223,165,53)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >perf</text>
</g>
<g >
<title>_perf_event_enable (63 samples, 50.81%)</title><rect x="29.0" y="309" width="599.5" height="15.0" fill="rgb(219,37,51)" rx="2" ry="2" />
<text  x="32.03" y="319.5" >_perf_event_enable</text>
</g>
<g >
<title>perf_ioctl (63 samples, 50.81%)</title><rect x="29.0" y="341" width="599.5" height="15.0" fill="rgb(249,3,29)" rx="2" ry="2" />
<text  x="32.03" y="351.5" >perf_ioctl</text>
</g>
<g >
<title>NaClCreateThread (28 samples, 22.58%)</title><rect x="657.1" y="261" width="266.4" height="15.0" fill="rgb(239,166,36)" rx="2" ry="2" />
<text  x="660.10" y="271.5" >NaClCreateThread</text>
</g>
<g >
<title>page_fault (11 samples, 8.87%)</title><rect x="818.9" y="149" width="104.6" height="15.0" fill="rgb(224,195,39)" rx="2" ry="2" />
<text  x="821.87" y="159.5" >page_fault</text>
</g>
<g >
<title>do_syscall_64 (63 samples, 50.81%)</title><rect x="29.0" y="389" width="599.5" height="15.0" fill="rgb(236,6,21)" rx="2" ry="2" />
<text  x="32.03" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>alloc_pages_vma (4 samples, 3.23%)</title><rect x="856.9" y="69" width="38.1" height="15.0" fill="rgb(228,175,6)" rx="2" ry="2" />
<text  x="859.94" y="79.5" >all..</text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.81%)</title><rect x="1009.2" y="405" width="9.5" height="15.0" fill="rgb(242,150,36)" rx="2" ry="2" />
<text  x="1012.19" y="415.5" ></text>
</g>
<g >
<title>do_vfs_ioctl (63 samples, 50.81%)</title><rect x="29.0" y="357" width="599.5" height="15.0" fill="rgb(239,67,49)" rx="2" ry="2" />
<text  x="32.03" y="367.5" >do_vfs_ioctl</text>
</g>
<g >
<title>hrtimer_wakeup (1 samples, 0.81%)</title><rect x="1009.2" y="341" width="9.5" height="15.0" fill="rgb(206,30,12)" rx="2" ry="2" />
<text  x="1012.19" y="351.5" ></text>
</g>
<g >
<title>__do_fault (1 samples, 0.81%)</title><rect x="657.1" y="69" width="9.5" height="15.0" fill="rgb(247,43,28)" rx="2" ry="2" />
<text  x="660.10" y="79.5" ></text>
</g>
<g >
<title>shmem_fault (1 samples, 0.81%)</title><rect x="657.1" y="53" width="9.5" height="15.0" fill="rgb(224,128,31)" rx="2" ry="2" />
<text  x="660.10" y="63.5" ></text>
</g>
<g >
<title>cpu_startup_entry (2 samples, 1.61%)</title><rect x="1171.0" y="437" width="19.0" height="15.0" fill="rgb(234,29,44)" rx="2" ry="2" />
<text  x="1173.97" y="447.5" ></text>
</g>
<g >
<title>sel_ldr (38 samples, 30.65%)</title><rect x="628.5" y="533" width="361.7" height="15.0" fill="rgb(222,153,23)" rx="2" ry="2" />
<text  x="631.55" y="543.5" >sel_ldr</text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.81%)</title><rect x="828.4" y="37" width="9.5" height="15.0" fill="rgb(226,131,49)" rx="2" ry="2" />
<text  x="831.39" y="47.5" ></text>
</g>
<g >
<title>__switch_to_asm (1 samples, 0.81%)</title><rect x="999.7" y="517" width="9.5" height="15.0" fill="rgb(216,208,30)" rx="2" ry="2" />
<text  x="1002.68" y="527.5" ></text>
</g>
<g >
<title>all (124 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(208,201,16)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>__GI___ioctl (63 samples, 50.81%)</title><rect x="29.0" y="421" width="599.5" height="15.0" fill="rgb(225,80,53)" rx="2" ry="2" />
<text  x="32.03" y="431.5" >__GI___ioctl</text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (63 samples, 50.81%)</title><rect x="29.0" y="149" width="599.5" height="15.0" fill="rgb(228,4,2)" rx="2" ry="2" />
<text  x="32.03" y="159.5" >__intel_pmu_enable_all.constprop.23</text>
</g>
<g >
<title>secondary_startup_64 (19 samples, 15.32%)</title><rect x="1009.2" y="517" width="180.8" height="15.0" fill="rgb(208,229,0)" rx="2" ry="2" />
<text  x="1012.19" y="527.5" >secondary_startup_64</text>
</g>
<g >
<title>cpuidle_enter_state (1 samples, 0.81%)</title><rect x="1171.0" y="373" width="9.5" height="15.0" fill="rgb(216,195,37)" rx="2" ry="2" />
<text  x="1173.97" y="383.5" ></text>
</g>
<g >
<title>evlist__enable (63 samples, 50.81%)</title><rect x="29.0" y="437" width="599.5" height="15.0" fill="rgb(228,90,8)" rx="2" ry="2" />
<text  x="32.03" y="447.5" >evlist__enable</text>
</g>
<g >
<title>[unknown]  (28 samples, 22.58%)</title><rect x="657.1" y="357" width="266.4" height="15.0" fill="rgb(252,202,23)" rx="2" ry="2" />
<text  x="660.10" y="367.5" >[unknown] </text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (63 samples, 50.81%)</title><rect x="29.0" y="405" width="599.5" height="15.0" fill="rgb(224,32,49)" rx="2" ry="2" />
<text  x="32.03" y="415.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>x86_64_start_kernel (2 samples, 1.61%)</title><rect x="1171.0" y="501" width="19.0" height="15.0" fill="rgb(245,187,53)" rx="2" ry="2" />
<text  x="1173.97" y="511.5" ></text>
</g>
<g >
<title>do_idle (17 samples, 13.71%)</title><rect x="1009.2" y="469" width="161.8" height="15.0" fill="rgb(224,113,38)" rx="2" ry="2" />
<text  x="1012.19" y="479.5" >do_idle</text>
</g>
<g >
<title>event_function (63 samples, 50.81%)</title><rect x="29.0" y="229" width="599.5" height="15.0" fill="rgb(246,168,46)" rx="2" ry="2" />
<text  x="32.03" y="239.5" >event_function</text>
</g>
<g >
<title>run_builtin (63 samples, 50.81%)</title><rect x="29.0" y="469" width="599.5" height="15.0" fill="rgb(254,131,23)" rx="2" ry="2" />
<text  x="32.03" y="479.5" >run_builtin</text>
</g>
<g >
<title>freechildren (1 samples, 0.81%)</title><rect x="971.1" y="517" width="9.5" height="15.0" fill="rgb(249,223,47)" rx="2" ry="2" />
<text  x="974.13" y="527.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.81%)</title><rect x="923.5" y="501" width="9.6" height="15.0" fill="rgb(224,7,44)" rx="2" ry="2" />
<text  x="926.55" y="511.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (1 samples, 0.81%)</title><rect x="990.2" y="405" width="9.5" height="15.0" fill="rgb(243,5,25)" rx="2" ry="2" />
<text  x="993.16" y="415.5" ></text>
</g>
<g >
<title>do_page_fault (1 samples, 0.81%)</title><rect x="657.1" y="133" width="9.5" height="15.0" fill="rgb(250,33,35)" rx="2" ry="2" />
<text  x="660.10" y="143.5" ></text>
</g>
<g >
<title>get_next_timer_interrupt (1 samples, 0.81%)</title><rect x="1180.5" y="373" width="9.5" height="15.0" fill="rgb(240,194,11)" rx="2" ry="2" />
<text  x="1183.48" y="383.5" ></text>
</g>
<g >
<title>__libc_start_main (63 samples, 50.81%)</title><rect x="29.0" y="501" width="599.5" height="15.0" fill="rgb(221,145,31)" rx="2" ry="2" />
<text  x="32.03" y="511.5" >__libc_start_main</text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.81%)</title><rect x="961.6" y="485" width="9.5" height="15.0" fill="rgb(249,119,11)" rx="2" ry="2" />
<text  x="964.61" y="495.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (17 samples, 13.71%)</title><rect x="1009.2" y="421" width="161.8" height="15.0" fill="rgb(212,139,19)" rx="2" ry="2" />
<text  x="1012.19" y="431.5" >cpuidle_enter_state</text>
</g>
<g >
<title>[sel_ldr] (28 samples, 22.58%)</title><rect x="657.1" y="325" width="266.4" height="15.0" fill="rgb(221,81,35)" rx="2" ry="2" />
<text  x="660.10" y="335.5" >[sel_ldr]</text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.81%)</title><rect x="847.4" y="69" width="9.5" height="15.0" fill="rgb(219,54,40)" rx="2" ry="2" />
<text  x="850.42" y="79.5" ></text>
</g>
<g >
<title>intel_idle (15 samples, 12.10%)</title><rect x="1018.7" y="405" width="142.8" height="15.0" fill="rgb(250,90,35)" rx="2" ry="2" />
<text  x="1021.71" y="415.5" >intel_idle</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.81%)</title><rect x="657.1" y="101" width="9.5" height="15.0" fill="rgb(221,144,42)" rx="2" ry="2" />
<text  x="660.10" y="111.5" ></text>
</g>
<g >
<title>start_secondary (17 samples, 13.71%)</title><rect x="1009.2" y="501" width="161.8" height="15.0" fill="rgb(211,174,15)" rx="2" ry="2" />
<text  x="1012.19" y="511.5" >start_secondary</text>
</g>
<g >
<title>[unknown]  (28 samples, 22.58%)</title><rect x="657.1" y="453" width="266.4" height="15.0" fill="rgb(233,68,17)" rx="2" ry="2" />
<text  x="660.10" y="463.5" >[unknown] </text>
</g>
<g >
<title>[unknown]  (28 samples, 22.58%)</title><rect x="657.1" y="469" width="266.4" height="15.0" fill="rgb(237,167,44)" rx="2" ry="2" />
<text  x="660.10" y="479.5" >[unknown] </text>
</g>
<g >
<title>perf_event_for_each_child (63 samples, 50.81%)</title><rect x="29.0" y="325" width="599.5" height="15.0" fill="rgb(246,229,37)" rx="2" ry="2" />
<text  x="32.03" y="335.5" >perf_event_for_each_child</text>
</g>
<g >
<title>enqueue_task_fair (1 samples, 0.81%)</title><rect x="1009.2" y="261" width="9.5" height="15.0" fill="rgb(226,226,8)" rx="2" ry="2" />
<text  x="1012.19" y="271.5" ></text>
</g>
<g >
<title>[unknown]  (28 samples, 22.58%)</title><rect x="657.1" y="421" width="266.4" height="15.0" fill="rgb(237,175,32)" rx="2" ry="2" />
<text  x="660.10" y="431.5" >[unknown] </text>
</g>
<g >
<title>x86_pmu_enable (63 samples, 50.81%)</title><rect x="29.0" y="181" width="599.5" height="15.0" fill="rgb(207,5,9)" rx="2" ry="2" />
<text  x="32.03" y="191.5" >x86_pmu_enable</text>
</g>
<g >
<title>__alloc_pages_nodemask (4 samples, 3.23%)</title><rect x="856.9" y="53" width="38.1" height="15.0" fill="rgb(242,57,54)" rx="2" ry="2" />
<text  x="859.94" y="63.5" >__a..</text>
</g>
<g >
<title>x86_64_start_reservations (2 samples, 1.61%)</title><rect x="1171.0" y="485" width="19.0" height="15.0" fill="rgb(215,211,36)" rx="2" ry="2" />
<text  x="1173.97" y="495.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.81%)</title><rect x="990.2" y="373" width="9.5" height="15.0" fill="rgb(246,168,18)" rx="2" ry="2" />
<text  x="993.16" y="383.5" ></text>
</g>
<g >
<title>NaClSysForkDecoder (28 samples, 22.58%)</title><rect x="657.1" y="293" width="266.4" height="15.0" fill="rgb(238,196,47)" rx="2" ry="2" />
<text  x="660.10" y="303.5" >NaClSysForkDecoder</text>
</g>
<g >
<title>int_to_decimal_string.lto_priv.0 (1 samples, 0.81%)</title><rect x="933.1" y="501" width="9.5" height="15.0" fill="rgb(218,114,24)" rx="2" ry="2" />
<text  x="936.06" y="511.5" ></text>
</g>
<g >
<title>__sched_text_start (1 samples, 0.81%)</title><rect x="990.2" y="357" width="9.5" height="15.0" fill="rgb(234,213,0)" rx="2" ry="2" />
<text  x="993.16" y="367.5" ></text>
</g>
<g >
<title>[unknown]  (28 samples, 22.58%)</title><rect x="657.1" y="373" width="266.4" height="15.0" fill="rgb(243,99,19)" rx="2" ry="2" />
<text  x="660.10" y="383.5" >[unknown] </text>
</g>
<g >
<title>do_page_fault (11 samples, 8.87%)</title><rect x="818.9" y="133" width="104.6" height="15.0" fill="rgb(231,8,20)" rx="2" ry="2" />
<text  x="821.87" y="143.5" >do_page_fault</text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.81%)</title><rect x="29.0" y="133" width="9.5" height="15.0" fill="rgb(208,177,45)" rx="2" ry="2" />
<text  x="32.03" y="143.5" ></text>
</g>
<g >
<title>main (63 samples, 50.81%)</title><rect x="29.0" y="485" width="599.5" height="15.0" fill="rgb(221,188,2)" rx="2" ry="2" />
<text  x="32.03" y="495.5" >main</text>
</g>
<g >
<title>rest_init (2 samples, 1.61%)</title><rect x="1171.0" y="453" width="19.0" height="15.0" fill="rgb(253,90,37)" rx="2" ry="2" />
<text  x="1173.97" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.81%)</title><rect x="990.2" y="517" width="9.5" height="15.0" fill="rgb(254,227,23)" rx="2" ry="2" />
<text  x="993.16" y="527.5" ></text>
</g>
<g >
<title>do_select (1 samples, 0.81%)</title><rect x="990.2" y="437" width="9.5" height="15.0" fill="rgb(242,147,32)" rx="2" ry="2" />
<text  x="993.16" y="447.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10 samples, 8.06%)</title><rect x="828.4" y="85" width="95.1" height="15.0" fill="rgb(248,91,37)" rx="2" ry="2" />
<text  x="831.39" y="95.5" >__handle_mm..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.81%)</title><rect x="657.1" y="85" width="9.5" height="15.0" fill="rgb(237,62,25)" rx="2" ry="2" />
<text  x="660.10" y="95.5" ></text>
</g>
<g >
<title>account_entity_enqueue (1 samples, 0.81%)</title><rect x="1009.2" y="229" width="9.5" height="15.0" fill="rgb(230,130,17)" rx="2" ry="2" />
<text  x="1012.19" y="239.5" ></text>
</g>
<g >
<title>__perf_event_enable (63 samples, 50.81%)</title><rect x="29.0" y="213" width="599.5" height="15.0" fill="rgb(247,64,48)" rx="2" ry="2" />
<text  x="32.03" y="223.5" >__perf_event_enable</text>
</g>
<g >
<title>error_entry (1 samples, 0.81%)</title><rect x="790.3" y="149" width="9.5" height="15.0" fill="rgb(247,28,32)" rx="2" ry="2" />
<text  x="793.32" y="159.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.81%)</title><rect x="657.1" y="117" width="9.5" height="15.0" fill="rgb(241,115,30)" rx="2" ry="2" />
<text  x="660.10" y="127.5" ></text>
</g>
<g >
<title>PyObject_Malloc (1 samples, 0.81%)</title><rect x="638.1" y="501" width="9.5" height="15.0" fill="rgb(217,222,41)" rx="2" ry="2" />
<text  x="641.06" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_sigaction (1 samples, 0.81%)</title><rect x="961.6" y="501" width="9.5" height="15.0" fill="rgb(246,1,21)" rx="2" ry="2" />
<text  x="964.61" y="511.5" ></text>
</g>
<g >
<title>down_read_trylock (1 samples, 0.81%)</title><rect x="818.9" y="101" width="9.5" height="15.0" fill="rgb(241,222,53)" rx="2" ry="2" />
<text  x="821.87" y="111.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (63 samples, 50.81%)</title><rect x="29.0" y="165" width="599.5" height="15.0" fill="rgb(240,80,51)" rx="2" ry="2" />
<text  x="32.03" y="175.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>clear_page_erms (2 samples, 1.61%)</title><rect x="856.9" y="37" width="19.1" height="15.0" fill="rgb(244,104,7)" rx="2" ry="2" />
<text  x="859.94" y="47.5" ></text>
</g>
<g >
<title>poll_schedule_timeout (1 samples, 0.81%)</title><rect x="990.2" y="421" width="9.5" height="15.0" fill="rgb(229,135,48)" rx="2" ry="2" />
<text  x="993.16" y="431.5" ></text>
</g>
<g >
<title>shmem_getpage_gfp (1 samples, 0.81%)</title><rect x="837.9" y="37" width="9.5" height="15.0" fill="rgb(231,114,14)" rx="2" ry="2" />
<text  x="840.90" y="47.5" ></text>
</g>
<g >
<title>radix_tree_next_chunk (2 samples, 1.61%)</title><rect x="904.5" y="53" width="19.0" height="15.0" fill="rgb(208,23,10)" rx="2" ry="2" />
<text  x="907.52" y="63.5" ></text>
</g>
<g >
<title>NaClVmCopyEntry (6 samples, 4.84%)</title><rect x="666.6" y="165" width="57.1" height="15.0" fill="rgb(241,227,52)" rx="2" ry="2" />
<text  x="669.61" y="175.5" >NaClVm..</text>
</g>
<g >
<title>activate_task (1 samples, 0.81%)</title><rect x="1009.2" y="277" width="9.5" height="15.0" fill="rgb(210,96,19)" rx="2" ry="2" />
<text  x="1012.19" y="287.5" ></text>
</g>
<g >
<title>[unknown]  (28 samples, 22.58%)</title><rect x="657.1" y="389" width="266.4" height="15.0" fill="rgb(213,143,53)" rx="2" ry="2" />
<text  x="660.10" y="399.5" >[unknown] </text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (21 samples, 16.94%)</title><rect x="723.7" y="165" width="199.8" height="15.0" fill="rgb(214,142,8)" rx="2" ry="2" />
<text  x="726.71" y="175.5" >__memmove_avx_unaligned_erms</text>
</g>
<g >
<title>__clone (1 samples, 0.81%)</title><rect x="961.6" y="517" width="9.5" height="15.0" fill="rgb(235,220,35)" rx="2" ry="2" />
<text  x="964.61" y="527.5" ></text>
</g>
<g >
<title>listiter_next.lto_priv.0 (1 samples, 0.81%)</title><rect x="980.6" y="517" width="9.6" height="15.0" fill="rgb(209,119,28)" rx="2" ry="2" />
<text  x="983.65" y="527.5" ></text>
</g>
<g >
<title>do_idle (2 samples, 1.61%)</title><rect x="1171.0" y="421" width="19.0" height="15.0" fill="rgb(211,179,28)" rx="2" ry="2" />
<text  x="1173.97" y="431.5" ></text>
</g>
<g >
<title>native_write_msr (48 samples, 38.71%)</title><rect x="38.5" y="133" width="456.8" height="15.0" fill="rgb(239,213,29)" rx="2" ry="2" />
<text  x="41.55" y="143.5" >native_write_msr</text>
</g>
<g >
<title>cpu_startup_entry (17 samples, 13.71%)</title><rect x="1009.2" y="485" width="161.8" height="15.0" fill="rgb(238,180,8)" rx="2" ry="2" />
<text  x="1012.19" y="495.5" >cpu_startup_entry</text>
</g>
<g >
<title>enqueue_entity (1 samples, 0.81%)</title><rect x="1009.2" y="245" width="9.5" height="15.0" fill="rgb(210,103,18)" rx="2" ry="2" />
<text  x="1012.19" y="255.5" ></text>
</g>
<g >
<title>wake_up_process (1 samples, 0.81%)</title><rect x="1009.2" y="325" width="9.5" height="15.0" fill="rgb(240,69,54)" rx="2" ry="2" />
<text  x="1012.19" y="335.5" ></text>
</g>
<g >
<title>ctx_resched (63 samples, 50.81%)</title><rect x="29.0" y="197" width="599.5" height="15.0" fill="rgb(219,215,27)" rx="2" ry="2" />
<text  x="32.03" y="207.5" >ctx_resched</text>
</g>
<g >
<title>cpuidle_enter (1 samples, 0.81%)</title><rect x="1171.0" y="389" width="9.5" height="15.0" fill="rgb(210,48,54)" rx="2" ry="2" />
<text  x="1173.97" y="399.5" ></text>
</g>
</g>
</svg>
