<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="662.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="645" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="645" > </text>
<g id="frames">
<g >
<title>intel_idle (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="389" width="45.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1147.99" y="399.5" >inte..</text>
</g>
<g >
<title>cpuidle_idle_call (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="517" width="131.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1016.29" y="527.5" >cpuidle_idle_call</text>
</g>
<g >
<title>perf_ioctl (5,476,567 samples, 0.15%)</title><rect x="585.6" y="437" width="1.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="588.60" y="447.5" ></text>
</g>
<g >
<title>load_elf_phdrs (227,442,290 samples, 6.43%)</title><rect x="509.8" y="373" width="75.8" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="512.77" y="383.5" >load_elf..</text>
</g>
<g >
<title>__x64_sys_ioctl (5,476,567 samples, 0.15%)</title><rect x="585.6" y="453" width="1.8" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="588.60" y="463.5" ></text>
</g>
<g >
<title>xas_start (51,316,357 samples, 1.45%)</title><rect x="187.1" y="149" width="17.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="190.06" y="159.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (50,573,375 samples, 1.43%)</title><rect x="258.0" y="101" width="16.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="261.02" y="111.5" ></text>
</g>
<g >
<title>___slab_alloc (52,763,514 samples, 1.49%)</title><rect x="240.4" y="101" width="17.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="243.42" y="111.5" ></text>
</g>
<g >
<title>search_binary_handler (227,442,290 samples, 6.43%)</title><rect x="509.8" y="389" width="75.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="512.77" y="399.5" >search_b..</text>
</g>
<g >
<title>do_idle (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="469" width="45.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1147.99" y="479.5" >do_i..</text>
</g>
<g >
<title>ovl_copyfile (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="405" width="499.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >ovl_copyfile</text>
</g>
<g >
<title>x86_64_start_kernel (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="565" width="45.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1147.99" y="575.5" >x86_..</text>
</g>
<g >
<title>[cat] (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="581" width="499.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >[cat]</text>
</g>
<g >
<title>create_empty_buffers (212,063,165 samples, 5.99%)</title><rect x="204.2" y="181" width="70.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="207.17" y="191.5" >create_..</text>
</g>
<g >
<title>__mem_cgroup_charge (165,832,464 samples, 4.69%)</title><rect x="115.9" y="149" width="55.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="118.94" y="159.5" >__mem..</text>
</g>
<g >
<title>execve (227,442,290 samples, 6.43%)</title><rect x="509.8" y="517" width="75.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="512.77" y="527.5" >execve</text>
</g>
<g >
<title>rest_init (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="501" width="45.0" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1147.99" y="511.5" >rest..</text>
</g>
<g >
<title>page_counter_try_charge (51,218,803 samples, 1.45%)</title><rect x="154.2" y="101" width="17.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="157.16" y="111.5" ></text>
</g>
<g >
<title>do_iter_write (1,447,709,184 samples, 40.91%)</title><rect x="27.1" y="293" width="482.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="30.06" y="303.5" >do_iter_write</text>
</g>
<g >
<title>igc_poll (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="341" width="131.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1016.29" y="351.5" >igc_poll</text>
</g>
<g >
<title>ext4_dirty_inode (358,222,355 samples, 10.12%)</title><rect x="303.4" y="165" width="119.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="306.37" y="175.5" >ext4_dirty_inode</text>
</g>
<g >
<title>ctx_resched (5,476,567 samples, 0.15%)</title><rect x="585.6" y="277" width="1.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="588.60" y="287.5" ></text>
</g>
<g >
<title>cpu_startup_entry (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="549" width="131.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1016.29" y="559.5" >cpu_startup_entry</text>
</g>
<g >
<title>__libc_start_main (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="565" width="499.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >__libc_start_main</text>
</g>
<g >
<title>allocate_slab (52,763,514 samples, 1.49%)</title><rect x="240.4" y="69" width="17.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="243.42" y="79.5" ></text>
</g>
<g >
<title>ip_sublist_rcv (261,751,201 samples, 7.40%)</title><rect x="1013.3" y="261" width="87.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1016.29" y="271.5" >ip_sublist..</text>
</g>
<g >
<title>start_secondary (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="565" width="131.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1016.29" y="575.5" >start_secondary</text>
</g>
<g >
<title>ext4_fc_track_inode (50,965,096 samples, 1.44%)</title><rect x="303.4" y="133" width="17.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="306.37" y="143.5" ></text>
</g>
<g >
<title>evlist__prepare_workload (227,442,290 samples, 6.43%)</title><rect x="509.8" y="549" width="75.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="512.77" y="559.5" >evlist__..</text>
</g>
<g >
<title>__switch_to_asm (230,599,245 samples, 6.52%)</title><rect x="837.1" y="581" width="76.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="840.09" y="591.5" >__switch..</text>
</g>
<g >
<title>page_cache_pipe_buf_release (51,169,072 samples, 1.45%)</title><rect x="10.0" y="309" width="17.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="485" width="499.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >do_syscall_64</text>
</g>
<g >
<title>ret_from_fork_asm (297,862,730 samples, 8.42%)</title><rect x="914.0" y="581" width="99.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="916.97" y="591.5" >ret_from_for..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="501" width="499.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>call_cpuidle (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="437" width="45.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1147.99" y="447.5" >call..</text>
</g>
<g >
<title>ext4_inode_csum_set (156,334,099 samples, 4.42%)</title><rect x="370.7" y="85" width="52.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="373.68" y="95.5" >ext4_..</text>
</g>
<g >
<title>ioctl (5,476,567 samples, 0.15%)</title><rect x="585.6" y="501" width="1.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="588.60" y="511.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (138,125,827 samples, 3.90%)</title><rect x="422.8" y="85" width="46.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="425.81" y="95.5" >__mo..</text>
</g>
<g >
<title>ret_from_fork (297,862,730 samples, 8.42%)</title><rect x="914.0" y="565" width="99.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="916.97" y="575.5" >ret_from_fork</text>
</g>
<g >
<title>do_syscall_64 (227,442,290 samples, 6.43%)</title><rect x="509.8" y="485" width="75.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="512.77" y="495.5" >do_sysca..</text>
</g>
<g >
<title>bprm_execve (227,442,290 samples, 6.43%)</title><rect x="509.8" y="437" width="75.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="512.77" y="447.5" >bprm_exe..</text>
</g>
<g >
<title>irq_exit_rcu (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="421" width="131.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1016.29" y="431.5" >irq_exit_rcu</text>
</g>
<g >
<title>arch_call_rest_init (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="517" width="45.0" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1147.99" y="527.5" >arch..</text>
</g>
<g >
<title>__x64_sys_execve (227,442,290 samples, 6.43%)</title><rect x="509.8" y="469" width="75.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="512.77" y="479.5" >__x64_sy..</text>
</g>
<g >
<title>__mark_inode_dirty (358,222,355 samples, 10.12%)</title><rect x="303.4" y="181" width="119.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="306.37" y="191.5" >__mark_inode_d..</text>
</g>
<g >
<title>call_cpuidle (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="501" width="131.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1016.29" y="511.5" >call_cpuidle</text>
</g>
<g >
<title>cpuidle_idle_call (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="453" width="45.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1147.99" y="463.5" >cpui..</text>
</g>
<g >
<title>perf-exec (227,442,290 samples, 6.43%)</title><rect x="509.8" y="597" width="75.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="512.77" y="607.5" >perf-exec</text>
</g>
<g >
<title>cpuidle_enter (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="421" width="45.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1147.99" y="431.5" >cpui..</text>
</g>
<g >
<title>__do_sys_copy_file_range (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="453" width="499.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >__do_sys_copy_file_range</text>
</g>
<g >
<title>[cat] (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="533" width="499.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >[cat]</text>
</g>
<g >
<title>perf (5,476,567 samples, 0.15%)</title><rect x="585.6" y="597" width="1.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="588.60" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (227,442,290 samples, 6.43%)</title><rect x="509.8" y="501" width="75.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="512.77" y="511.5" >entry_SY..</text>
</g>
<g >
<title>splice_direct_to_actor (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="357" width="499.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >splice_direct_to_actor</text>
</g>
<g >
<title>__brelse (51,270,359 samples, 1.45%)</title><rect x="320.4" y="117" width="17.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="323.36" y="127.5" ></text>
</g>
<g >
<title>setup_object (52,763,514 samples, 1.49%)</title><rect x="240.4" y="53" width="17.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="243.42" y="63.5" ></text>
</g>
<g >
<title>netif_receive_skb_list_internal (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="309" width="131.7" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="1016.29" y="319.5" >netif_receive_sk..</text>
</g>
<g >
<title>folio_alloc_buffers (103,336,889 samples, 2.92%)</title><rect x="240.4" y="149" width="34.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="243.42" y="159.5" >fo..</text>
</g>
<g >
<title>remote_function (5,476,567 samples, 0.15%)</title><rect x="585.6" y="325" width="1.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="588.60" y="335.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (227,442,290 samples, 6.43%)</title><rect x="509.8" y="453" width="75.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="512.77" y="463.5" >do_execv..</text>
</g>
<g >
<title>ext4_da_write_begin (476,666,760 samples, 13.47%)</title><rect x="115.9" y="213" width="159.0" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="118.94" y="223.5" >ext4_da_write_begin</text>
</g>
<g >
<title>folio_account_dirtied (138,125,827 samples, 3.90%)</title><rect x="422.8" y="117" width="46.1" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="425.81" y="127.5" >foli..</text>
</g>
<g >
<title>direct_splice_actor (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="341" width="499.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >direct_splice_actor</text>
</g>
<g >
<title>nf_hook_slow_list (261,751,201 samples, 7.40%)</title><rect x="1013.3" y="245" width="87.3" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="1016.29" y="255.5" >nf_hook_sl..</text>
</g>
<g >
<title>__rcu_read_unlock (71,344,550 samples, 2.02%)</title><rect x="468.9" y="133" width="23.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="471.86" y="143.5" >_..</text>
</g>
<g >
<title>__x64_sys_copy_file_range (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="469" width="499.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >__x64_sys_copy_file_range</text>
</g>
<g >
<title>try_charge_memcg (106,618,400 samples, 3.01%)</title><rect x="135.7" y="117" width="35.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="138.69" y="127.5" >try..</text>
</g>
<g >
<title>__filemap_get_folio (264,603,595 samples, 7.48%)</title><rect x="115.9" y="197" width="88.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="118.94" y="207.5" >__filemap_..</text>
</g>
<g >
<title>jbd2_journal_commit_transaction (297,862,730 samples, 8.42%)</title><rect x="914.0" y="517" width="99.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="916.97" y="527.5" >jbd2_journal..</text>
</g>
<g >
<title>filemap_alloc_folio (47,454,774 samples, 1.34%)</title><rect x="171.2" y="181" width="15.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="174.24" y="191.5" ></text>
</g>
<g >
<title>napi_complete_done (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="325" width="131.7" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1016.29" y="335.5" >napi_complete_done</text>
</g>
<g >
<title>do_idle (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="533" width="131.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1016.29" y="543.5" >do_idle</text>
</g>
<g >
<title>__filemap_add_folio (165,832,464 samples, 4.69%)</title><rect x="115.9" y="165" width="55.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="118.94" y="175.5" >__fil..</text>
</g>
<g >
<title>__memcpy (266,571,607 samples, 7.53%)</title><rect x="27.1" y="197" width="88.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="30.06" y="207.5" >__memcpy</text>
</g>
<g >
<title>all (3,538,991,641 samples, 100%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>cat (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="597" width="499.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >cat</text>
</g>
<g >
<title>alloc_buffer_head (103,336,889 samples, 2.92%)</title><rect x="240.4" y="133" width="34.5" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="243.42" y="143.5" >al..</text>
</g>
<g >
<title>vfs_copy_file_range (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="389" width="499.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >vfs_copy_file_range</text>
</g>
<g >
<title>new_slab (52,763,514 samples, 1.49%)</title><rect x="240.4" y="85" width="17.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="243.42" y="95.5" ></text>
</g>
<g >
<title>__folio_mark_dirty (138,125,827 samples, 3.90%)</title><rect x="422.8" y="133" width="46.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="425.81" y="143.5" >__fo..</text>
</g>
<g >
<title>asm_common_interrupt (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="453" width="131.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1016.29" y="463.5" >asm_common_inter..</text>
</g>
<g >
<title>mark_buffer_dirty (260,801,483 samples, 7.37%)</title><rect x="422.8" y="149" width="87.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="425.81" y="159.5" >mark_buffe..</text>
</g>
<g >
<title>ip_list_rcv (261,751,201 samples, 7.40%)</title><rect x="1013.3" y="277" width="87.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1016.29" y="287.5" >ip_list_rcv</text>
</g>
<g >
<title>generic_exec_single (5,476,567 samples, 0.15%)</title><rect x="585.6" y="341" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="588.60" y="351.5" ></text>
</g>
<g >
<title>ipv4_conntrack_in (261,751,201 samples, 7.40%)</title><rect x="1013.3" y="229" width="87.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1016.29" y="239.5" >ipv4_connt..</text>
</g>
<g >
<title>folio_memcg_lock (51,331,106 samples, 1.45%)</title><rect x="492.7" y="133" width="17.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="495.65" y="143.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (212,063,165 samples, 5.99%)</title><rect x="204.2" y="197" width="70.7" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="207.17" y="207.5" >ext4_bl..</text>
</g>
<g >
<title>do_syscall_64 (5,476,567 samples, 0.15%)</title><rect x="585.6" y="469" width="1.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="588.60" y="479.5" ></text>
</g>
<g >
<title>kjournald2 (297,862,730 samples, 8.42%)</title><rect x="914.0" y="533" width="99.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="916.97" y="543.5" >kjournald2</text>
</g>
<g >
<title>copy_file_range (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="517" width="499.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >copy_file_range</text>
</g>
<g >
<title>ext4_mark_iloc_dirty (307,257,259 samples, 8.68%)</title><rect x="320.4" y="133" width="102.4" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="323.36" y="143.5" >ext4_mark_il..</text>
</g>
<g >
<title>ext4_fill_raw_inode (156,334,099 samples, 4.42%)</title><rect x="370.7" y="101" width="52.1" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="373.68" y="111.5" >ext4_..</text>
</g>
<g >
<title>folio_alloc (47,454,774 samples, 1.34%)</title><rect x="171.2" y="165" width="15.9" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="174.24" y="175.5" ></text>
</g>
<g >
<title>folio_create_empty_buffers (212,063,165 samples, 5.99%)</title><rect x="204.2" y="165" width="70.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="207.17" y="175.5" >folio_c..</text>
</g>
<g >
<title>do_iter_readv_writev (1,447,709,184 samples, 40.91%)</title><rect x="27.1" y="277" width="482.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="30.06" y="287.5" >do_iter_readv_writev</text>
</g>
<g >
<title>__evlist__enable (5,476,567 samples, 0.15%)</title><rect x="585.6" y="549" width="1.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="588.60" y="559.5" ></text>
</g>
<g >
<title>_perf_event_enable (5,476,567 samples, 0.15%)</title><rect x="585.6" y="389" width="1.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="588.60" y="399.5" ></text>
</g>
<g >
<title>filemap_get_entry (51,316,357 samples, 1.45%)</title><rect x="187.1" y="181" width="17.1" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="190.06" y="191.5" ></text>
</g>
<g >
<title>do_splice_direct (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="373" width="499.8" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >do_splice_direct</text>
</g>
<g >
<title>event_function (5,476,567 samples, 0.15%)</title><rect x="585.6" y="309" width="1.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="588.60" y="319.5" ></text>
</g>
<g >
<title>crypto_shash_update (102,259,225 samples, 2.89%)</title><rect x="388.7" y="53" width="34.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="391.71" y="63.5" >cr..</text>
</g>
<g >
<title>kthread (297,862,730 samples, 8.42%)</title><rect x="914.0" y="549" width="99.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="916.97" y="559.5" >kthread</text>
</g>
<g >
<title>__block_commit_write.constprop.0 (260,801,483 samples, 7.37%)</title><rect x="422.8" y="165" width="87.0" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="425.81" y="175.5" >__block_co..</text>
</g>
<g >
<title>ext4_file_write_iter (1,447,709,184 samples, 40.91%)</title><rect x="27.1" y="261" width="482.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="30.06" y="271.5" >ext4_file_write_iter</text>
</g>
<g >
<title>x86_64_start_reservations (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="549" width="45.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1147.99" y="559.5" >x86_..</text>
</g>
<g >
<title>__netif_receive_skb_list_core (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="293" width="131.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1016.29" y="303.5" >__netif_receive_..</text>
</g>
<g >
<title>_raw_spin_lock (51,287,051 samples, 1.45%)</title><rect x="337.5" y="117" width="17.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="340.46" y="127.5" ></text>
</g>
<g >
<title>ext4_inode_csum (156,334,099 samples, 4.42%)</title><rect x="370.7" y="69" width="52.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="373.68" y="79.5" >ext4_..</text>
</g>
<g >
<title>perf_event_for_each_child (5,476,567 samples, 0.15%)</title><rect x="585.6" y="405" width="1.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="588.60" y="415.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (49,071,416 samples, 1.39%)</title><rect x="406.4" y="37" width="16.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="409.45" y="47.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (103,336,889 samples, 2.92%)</title><rect x="240.4" y="117" width="34.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="243.42" y="127.5" >km..</text>
</g>
<g >
<title>[libc.so.6] (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="549" width="499.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >[libc.so.6]</text>
</g>
<g >
<title>secondary_startup_64_no_verify (529,979,745 samples, 14.98%)</title><rect x="1013.3" y="581" width="176.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1016.29" y="591.5" >secondary_startup_64_n..</text>
</g>
<g >
<title>__perf_event_enable (5,476,567 samples, 0.15%)</title><rect x="585.6" y="293" width="1.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="588.60" y="303.5" ></text>
</g>
<g >
<title>ovl_copy_file_range (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="421" width="499.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >ovl_copy_file_range</text>
</g>
<g >
<title>packet_rcv (133,237,821 samples, 3.76%)</title><rect x="1100.6" y="277" width="44.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1103.57" y="287.5" >pack..</text>
</g>
<g >
<title>copy_page_from_iter_atomic (266,571,607 samples, 7.53%)</title><rect x="27.1" y="213" width="88.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="30.06" y="223.5" >copy_page_..</text>
</g>
<g >
<title>start_kernel (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="533" width="45.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1147.99" y="543.5" >star..</text>
</g>
<g >
<title>ext4_da_write_end (704,470,817 samples, 19.91%)</title><rect x="274.9" y="213" width="234.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="277.88" y="223.5" >ext4_da_write_end</text>
</g>
<g >
<title>native_write_msr (5,476,567 samples, 0.15%)</title><rect x="585.6" y="213" width="1.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="588.60" y="223.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (138,125,827 samples, 3.90%)</title><rect x="422.8" y="101" width="46.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="425.81" y="111.5" >__mo..</text>
</g>
<g >
<title>common_interrupt (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="437" width="131.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1016.29" y="447.5" >common_interrupt</text>
</g>
<g >
<title>perf_ctx_enable (5,476,567 samples, 0.15%)</title><rect x="585.6" y="261" width="1.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="588.60" y="271.5" ></text>
</g>
<g >
<title>[unknown] (5,476,567 samples, 0.15%)</title><rect x="585.6" y="581" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="588.60" y="591.5" ></text>
</g>
<g >
<title>crypto_shash_update (297,862,730 samples, 8.42%)</title><rect x="914.0" y="501" width="99.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="916.97" y="511.5" >crypto_shash..</text>
</g>
<g >
<title>__do_softirq (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="389" width="131.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1016.29" y="399.5" >__do_softirq</text>
</g>
<g >
<title>vfs_iter_write (1,447,709,184 samples, 40.91%)</title><rect x="27.1" y="309" width="482.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="30.06" y="319.5" >vfs_iter_write</text>
</g>
<g >
<title>block_write_end (260,801,483 samples, 7.37%)</title><rect x="422.8" y="181" width="87.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="425.81" y="191.5" >block_writ..</text>
</g>
<g >
<title>consume_obj_stock (50,573,375 samples, 1.43%)</title><rect x="258.0" y="85" width="16.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="261.02" y="95.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="469" width="131.7" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1016.29" y="479.5" >cpuidle_enter_st..</text>
</g>
<g >
<title>ext4_do_update_inode.isra.0 (204,699,849 samples, 5.78%)</title><rect x="354.6" y="117" width="68.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="357.56" y="127.5" >ext4_do..</text>
</g>
<g >
<title>generic_perform_write (1,447,709,184 samples, 40.91%)</title><rect x="27.1" y="229" width="482.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="30.06" y="239.5" >generic_perform_write</text>
</g>
<g >
<title>generic_write_end (704,470,817 samples, 19.91%)</title><rect x="274.9" y="197" width="234.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="277.88" y="207.5" >generic_write_end</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,476,567 samples, 0.15%)</title><rect x="585.6" y="485" width="1.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="588.60" y="495.5" ></text>
</g>
<g >
<title>__cmd_record (5,476,567 samples, 0.15%)</title><rect x="585.6" y="565" width="1.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="588.60" y="575.5" ></text>
</g>
<g >
<title>exec_binprm (227,442,290 samples, 6.43%)</title><rect x="509.8" y="405" width="75.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="512.77" y="415.5" >exec_bin..</text>
</g>
<g >
<title>cpu_startup_entry (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="485" width="45.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1147.99" y="495.5" >cpu_..</text>
</g>
<g >
<title>__napi_poll (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="357" width="131.7" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1016.29" y="367.5" >__napi_poll</text>
</g>
<g >
<title>net_rx_action (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="373" width="131.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1016.29" y="383.5" >net_rx_action</text>
</g>
<g >
<title>charge_memcg (106,618,400 samples, 3.01%)</title><rect x="135.7" y="133" width="35.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="138.69" y="143.5" >cha..</text>
</g>
<g >
<title>[libc.so.6] (227,442,290 samples, 6.43%)</title><rect x="509.8" y="533" width="75.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="512.77" y="543.5" >[libc.so..</text>
</g>
<g >
<title>filemap_add_folio (165,832,464 samples, 4.69%)</title><rect x="115.9" y="181" width="55.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="118.94" y="191.5" >filem..</text>
</g>
<g >
<title>swapper (1,807,194,528 samples, 51.07%)</title><rect x="587.4" y="597" width="602.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="590.43" y="607.5" >swapper</text>
</g>
<g >
<title>__irq_exit_rcu (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="405" width="131.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1016.29" y="415.5" >__irq_exit_rcu</text>
</g>
<g >
<title>cpuidle_enter (394,989,022 samples, 11.16%)</title><rect x="1013.3" y="485" width="131.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1016.29" y="495.5" >cpuidle_enter</text>
</g>
<g >
<title>intel_pmu_enable_all (5,476,567 samples, 0.15%)</title><rect x="585.6" y="229" width="1.8" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="588.60" y="239.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (5,476,567 samples, 0.15%)</title><rect x="585.6" y="533" width="1.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="588.60" y="543.5" ></text>
</g>
<g >
<title>crc_pcl (297,862,730 samples, 8.42%)</title><rect x="914.0" y="485" width="99.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="916.97" y="495.5" >crc_pcl</text>
</g>
<g >
<title>alloc_pages (47,454,774 samples, 1.34%)</title><rect x="171.2" y="149" width="15.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="174.24" y="159.5" ></text>
</g>
<g >
<title>x86_pmu_enable (5,476,567 samples, 0.15%)</title><rect x="585.6" y="245" width="1.8" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="588.60" y="255.5" ></text>
</g>
<g >
<title>__ext4_mark_inode_dirty (358,222,355 samples, 10.12%)</title><rect x="303.4" y="149" width="119.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="306.37" y="159.5" >__ext4_mark_in..</text>
</g>
<g >
<title>iter_file_splice_write (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="325" width="499.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >iter_file_splice_write</text>
</g>
<g >
<title>[unknown] (227,442,290 samples, 6.43%)</title><rect x="509.8" y="581" width="75.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="512.77" y="591.5" >[unknown]</text>
</g>
<g >
<title>__cmd_record (227,442,290 samples, 6.43%)</title><rect x="509.8" y="565" width="75.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="512.77" y="575.5" >__cmd_re..</text>
</g>
<g >
<title>smp_call_function_single (5,476,567 samples, 0.15%)</title><rect x="585.6" y="357" width="1.8" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="588.60" y="367.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (227,442,290 samples, 6.43%)</title><rect x="509.8" y="421" width="75.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="512.77" y="431.5" >bprm_exe..</text>
</g>
<g >
<title>vfs_copy_file_range (1,498,878,256 samples, 42.35%)</title><rect x="10.0" y="437" width="499.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >vfs_copy_file_range</text>
</g>
<g >
<title>perf_evsel__run_ioctl (5,476,567 samples, 0.15%)</title><rect x="585.6" y="517" width="1.8" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="588.60" y="527.5" ></text>
</g>
<g >
<title>_perf_ioctl (5,476,567 samples, 0.15%)</title><rect x="585.6" y="421" width="1.8" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="588.60" y="431.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (1,447,709,184 samples, 40.91%)</title><rect x="27.1" y="245" width="482.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="30.06" y="255.5" >ext4_buffered_write_iter</text>
</g>
<g >
<title>event_function_call (5,476,567 samples, 0.15%)</title><rect x="585.6" y="373" width="1.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="588.60" y="383.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (134,990,723 samples, 3.81%)</title><rect x="1145.0" y="405" width="45.0" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1147.99" y="415.5" >cpui..</text>
</g>
<g >
<title>xas_load (51,316,357 samples, 1.45%)</title><rect x="187.1" y="165" width="17.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="190.06" y="175.5" ></text>
</g>
<g >
<title>__mod_node_page_state (138,125,827 samples, 3.90%)</title><rect x="422.8" y="69" width="46.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="425.81" y="79.5" >__mo..</text>
</g>
</g>
</svg>
