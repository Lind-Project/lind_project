<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="566.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="549" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="549" > </text>
<g id="frames">
<g >
<title>copy_user_enhanced_fast_string (5 samples, 2.91%)</title><rect x="531.4" y="133" width="34.3" height="15.0" fill="rgb(218,191,50)" rx="2" ry="2" />
<text  x="534.40" y="143.5" >co..</text>
</g>
<g >
<title>__mark_inode_dirty (1 samples, 0.58%)</title><rect x="1018.5" y="101" width="6.8" height="15.0" fill="rgb(214,94,40)" rx="2" ry="2" />
<text  x="1021.49" y="111.5" ></text>
</g>
<g >
<title>__x64_sys_read (7 samples, 4.07%)</title><rect x="531.4" y="341" width="48.0" height="15.0" fill="rgb(242,187,45)" rx="2" ry="2" />
<text  x="534.40" y="351.5" >__x6..</text>
</g>
<g >
<title>__x64_sys_ioctl (63 samples, 36.63%)</title><rect x="586.3" y="341" width="432.2" height="15.0" fill="rgb(237,26,7)" rx="2" ry="2" />
<text  x="589.28" y="351.5" >__x64_sys_ioctl</text>
</g>
<g >
<title>do_iter_read (7 samples, 4.07%)</title><rect x="531.4" y="245" width="48.0" height="15.0" fill="rgb(242,119,43)" rx="2" ry="2" />
<text  x="534.40" y="255.5" >do_i..</text>
</g>
<g >
<title>x86_pmu_enable (1 samples, 0.58%)</title><rect x="1025.3" y="261" width="6.9" height="15.0" fill="rgb(237,127,6)" rx="2" ry="2" />
<text  x="1028.35" y="271.5" ></text>
</g>
<g >
<title>__perf_event_enable (1 samples, 0.58%)</title><rect x="1025.3" y="293" width="6.9" height="15.0" fill="rgb(221,10,42)" rx="2" ry="2" />
<text  x="1028.35" y="303.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (1 samples, 0.58%)</title><rect x="1018.5" y="53" width="6.8" height="15.0" fill="rgb(226,96,27)" rx="2" ry="2" />
<text  x="1021.49" y="63.5" ></text>
</g>
<g >
<title>[grep] (54 samples, 31.40%)</title><rect x="160.9" y="389" width="370.5" height="15.0" fill="rgb(211,80,38)" rx="2" ry="2" />
<text  x="163.93" y="399.5" >[grep]</text>
</g>
<g >
<title>_perf_event_enable (1 samples, 0.58%)</title><rect x="1025.3" y="389" width="6.9" height="15.0" fill="rgb(227,160,53)" rx="2" ry="2" />
<text  x="1028.35" y="399.5" ></text>
</g>
<g >
<title>__cmd_record (64 samples, 37.21%)</title><rect x="586.3" y="453" width="439.0" height="15.0" fill="rgb(213,132,24)" rx="2" ry="2" />
<text  x="589.28" y="463.5" >__cmd_record</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 4.07%)</title><rect x="531.4" y="373" width="48.0" height="15.0" fill="rgb(223,42,40)" rx="2" ry="2" />
<text  x="534.40" y="383.5" >entr..</text>
</g>
<g >
<title>ksys_write (1 samples, 0.58%)</title><rect x="1018.5" y="293" width="6.8" height="15.0" fill="rgb(205,60,6)" rx="2" ry="2" />
<text  x="1021.49" y="303.5" ></text>
</g>
<g >
<title>x86_pmu_enable (63 samples, 36.63%)</title><rect x="586.3" y="149" width="432.2" height="15.0" fill="rgb(242,103,15)" rx="2" ry="2" />
<text  x="589.28" y="159.5" >x86_pmu_enable</text>
</g>
<g >
<title>_perf_ioctl (1 samples, 0.58%)</title><rect x="1025.3" y="421" width="6.9" height="15.0" fill="rgb(205,221,15)" rx="2" ry="2" />
<text  x="1028.35" y="431.5" ></text>
</g>
<g >
<title>pick_next_task_fair (3 samples, 1.74%)</title><rect x="1162.6" y="389" width="20.5" height="15.0" fill="rgb(245,189,25)" rx="2" ry="2" />
<text  x="1165.56" y="399.5" ></text>
</g>
<g >
<title>cpu_startup_entry (18 samples, 10.47%)</title><rect x="37.4" y="453" width="123.5" height="15.0" fill="rgb(220,135,1)" rx="2" ry="2" />
<text  x="40.44" y="463.5" >cpu_startup_entry</text>
</g>
<g >
<title>cpuidle_enter_state (13 samples, 7.56%)</title><rect x="37.4" y="389" width="89.2" height="15.0" fill="rgb(226,138,31)" rx="2" ry="2" />
<text  x="40.44" y="399.5" >cpuidle_en..</text>
</g>
<g >
<title>ext4_da_write_end (1 samples, 0.58%)</title><rect x="1018.5" y="133" width="6.8" height="15.0" fill="rgb(236,137,4)" rx="2" ry="2" />
<text  x="1021.49" y="143.5" ></text>
</g>
<g >
<title>event_function_call (1 samples, 0.58%)</title><rect x="1025.3" y="373" width="6.9" height="15.0" fill="rgb(228,57,48)" rx="2" ry="2" />
<text  x="1028.35" y="383.5" ></text>
</g>
<g >
<title>__rawmemchr_avx2 (1 samples, 0.58%)</title><rect x="579.4" y="389" width="6.9" height="15.0" fill="rgb(224,8,20)" rx="2" ry="2" />
<text  x="582.42" y="399.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (7 samples, 4.07%)</title><rect x="37.4" y="373" width="48.1" height="15.0" fill="rgb(253,169,39)" rx="2" ry="2" />
<text  x="40.44" y="383.5" >mwai..</text>
</g>
<g >
<title>event_function_call (63 samples, 36.63%)</title><rect x="586.3" y="261" width="432.2" height="15.0" fill="rgb(216,221,21)" rx="2" ry="2" />
<text  x="589.28" y="271.5" >event_function_call</text>
</g>
<g >
<title>ksys_read (7 samples, 4.07%)</title><rect x="531.4" y="325" width="48.0" height="15.0" fill="rgb(239,142,27)" rx="2" ry="2" />
<text  x="534.40" y="335.5" >ksys..</text>
</g>
<g >
<title>ext4_file_read_iter (7 samples, 4.07%)</title><rect x="531.4" y="213" width="48.0" height="15.0" fill="rgb(221,31,20)" rx="2" ry="2" />
<text  x="534.40" y="223.5" >ext4..</text>
</g>
<g >
<title>perf_ioctl (1 samples, 0.58%)</title><rect x="1025.3" y="437" width="6.9" height="15.0" fill="rgb(213,138,12)" rx="2" ry="2" />
<text  x="1028.35" y="447.5" ></text>
</g>
<g >
<title>generic_file_buffered_read_get_pages (1 samples, 0.58%)</title><rect x="565.7" y="165" width="6.9" height="15.0" fill="rgb(241,36,38)" rx="2" ry="2" />
<text  x="568.70" y="175.5" ></text>
</g>
<g >
<title>rcu_gp_kthread (1 samples, 0.58%)</title><rect x="1039.1" y="453" width="6.8" height="15.0" fill="rgb(251,116,15)" rx="2" ry="2" />
<text  x="1042.07" y="463.5" ></text>
</g>
<g >
<title>rcu_idle_enter (1 samples, 0.58%)</title><rect x="119.8" y="373" width="6.8" height="15.0" fill="rgb(206,71,24)" rx="2" ry="2" />
<text  x="122.77" y="383.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (16 samples, 9.30%)</title><rect x="1045.9" y="389" width="109.8" height="15.0" fill="rgb(240,14,32)" rx="2" ry="2" />
<text  x="1048.93" y="399.5" >cpuidle_enter..</text>
</g>
<g >
<title>ovl_read_iter (7 samples, 4.07%)</title><rect x="531.4" y="277" width="48.0" height="15.0" fill="rgb(232,152,14)" rx="2" ry="2" />
<text  x="534.40" y="287.5" >ovl_..</text>
</g>
<g >
<title>intel_pmu_enable_all (1 samples, 0.58%)</title><rect x="1025.3" y="245" width="6.9" height="15.0" fill="rgb(225,126,46)" rx="2" ry="2" />
<text  x="1028.35" y="255.5" ></text>
</g>
<g >
<title>event_function (63 samples, 36.63%)</title><rect x="586.3" y="197" width="432.2" height="15.0" fill="rgb(221,215,1)" rx="2" ry="2" />
<text  x="589.28" y="207.5" >event_function</text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.58%)</title><rect x="1039.1" y="485" width="6.8" height="15.0" fill="rgb(227,105,45)" rx="2" ry="2" />
<text  x="1042.07" y="495.5" ></text>
</g>
<g >
<title>nohz_newidle_balance (3 samples, 1.74%)</title><rect x="1162.6" y="357" width="20.5" height="15.0" fill="rgb(245,32,9)" rx="2" ry="2" />
<text  x="1165.56" y="367.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 36.05%)</title><rect x="160.9" y="437" width="425.4" height="15.0" fill="rgb(239,189,44)" rx="2" ry="2" />
<text  x="163.93" y="447.5" >[grep]</text>
</g>
<g >
<title>_perf_ioctl (63 samples, 36.63%)</title><rect x="586.3" y="309" width="432.2" height="15.0" fill="rgb(209,171,50)" rx="2" ry="2" />
<text  x="589.28" y="319.5" >_perf_ioctl</text>
</g>
<g >
<title>x86_64_start_kernel (1 samples, 0.58%)</title><rect x="1183.1" y="469" width="6.9" height="15.0" fill="rgb(209,73,50)" rx="2" ry="2" />
<text  x="1186.14" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (63 samples, 36.63%)</title><rect x="586.3" y="373" width="432.2" height="15.0" fill="rgb(213,33,32)" rx="2" ry="2" />
<text  x="589.28" y="383.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>get_typical_interval (1 samples, 0.58%)</title><rect x="126.6" y="373" width="6.9" height="15.0" fill="rgb(210,65,2)" rx="2" ry="2" />
<text  x="129.63" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.58%)</title><rect x="1018.5" y="325" width="6.8" height="15.0" fill="rgb(227,127,32)" rx="2" ry="2" />
<text  x="1021.49" y="335.5" ></text>
</g>
<g >
<title>cpuidle_enter (1 samples, 0.58%)</title><rect x="1183.1" y="341" width="6.9" height="15.0" fill="rgb(221,128,3)" rx="2" ry="2" />
<text  x="1186.14" y="351.5" ></text>
</g>
<g >
<title>start_kernel (1 samples, 0.58%)</title><rect x="1183.1" y="437" width="6.9" height="15.0" fill="rgb(228,157,30)" rx="2" ry="2" />
<text  x="1186.14" y="447.5" ></text>
</g>
<g >
<title>_perf_event_enable (63 samples, 36.63%)</title><rect x="586.3" y="277" width="432.2" height="15.0" fill="rgb(232,46,11)" rx="2" ry="2" />
<text  x="589.28" y="287.5" >_perf_event_enable</text>
</g>
<g >
<title>[unknown] (64 samples, 37.21%)</title><rect x="586.3" y="485" width="439.0" height="15.0" fill="rgb(218,72,47)" rx="2" ry="2" />
<text  x="589.28" y="495.5" >[unknown]</text>
</g>
<g >
<title>secondary_startup_64_no_verify (21 samples, 12.21%)</title><rect x="1045.9" y="485" width="144.1" height="15.0" fill="rgb(245,92,1)" rx="2" ry="2" />
<text  x="1048.93" y="495.5" >secondary_startup_..</text>
</g>
<g >
<title>generic_file_read_iter (7 samples, 4.07%)</title><rect x="531.4" y="197" width="48.0" height="15.0" fill="rgb(218,119,37)" rx="2" ry="2" />
<text  x="534.40" y="207.5" >gene..</text>
</g>
<g >
<title>schedule_idle (4 samples, 2.33%)</title><rect x="133.5" y="421" width="27.4" height="15.0" fill="rgb(241,219,17)" rx="2" ry="2" />
<text  x="136.49" y="431.5" >s..</text>
</g>
<g >
<title>native_write_msr (63 samples, 36.63%)</title><rect x="586.3" y="117" width="432.2" height="15.0" fill="rgb(253,151,39)" rx="2" ry="2" />
<text  x="589.28" y="127.5" >native_write_msr</text>
</g>
<g >
<title>generic_exec_single (1 samples, 0.58%)</title><rect x="1169.4" y="309" width="6.9" height="15.0" fill="rgb(233,76,30)" rx="2" ry="2" />
<text  x="1172.42" y="319.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (1 samples, 0.58%)</title><rect x="1018.5" y="197" width="6.8" height="15.0" fill="rgb(227,20,8)" rx="2" ry="2" />
<text  x="1021.49" y="207.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (1 samples, 0.58%)</title><rect x="1183.1" y="357" width="6.9" height="15.0" fill="rgb(228,180,19)" rx="2" ry="2" />
<text  x="1186.14" y="367.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (63 samples, 36.63%)</title><rect x="586.3" y="405" width="432.2" height="15.0" fill="rgb(250,46,48)" rx="2" ry="2" />
<text  x="589.28" y="415.5" >perf_evsel__run_ioctl</text>
</g>
<g >
<title>arch_call_rest_init (1 samples, 0.58%)</title><rect x="1183.1" y="421" width="6.9" height="15.0" fill="rgb(237,15,2)" rx="2" ry="2" />
<text  x="1186.14" y="431.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 36.05%)</title><rect x="160.9" y="453" width="425.4" height="15.0" fill="rgb(211,134,37)" rx="2" ry="2" />
<text  x="163.93" y="463.5" >[grep]</text>
</g>
<g >
<title>do_iter_write (1 samples, 0.58%)</title><rect x="1018.5" y="213" width="6.8" height="15.0" fill="rgb(230,228,5)" rx="2" ry="2" />
<text  x="1021.49" y="223.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 36.05%)</title><rect x="160.9" y="485" width="425.4" height="15.0" fill="rgb(223,60,5)" rx="2" ry="2" />
<text  x="163.93" y="495.5" >[grep]</text>
</g>
<g >
<title>all (172 samples, 100%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(244,86,24)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>generic_exec_single (63 samples, 36.63%)</title><rect x="586.3" y="229" width="432.2" height="15.0" fill="rgb(217,51,24)" rx="2" ry="2" />
<text  x="589.28" y="239.5" >generic_exec_single</text>
</g>
<g >
<title>ctx_resched (63 samples, 36.63%)</title><rect x="586.3" y="165" width="432.2" height="15.0" fill="rgb(223,206,18)" rx="2" ry="2" />
<text  x="589.28" y="175.5" >ctx_resched</text>
</g>
<g >
<title>schedule_idle (3 samples, 1.74%)</title><rect x="1162.6" y="421" width="20.5" height="15.0" fill="rgb(226,8,0)" rx="2" ry="2" />
<text  x="1165.56" y="431.5" ></text>
</g>
<g >
<title>perf_ioctl (63 samples, 36.63%)</title><rect x="586.3" y="325" width="432.2" height="15.0" fill="rgb(240,107,37)" rx="2" ry="2" />
<text  x="589.28" y="335.5" >perf_ioctl</text>
</g>
<g >
<title>[grep] (62 samples, 36.05%)</title><rect x="160.9" y="405" width="425.4" height="15.0" fill="rgb(220,82,0)" rx="2" ry="2" />
<text  x="163.93" y="415.5" >[grep]</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.58%)</title><rect x="1025.3" y="485" width="6.9" height="15.0" fill="rgb(237,89,35)" rx="2" ry="2" />
<text  x="1028.35" y="495.5" ></text>
</g>
<g >
<title>ovl_write_iter (1 samples, 0.58%)</title><rect x="1018.5" y="245" width="6.8" height="15.0" fill="rgb(225,63,44)" rx="2" ry="2" />
<text  x="1021.49" y="255.5" ></text>
</g>
<g >
<title>__ext4_mark_inode_dirty (1 samples, 0.58%)</title><rect x="1018.5" y="69" width="6.8" height="15.0" fill="rgb(205,41,5)" rx="2" ry="2" />
<text  x="1021.49" y="79.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 36.05%)</title><rect x="160.9" y="421" width="425.4" height="15.0" fill="rgb(238,226,52)" rx="2" ry="2" />
<text  x="163.93" y="431.5" >[grep]</text>
</g>
<g >
<title>vfs_write (1 samples, 0.58%)</title><rect x="1018.5" y="277" width="6.8" height="15.0" fill="rgb(211,185,43)" rx="2" ry="2" />
<text  x="1021.49" y="287.5" ></text>
</g>
<g >
<title>do_idle (18 samples, 10.47%)</title><rect x="37.4" y="437" width="123.5" height="15.0" fill="rgb(214,85,32)" rx="2" ry="2" />
<text  x="40.44" y="447.5" >do_idle</text>
</g>
<g >
<title>cpuidle_enter (13 samples, 7.56%)</title><rect x="37.4" y="405" width="89.2" height="15.0" fill="rgb(218,184,12)" rx="2" ry="2" />
<text  x="40.44" y="415.5" >cpuidle_en..</text>
</g>
<g >
<title>event_function (1 samples, 0.58%)</title><rect x="1025.3" y="309" width="6.9" height="15.0" fill="rgb(250,16,30)" rx="2" ry="2" />
<text  x="1028.35" y="319.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.58%)</title><rect x="1018.5" y="357" width="6.8" height="15.0" fill="rgb(249,175,29)" rx="2" ry="2" />
<text  x="1021.49" y="367.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (63 samples, 36.63%)</title><rect x="586.3" y="133" width="432.2" height="15.0" fill="rgb(234,163,37)" rx="2" ry="2" />
<text  x="589.28" y="143.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>__evlist__enable (63 samples, 36.63%)</title><rect x="586.3" y="437" width="432.2" height="15.0" fill="rgb(249,223,21)" rx="2" ry="2" />
<text  x="589.28" y="447.5" >__evlist__enable</text>
</g>
<g >
<title>copy_page_to_iter (5 samples, 2.91%)</title><rect x="531.4" y="165" width="34.3" height="15.0" fill="rgb(229,80,41)" rx="2" ry="2" />
<text  x="534.40" y="175.5" >co..</text>
</g>
<g >
<title>ext4_buffered_write_iter (1 samples, 0.58%)</title><rect x="1018.5" y="165" width="6.8" height="15.0" fill="rgb(245,182,16)" rx="2" ry="2" />
<text  x="1021.49" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.58%)</title><rect x="1025.3" y="469" width="6.9" height="15.0" fill="rgb(236,47,52)" rx="2" ry="2" />
<text  x="1028.35" y="479.5" ></text>
</g>
<g >
<title>smp_call_function_single (1 samples, 0.58%)</title><rect x="1025.3" y="357" width="6.9" height="15.0" fill="rgb(252,94,45)" rx="2" ry="2" />
<text  x="1028.35" y="367.5" ></text>
</g>
<g >
<title>send_call_function_single_ipi (1 samples, 0.58%)</title><rect x="1169.4" y="293" width="6.9" height="15.0" fill="rgb(216,77,39)" rx="2" ry="2" />
<text  x="1172.42" y="303.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (14 samples, 8.14%)</title><rect x="37.4" y="421" width="96.1" height="15.0" fill="rgb(249,144,1)" rx="2" ry="2" />
<text  x="40.44" y="431.5" >cpuidle_idl..</text>
</g>
<g >
<title>new_sync_write (1 samples, 0.58%)</title><rect x="1018.5" y="261" width="6.8" height="15.0" fill="rgb(231,83,53)" rx="2" ry="2" />
<text  x="1021.49" y="271.5" ></text>
</g>
<g >
<title>remote_function (1 samples, 0.58%)</title><rect x="1025.3" y="325" width="6.9" height="15.0" fill="rgb(237,119,44)" rx="2" ry="2" />
<text  x="1028.35" y="335.5" ></text>
</g>
<g >
<title>newidle_balance (4 samples, 2.33%)</title><rect x="133.5" y="373" width="27.4" height="15.0" fill="rgb(241,181,34)" rx="2" ry="2" />
<text  x="136.49" y="383.5" >n..</text>
</g>
<g >
<title>__libc_start_main (62 samples, 36.05%)</title><rect x="160.9" y="469" width="425.4" height="15.0" fill="rgb(246,20,50)" rx="2" ry="2" />
<text  x="163.93" y="479.5" >__libc_start_main</text>
</g>
<g >
<title>_nohz_idle_balance (1 samples, 0.58%)</title><rect x="147.2" y="341" width="6.9" height="15.0" fill="rgb(207,40,36)" rx="2" ry="2" />
<text  x="150.21" y="351.5" ></text>
</g>
<g >
<title>poll_idle (5 samples, 2.91%)</title><rect x="85.5" y="373" width="34.3" height="15.0" fill="rgb(241,127,34)" rx="2" ry="2" />
<text  x="88.47" y="383.5" >po..</text>
</g>
<g >
<title>generic_exec_single (1 samples, 0.58%)</title><rect x="154.1" y="309" width="6.8" height="15.0" fill="rgb(225,229,7)" rx="2" ry="2" />
<text  x="157.07" y="319.5" ></text>
</g>
<g >
<title>copy_page_to_iter_iovec (5 samples, 2.91%)</title><rect x="531.4" y="149" width="34.3" height="15.0" fill="rgb(236,55,1)" rx="2" ry="2" />
<text  x="534.40" y="159.5" >co..</text>
</g>
<g >
<title>dyntick_save_progress_counter (1 samples, 0.58%)</title><rect x="1039.1" y="421" width="6.8" height="15.0" fill="rgb(247,4,15)" rx="2" ry="2" />
<text  x="1042.07" y="431.5" ></text>
</g>
<g >
<title>vfs_iter_write (1 samples, 0.58%)</title><rect x="1018.5" y="229" width="6.8" height="15.0" fill="rgb(252,147,37)" rx="2" ry="2" />
<text  x="1021.49" y="239.5" ></text>
</g>
<g >
<title>poll_idle (4 samples, 2.33%)</title><rect x="1128.3" y="373" width="27.4" height="15.0" fill="rgb(245,150,20)" rx="2" ry="2" />
<text  x="1131.26" y="383.5" >p..</text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (12 samples, 6.98%)</title><rect x="1045.9" y="373" width="82.4" height="15.0" fill="rgb(224,214,48)" rx="2" ry="2" />
<text  x="1048.93" y="383.5" >mwait_idl..</text>
</g>
<g >
<title>perf_event__synthesize_comm (1 samples, 0.58%)</title><rect x="1018.5" y="437" width="6.8" height="15.0" fill="rgb(213,103,18)" rx="2" ry="2" />
<text  x="1021.49" y="447.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1 samples, 0.58%)</title><rect x="1018.5" y="85" width="6.8" height="15.0" fill="rgb(244,62,54)" rx="2" ry="2" />
<text  x="1021.49" y="95.5" ></text>
</g>
<g >
<title>vfs_iter_read (7 samples, 4.07%)</title><rect x="531.4" y="261" width="48.0" height="15.0" fill="rgb(227,45,27)" rx="2" ry="2" />
<text  x="534.40" y="271.5" >vfs_..</text>
</g>
<g >
<title>do_iter_readv_writev (7 samples, 4.07%)</title><rect x="531.4" y="229" width="48.0" height="15.0" fill="rgb(244,12,6)" rx="2" ry="2" />
<text  x="534.40" y="239.5" >do_i..</text>
</g>
<g >
<title>generic_perform_write (1 samples, 0.58%)</title><rect x="1018.5" y="149" width="6.8" height="15.0" fill="rgb(213,16,19)" rx="2" ry="2" />
<text  x="1021.49" y="159.5" ></text>
</g>
<g >
<title>perf_tool__process_synth_event (1 samples, 0.58%)</title><rect x="1018.5" y="421" width="6.8" height="15.0" fill="rgb(250,149,7)" rx="2" ry="2" />
<text  x="1021.49" y="431.5" ></text>
</g>
<g >
<title>__GI___read (7 samples, 4.07%)</title><rect x="531.4" y="389" width="48.0" height="15.0" fill="rgb(217,78,31)" rx="2" ry="2" />
<text  x="534.40" y="399.5" >__GI..</text>
</g>
<g >
<title>01-ifupdown (22 samples, 12.79%)</title><rect x="10.0" y="501" width="150.9" height="15.0" fill="rgb(218,106,22)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >01-ifupdown</text>
</g>
<g >
<title>__schedule (3 samples, 1.74%)</title><rect x="1162.6" y="405" width="20.5" height="15.0" fill="rgb(229,114,23)" rx="2" ry="2" />
<text  x="1165.56" y="415.5" ></text>
</g>
<g >
<title>rest_init (1 samples, 0.58%)</title><rect x="1183.1" y="405" width="6.9" height="15.0" fill="rgb(207,190,35)" rx="2" ry="2" />
<text  x="1186.14" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.58%)</title><rect x="1018.5" y="341" width="6.8" height="15.0" fill="rgb(222,228,27)" rx="2" ry="2" />
<text  x="1021.49" y="351.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1 samples, 0.58%)</title><rect x="1183.1" y="325" width="6.9" height="15.0" fill="rgb(215,111,13)" rx="2" ry="2" />
<text  x="1186.14" y="335.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (16 samples, 9.30%)</title><rect x="1045.9" y="421" width="109.8" height="15.0" fill="rgb(237,63,10)" rx="2" ry="2" />
<text  x="1048.93" y="431.5" >cpuidle_idle_..</text>
</g>
<g >
<title>newidle_balance (3 samples, 1.74%)</title><rect x="1162.6" y="373" width="20.5" height="15.0" fill="rgb(211,21,31)" rx="2" ry="2" />
<text  x="1165.56" y="383.5" ></text>
</g>
<g >
<title>generic_write_end (1 samples, 0.58%)</title><rect x="1018.5" y="117" width="6.8" height="15.0" fill="rgb(235,213,38)" rx="2" ry="2" />
<text  x="1021.49" y="127.5" ></text>
</g>
<g >
<title>rcu_gp_fqs_loop (1 samples, 0.58%)</title><rect x="1039.1" y="437" width="6.8" height="15.0" fill="rgb(216,154,52)" rx="2" ry="2" />
<text  x="1042.07" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 4.07%)</title><rect x="531.4" y="357" width="48.0" height="15.0" fill="rgb(237,182,28)" rx="2" ry="2" />
<text  x="534.40" y="367.5" >do_s..</text>
</g>
<g >
<title>kick_ilb (1 samples, 0.58%)</title><rect x="154.1" y="341" width="6.8" height="15.0" fill="rgb(217,114,41)" rx="2" ry="2" />
<text  x="157.07" y="351.5" ></text>
</g>
<g >
<title>nohz_newidle_balance (3 samples, 1.74%)</title><rect x="140.3" y="357" width="20.6" height="15.0" fill="rgb(248,158,26)" rx="2" ry="2" />
<text  x="143.35" y="367.5" ></text>
</g>
<g >
<title>perf (65 samples, 37.79%)</title><rect x="586.3" y="501" width="445.9" height="15.0" fill="rgb(208,25,9)" rx="2" ry="2" />
<text  x="589.28" y="511.5" >perf</text>
</g>
<g >
<title>grep (62 samples, 36.05%)</title><rect x="160.9" y="501" width="425.4" height="15.0" fill="rgb(224,106,16)" rx="2" ry="2" />
<text  x="163.93" y="511.5" >grep</text>
</g>
<g >
<title>smp_call_function_single (63 samples, 36.63%)</title><rect x="586.3" y="245" width="432.2" height="15.0" fill="rgb(244,168,45)" rx="2" ry="2" />
<text  x="589.28" y="255.5" >smp_call_function_single</text>
</g>
<g >
<title>__x64_sys_ioctl (1 samples, 0.58%)</title><rect x="1025.3" y="453" width="6.9" height="15.0" fill="rgb(207,219,17)" rx="2" ry="2" />
<text  x="1028.35" y="463.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1 samples, 0.58%)</title><rect x="1183.1" y="389" width="6.9" height="15.0" fill="rgb(227,176,50)" rx="2" ry="2" />
<text  x="1186.14" y="399.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1 samples, 0.58%)</title><rect x="1018.5" y="181" width="6.8" height="15.0" fill="rgb(212,41,32)" rx="2" ry="2" />
<text  x="1021.49" y="191.5" ></text>
</g>
<g >
<title>record__write (1 samples, 0.58%)</title><rect x="1018.5" y="389" width="6.8" height="15.0" fill="rgb(241,200,20)" rx="2" ry="2" />
<text  x="1021.49" y="399.5" ></text>
</g>
<g >
<title>nohz_csd_func (1 samples, 0.58%)</title><rect x="1155.7" y="405" width="6.9" height="15.0" fill="rgb(246,213,21)" rx="2" ry="2" />
<text  x="1158.70" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.58%)</title><rect x="1018.5" y="309" width="6.8" height="15.0" fill="rgb(216,160,31)" rx="2" ry="2" />
<text  x="1021.49" y="319.5" ></text>
</g>
<g >
<title>cmd_record (64 samples, 37.21%)</title><rect x="586.3" y="469" width="439.0" height="15.0" fill="rgb(226,98,12)" rx="2" ry="2" />
<text  x="589.28" y="479.5" >cmd_record</text>
</g>
<g >
<title>secondary_startup_64_no_verify (18 samples, 10.47%)</title><rect x="37.4" y="485" width="123.5" height="15.0" fill="rgb(248,24,47)" rx="2" ry="2" />
<text  x="40.44" y="495.5" >secondary_start..</text>
</g>
<g >
<title>pick_next_task_fair (4 samples, 2.33%)</title><rect x="133.5" y="389" width="27.4" height="15.0" fill="rgb(230,195,49)" rx="2" ry="2" />
<text  x="136.49" y="399.5" >p..</text>
</g>
<g >
<title>kthread (1 samples, 0.58%)</title><rect x="1039.1" y="469" width="6.8" height="15.0" fill="rgb(241,106,36)" rx="2" ry="2" />
<text  x="1042.07" y="479.5" ></text>
</g>
<g >
<title>cpuidle_select (1 samples, 0.58%)</title><rect x="126.6" y="405" width="6.9" height="15.0" fill="rgb(249,185,51)" rx="2" ry="2" />
<text  x="129.63" y="415.5" ></text>
</g>
<g >
<title>cpuidle_enter (16 samples, 9.30%)</title><rect x="1045.9" y="405" width="109.8" height="15.0" fill="rgb(211,42,39)" rx="2" ry="2" />
<text  x="1048.93" y="415.5" >cpuidle_enter</text>
</g>
<g >
<title>ctx_resched (1 samples, 0.58%)</title><rect x="1025.3" y="277" width="6.9" height="15.0" fill="rgb(212,69,42)" rx="2" ry="2" />
<text  x="1028.35" y="287.5" ></text>
</g>
<g >
<title>native_write_msr (1 samples, 0.58%)</title><rect x="1025.3" y="229" width="6.9" height="15.0" fill="rgb(254,124,45)" rx="2" ry="2" />
<text  x="1028.35" y="239.5" ></text>
</g>
<g >
<title>new_sync_read (7 samples, 4.07%)</title><rect x="531.4" y="293" width="48.0" height="15.0" fill="rgb(239,151,29)" rx="2" ry="2" />
<text  x="534.40" y="303.5" >new_..</text>
</g>
<g >
<title>ion (1 samples, 0.58%)</title><rect x="1018.5" y="373" width="6.8" height="15.0" fill="rgb(232,178,51)" rx="2" ry="2" />
<text  x="1021.49" y="383.5" ></text>
</g>
<g >
<title>find_get_pages_contig (1 samples, 0.58%)</title><rect x="565.7" y="149" width="6.9" height="15.0" fill="rgb(231,154,23)" rx="2" ry="2" />
<text  x="568.70" y="159.5" ></text>
</g>
<g >
<title>start_secondary (18 samples, 10.47%)</title><rect x="37.4" y="469" width="123.5" height="15.0" fill="rgb(248,133,7)" rx="2" ry="2" />
<text  x="40.44" y="479.5" >start_secondary</text>
</g>
<g >
<title>mark_page_accessed (1 samples, 0.58%)</title><rect x="572.6" y="165" width="6.8" height="15.0" fill="rgb(250,165,17)" rx="2" ry="2" />
<text  x="575.56" y="175.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (1 samples, 0.58%)</title><rect x="1183.1" y="309" width="6.9" height="15.0" fill="rgb(214,204,46)" rx="2" ry="2" />
<text  x="1186.14" y="319.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (1 samples, 0.58%)</title><rect x="1025.3" y="405" width="6.9" height="15.0" fill="rgb(254,1,43)" rx="2" ry="2" />
<text  x="1028.35" y="415.5" ></text>
</g>
<g >
<title>__schedule (4 samples, 2.33%)</title><rect x="133.5" y="405" width="27.4" height="15.0" fill="rgb(226,160,20)" rx="2" ry="2" />
<text  x="136.49" y="415.5" >_..</text>
</g>
<g >
<title>rcu_dynticks_eqs_enter (1 samples, 0.58%)</title><rect x="119.8" y="357" width="6.8" height="15.0" fill="rgb(243,107,25)" rx="2" ry="2" />
<text  x="122.77" y="367.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (63 samples, 36.63%)</title><rect x="586.3" y="421" width="432.2" height="15.0" fill="rgb(232,206,36)" rx="2" ry="2" />
<text  x="589.28" y="431.5" >perf_evsel__enable_cpu</text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.58%)</title><rect x="1018.5" y="37" width="6.8" height="15.0" fill="rgb(207,47,41)" rx="2" ry="2" />
<text  x="1021.49" y="47.5" ></text>
</g>
<g >
<title>menu_select (1 samples, 0.58%)</title><rect x="126.6" y="389" width="6.9" height="15.0" fill="rgb(227,34,49)" rx="2" ry="2" />
<text  x="129.63" y="399.5" ></text>
</g>
<g >
<title>smp_call_function_single_async (1 samples, 0.58%)</title><rect x="1169.4" y="325" width="6.9" height="15.0" fill="rgb(245,194,26)" rx="2" ry="2" />
<text  x="1172.42" y="335.5" ></text>
</g>
<g >
<title>__ioctl (63 samples, 36.63%)</title><rect x="586.3" y="389" width="432.2" height="15.0" fill="rgb(217,26,23)" rx="2" ry="2" />
<text  x="589.28" y="399.5" >__ioctl</text>
</g>
<g >
<title>swapper (23 samples, 13.37%)</title><rect x="1032.2" y="501" width="157.8" height="15.0" fill="rgb(215,177,13)" rx="2" ry="2" />
<text  x="1035.21" y="511.5" >swapper</text>
</g>
<g >
<title>do_idle (1 samples, 0.58%)</title><rect x="1183.1" y="373" width="6.9" height="15.0" fill="rgb(231,66,16)" rx="2" ry="2" />
<text  x="1186.14" y="383.5" ></text>
</g>
<g >
<title>do_idle (20 samples, 11.63%)</title><rect x="1045.9" y="437" width="137.2" height="15.0" fill="rgb(221,219,26)" rx="2" ry="2" />
<text  x="1048.93" y="447.5" >do_idle</text>
</g>
<g >
<title>cpu_startup_entry (20 samples, 11.63%)</title><rect x="1045.9" y="453" width="137.2" height="15.0" fill="rgb(236,173,46)" rx="2" ry="2" />
<text  x="1048.93" y="463.5" >cpu_startup_entry</text>
</g>
<g >
<title>smp_call_function_single_async (1 samples, 0.58%)</title><rect x="154.1" y="325" width="6.8" height="15.0" fill="rgb(227,198,31)" rx="2" ry="2" />
<text  x="157.07" y="335.5" ></text>
</g>
<g >
<title>smp_call_function_single_async (1 samples, 0.58%)</title><rect x="1176.3" y="341" width="6.8" height="15.0" fill="rgb(245,169,51)" rx="2" ry="2" />
<text  x="1179.28" y="351.5" ></text>
</g>
<g >
<title>process_synthesized_event (1 samples, 0.58%)</title><rect x="1018.5" y="405" width="6.8" height="15.0" fill="rgb(219,152,31)" rx="2" ry="2" />
<text  x="1021.49" y="415.5" ></text>
</g>
<g >
<title>kick_ilb (1 samples, 0.58%)</title><rect x="1169.4" y="341" width="6.9" height="15.0" fill="rgb(246,129,15)" rx="2" ry="2" />
<text  x="1172.42" y="351.5" ></text>
</g>
<g >
<title>vfs_read (7 samples, 4.07%)</title><rect x="531.4" y="309" width="48.0" height="15.0" fill="rgb(212,9,25)" rx="2" ry="2" />
<text  x="534.40" y="319.5" >vfs_..</text>
</g>
<g >
<title>remote_function (63 samples, 36.63%)</title><rect x="586.3" y="213" width="432.2" height="15.0" fill="rgb(209,3,18)" rx="2" ry="2" />
<text  x="589.28" y="223.5" >remote_function</text>
</g>
<g >
<title>do_syscall_64 (63 samples, 36.63%)</title><rect x="586.3" y="357" width="432.2" height="15.0" fill="rgb(251,131,12)" rx="2" ry="2" />
<text  x="589.28" y="367.5" >do_syscall_64</text>
</g>
<g >
<title>x86_64_start_reservations (1 samples, 0.58%)</title><rect x="1183.1" y="453" width="6.9" height="15.0" fill="rgb(215,135,43)" rx="2" ry="2" />
<text  x="1186.14" y="463.5" ></text>
</g>
<g >
<title>generic_exec_single (1 samples, 0.58%)</title><rect x="1025.3" y="341" width="6.9" height="15.0" fill="rgb(227,20,28)" rx="2" ry="2" />
<text  x="1028.35" y="351.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (7 samples, 4.07%)</title><rect x="531.4" y="181" width="48.0" height="15.0" fill="rgb(225,76,17)" rx="2" ry="2" />
<text  x="534.40" y="191.5" >gene..</text>
</g>
<g >
<title>[unknown] (4 samples, 2.33%)</title><rect x="10.0" y="485" width="27.4" height="15.0" fill="rgb(218,218,5)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >[..</text>
</g>
<g >
<title>start_secondary (20 samples, 11.63%)</title><rect x="1045.9" y="469" width="137.2" height="15.0" fill="rgb(207,26,20)" rx="2" ry="2" />
<text  x="1048.93" y="479.5" >start_secondary</text>
</g>
<g >
<title>flush_smp_call_function_from_idle (1 samples, 0.58%)</title><rect x="1155.7" y="421" width="6.9" height="15.0" fill="rgb(218,215,38)" rx="2" ry="2" />
<text  x="1158.70" y="431.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (63 samples, 36.63%)</title><rect x="586.3" y="293" width="432.2" height="15.0" fill="rgb(219,27,2)" rx="2" ry="2" />
<text  x="589.28" y="303.5" >perf_event_for_each_child</text>
</g>
<g >
<title>__perf_event_enable (63 samples, 36.63%)</title><rect x="586.3" y="181" width="432.2" height="15.0" fill="rgb(232,73,21)" rx="2" ry="2" />
<text  x="589.28" y="191.5" >__perf_event_enable</text>
</g>
</g>
</svg>
