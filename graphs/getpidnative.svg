<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>entry_SYSRETQ_unsafe_stack (52,342,773 samples, 0.16%)</title><rect x="857.4" y="325" width="1.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="860.44" y="335.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1,666,814,258 samples, 5.08%)</title><rect x="1118.7" y="293" width="59.9" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1121.68" y="303.5" >cpuidl..</text>
</g>
<g >
<title>tick_sched_handle (52,345,213 samples, 0.16%)</title><rect x="256.8" y="229" width="1.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="259.77" y="239.5" ></text>
</g>
<g >
<title>run_timer_softirq (187,776,031 samples, 0.57%)</title><rect x="1126.7" y="197" width="6.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1129.69" y="207.5" ></text>
</g>
<g >
<title>native_write_msr (5,082,919 samples, 0.02%)</title><rect x="959.5" y="37" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="962.48" y="47.5" ></text>
</g>
<g >
<title>irq_exit_rcu (356,254,634 samples, 1.09%)</title><rect x="1120.6" y="245" width="12.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1123.63" y="255.5" ></text>
</g>
<g >
<title>psi_group_change (149,282,277 samples, 0.45%)</title><rect x="1178.7" y="293" width="5.3" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="1181.68" y="303.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (9,958,387 samples, 0.03%)</title><rect x="958.8" y="213" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="961.82" y="223.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (54,189,968 samples, 0.17%)</title><rect x="1118.7" y="245" width="1.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1121.68" y="255.5" ></text>
</g>
<g >
<title>start_secondary (8,966,190 samples, 0.03%)</title><rect x="958.5" y="389" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="961.50" y="399.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (4,290,073 samples, 0.01%)</title><rect x="1184.1" y="197" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1187.13" y="207.5" ></text>
</g>
<g >
<title>__task_pid_nr_ns (2,085,762,858 samples, 6.36%)</title><rect x="561.5" y="277" width="75.0" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="564.53" y="287.5" >__task_p..</text>
</g>
<g >
<title>intel_idle (6,602,538 samples, 0.02%)</title><rect x="959.2" y="213" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="962.18" y="223.5" ></text>
</g>
<g >
<title>rebalance_domains (168,478,603 samples, 0.51%)</title><rect x="1120.6" y="181" width="6.1" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1123.63" y="191.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (356,254,634 samples, 1.09%)</title><rect x="1120.6" y="229" width="12.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1123.63" y="239.5" ></text>
</g>
<g >
<title>tick_sched_timer (47,085,759 samples, 0.14%)</title><rect x="1118.9" y="197" width="1.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1121.90" y="207.5" ></text>
</g>
<g >
<title>kworker/dying (646,133,726 samples, 1.97%)</title><rect x="936.3" y="421" width="23.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="939.25" y="431.5" >k..</text>
</g>
<g >
<title>__schedule (4,187,608 samples, 0.01%)</title><rect x="1189.8" y="261" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1192.82" y="271.5" ></text>
</g>
<g >
<title>cpu_startup_entry (165,241,759 samples, 0.50%)</title><rect x="1184.1" y="309" width="5.9" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1187.06" y="319.5" ></text>
</g>
<g >
<title>psi_task_switch (92,862,771 samples, 0.28%)</title><rect x="1115.0" y="261" width="3.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1118.03" y="271.5" ></text>
</g>
<g >
<title>sched_clock_cpu (92,862,771 samples, 0.28%)</title><rect x="1115.0" y="245" width="3.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1118.03" y="255.5" ></text>
</g>
<g >
<title>rest_init (165,241,759 samples, 0.50%)</title><rect x="1184.1" y="325" width="5.9" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1187.06" y="335.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (469,345,955 samples, 1.43%)</title><rect x="859.3" y="325" width="16.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="862.32" y="335.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (5,082,919 samples, 0.02%)</title><rect x="959.5" y="53" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="962.48" y="63.5" ></text>
</g>
<g >
<title>do_syscall_64 (103,558,227 samples, 0.32%)</title><rect x="258.7" y="325" width="3.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="261.65" y="335.5" ></text>
</g>
<g >
<title>call_cpuidle (8,762,406 samples, 0.03%)</title><rect x="958.5" y="325" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="961.50" y="335.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (158,147,845 samples, 0.48%)</title><rect x="1184.1" y="277" width="5.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1187.08" y="287.5" ></text>
</g>
<g >
<title>__legitimize_mnt (6,337,883 samples, 0.02%)</title><rect x="958.0" y="261" width="0.3" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="961.04" y="271.5" ></text>
</g>
<g >
<title>cpuidle_enter (8,762,406 samples, 0.03%)</title><rect x="958.5" y="309" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="961.50" y="319.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (46,294,359 samples, 0.14%)</title><rect x="1118.9" y="85" width="1.7" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1121.92" y="95.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (4,290,073 samples, 0.01%)</title><rect x="1184.1" y="213" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1187.13" y="223.5" ></text>
</g>
<g >
<title>do_idle (8,966,190 samples, 0.03%)</title><rect x="958.5" y="357" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="961.50" y="367.5" ></text>
</g>
<g >
<title>pick_next_task (3,417,202 samples, 0.01%)</title><rect x="1189.8" y="245" width="0.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1192.82" y="255.5" ></text>
</g>
<g >
<title>scheduler_tick (8,920,813 samples, 0.03%)</title><rect x="958.8" y="85" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="961.82" y="95.5" ></text>
</g>
<g >
<title>ep_poll (301,898,856 samples, 0.92%)</title><rect x="1107.5" y="341" width="10.9" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="1110.52" y="351.5" ></text>
</g>
<g >
<title>ret_from_fork_asm (4,433,973 samples, 0.01%)</title><rect x="958.3" y="405" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="961.34" y="415.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (53,034,656 samples, 0.16%)</title><rect x="1118.7" y="213" width="1.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1121.68" y="223.5" ></text>
</g>
<g >
<title>arch_call_rest_init (18,404,994 samples, 0.06%)</title><rect x="958.8" y="341" width="0.7" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="961.82" y="351.5" ></text>
</g>
<g >
<title>find_busiest_group (168,478,603 samples, 0.51%)</title><rect x="1120.6" y="149" width="6.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1123.63" y="159.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (8,762,406 samples, 0.03%)</title><rect x="958.5" y="293" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="961.50" y="303.5" ></text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (6,617,268 samples, 0.02%)</title><rect x="958.0" y="309" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="961.03" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (574,040,987 samples, 1.75%)</title><rect x="883.7" y="405" width="20.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="886.70" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_openat (8,820,202 samples, 0.03%)</title><rect x="958.0" y="373" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="960.99" y="383.5" ></text>
</g>
<g >
<title>rest_init (18,404,994 samples, 0.06%)</title><rect x="958.8" y="325" width="0.7" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="961.82" y="335.5" ></text>
</g>
<g >
<title>schedule_idle (149,282,277 samples, 0.45%)</title><rect x="1178.7" y="341" width="5.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1181.68" y="351.5" ></text>
</g>
<g >
<title>do_sys_openat2 (2,968,263 samples, 0.01%)</title><rect x="1118.4" y="357" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1121.41" y="367.5" ></text>
</g>
<g >
<title>start_kernel (18,404,994 samples, 0.06%)</title><rect x="958.8" y="357" width="0.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="961.82" y="367.5" ></text>
</g>
<g >
<title>__task_pid_nr_ns (104,126,426 samples, 0.32%)</title><rect x="528.2" y="293" width="3.7" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="531.18" y="303.5" ></text>
</g>
<g >
<title>x86_pmu_enable (46,294,359 samples, 0.14%)</title><rect x="1118.9" y="101" width="1.7" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1121.92" y="111.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (208,559,307 samples, 0.64%)</title><rect x="1107.5" y="293" width="7.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1110.52" y="303.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (52,345,213 samples, 0.16%)</title><rect x="256.8" y="261" width="1.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="259.77" y="271.5" ></text>
</g>
<g >
<title>perf_ctx_enable (5,082,919 samples, 0.02%)</title><rect x="959.5" y="85" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="962.48" y="95.5" ></text>
</g>
<g >
<title>tick_nohz_stop_tick (139,491,356 samples, 0.43%)</title><rect x="1184.8" y="245" width="5.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1187.75" y="255.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (365,789,172 samples, 1.11%)</title><rect x="642.2" y="293" width="13.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="645.16" y="303.5" ></text>
</g>
<g >
<title>psi_task_switch (3,736,701 samples, 0.01%)</title><rect x="958.4" y="309" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="961.36" y="319.5" ></text>
</g>
<g >
<title>remote_function (5,082,919 samples, 0.02%)</title><rect x="959.5" y="149" width="0.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="962.48" y="159.5" ></text>
</g>
<g >
<title>__perf_event_enable (5,082,919 samples, 0.02%)</title><rect x="959.5" y="117" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="962.48" y="127.5" ></text>
</g>
<g >
<title>tick_sched_timer (8,920,813 samples, 0.03%)</title><rect x="958.8" y="133" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="961.82" y="143.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (165,241,759 samples, 0.50%)</title><rect x="1184.1" y="389" width="5.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1187.06" y="399.5" ></text>
</g>
<g >
<title>smp_call_function_single (5,082,919 samples, 0.02%)</title><rect x="959.5" y="181" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="962.48" y="191.5" ></text>
</g>
<g >
<title>timerqueue_add (207,790,407 samples, 0.63%)</title><rect x="1107.5" y="245" width="7.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1110.52" y="255.5" ></text>
</g>
<g >
<title>x86_pmu_enable (5,082,919 samples, 0.02%)</title><rect x="959.5" y="69" width="0.2" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="962.48" y="79.5" ></text>
</g>
<g >
<title>call_cpuidle (1,668,183,163 samples, 5.08%)</title><rect x="1118.7" y="325" width="60.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1121.68" y="335.5" >call_c..</text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (39,227,839 samples, 0.12%)</title><rect x="1125.3" y="133" width="1.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1128.28" y="143.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (3,671,437 samples, 0.01%)</title><rect x="959.0" y="53" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="962.01" y="63.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (1,983,566,715 samples, 6.04%)</title><rect x="1118.7" y="405" width="71.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1121.68" y="415.5" >secondar..</text>
</g>
<g >
<title>amd_clear_divider (156,558,965 samples, 0.48%)</title><rect x="636.5" y="293" width="5.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="639.53" y="303.5" ></text>
</g>
<g >
<title>call_cpuidle (16,838,099 samples, 0.05%)</title><rect x="1184.1" y="261" width="0.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1187.08" y="271.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (5,082,919 samples, 0.02%)</title><rect x="959.5" y="341" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="962.48" y="351.5" ></text>
</g>
<g >
<title>intel_idle (6,764,748 samples, 0.02%)</title><rect x="958.6" y="277" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="961.57" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (5,082,919 samples, 0.02%)</title><rect x="959.5" y="293" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="962.48" y="303.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (9,204,593 samples, 0.03%)</title><rect x="958.8" y="181" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="961.82" y="191.5" ></text>
</g>
<g >
<title>perf_event_task_tick (3,671,437 samples, 0.01%)</title><rect x="959.0" y="69" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="962.01" y="79.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (4,410,860,246 samples, 13.44%)</title><rect x="672.6" y="293" width="158.6" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="675.61" y="303.5" >syscall_exit_to_user..</text>
</g>
<g >
<title>__x64_sys_getpid (2,909,379,431 samples, 8.86%)</title><rect x="531.9" y="293" width="104.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="534.92" y="303.5" >__x64_sys_ge..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (310,008,294 samples, 0.94%)</title><rect x="1107.5" y="405" width="11.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1110.50" y="415.5" ></text>
</g>
<g >
<title>tick_sched_timer (52,345,213 samples, 0.16%)</title><rect x="256.8" y="245" width="1.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="259.77" y="255.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (520,688,530 samples, 1.59%)</title><rect x="838.7" y="309" width="18.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="841.72" y="319.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (8,762,406 samples, 0.03%)</title><rect x="958.5" y="341" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="961.50" y="351.5" ></text>
</g>
<g >
<title>_perf_event_enable (5,082,919 samples, 0.02%)</title><rect x="959.5" y="213" width="0.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="962.48" y="223.5" ></text>
</g>
<g >
<title>psi_task_switch (149,282,277 samples, 0.45%)</title><rect x="1178.7" y="309" width="5.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1181.68" y="319.5" ></text>
</g>
<g >
<title>__getpid (21,532,631,450 samples, 65.61%)</title><rect x="102.0" y="341" width="774.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="105.00" y="351.5" >__getpid</text>
</g>
<g >
<title>__legitimize_path (6,337,883 samples, 0.02%)</title><rect x="958.0" y="277" width="0.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="961.04" y="287.5" ></text>
</g>
<g >
<title>cpuidle_enter (1,668,183,163 samples, 5.08%)</title><rect x="1118.7" y="309" width="60.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1121.68" y="319.5" >cpuidl..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (139,491,356 samples, 0.43%)</title><rect x="1184.8" y="213" width="5.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1187.75" y="223.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (15,948,210 samples, 0.05%)</title><rect x="1184.1" y="229" width="0.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1187.11" y="239.5" ></text>
</g>
<g >
<title>[unknown] (5,082,919 samples, 0.02%)</title><rect x="959.5" y="405" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="962.48" y="415.5" ></text>
</g>
<g >
<title>__schedule (149,282,277 samples, 0.45%)</title><rect x="1178.7" y="325" width="5.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1181.68" y="335.5" ></text>
</g>
<g >
<title>do_idle (1,818,324,956 samples, 5.54%)</title><rect x="1118.7" y="357" width="65.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1121.68" y="367.5" >do_idle</text>
</g>
<g >
<title>path_openat (8,234,814 samples, 0.03%)</title><rect x="958.0" y="325" width="0.3" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="960.99" y="335.5" ></text>
</g>
<g >
<title>intel_idle (988,789,605 samples, 3.01%)</title><rect x="1143.1" y="277" width="35.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1146.06" y="287.5" >int..</text>
</g>
<g >
<title>_start (23,729,392,125 samples, 72.30%)</title><rect x="30.5" y="405" width="853.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="33.51" y="415.5" >_start</text>
</g>
<g >
<title>do_syscall_64 (11,210,011 samples, 0.03%)</title><rect x="957.9" y="389" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="960.94" y="399.5" ></text>
</g>
<g >
<title>update_process_times (8,920,813 samples, 0.03%)</title><rect x="958.8" y="101" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="961.82" y="111.5" ></text>
</g>
<g >
<title>__evlist__enable (5,082,919 samples, 0.02%)</title><rect x="959.5" y="373" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="962.48" y="383.5" ></text>
</g>
<g >
<title>ct_idle_enter (267,580,051 samples, 0.82%)</title><rect x="1133.4" y="277" width="9.7" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1136.44" y="287.5" ></text>
</g>
<g >
<title>start_secondary (1,818,324,956 samples, 5.54%)</title><rect x="1118.7" y="389" width="65.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1121.68" y="399.5" >start_s..</text>
</g>
<g >
<title>[unknown] (570,397,056 samples, 1.74%)</title><rect x="10.0" y="405" width="20.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (209,106,073 samples, 0.64%)</title><rect x="831.2" y="309" width="7.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="834.20" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (8,688,801,475 samples, 26.47%)</title><rect x="518.8" y="309" width="312.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="521.80" y="319.5" >do_syscall_64</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (410,444,602 samples, 1.25%)</title><rect x="1118.7" y="261" width="14.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1121.68" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_getpid (468,070,672 samples, 1.43%)</title><rect x="502.0" y="309" width="16.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="504.97" y="319.5" ></text>
</g>
<g >
<title>wake_up_process (4,788,632 samples, 0.01%)</title><rect x="1118.7" y="181" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1121.72" y="191.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (417,450,145 samples, 1.27%)</title><rect x="802.4" y="261" width="15.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="805.40" y="271.5" ></text>
</g>
<g >
<title>ctx_resched (5,082,919 samples, 0.02%)</title><rect x="959.5" y="101" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="962.48" y="111.5" ></text>
</g>
<g >
<title>__rcu_read_lock (312,653,751 samples, 0.95%)</title><rect x="535.7" y="277" width="11.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="538.65" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (5,082,919 samples, 0.02%)</title><rect x="959.5" y="277" width="0.2" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="962.48" y="287.5" ></text>
</g>
<g >
<title>tick_nohz_idle_stop_tick (139,491,356 samples, 0.43%)</title><rect x="1184.8" y="261" width="5.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1187.75" y="271.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (18,404,994 samples, 0.06%)</title><rect x="958.8" y="373" width="0.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="961.82" y="383.5" ></text>
</g>
<g >
<title>ioctl (5,082,919 samples, 0.02%)</title><rect x="959.5" y="325" width="0.2" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="962.48" y="335.5" ></text>
</g>
<g >
<title>ret_from_fork (4,433,973 samples, 0.01%)</title><rect x="958.3" y="389" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="961.34" y="399.5" ></text>
</g>
<g >
<title>try_to_wake_up (4,788,632 samples, 0.01%)</title><rect x="1118.7" y="165" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1121.72" y="175.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (9,204,593 samples, 0.03%)</title><rect x="958.8" y="165" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="961.82" y="175.5" ></text>
</g>
<g >
<title>scheduler_tick (47,085,759 samples, 0.14%)</title><rect x="1118.9" y="149" width="1.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1121.90" y="159.5" ></text>
</g>
<g >
<title>event_function (5,082,919 samples, 0.02%)</title><rect x="959.5" y="133" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="962.48" y="143.5" ></text>
</g>
<g >
<title>perf (5,082,919 samples, 0.02%)</title><rect x="959.5" y="421" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="962.48" y="431.5" ></text>
</g>
<g >
<title>call_cpuidle (16,560,925 samples, 0.05%)</title><rect x="958.8" y="261" width="0.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="961.82" y="271.5" ></text>
</g>
<g >
<title>__hrtimer_start_range_ns (207,790,407 samples, 0.63%)</title><rect x="1107.5" y="277" width="7.5" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1110.52" y="287.5" ></text>
</g>
<g >
<title>__do_softirq (356,254,634 samples, 1.09%)</title><rect x="1120.6" y="213" width="12.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1123.63" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (52,345,213 samples, 0.16%)</title><rect x="256.8" y="325" width="1.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="259.77" y="335.5" ></text>
</g>
<g >
<title>kthread (4,433,973 samples, 0.01%)</title><rect x="958.3" y="373" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="961.34" y="383.5" ></text>
</g>
<g >
<title>schedule_idle (4,187,608 samples, 0.01%)</title><rect x="1189.8" y="277" width="0.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1192.82" y="287.5" ></text>
</g>
<g >
<title>generic_exec_single (5,082,919 samples, 0.02%)</title><rect x="959.5" y="165" width="0.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="962.48" y="175.5" ></text>
</g>
<g >
<title>schedule (3,736,701 samples, 0.01%)</title><rect x="958.4" y="341" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="961.36" y="351.5" ></text>
</g>
<g >
<title>__schedule (93,177,369 samples, 0.28%)</title><rect x="1115.0" y="277" width="3.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1118.02" y="287.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (5,082,919 samples, 0.02%)</title><rect x="959.5" y="229" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="962.48" y="239.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (16,560,925 samples, 0.05%)</title><rect x="958.8" y="229" width="0.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="961.82" y="239.5" ></text>
</g>
<g >
<title>__schedule (3,736,701 samples, 0.01%)</title><rect x="958.4" y="325" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="961.36" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (678,952,313 samples, 2.07%)</title><rect x="904.3" y="405" width="24.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="907.34" y="415.5" >e..</text>
</g>
<g >
<title>_perf_ioctl (5,082,919 samples, 0.02%)</title><rect x="959.5" y="245" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="962.48" y="255.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (52,345,213 samples, 0.16%)</title><rect x="256.8" y="293" width="1.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="259.77" y="303.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (5,082,919 samples, 0.02%)</title><rect x="959.5" y="357" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="962.48" y="367.5" ></text>
</g>
<g >
<title>__getpid (570,397,056 samples, 1.74%)</title><rect x="10.0" y="389" width="20.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>enqueue_hrtimer (207,790,407 samples, 0.63%)</title><rect x="1107.5" y="261" width="7.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1110.52" y="271.5" ></text>
</g>
<g >
<title>rcu_gp_kthread (4,266,936 samples, 0.01%)</title><rect x="958.3" y="357" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="961.34" y="367.5" ></text>
</g>
<g >
<title>tick_sched_handle (47,085,759 samples, 0.14%)</title><rect x="1118.9" y="181" width="1.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1121.90" y="191.5" ></text>
</g>
<g >
<title>perf_event_task_tick (47,085,759 samples, 0.14%)</title><rect x="1118.9" y="133" width="1.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1121.90" y="143.5" ></text>
</g>
<g >
<title>pick_next_task_fair (3,417,202 samples, 0.01%)</title><rect x="1189.8" y="229" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.82" y="239.5" ></text>
</g>
<g >
<title>run_posix_cpu_timers (52,345,213 samples, 0.16%)</title><rect x="256.8" y="213" width="1.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="259.77" y="223.5" ></text>
</g>
<g >
<title>do_idle (18,404,994 samples, 0.06%)</title><rect x="958.8" y="293" width="0.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="961.82" y="303.5" ></text>
</g>
<g >
<title>try_to_unlazy (6,337,883 samples, 0.02%)</title><rect x="958.0" y="293" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="961.04" y="303.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (301,736,676 samples, 0.92%)</title><rect x="1107.5" y="309" width="10.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1110.52" y="319.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (52,345,213 samples, 0.16%)</title><rect x="256.8" y="277" width="1.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="259.77" y="287.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (1,668,668,595 samples, 5.08%)</title><rect x="1118.7" y="341" width="60.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1121.68" y="351.5" >cpuidl..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,777,692,888 samples, 32.84%)</title><rect x="469.9" y="325" width="387.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="472.93" y="335.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__libc_start_main (23,729,392,125 samples, 72.30%)</title><rect x="30.5" y="389" width="853.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="33.51" y="399.5" >__libc_start_main</text>
</g>
<g >
<title>__run_timers (187,776,031 samples, 0.57%)</title><rect x="1126.7" y="181" width="6.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1129.69" y="191.5" ></text>
</g>
<g >
<title>schedule (93,177,369 samples, 0.28%)</title><rect x="1115.0" y="293" width="3.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1118.02" y="303.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (52,345,213 samples, 0.16%)</title><rect x="256.8" y="309" width="1.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="259.77" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,082,919 samples, 0.02%)</title><rect x="959.5" y="309" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="962.48" y="319.5" ></text>
</g>
<g >
<title>intel_idle (10,884,015 samples, 0.03%)</title><rect x="1184.3" y="213" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1187.29" y="223.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (27,371,184 samples, 0.08%)</title><rect x="958.5" y="405" width="1.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="961.50" y="415.5" ></text>
</g>
<g >
<title>all (32,818,926,105 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>main (23,729,392,125 samples, 72.30%)</title><rect x="30.5" y="357" width="853.2" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="33.51" y="367.5" >main</text>
</g>
<g >
<title>run_rebalance_domains (168,478,603 samples, 0.51%)</title><rect x="1120.6" y="197" width="6.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1123.63" y="207.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (3,296,740,246 samples, 10.05%)</title><rect x="698.9" y="277" width="118.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="701.88" y="287.5" >exit_to_user_m..</text>
</g>
<g >
<title>schedule_hrtimeout_range (301,736,676 samples, 0.92%)</title><rect x="1107.5" y="325" width="10.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1110.52" y="335.5" ></text>
</g>
<g >
<title>swapper (6,406,156,645 samples, 19.52%)</title><rect x="959.7" y="421" width="230.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="962.67" y="431.5" >swapper</text>
</g>
<g >
<title>ct_kernel_exit.constprop.0 (267,580,051 samples, 0.82%)</title><rect x="1133.4" y="261" width="9.7" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1136.44" y="271.5" ></text>
</g>
<g >
<title>tick_sched_handle (8,920,813 samples, 0.03%)</title><rect x="958.8" y="117" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="961.82" y="127.5" ></text>
</g>
<g >
<title>event_function_call (5,082,919 samples, 0.02%)</title><rect x="959.5" y="197" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="962.48" y="207.5" ></text>
</g>
<g >
<title>native_write_msr (46,294,359 samples, 0.14%)</title><rect x="1118.9" y="69" width="1.7" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1121.92" y="79.5" ></text>
</g>
<g >
<title>do_idle (164,987,030 samples, 0.50%)</title><rect x="1184.1" y="293" width="5.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1187.07" y="303.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (17,244,030 samples, 0.05%)</title><rect x="958.8" y="277" width="0.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="961.82" y="287.5" ></text>
</g>
<g >
<title>load_balance (168,478,603 samples, 0.51%)</title><rect x="1120.6" y="165" width="6.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1123.63" y="175.5" ></text>
</g>
<g >
<title>cpuidle_enter (16,584,681 samples, 0.05%)</title><rect x="1184.1" y="245" width="0.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1187.09" y="255.5" ></text>
</g>
<g >
<title>start_kernel (165,241,759 samples, 0.50%)</title><rect x="1184.1" y="357" width="5.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1187.06" y="367.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (481,230,638 samples, 1.47%)</title><rect x="655.3" y="293" width="17.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="658.31" y="303.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (407,150,600 samples, 1.24%)</title><rect x="546.9" y="277" width="14.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="549.90" y="287.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (139,491,356 samples, 0.43%)</title><rect x="1184.8" y="229" width="5.0" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1187.75" y="239.5" ></text>
</g>
<g >
<title>do_filp_open (8,234,814 samples, 0.03%)</title><rect x="958.0" y="341" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="960.99" y="351.5" ></text>
</g>
<g >
<title>hrtimer_wakeup (4,788,632 samples, 0.01%)</title><rect x="1118.7" y="197" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1121.72" y="207.5" ></text>
</g>
<g >
<title>arch_scale_freq_tick (5,249,376 samples, 0.02%)</title><rect x="958.8" y="69" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="961.82" y="79.5" ></text>
</g>
<g >
<title>getpid (25,761,552,815 samples, 78.50%)</title><rect x="10.0" y="421" width="926.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >getpid</text>
</g>
<g >
<title>do_epoll_wait (301,898,856 samples, 0.92%)</title><rect x="1107.5" y="357" width="10.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1110.52" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (301,898,856 samples, 0.92%)</title><rect x="1107.5" y="373" width="10.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1110.52" y="383.5" ></text>
</g>
<g >
<title>__cmd_record (5,082,919 samples, 0.02%)</title><rect x="959.5" y="389" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="962.48" y="399.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (47,085,759 samples, 0.14%)</title><rect x="1118.9" y="117" width="1.7" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1121.90" y="127.5" ></text>
</g>
<g >
<title>cpu_startup_entry (8,966,190 samples, 0.03%)</title><rect x="958.5" y="373" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="961.50" y="383.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (9,204,593 samples, 0.03%)</title><rect x="958.8" y="149" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="961.82" y="159.5" ></text>
</g>
<g >
<title>update_process_times (47,085,759 samples, 0.14%)</title><rect x="1118.9" y="165" width="1.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1121.90" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11,587,239 samples, 0.04%)</title><rect x="957.9" y="405" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="960.92" y="415.5" ></text>
</g>
<g >
<title>cpuidle_enter (16,560,925 samples, 0.05%)</title><rect x="958.8" y="245" width="0.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="961.82" y="255.5" ></text>
</g>
<g >
<title>psi_group_change (3,736,701 samples, 0.01%)</title><rect x="958.4" y="293" width="0.1" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="961.36" y="303.5" ></text>
</g>
<g >
<title>do_sys_openat2 (8,820,202 samples, 0.03%)</title><rect x="958.0" y="357" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="960.99" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (23,729,392,125 samples, 72.30%)</title><rect x="30.5" y="373" width="853.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="33.51" y="383.5" >[libc.so.6]</text>
</g>
<g >
<title>update_sg_lb_stats (39,227,839 samples, 0.12%)</title><rect x="1125.3" y="117" width="1.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1128.28" y="127.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (165,241,759 samples, 0.50%)</title><rect x="1184.1" y="373" width="5.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1187.06" y="383.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (9,958,387 samples, 0.03%)</title><rect x="958.8" y="197" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="961.82" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (5,772,630,496 samples, 17.59%)</title><rect x="262.4" y="325" width="207.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="265.38" y="335.5" >entry_SYSCALL_64</text>
</g>
<g >
<title>do_syscall_64 (310,008,294 samples, 0.94%)</title><rect x="1107.5" y="389" width="11.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1110.50" y="399.5" ></text>
</g>
<g >
<title>arch_call_rest_init (165,241,759 samples, 0.50%)</title><rect x="1184.1" y="341" width="5.9" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1187.06" y="351.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (208,770,334 samples, 0.64%)</title><rect x="928.7" y="405" width="7.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="931.75" y="415.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1,818,324,956 samples, 5.54%)</title><rect x="1118.7" y="373" width="65.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1121.68" y="383.5" >cpu_sta..</text>
</g>
<g >
<title>fpregs_assert_state_consistent (383,630,458 samples, 1.17%)</title><rect x="817.4" y="277" width="13.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="820.41" y="287.5" ></text>
</g>
<g >
<title>getpid@plt (208,479,431 samples, 0.64%)</title><rect x="876.2" y="341" width="7.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="879.20" y="351.5" ></text>
</g>
<g >
<title>cpu_startup_entry (18,404,994 samples, 0.06%)</title><rect x="958.8" y="309" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="961.82" y="319.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (53,486,815 samples, 0.16%)</title><rect x="1118.7" y="229" width="1.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1121.68" y="239.5" ></text>
</g>
<g >
<title>perf_ioctl (5,082,919 samples, 0.02%)</title><rect x="959.5" y="261" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="962.48" y="271.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (18,404,994 samples, 0.06%)</title><rect x="958.8" y="389" width="0.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="961.82" y="399.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (410,444,602 samples, 1.25%)</title><rect x="1118.7" y="277" width="14.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1121.68" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_openat (2,968,263 samples, 0.01%)</title><rect x="1118.4" y="373" width="0.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1121.41" y="383.5" ></text>
</g>
</g>
</svg>
