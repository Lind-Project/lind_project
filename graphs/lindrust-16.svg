<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="854.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="837" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="837" > </text>
<g id="frames">
<g >
<title>record__mmap_read_all (10 samples, 1.00%)</title><rect x="113.0" y="725" width="11.8" height="15.0" fill="rgb(223,85,24)" rx="2" ry="2" />
<text  x="115.97" y="735.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (8 samples, 0.80%)</title><rect x="114.2" y="453" width="9.4" height="15.0" fill="rgb(225,73,18)" rx="2" ry="2" />
<text  x="117.15" y="463.5" ></text>
</g>
<g >
<title>_start (3 samples, 0.30%)</title><rect x="10.0" y="773" width="3.6" height="15.0" fill="rgb(224,66,52)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="1102.4" y="645" width="1.2" height="15.0" fill="rgb(218,73,8)" rx="2" ry="2" />
<text  x="1105.42" y="655.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.10%)</title><rect x="114.2" y="309" width="1.1" height="15.0" fill="rgb(250,123,7)" rx="2" ry="2" />
<text  x="117.15" y="319.5" ></text>
</g>
<g >
<title>do_sys_poll (1 samples, 0.10%)</title><rect x="110.6" y="645" width="1.2" height="15.0" fill="rgb(232,185,24)" rx="2" ry="2" />
<text  x="113.60" y="655.5" ></text>
</g>
<g >
<title>__run_hrtimer (8 samples, 0.80%)</title><rect x="1156.9" y="501" width="9.4" height="15.0" fill="rgb(254,61,43)" rx="2" ry="2" />
<text  x="1159.86" y="511.5" ></text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="1005.4" y="725" width="1.1" height="15.0" fill="rgb(216,125,29)" rx="2" ry="2" />
<text  x="1008.37" y="735.5" ></text>
</g>
<g >
<title>NaClValidateImage (3 samples, 0.30%)</title><rect x="968.7" y="693" width="3.5" height="15.0" fill="rgb(229,81,50)" rx="2" ry="2" />
<text  x="971.68" y="703.5" ></text>
</g>
<g >
<title>NaClAppThreadSetSuspendState (1 samples, 0.10%)</title><rect x="160.3" y="741" width="1.2" height="15.0" fill="rgb(235,136,28)" rx="2" ry="2" />
<text  x="163.31" y="751.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="967.5" y="709" width="1.2" height="15.0" fill="rgb(212,182,1)" rx="2" ry="2" />
<text  x="970.49" y="719.5" ></text>
</g>
<g >
<title>NaClSimpleServiceStartServiceThread (1 samples, 0.10%)</title><rect x="1006.5" y="677" width="1.2" height="15.0" fill="rgb(232,163,45)" rx="2" ry="2" />
<text  x="1009.55" y="687.5" ></text>
</g>
<g >
<title>process_one_work (1 samples, 0.10%)</title><rect x="1095.3" y="725" width="1.2" height="15.0" fill="rgb(221,66,47)" rx="2" ry="2" />
<text  x="1098.32" y="735.5" ></text>
</g>
<g >
<title>get_new_window_size (1 samples, 0.10%)</title><rect x="11.2" y="661" width="1.2" height="15.0" fill="rgb(244,2,10)" rx="2" ry="2" />
<text  x="14.18" y="671.5" ></text>
</g>
<g >
<title>event_function_call (73 samples, 7.32%)</title><rect x="24.2" y="549" width="86.4" height="15.0" fill="rgb(215,35,5)" rx="2" ry="2" />
<text  x="27.20" y="559.5" >event_func..</text>
</g>
<g >
<title>__get_user_nocheck_1 (1 samples, 0.10%)</title><rect x="115.3" y="405" width="1.2" height="15.0" fill="rgb(252,69,6)" rx="2" ry="2" />
<text  x="118.34" y="415.5" ></text>
</g>
<g >
<title>_perf_event_enable (75 samples, 7.52%)</title><rect x="21.8" y="565" width="88.8" height="15.0" fill="rgb(211,156,12)" rx="2" ry="2" />
<text  x="24.84" y="575.5" >_perf_even..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.20%)</title><rect x="721.3" y="629" width="2.4" height="15.0" fill="rgb(246,13,6)" rx="2" ry="2" />
<text  x="724.31" y="639.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.20%)</title><rect x="220.7" y="149" width="2.3" height="15.0" fill="rgb(208,96,44)" rx="2" ry="2" />
<text  x="223.67" y="159.5" ></text>
</g>
<g >
<title>find_busiest_group (2 samples, 0.20%)</title><rect x="1167.5" y="453" width="2.4" height="15.0" fill="rgb(217,124,3)" rx="2" ry="2" />
<text  x="1170.51" y="463.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="217.1" y="277" width="1.2" height="15.0" fill="rgb(234,174,29)" rx="2" ry="2" />
<text  x="220.12" y="287.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (5 samples, 0.50%)</title><rect x="116.5" y="405" width="5.9" height="15.0" fill="rgb(215,51,4)" rx="2" ry="2" />
<text  x="119.52" y="415.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_access (110 samples, 11.03%)</title><rect x="387.6" y="565" width="130.1" height="15.0" fill="rgb(206,48,14)" rx="2" ry="2" />
<text  x="390.55" y="575.5" >ringbuf::produce..</text>
</g>
<g >
<title>__perf_event_enable (65 samples, 6.52%)</title><rect x="33.7" y="469" width="76.9" height="15.0" fill="rgb(210,221,29)" rx="2" ry="2" />
<text  x="36.67" y="479.5" >__perf_e..</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (2 samples, 0.20%)</title><rect x="218.3" y="245" width="2.4" height="15.0" fill="rgb(218,44,5)" rx="2" ry="2" />
<text  x="221.30" y="255.5" ></text>
</g>
<g >
<title>CachedMapWritableText (4 samples, 0.40%)</title><rect x="169.8" y="677" width="4.7" height="15.0" fill="rgb(235,100,45)" rx="2" ry="2" />
<text  x="172.78" y="687.5" ></text>
</g>
<g >
<title>NaClThreadInterfaceConstructAndStartThread (1 samples, 0.10%)</title><rect x="1006.5" y="661" width="1.2" height="15.0" fill="rgb(240,171,17)" rx="2" ry="2" />
<text  x="1009.55" y="671.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="217.1" y="149" width="1.2" height="15.0" fill="rgb(239,24,34)" rx="2" ry="2" />
<text  x="220.12" y="159.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (1 samples, 0.10%)</title><rect x="110.6" y="613" width="1.2" height="15.0" fill="rgb(233,141,6)" rx="2" ry="2" />
<text  x="113.60" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="1094.1" y="773" width="1.2" height="15.0" fill="rgb(210,200,14)" rx="2" ry="2" />
<text  x="1097.13" y="783.5" ></text>
</g>
<g >
<title>find_vma (1 samples, 0.10%)</title><rect x="837.3" y="709" width="1.2" height="15.0" fill="rgb(253,2,5)" rx="2" ry="2" />
<text  x="840.30" y="719.5" ></text>
</g>
<g >
<title>CopyCodeSafelyInitial (6 samples, 0.60%)</title><rect x="162.7" y="693" width="7.1" height="15.0" fill="rgb(234,187,34)" rx="2" ry="2" />
<text  x="165.68" y="703.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (5 samples, 0.50%)</title><rect x="217.1" y="325" width="5.9" height="15.0" fill="rgb(241,152,15)" rx="2" ry="2" />
<text  x="220.12" y="335.5" ></text>
</g>
<g >
<title>free_unref_page_commit (7 samples, 0.70%)</title><rect x="1076.4" y="453" width="8.3" height="15.0" fill="rgb(221,72,37)" rx="2" ry="2" />
<text  x="1079.38" y="463.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.10%)</title><rect x="123.6" y="565" width="1.2" height="15.0" fill="rgb(247,91,30)" rx="2" ry="2" />
<text  x="126.62" y="575.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (1 samples, 0.10%)</title><rect x="1094.1" y="693" width="1.2" height="15.0" fill="rgb(228,182,25)" rx="2" ry="2" />
<text  x="1097.13" y="703.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.10%)</title><rect x="217.1" y="245" width="1.2" height="15.0" fill="rgb(221,224,18)" rx="2" ry="2" />
<text  x="220.12" y="255.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_slice (7 samples, 0.70%)</title><rect x="988.8" y="757" width="8.3" height="15.0" fill="rgb(227,26,13)" rx="2" ry="2" />
<text  x="991.80" y="767.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (80 samples, 8.02%)</title><rect x="15.9" y="661" width="94.7" height="15.0" fill="rgb(246,87,17)" rx="2" ry="2" />
<text  x="18.92" y="671.5" >entry_SYSCA..</text>
</g>
<g >
<title>newidle_balance (1 samples, 0.10%)</title><rect x="110.6" y="533" width="1.2" height="15.0" fill="rgb(217,46,44)" rx="2" ry="2" />
<text  x="113.60" y="543.5" ></text>
</g>
<g >
<title>NaClAppLaunchServiceThreads (1 samples, 0.10%)</title><rect x="1006.5" y="709" width="1.2" height="15.0" fill="rgb(218,110,27)" rx="2" ry="2" />
<text  x="1009.55" y="719.5" ></text>
</g>
<g >
<title>unlink_chunk.constprop.0 (1 samples, 0.10%)</title><rect x="11.2" y="533" width="1.2" height="15.0" fill="rgb(213,139,33)" rx="2" ry="2" />
<text  x="14.18" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.30%)</title><rect x="963.9" y="709" width="3.6" height="15.0" fill="rgb(212,217,42)" rx="2" ry="2" />
<text  x="966.94" y="719.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.10%)</title><rect x="1048.0" y="741" width="1.2" height="15.0" fill="rgb(224,168,38)" rx="2" ry="2" />
<text  x="1050.97" y="751.5" ></text>
</g>
<g >
<title>sel_ldr (813 samples, 81.54%)</title><rect x="127.2" y="789" width="962.2" height="15.0" fill="rgb(245,4,21)" rx="2" ry="2" />
<text  x="130.17" y="799.5" >sel_ldr</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.50%)</title><rect x="217.1" y="357" width="5.9" height="15.0" fill="rgb(233,79,22)" rx="2" ry="2" />
<text  x="220.12" y="367.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.40%)</title><rect x="218.3" y="277" width="4.7" height="15.0" fill="rgb(207,65,14)" rx="2" ry="2" />
<text  x="221.30" y="287.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (3 samples, 0.30%)</title><rect x="117.7" y="357" width="3.6" height="15.0" fill="rgb(224,190,19)" rx="2" ry="2" />
<text  x="120.70" y="367.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (1 samples, 0.10%)</title><rect x="903.6" y="597" width="1.2" height="15.0" fill="rgb(249,170,43)" rx="2" ry="2" />
<text  x="906.58" y="607.5" ></text>
</g>
<g >
<title>vfs_open (1 samples, 0.10%)</title><rect x="972.2" y="613" width="1.2" height="15.0" fill="rgb(205,74,25)" rx="2" ry="2" />
<text  x="975.23" y="623.5" ></text>
</g>
<g >
<title>pin_user_pages_remote (2 samples, 0.20%)</title><rect x="965.1" y="613" width="2.4" height="15.0" fill="rgb(227,61,44)" rx="2" ry="2" />
<text  x="968.13" y="623.5" ></text>
</g>
<g >
<title>path_openat (1 samples, 0.10%)</title><rect x="972.2" y="645" width="1.2" height="15.0" fill="rgb(240,53,50)" rx="2" ry="2" />
<text  x="975.23" y="655.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (8 samples, 0.80%)</title><rect x="114.2" y="469" width="9.4" height="15.0" fill="rgb(205,158,20)" rx="2" ry="2" />
<text  x="117.15" y="479.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (4 samples, 0.40%)</title><rect x="716.6" y="533" width="4.7" height="15.0" fill="rgb(251,8,28)" rx="2" ry="2" />
<text  x="719.58" y="543.5" ></text>
</g>
<g >
<title>RegFromOpcode (1 samples, 0.10%)</title><rect x="210.0" y="645" width="1.2" height="15.0" fill="rgb(233,23,3)" rx="2" ry="2" />
<text  x="213.02" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="14.7" y="757" width="1.2" height="15.0" fill="rgb(253,158,39)" rx="2" ry="2" />
<text  x="17.73" y="767.5" ></text>
</g>
<g >
<title>handle_mm_fault (82 samples, 8.22%)</title><rect x="838.5" y="709" width="97.0" height="15.0" fill="rgb(212,96,29)" rx="2" ry="2" />
<text  x="841.49" y="719.5" >handle_mm_f..</text>
</g>
<g >
<title>do_iter_readv_writev (2 samples, 0.20%)</title><rect x="124.8" y="629" width="2.4" height="15.0" fill="rgb(224,77,51)" rx="2" ry="2" />
<text  x="127.80" y="639.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="967.5" y="725" width="1.2" height="15.0" fill="rgb(251,147,22)" rx="2" ry="2" />
<text  x="970.49" y="735.5" ></text>
</g>
<g >
<title>update_blocked_averages (2 samples, 0.20%)</title><rect x="1169.9" y="485" width="2.3" height="15.0" fill="rgb(223,121,13)" rx="2" ry="2" />
<text  x="1172.88" y="495.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.10%)</title><rect x="123.6" y="581" width="1.2" height="15.0" fill="rgb(250,213,46)" rx="2" ry="2" />
<text  x="126.62" y="591.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.10%)</title><rect x="218.3" y="101" width="1.2" height="15.0" fill="rgb(241,118,51)" rx="2" ry="2" />
<text  x="221.30" y="111.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.10%)</title><rect x="1100.1" y="613" width="1.1" height="15.0" fill="rgb(233,222,3)" rx="2" ry="2" />
<text  x="1103.05" y="623.5" ></text>
</g>
<g >
<title>NaClNameServiceLaunch (1 samples, 0.10%)</title><rect x="1006.5" y="693" width="1.2" height="15.0" fill="rgb(217,138,22)" rx="2" ry="2" />
<text  x="1009.55" y="703.5" ></text>
</g>
<g >
<title>NaClValidateCode (3 samples, 0.30%)</title><rect x="968.7" y="677" width="3.5" height="15.0" fill="rgb(251,10,48)" rx="2" ry="2" />
<text  x="971.68" y="687.5" ></text>
</g>
<g >
<title>page_add_new_anon_rmap (5 samples, 0.50%)</title><rect x="927.3" y="645" width="5.9" height="15.0" fill="rgb(216,221,41)" rx="2" ry="2" />
<text  x="930.25" y="655.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (35 samples, 3.51%)</title><rect x="1048.0" y="773" width="41.4" height="15.0" fill="rgb(238,44,52)" rx="2" ry="2" />
<text  x="1050.97" y="783.5" >ent..</text>
</g>
<g >
<title>perf_evsel__enable_cpu (80 samples, 8.02%)</title><rect x="15.9" y="709" width="94.7" height="15.0" fill="rgb(234,96,1)" rx="2" ry="2" />
<text  x="18.92" y="719.5" >perf_evsel_..</text>
</g>
<g >
<title>do_fault_around (1 samples, 0.10%)</title><rect x="933.2" y="645" width="1.2" height="15.0" fill="rgb(208,104,17)" rx="2" ry="2" />
<text  x="936.17" y="655.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.10%)</title><rect x="1101.2" y="597" width="1.2" height="15.0" fill="rgb(231,22,21)" rx="2" ry="2" />
<text  x="1104.23" y="607.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (2 samples, 0.20%)</title><rect x="124.8" y="613" width="2.4" height="15.0" fill="rgb(252,201,28)" rx="2" ry="2" />
<text  x="127.80" y="623.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreateDecoder (46 samples, 4.61%)</title><rect x="162.7" y="741" width="54.4" height="15.0" fill="rgb(242,198,53)" rx="2" ry="2" />
<text  x="165.68" y="751.5" >NaClS..</text>
</g>
<g >
<title>net_rx_action (1 samples, 0.10%)</title><rect x="1101.2" y="565" width="1.2" height="15.0" fill="rgb(236,76,32)" rx="2" ry="2" />
<text  x="1104.23" y="575.5" ></text>
</g>
<g >
<title>__inc_numa_state (1 samples, 0.10%)</title><rect x="887.0" y="581" width="1.2" height="15.0" fill="rgb(211,209,42)" rx="2" ry="2" />
<text  x="890.01" y="591.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.10%)</title><rect x="1172.2" y="501" width="1.2" height="15.0" fill="rgb(227,33,47)" rx="2" ry="2" />
<text  x="1175.25" y="511.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (15 samples, 1.50%)</title><rect x="1156.9" y="597" width="17.7" height="15.0" fill="rgb(206,129,49)" rx="2" ry="2" />
<text  x="1159.86" y="607.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.10%)</title><rect x="1006.5" y="501" width="1.2" height="15.0" fill="rgb(243,178,4)" rx="2" ry="2" />
<text  x="1009.55" y="511.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.20%)</title><rect x="220.7" y="181" width="2.3" height="15.0" fill="rgb(214,217,52)" rx="2" ry="2" />
<text  x="223.67" y="191.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.10%)</title><rect x="11.2" y="501" width="1.2" height="15.0" fill="rgb(211,37,7)" rx="2" ry="2" />
<text  x="14.18" y="511.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (6 samples, 0.60%)</title><rect x="375.7" y="565" width="7.1" height="15.0" fill="rgb(251,67,2)" rx="2" ry="2" />
<text  x="378.72" y="575.5" ></text>
</g>
<g >
<title>NaClDescIoDescWrite (307 samples, 30.79%)</title><rect x="361.5" y="709" width="363.4" height="15.0" fill="rgb(243,111,22)" rx="2" ry="2" />
<text  x="364.51" y="719.5" >NaClDescIoDescWrite</text>
</g>
<g >
<title>mmput (32 samples, 3.21%)</title><rect x="1049.2" y="613" width="37.8" height="15.0" fill="rgb(209,111,6)" rx="2" ry="2" />
<text  x="1052.16" y="623.5" >mmput</text>
</g>
<g >
<title>ovl_real_fdget (1 samples, 0.10%)</title><rect x="223.0" y="469" width="1.2" height="15.0" fill="rgb(220,159,4)" rx="2" ry="2" />
<text  x="226.04" y="479.5" ></text>
</g>
<g >
<title>NaClAppLoadFile (3 samples, 0.30%)</title><rect x="968.7" y="725" width="3.5" height="15.0" fill="rgb(254,187,53)" rx="2" ry="2" />
<text  x="971.68" y="735.5" ></text>
</g>
<g >
<title>rebalance_domains (3 samples, 0.30%)</title><rect x="1166.3" y="485" width="3.6" height="15.0" fill="rgb(247,44,44)" rx="2" ry="2" />
<text  x="1169.33" y="495.5" ></text>
</g>
<g >
<title>get_signal (34 samples, 3.41%)</title><rect x="1049.2" y="677" width="40.2" height="15.0" fill="rgb(218,190,25)" rx="2" ry="2" />
<text  x="1052.16" y="687.5" >get..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.10%)</title><rect x="1006.5" y="517" width="1.2" height="15.0" fill="rgb(222,217,42)" rx="2" ry="2" />
<text  x="1009.55" y="527.5" ></text>
</g>
<g >
<title>__vunmap (1 samples, 0.10%)</title><rect x="1095.3" y="693" width="1.2" height="15.0" fill="rgb(227,34,14)" rx="2" ry="2" />
<text  x="1098.32" y="703.5" ></text>
</g>
<g >
<title>xas_store (2 samples, 0.20%)</title><rect x="118.9" y="325" width="2.4" height="15.0" fill="rgb(207,72,47)" rx="2" ry="2" />
<text  x="121.89" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_lseek (1 samples, 0.10%)</title><rect x="223.0" y="517" width="1.2" height="15.0" fill="rgb(209,152,31)" rx="2" ry="2" />
<text  x="226.04" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.10%)</title><rect x="121.3" y="341" width="1.1" height="15.0" fill="rgb(231,23,42)" rx="2" ry="2" />
<text  x="124.25" y="351.5" ></text>
</g>
<g >
<title>vfs_iter_write (8 samples, 0.80%)</title><rect x="114.2" y="501" width="9.4" height="15.0" fill="rgb(217,226,45)" rx="2" ry="2" />
<text  x="117.15" y="511.5" ></text>
</g>
<g >
<title>perf_event__get_comm_ids (1 samples, 0.10%)</title><rect x="111.8" y="693" width="1.2" height="15.0" fill="rgb(252,158,43)" rx="2" ry="2" />
<text  x="114.79" y="703.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.10%)</title><rect x="110.6" y="565" width="1.2" height="15.0" fill="rgb(211,50,7)" rx="2" ry="2" />
<text  x="113.60" y="575.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.10%)</title><rect x="173.3" y="357" width="1.2" height="15.0" fill="rgb(218,11,14)" rx="2" ry="2" />
<text  x="176.33" y="367.5" ></text>
</g>
<g >
<title>NaClCopyTakeLock (1 samples, 0.10%)</title><rect x="161.5" y="741" width="1.2" height="15.0" fill="rgb(231,201,31)" rx="2" ry="2" />
<text  x="164.49" y="751.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (6 samples, 0.60%)</title><rect x="1166.3" y="549" width="7.1" height="15.0" fill="rgb(253,1,14)" rx="2" ry="2" />
<text  x="1169.33" y="559.5" ></text>
</g>
<g >
<title>proc_pid_status (1 samples, 0.10%)</title><rect x="111.8" y="517" width="1.2" height="15.0" fill="rgb(211,107,13)" rx="2" ry="2" />
<text  x="114.79" y="527.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.50%)</title><rect x="217.1" y="517" width="5.9" height="15.0" fill="rgb(208,193,54)" rx="2" ry="2" />
<text  x="220.12" y="527.5" ></text>
</g>
<g >
<title>hrtimer_init_sleeper (1 samples, 0.10%)</title><rect x="1094.1" y="661" width="1.2" height="15.0" fill="rgb(231,150,27)" rx="2" ry="2" />
<text  x="1097.13" y="671.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (32 samples, 3.21%)</title><rect x="1152.1" y="757" width="37.9" height="15.0" fill="rgb(223,221,35)" rx="2" ry="2" />
<text  x="1155.13" y="767.5" >x86..</text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.10%)</title><rect x="14.7" y="629" width="1.2" height="15.0" fill="rgb(219,56,16)" rx="2" ry="2" />
<text  x="17.73" y="639.5" ></text>
</g>
<g >
<title>record__write (10 samples, 1.00%)</title><rect x="113.0" y="661" width="11.8" height="15.0" fill="rgb(220,153,47)" rx="2" ry="2" />
<text  x="115.97" y="671.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.10%)</title><rect x="11.2" y="517" width="1.2" height="15.0" fill="rgb(232,101,15)" rx="2" ry="2" />
<text  x="14.18" y="527.5" ></text>
</g>
<g >
<title>NaClSysWriteDecoder (308 samples, 30.89%)</title><rect x="361.5" y="741" width="364.5" height="15.0" fill="rgb(223,61,12)" rx="2" ry="2" />
<text  x="364.51" y="751.5" >NaClSysWriteDecoder</text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.10%)</title><rect x="1006.5" y="485" width="1.2" height="15.0" fill="rgb(235,175,34)" rx="2" ry="2" />
<text  x="1009.55" y="495.5" ></text>
</g>
<g >
<title>NaClSelLdrMain (1 samples, 0.10%)</title><rect x="1006.5" y="725" width="1.2" height="15.0" fill="rgb(245,97,32)" rx="2" ry="2" />
<text  x="1009.55" y="735.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.10%)</title><rect x="1072.8" y="421" width="1.2" height="15.0" fill="rgb(234,68,24)" rx="2" ry="2" />
<text  x="1075.83" y="431.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_copy (11 samples, 1.10%)</title><rect x="144.9" y="741" width="13.0" height="15.0" fill="rgb(231,161,34)" rx="2" ry="2" />
<text  x="147.92" y="751.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (43 samples, 4.31%)</title><rect x="1098.9" y="709" width="50.9" height="15.0" fill="rgb(215,46,21)" rx="2" ry="2" />
<text  x="1101.87" y="719.5" >cpuid..</text>
</g>
<g >
<title>event_function (65 samples, 6.52%)</title><rect x="33.7" y="485" width="76.9" height="15.0" fill="rgb(231,14,19)" rx="2" ry="2" />
<text  x="36.67" y="495.5" >event_fu..</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (5 samples, 0.50%)</title><rect x="217.1" y="629" width="5.9" height="15.0" fill="rgb(253,75,13)" rx="2" ry="2" />
<text  x="220.12" y="639.5" ></text>
</g>
<g >
<title>__next_zones_zonelist (1 samples, 0.10%)</title><rect x="896.5" y="629" width="1.2" height="15.0" fill="rgb(237,161,38)" rx="2" ry="2" />
<text  x="899.48" y="639.5" ></text>
</g>
<g >
<title>do_dentry_open (1 samples, 0.10%)</title><rect x="972.2" y="597" width="1.2" height="15.0" fill="rgb(253,150,51)" rx="2" ry="2" />
<text  x="975.23" y="607.5" ></text>
</g>
<g >
<title>sched_move_task (1 samples, 0.10%)</title><rect x="1087.0" y="613" width="1.2" height="15.0" fill="rgb(220,146,41)" rx="2" ry="2" />
<text  x="1090.03" y="623.5" ></text>
</g>
<g >
<title>shmem_undo_range (1 samples, 0.10%)</title><rect x="1088.2" y="437" width="1.2" height="15.0" fill="rgb(205,19,49)" rx="2" ry="2" />
<text  x="1091.21" y="447.5" ></text>
</g>
<g >
<title>do_fault (3 samples, 0.30%)</title><rect x="171.0" y="517" width="3.5" height="15.0" fill="rgb(246,155,12)" rx="2" ry="2" />
<text  x="173.96" y="527.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.10%)</title><rect x="115.3" y="373" width="1.2" height="15.0" fill="rgb(233,193,30)" rx="2" ry="2" />
<text  x="118.34" y="383.5" ></text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.10%)</title><rect x="249.1" y="549" width="1.2" height="15.0" fill="rgb(237,57,2)" rx="2" ry="2" />
<text  x="252.08" y="559.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;ringbuf::producer::Producer&lt;u8&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="382.8" y="597" width="1.2" height="15.0" fill="rgb(209,142,1)" rx="2" ry="2" />
<text  x="385.82" y="607.5" ></text>
</g>
<g >
<title>shmem_alloc_page (1 samples, 0.10%)</title><rect x="173.3" y="421" width="1.2" height="15.0" fill="rgb(221,132,16)" rx="2" ry="2" />
<text  x="176.33" y="431.5" ></text>
</g>
<g >
<title>__get_user_pages (2 samples, 0.20%)</title><rect x="965.1" y="581" width="2.4" height="15.0" fill="rgb(240,144,51)" rx="2" ry="2" />
<text  x="968.13" y="591.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (6 samples, 0.60%)</title><rect x="1174.6" y="597" width="7.1" height="15.0" fill="rgb(246,165,22)" rx="2" ry="2" />
<text  x="1177.61" y="607.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.50%)</title><rect x="217.1" y="533" width="5.9" height="15.0" fill="rgb(234,196,13)" rx="2" ry="2" />
<text  x="220.12" y="543.5" ></text>
</g>
<g >
<title>tick_nohz_get_sleep_length (3 samples, 0.30%)</title><rect x="1185.3" y="597" width="3.5" height="15.0" fill="rgb(241,163,30)" rx="2" ry="2" />
<text  x="1188.27" y="607.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (1 samples, 0.10%)</title><rect x="1094.1" y="709" width="1.2" height="15.0" fill="rgb(213,227,20)" rx="2" ry="2" />
<text  x="1097.13" y="719.5" ></text>
</g>
<g >
<title>mem_cgroup_charge (9 samples, 0.90%)</title><rect x="915.4" y="645" width="10.7" height="15.0" fill="rgb(239,91,39)" rx="2" ry="2" />
<text  x="918.42" y="655.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.10%)</title><rect x="967.5" y="565" width="1.2" height="15.0" fill="rgb(207,147,41)" rx="2" ry="2" />
<text  x="970.49" y="575.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (5 samples, 0.50%)</title><rect x="217.1" y="341" width="5.9" height="15.0" fill="rgb(227,161,28)" rx="2" ry="2" />
<text  x="220.12" y="351.5" ></text>
</g>
<g >
<title>lru_cache_add (1 samples, 0.10%)</title><rect x="172.1" y="437" width="1.2" height="15.0" fill="rgb(247,157,43)" rx="2" ry="2" />
<text  x="175.15" y="447.5" ></text>
</g>
<g >
<title>cpu_startup_entry (32 samples, 3.21%)</title><rect x="1152.1" y="677" width="37.9" height="15.0" fill="rgb(251,2,18)" rx="2" ry="2" />
<text  x="1155.13" y="687.5" >cpu..</text>
</g>
<g >
<title>__GI___pthread_rwlock_rdlock (1 samples, 0.10%)</title><rect x="359.1" y="565" width="1.2" height="15.0" fill="rgb(228,146,39)" rx="2" ry="2" />
<text  x="362.15" y="575.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (98 samples, 9.83%)</title><rect x="243.2" y="597" width="115.9" height="15.0" fill="rgb(207,129,21)" rx="2" ry="2" />
<text  x="246.16" y="607.5" >ringbuf::consu..</text>
</g>
<g >
<title>generic_exec_single (65 samples, 6.52%)</title><rect x="33.7" y="517" width="76.9" height="15.0" fill="rgb(227,126,5)" rx="2" ry="2" />
<text  x="36.67" y="527.5" >generic_..</text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.10%)</title><rect x="14.7" y="645" width="1.2" height="15.0" fill="rgb(212,144,5)" rx="2" ry="2" />
<text  x="17.73" y="655.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::seek (1 samples, 0.10%)</title><rect x="223.0" y="581" width="1.2" height="15.0" fill="rgb(218,174,0)" rx="2" ry="2" />
<text  x="226.04" y="591.5" ></text>
</g>
<g >
<title>tick_sched_timer (7 samples, 0.70%)</title><rect x="1158.0" y="485" width="8.3" height="15.0" fill="rgb(218,225,45)" rx="2" ry="2" />
<text  x="1161.04" y="495.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::write_syscall (1 samples, 0.10%)</title><rect x="157.9" y="757" width="1.2" height="15.0" fill="rgb(234,7,41)" rx="2" ry="2" />
<text  x="160.94" y="767.5" ></text>
</g>
<g >
<title>__x64_sys_write (9 samples, 0.90%)</title><rect x="113.0" y="581" width="10.6" height="15.0" fill="rgb(230,67,41)" rx="2" ry="2" />
<text  x="115.97" y="591.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (1 samples, 0.10%)</title><rect x="124.8" y="565" width="1.2" height="15.0" fill="rgb(235,214,9)" rx="2" ry="2" />
<text  x="127.80" y="575.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (1 samples, 0.10%)</title><rect x="1062.2" y="485" width="1.2" height="15.0" fill="rgb(231,95,38)" rx="2" ry="2" />
<text  x="1065.18" y="495.5" ></text>
</g>
<g >
<title>ksys_read (1 samples, 0.10%)</title><rect x="111.8" y="597" width="1.2" height="15.0" fill="rgb(253,173,20)" rx="2" ry="2" />
<text  x="114.79" y="607.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.10%)</title><rect x="1101.2" y="581" width="1.2" height="15.0" fill="rgb(249,54,30)" rx="2" ry="2" />
<text  x="1104.23" y="591.5" ></text>
</g>
<g >
<title>NaClHostDescRead (116 samples, 11.63%)</title><rect x="223.0" y="693" width="137.3" height="15.0" fill="rgb(215,108,6)" rx="2" ry="2" />
<text  x="226.04" y="703.5" >NaClHostDescRead</text>
</g>
<g >
<title>process_timeout (1 samples, 0.10%)</title><rect x="1172.2" y="453" width="1.2" height="15.0" fill="rgb(240,2,47)" rx="2" ry="2" />
<text  x="1175.25" y="463.5" ></text>
</g>
<g >
<title>record__pushfn (10 samples, 1.00%)</title><rect x="113.0" y="677" width="11.8" height="15.0" fill="rgb(219,222,4)" rx="2" ry="2" />
<text  x="115.97" y="687.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.10%)</title><rect x="127.2" y="709" width="1.2" height="15.0" fill="rgb(211,32,20)" rx="2" ry="2" />
<text  x="130.17" y="719.5" ></text>
</g>
<g >
<title>new_sync_write (8 samples, 0.80%)</title><rect x="114.2" y="533" width="9.4" height="15.0" fill="rgb(209,111,37)" rx="2" ry="2" />
<text  x="117.15" y="543.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.10%)</title><rect x="1156.9" y="485" width="1.1" height="15.0" fill="rgb(228,73,24)" rx="2" ry="2" />
<text  x="1159.86" y="495.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::write_syscall (303 samples, 30.39%)</title><rect x="362.7" y="629" width="358.6" height="15.0" fill="rgb(211,4,51)" rx="2" ry="2" />
<text  x="365.70" y="639.5" >rustposix::safeposix::syscalls::fs_calls::&lt;impl ..</text>
</g>
<g >
<title>slab_pre_alloc_hook.constprop.0 (1 samples, 0.10%)</title><rect x="114.2" y="293" width="1.1" height="15.0" fill="rgb(217,110,39)" rx="2" ry="2" />
<text  x="117.15" y="303.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.10%)</title><rect x="14.7" y="661" width="1.2" height="15.0" fill="rgb(244,226,9)" rx="2" ry="2" />
<text  x="17.73" y="671.5" ></text>
</g>
<g >
<title>create_empty_buffers (1 samples, 0.10%)</title><rect x="124.8" y="533" width="1.2" height="15.0" fill="rgb(231,123,21)" rx="2" ry="2" />
<text  x="127.80" y="543.5" ></text>
</g>
<g >
<title>alloc_buffer_head (1 samples, 0.10%)</title><rect x="124.8" y="501" width="1.2" height="15.0" fill="rgb(205,79,36)" rx="2" ry="2" />
<text  x="127.80" y="511.5" ></text>
</g>
<g >
<title>prep_new_page (23 samples, 2.31%)</title><rect x="859.8" y="597" width="27.2" height="15.0" fill="rgb(240,10,6)" rx="2" ry="2" />
<text  x="862.79" y="607.5" >p..</text>
</g>
<g >
<title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.20%)</title><rect x="721.3" y="565" width="2.4" height="15.0" fill="rgb(239,190,16)" rx="2" ry="2" />
<text  x="724.31" y="575.5" ></text>
</g>
<g >
<title>do_shared_fault (2 samples, 0.20%)</title><rect x="965.1" y="501" width="2.4" height="15.0" fill="rgb(222,225,50)" rx="2" ry="2" />
<text  x="968.13" y="511.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (1 samples, 0.10%)</title><rect x="1150.9" y="677" width="1.2" height="15.0" fill="rgb(207,188,52)" rx="2" ry="2" />
<text  x="1153.94" y="687.5" ></text>
</g>
<g >
<title>free_work (1 samples, 0.10%)</title><rect x="1095.3" y="709" width="1.2" height="15.0" fill="rgb(233,85,2)" rx="2" ry="2" />
<text  x="1098.32" y="719.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.10%)</title><rect x="115.3" y="389" width="1.2" height="15.0" fill="rgb(216,113,15)" rx="2" ry="2" />
<text  x="118.34" y="399.5" ></text>
</g>
<g >
<title>[bash] (1 samples, 0.10%)</title><rect x="11.2" y="613" width="1.2" height="15.0" fill="rgb(225,183,15)" rx="2" ry="2" />
<text  x="14.18" y="623.5" ></text>
</g>
<g >
<title>hrtimer_next_event_without (3 samples, 0.30%)</title><rect x="1185.3" y="581" width="3.5" height="15.0" fill="rgb(213,29,48)" rx="2" ry="2" />
<text  x="1188.27" y="591.5" ></text>
</g>
<g >
<title>seq_read (1 samples, 0.10%)</title><rect x="111.8" y="565" width="1.2" height="15.0" fill="rgb(238,33,10)" rx="2" ry="2" />
<text  x="114.79" y="575.5" ></text>
</g>
<g >
<title>NaClThreadCtor (1 samples, 0.10%)</title><rect x="1006.5" y="613" width="1.2" height="15.0" fill="rgb(213,22,53)" rx="2" ry="2" />
<text  x="1009.55" y="623.5" ></text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.10%)</title><rect x="214.8" y="597" width="1.1" height="15.0" fill="rgb(229,54,3)" rx="2" ry="2" />
<text  x="217.75" y="607.5" ></text>
</g>
<g >
<title>release_pages (14 samples, 1.40%)</title><rect x="1069.3" y="485" width="16.5" height="15.0" fill="rgb(243,159,12)" rx="2" ry="2" />
<text  x="1072.28" y="495.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.10%)</title><rect x="1007.7" y="741" width="1.2" height="15.0" fill="rgb(214,159,0)" rx="2" ry="2" />
<text  x="1010.73" y="751.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (2 samples, 0.20%)</title><rect x="218.3" y="261" width="2.4" height="15.0" fill="rgb(230,41,54)" rx="2" ry="2" />
<text  x="221.30" y="271.5" ></text>
</g>
<g >
<title>sched_autogroup_exit_task (1 samples, 0.10%)</title><rect x="1087.0" y="629" width="1.2" height="15.0" fill="rgb(232,139,4)" rx="2" ry="2" />
<text  x="1090.03" y="639.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (3 samples, 0.30%)</title><rect x="904.8" y="597" width="3.5" height="15.0" fill="rgb(250,95,15)" rx="2" ry="2" />
<text  x="907.76" y="607.5" ></text>
</g>
<g >
<title>__hrtimer_next_event_base (1 samples, 0.10%)</title><rect x="1185.3" y="565" width="1.1" height="15.0" fill="rgb(234,217,39)" rx="2" ry="2" />
<text  x="1188.27" y="575.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.10%)</title><rect x="14.7" y="725" width="1.2" height="15.0" fill="rgb(244,184,46)" rx="2" ry="2" />
<text  x="17.73" y="735.5" ></text>
</g>
<g >
<title>truncate_inode_page (1 samples, 0.10%)</title><rect x="1088.2" y="421" width="1.2" height="15.0" fill="rgb(209,58,30)" rx="2" ry="2" />
<text  x="1091.21" y="431.5" ></text>
</g>
<g >
<title>[unknown] (37 samples, 3.71%)</title><rect x="962.8" y="773" width="43.7" height="15.0" fill="rgb(207,158,4)" rx="2" ry="2" />
<text  x="965.76" y="783.5" >[unk..</text>
</g>
<g >
<title>shmem_evict_inode (1 samples, 0.10%)</title><rect x="1088.2" y="453" width="1.2" height="15.0" fill="rgb(235,32,44)" rx="2" ry="2" />
<text  x="1091.21" y="463.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (6 samples, 0.60%)</title><rect x="421.9" y="533" width="7.1" height="15.0" fill="rgb(236,183,16)" rx="2" ry="2" />
<text  x="424.88" y="543.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_access (11 samples, 1.10%)</title><rect x="144.9" y="725" width="13.0" height="15.0" fill="rgb(231,166,10)" rx="2" ry="2" />
<text  x="147.92" y="735.5" ></text>
</g>
<g >
<title>alx_intr_msix_ring (1 samples, 0.10%)</title><rect x="1100.1" y="565" width="1.1" height="15.0" fill="rgb(211,189,16)" rx="2" ry="2" />
<text  x="1103.05" y="575.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (5 samples, 0.50%)</title><rect x="1078.7" y="437" width="6.0" height="15.0" fill="rgb(240,48,22)" rx="2" ry="2" />
<text  x="1081.75" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.10%)</title><rect x="14.7" y="741" width="1.2" height="15.0" fill="rgb(205,45,32)" rx="2" ry="2" />
<text  x="17.73" y="751.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (33 samples, 3.31%)</title><rect x="1008.9" y="773" width="39.1" height="15.0" fill="rgb(227,172,6)" rx="2" ry="2" />
<text  x="1011.92" y="783.5" >asm..</text>
</g>
<g >
<title>mem_cgroup_charge (1 samples, 0.10%)</title><rect x="967.5" y="517" width="1.2" height="15.0" fill="rgb(206,118,37)" rx="2" ry="2" />
<text  x="970.49" y="527.5" ></text>
</g>
<g >
<title>vfs_write (9 samples, 0.90%)</title><rect x="113.0" y="549" width="10.6" height="15.0" fill="rgb(243,175,52)" rx="2" ry="2" />
<text  x="115.97" y="559.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.10%)</title><rect x="966.3" y="373" width="1.2" height="15.0" fill="rgb(248,222,1)" rx="2" ry="2" />
<text  x="969.31" y="383.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (15 samples, 1.50%)</title><rect x="1068.1" y="517" width="17.7" height="15.0" fill="rgb(215,67,15)" rx="2" ry="2" />
<text  x="1071.09" y="527.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.10%)</title><rect x="966.3" y="341" width="1.2" height="15.0" fill="rgb(217,1,37)" rx="2" ry="2" />
<text  x="969.31" y="351.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (78 samples, 7.82%)</title><rect x="1097.7" y="773" width="92.3" height="15.0" fill="rgb(216,179,53)" rx="2" ry="2" />
<text  x="1100.68" y="783.5" >secondary_s..</text>
</g>
<g >
<title>__mod_lruvec_state (1 samples, 0.10%)</title><rect x="1074.0" y="469" width="1.2" height="15.0" fill="rgb(217,183,51)" rx="2" ry="2" />
<text  x="1077.01" y="479.5" ></text>
</g>
<g >
<title>perf_event__prepare_comm (1 samples, 0.10%)</title><rect x="111.8" y="709" width="1.2" height="15.0" fill="rgb(240,141,54)" rx="2" ry="2" />
<text  x="114.79" y="719.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.20%)</title><rect x="384.0" y="581" width="2.4" height="15.0" fill="rgb(221,217,2)" rx="2" ry="2" />
<text  x="387.00" y="591.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="111.8" y="645" width="1.2" height="15.0" fill="rgb(205,179,3)" rx="2" ry="2" />
<text  x="114.79" y="655.5" ></text>
</g>
<g >
<title>do_iter_write (2 samples, 0.20%)</title><rect x="124.8" y="645" width="2.4" height="15.0" fill="rgb(254,218,15)" rx="2" ry="2" />
<text  x="127.80" y="655.5" ></text>
</g>
<g >
<title>NaClHostDescWrite (307 samples, 30.79%)</title><rect x="361.5" y="693" width="363.4" height="15.0" fill="rgb(213,73,42)" rx="2" ry="2" />
<text  x="364.51" y="703.5" >NaClHostDescWrite</text>
</g>
<g >
<title>rcu_read_unlock_strict (1 samples, 0.10%)</title><rect x="935.5" y="709" width="1.2" height="15.0" fill="rgb(215,193,27)" rx="2" ry="2" />
<text  x="938.54" y="719.5" ></text>
</g>
<g >
<title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 0.10%)</title><rect x="382.8" y="565" width="1.2" height="15.0" fill="rgb(243,185,54)" rx="2" ry="2" />
<text  x="385.82" y="575.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.10%)</title><rect x="1072.8" y="325" width="1.2" height="15.0" fill="rgb(217,23,42)" rx="2" ry="2" />
<text  x="1075.83" y="335.5" ></text>
</g>
<g >
<title>__switch_to_asm (1 samples, 0.10%)</title><rect x="1092.9" y="773" width="1.2" height="15.0" fill="rgb(218,47,53)" rx="2" ry="2" />
<text  x="1095.95" y="783.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.10%)</title><rect x="214.8" y="693" width="1.1" height="15.0" fill="rgb(239,68,17)" rx="2" ry="2" />
<text  x="217.75" y="703.5" ></text>
</g>
<g >
<title>kthread_blkcg (1 samples, 0.10%)</title><rect x="901.2" y="645" width="1.2" height="15.0" fill="rgb(238,222,8)" rx="2" ry="2" />
<text  x="904.21" y="655.5" ></text>
</g>
<g >
<title>ValidateChunkAMD64 (31 samples, 3.11%)</title><rect x="174.5" y="661" width="36.7" height="15.0" fill="rgb(219,168,33)" rx="2" ry="2" />
<text  x="177.51" y="671.5" >Val..</text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.30%)</title><rect x="963.9" y="693" width="3.6" height="15.0" fill="rgb(244,177,3)" rx="2" ry="2" />
<text  x="966.94" y="703.5" ></text>
</g>
<g >
<title>wake_up_process (1 samples, 0.10%)</title><rect x="1172.2" y="437" width="1.2" height="15.0" fill="rgb(209,208,6)" rx="2" ry="2" />
<text  x="1175.25" y="447.5" ></text>
</g>
<g >
<title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.10%)</title><rect x="722.5" y="517" width="1.2" height="15.0" fill="rgb(240,95,29)" rx="2" ry="2" />
<text  x="725.50" y="527.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (34 samples, 3.41%)</title><rect x="1049.2" y="709" width="40.2" height="15.0" fill="rgb(216,67,22)" rx="2" ry="2" />
<text  x="1052.16" y="719.5" >exi..</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.10%)</title><rect x="127.2" y="741" width="1.2" height="15.0" fill="rgb(243,204,6)" rx="2" ry="2" />
<text  x="130.17" y="751.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.10%)</title><rect x="1072.8" y="389" width="1.2" height="15.0" fill="rgb(249,36,22)" rx="2" ry="2" />
<text  x="1075.83" y="399.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.30%)</title><rect x="171.0" y="565" width="3.5" height="15.0" fill="rgb(254,143,34)" rx="2" ry="2" />
<text  x="173.96" y="575.5" ></text>
</g>
<g >
<title>_dl_relocate_object (1 samples, 0.10%)</title><rect x="1007.7" y="709" width="1.2" height="15.0" fill="rgb(213,92,22)" rx="2" ry="2" />
<text  x="1010.73" y="719.5" ></text>
</g>
<g >
<title>unmap_page_range (32 samples, 3.21%)</title><rect x="1049.2" y="549" width="37.8" height="15.0" fill="rgb(223,122,9)" rx="2" ry="2" />
<text  x="1052.16" y="559.5" >unm..</text>
</g>
<g >
<title>exit_mmap (32 samples, 3.21%)</title><rect x="1049.2" y="597" width="37.8" height="15.0" fill="rgb(236,178,43)" rx="2" ry="2" />
<text  x="1052.16" y="607.5" >exi..</text>
</g>
<g >
<title>check_tsc_unstable (1 samples, 0.10%)</title><rect x="1152.1" y="629" width="1.2" height="15.0" fill="rgb(249,118,22)" rx="2" ry="2" />
<text  x="1155.13" y="639.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::len (14 samples, 1.40%)</title><rect x="226.6" y="581" width="16.6" height="15.0" fill="rgb(205,208,23)" rx="2" ry="2" />
<text  x="229.59" y="591.5" ></text>
</g>
<g >
<title>process_vm_writev (3 samples, 0.30%)</title><rect x="963.9" y="725" width="3.6" height="15.0" fill="rgb(231,193,22)" rx="2" ry="2" />
<text  x="966.94" y="735.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (4 samples, 0.40%)</title><rect x="117.7" y="389" width="4.7" height="15.0" fill="rgb(210,9,5)" rx="2" ry="2" />
<text  x="120.70" y="399.5" ></text>
</g>
<g >
<title>remove_vm_area (1 samples, 0.10%)</title><rect x="1095.3" y="677" width="1.2" height="15.0" fill="rgb(235,61,10)" rx="2" ry="2" />
<text  x="1098.32" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="223.0" y="549" width="1.2" height="15.0" fill="rgb(219,128,53)" rx="2" ry="2" />
<text  x="226.04" y="559.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.10%)</title><rect x="1100.1" y="597" width="1.1" height="15.0" fill="rgb(251,104,45)" rx="2" ry="2" />
<text  x="1103.05" y="607.5" ></text>
</g>
<g >
<title>rcu_idle_exit (1 samples, 0.10%)</title><rect x="1148.6" y="661" width="1.2" height="15.0" fill="rgb(218,1,40)" rx="2" ry="2" />
<text  x="1151.58" y="671.5" ></text>
</g>
<g >
<title>mem_cgroup_page_lruvec (1 samples, 0.10%)</title><rect x="1084.7" y="469" width="1.1" height="15.0" fill="rgb(230,176,41)" rx="2" ry="2" />
<text  x="1087.66" y="479.5" ></text>
</g>
<g >
<title>create_empty_buffers (1 samples, 0.10%)</title><rect x="116.5" y="373" width="1.2" height="15.0" fill="rgb(243,164,33)" rx="2" ry="2" />
<text  x="119.52" y="383.5" ></text>
</g>
<g >
<title>NaClDescIoDescRead (116 samples, 11.63%)</title><rect x="223.0" y="709" width="137.3" height="15.0" fill="rgb(229,212,40)" rx="2" ry="2" />
<text  x="226.04" y="719.5" >NaClDescIoDescRead</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (4 samples, 0.40%)</title><rect x="218.3" y="309" width="4.7" height="15.0" fill="rgb(239,56,14)" rx="2" ry="2" />
<text  x="221.30" y="319.5" ></text>
</g>
<g >
<title>task_change_group_fair (1 samples, 0.10%)</title><rect x="1087.0" y="581" width="1.2" height="15.0" fill="rgb(223,189,29)" rx="2" ry="2" />
<text  x="1090.03" y="591.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.10%)</title><rect x="214.8" y="677" width="1.1" height="15.0" fill="rgb(237,116,29)" rx="2" ry="2" />
<text  x="217.75" y="687.5" ></text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.10%)</title><rect x="967.5" y="533" width="1.2" height="15.0" fill="rgb(220,219,12)" rx="2" ry="2" />
<text  x="970.49" y="543.5" ></text>
</g>
<g >
<title>run_posix_cpu_timers (1 samples, 0.10%)</title><rect x="1158.0" y="453" width="1.2" height="15.0" fill="rgb(241,157,2)" rx="2" ry="2" />
<text  x="1161.04" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (35 samples, 3.51%)</title><rect x="1048.0" y="757" width="41.4" height="15.0" fill="rgb(224,136,22)" rx="2" ry="2" />
<text  x="1050.97" y="767.5" >do_..</text>
</g>
<g >
<title>__mod_zone_page_state (1 samples, 0.10%)</title><rect x="1083.5" y="405" width="1.2" height="15.0" fill="rgb(209,26,18)" rx="2" ry="2" />
<text  x="1086.48" y="415.5" ></text>
</g>
<g >
<title>file_update_time (1 samples, 0.10%)</title><rect x="114.2" y="405" width="1.1" height="15.0" fill="rgb(253,34,29)" rx="2" ry="2" />
<text  x="117.15" y="415.5" ></text>
</g>
<g >
<title>seq_read_iter (1 samples, 0.10%)</title><rect x="111.8" y="549" width="1.2" height="15.0" fill="rgb(233,173,52)" rx="2" ry="2" />
<text  x="114.79" y="559.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (1 samples, 0.10%)</title><rect x="1072.8" y="261" width="1.2" height="15.0" fill="rgb(215,70,26)" rx="2" ry="2" />
<text  x="1075.83" y="271.5" ></text>
</g>
<g >
<title>rest_init (32 samples, 3.21%)</title><rect x="1152.1" y="693" width="37.9" height="15.0" fill="rgb(218,68,25)" rx="2" ry="2" />
<text  x="1155.13" y="703.5" >res..</text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy::{{closure}} (89 samples, 8.93%)</title><rect x="250.3" y="549" width="105.3" height="15.0" fill="rgb(208,211,44)" rx="2" ry="2" />
<text  x="253.26" y="559.5" >ringbuf::con..</text>
</g>
<g >
<title>alloc_pages_current (1 samples, 0.10%)</title><rect x="121.3" y="357" width="1.1" height="15.0" fill="rgb(215,2,22)" rx="2" ry="2" />
<text  x="124.25" y="367.5" ></text>
</g>
<g >
<title>mem_cgroup_charge (1 samples, 0.10%)</title><rect x="117.7" y="325" width="1.2" height="15.0" fill="rgb(205,46,6)" rx="2" ry="2" />
<text  x="120.70" y="335.5" ></text>
</g>
<g >
<title>__bitmap_and (1 samples, 0.10%)</title><rect x="1166.3" y="469" width="1.2" height="15.0" fill="rgb(226,53,9)" rx="2" ry="2" />
<text  x="1169.33" y="479.5" ></text>
</g>
<g >
<title>__run_timers.part.0 (1 samples, 0.10%)</title><rect x="1172.2" y="485" width="1.2" height="15.0" fill="rgb(245,154,28)" rx="2" ry="2" />
<text  x="1175.25" y="495.5" ></text>
</g>
<g >
<title>xas_start (1 samples, 0.10%)</title><rect x="965.1" y="421" width="1.2" height="15.0" fill="rgb(221,218,5)" rx="2" ry="2" />
<text  x="968.13" y="431.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (4 samples, 0.40%)</title><rect x="169.8" y="613" width="4.7" height="15.0" fill="rgb(240,102,53)" rx="2" ry="2" />
<text  x="172.78" y="623.5" ></text>
</g>
<g >
<title>perf_ioctl (80 samples, 8.02%)</title><rect x="15.9" y="613" width="94.7" height="15.0" fill="rgb(225,73,19)" rx="2" ry="2" />
<text  x="18.92" y="623.5" >perf_ioctl</text>
</g>
<g >
<title>__evlist__enable (80 samples, 8.02%)</title><rect x="15.9" y="725" width="94.7" height="15.0" fill="rgb(242,79,25)" rx="2" ry="2" />
<text  x="18.92" y="735.5" >__evlist__e..</text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.20%)</title><rect x="965.1" y="549" width="2.4" height="15.0" fill="rgb(211,126,4)" rx="2" ry="2" />
<text  x="968.13" y="559.5" ></text>
</g>
<g >
<title>shmem_add_to_page_cache (1 samples, 0.10%)</title><rect x="965.1" y="437" width="1.2" height="15.0" fill="rgb(245,91,22)" rx="2" ry="2" />
<text  x="968.13" y="447.5" ></text>
</g>
<g >
<title>native_set_pte (1 samples, 0.10%)</title><rect x="1006.5" y="469" width="1.2" height="15.0" fill="rgb(246,136,16)" rx="2" ry="2" />
<text  x="1009.55" y="479.5" ></text>
</g>
<g >
<title>NaClDescUnref (1 samples, 0.10%)</title><rect x="724.9" y="709" width="1.1" height="15.0" fill="rgb(212,54,13)" rx="2" ry="2" />
<text  x="727.86" y="719.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (5 samples, 0.50%)</title><rect x="217.1" y="469" width="5.9" height="15.0" fill="rgb(243,127,29)" rx="2" ry="2" />
<text  x="220.12" y="479.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (1 samples, 0.10%)</title><rect x="127.2" y="725" width="1.2" height="15.0" fill="rgb(218,209,28)" rx="2" ry="2" />
<text  x="130.17" y="735.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::DirectoryInode&gt;::serialize (1 samples, 0.10%)</title><rect x="217.1" y="309" width="1.2" height="15.0" fill="rgb(212,67,51)" rx="2" ry="2" />
<text  x="220.12" y="319.5" ></text>
</g>
<g >
<title>__GI___get_nprocs (1 samples, 0.10%)</title><rect x="972.2" y="757" width="1.2" height="15.0" fill="rgb(224,0,6)" rx="2" ry="2" />
<text  x="975.23" y="767.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath.part.0 (1 samples, 0.10%)</title><rect x="1095.3" y="629" width="1.2" height="15.0" fill="rgb(236,139,38)" rx="2" ry="2" />
<text  x="1098.32" y="639.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (1 samples, 0.10%)</title><rect x="242.0" y="549" width="1.2" height="15.0" fill="rgb(224,26,54)" rx="2" ry="2" />
<text  x="244.98" y="559.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (4 samples, 0.40%)</title><rect x="916.6" y="629" width="4.7" height="15.0" fill="rgb(237,212,54)" rx="2" ry="2" />
<text  x="919.60" y="639.5" ></text>
</g>
<g >
<title>update_sg_lb_stats (2 samples, 0.20%)</title><rect x="1167.5" y="421" width="2.4" height="15.0" fill="rgb(248,224,47)" rx="2" ry="2" />
<text  x="1170.51" y="431.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (478 samples, 47.94%)</title><rect x="160.3" y="757" width="565.7" height="15.0" fill="rgb(235,79,46)" rx="2" ry="2" />
<text  x="163.31" y="767.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>CopyBundleTails (5 samples, 0.50%)</title><rect x="163.9" y="677" width="5.9" height="15.0" fill="rgb(220,30,41)" rx="2" ry="2" />
<text  x="166.86" y="687.5" ></text>
</g>
<g >
<title>cmd_record (92 samples, 9.23%)</title><rect x="15.9" y="757" width="108.9" height="15.0" fill="rgb(239,187,54)" rx="2" ry="2" />
<text  x="18.92" y="767.5" >cmd_record</text>
</g>
<g >
<title>ext4_buffered_write_iter (8 samples, 0.80%)</title><rect x="114.2" y="437" width="9.4" height="15.0" fill="rgb(227,90,45)" rx="2" ry="2" />
<text  x="117.15" y="447.5" ></text>
</g>
<g >
<title>native_write_msr (64 samples, 6.42%)</title><rect x="34.9" y="405" width="75.7" height="15.0" fill="rgb(235,103,2)" rx="2" ry="2" />
<text  x="37.85" y="415.5" >native_w..</text>
</g>
<g >
<title>__mod_node_page_state (2 samples, 0.20%)</title><rect x="1063.4" y="485" width="2.3" height="15.0" fill="rgb(234,34,28)" rx="2" ry="2" />
<text  x="1066.36" y="495.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (11 samples, 1.10%)</title><rect x="144.9" y="693" width="13.0" height="15.0" fill="rgb(231,224,33)" rx="2" ry="2" />
<text  x="147.92" y="703.5" ></text>
</g>
<g >
<title>memcg_check_events (1 samples, 0.10%)</title><rect x="926.1" y="645" width="1.2" height="15.0" fill="rgb(247,193,51)" rx="2" ry="2" />
<text  x="929.07" y="655.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (34 samples, 3.41%)</title><rect x="1049.2" y="741" width="40.2" height="15.0" fill="rgb(245,26,19)" rx="2" ry="2" />
<text  x="1052.16" y="751.5" >sys..</text>
</g>
<g >
<title>std::sys::unix::mutex::Mutex::unlock (1 samples, 0.10%)</title><rect x="1005.4" y="693" width="1.1" height="15.0" fill="rgb(231,228,45)" rx="2" ry="2" />
<text  x="1008.37" y="703.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (303 samples, 30.39%)</title><rect x="362.7" y="645" width="358.6" height="15.0" fill="rgb(208,70,26)" rx="2" ry="2" />
<text  x="365.70" y="655.5" >rustposix::safeposix::dispatcher::dispatcher::{{..</text>
</g>
<g >
<title>vm_normal_page (1 samples, 0.10%)</title><rect x="1085.8" y="517" width="1.2" height="15.0" fill="rgb(238,130,2)" rx="2" ry="2" />
<text  x="1088.85" y="527.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (89 samples, 8.93%)</title><rect x="250.3" y="533" width="105.3" height="15.0" fill="rgb(228,48,37)" rx="2" ry="2" />
<text  x="253.26" y="543.5" >core::intrin..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2 samples, 0.20%)</title><rect x="1153.3" y="613" width="2.4" height="15.0" fill="rgb(222,189,30)" rx="2" ry="2" />
<text  x="1156.31" y="623.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_copy::{{closure}} (11 samples, 1.10%)</title><rect x="144.9" y="709" width="13.0" height="15.0" fill="rgb(240,124,3)" rx="2" ry="2" />
<text  x="147.92" y="719.5" ></text>
</g>
<g >
<title>lind (5 samples, 0.50%)</title><rect x="10.0" y="789" width="5.9" height="15.0" fill="rgb(215,75,18)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.10%)</title><rect x="247.9" y="549" width="1.2" height="15.0" fill="rgb(231,121,43)" rx="2" ry="2" />
<text  x="250.89" y="559.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 0.60%)</title><rect x="414.8" y="549" width="7.1" height="15.0" fill="rgb(220,166,38)" rx="2" ry="2" />
<text  x="417.77" y="559.5" ></text>
</g>
<g >
<title>__page_set_anon_rmap (1 samples, 0.10%)</title><rect x="932.0" y="629" width="1.2" height="15.0" fill="rgb(242,83,40)" rx="2" ry="2" />
<text  x="934.99" y="639.5" ></text>
</g>
<g >
<title>do_filp_open (1 samples, 0.10%)</title><rect x="972.2" y="661" width="1.2" height="15.0" fill="rgb(220,216,20)" rx="2" ry="2" />
<text  x="975.23" y="671.5" ></text>
</g>
<g >
<title>parse_command (1 samples, 0.10%)</title><rect x="12.4" y="693" width="1.2" height="15.0" fill="rgb(229,160,29)" rx="2" ry="2" />
<text  x="15.37" y="703.5" ></text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.10%)</title><rect x="967.5" y="549" width="1.2" height="15.0" fill="rgb(250,175,53)" rx="2" ry="2" />
<text  x="970.49" y="559.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (4 samples, 0.40%)</title><rect x="716.6" y="549" width="4.7" height="15.0" fill="rgb(234,224,36)" rx="2" ry="2" />
<text  x="719.58" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.50%)</title><rect x="211.2" y="709" width="5.9" height="15.0" fill="rgb(243,3,45)" rx="2" ry="2" />
<text  x="214.20" y="719.5" ></text>
</g>
<g >
<title>task_work_run (1 samples, 0.10%)</title><rect x="1088.2" y="629" width="1.2" height="15.0" fill="rgb(243,167,11)" rx="2" ry="2" />
<text  x="1091.21" y="639.5" ></text>
</g>
<g >
<title>[bash] (1 samples, 0.10%)</title><rect x="12.4" y="661" width="1.2" height="15.0" fill="rgb(229,185,49)" rx="2" ry="2" />
<text  x="15.37" y="671.5" ></text>
</g>
<g >
<title>vfs_read (1 samples, 0.10%)</title><rect x="111.8" y="581" width="1.2" height="15.0" fill="rgb(216,180,51)" rx="2" ry="2" />
<text  x="114.79" y="591.5" ></text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (1 samples, 0.10%)</title><rect x="122.4" y="405" width="1.2" height="15.0" fill="rgb(241,177,46)" rx="2" ry="2" />
<text  x="125.44" y="415.5" ></text>
</g>
<g >
<title>handle_pte_fault (2 samples, 0.20%)</title><rect x="965.1" y="533" width="2.4" height="15.0" fill="rgb(205,142,15)" rx="2" ry="2" />
<text  x="968.13" y="543.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (32 samples, 3.21%)</title><rect x="1152.1" y="741" width="37.9" height="15.0" fill="rgb(217,19,1)" rx="2" ry="2" />
<text  x="1155.13" y="751.5" >x86..</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (5 samples, 0.50%)</title><rect x="217.1" y="485" width="5.9" height="15.0" fill="rgb(222,108,43)" rx="2" ry="2" />
<text  x="220.12" y="495.5" ></text>
</g>
<g >
<title>pin_user_pages_remote (1 samples, 0.10%)</title><rect x="967.5" y="629" width="1.2" height="15.0" fill="rgb(240,64,49)" rx="2" ry="2" />
<text  x="970.49" y="639.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::read_syscall (116 samples, 11.63%)</title><rect x="223.0" y="629" width="137.3" height="15.0" fill="rgb(245,215,34)" rx="2" ry="2" />
<text  x="226.04" y="639.5" >rustposix::safepo..</text>
</g>
<g >
<title>arch_call_rest_init (32 samples, 3.21%)</title><rect x="1152.1" y="709" width="37.9" height="15.0" fill="rgb(228,108,19)" rx="2" ry="2" />
<text  x="1155.13" y="719.5" >arc..</text>
</g>
<g >
<title>pick_next_task_fair (1 samples, 0.10%)</title><rect x="110.6" y="549" width="1.2" height="15.0" fill="rgb(252,115,2)" rx="2" ry="2" />
<text  x="113.60" y="559.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (2 samples, 0.20%)</title><rect x="355.6" y="549" width="2.4" height="15.0" fill="rgb(217,20,4)" rx="2" ry="2" />
<text  x="358.60" y="559.5" ></text>
</g>
<g >
<title>ovl_llseek (1 samples, 0.10%)</title><rect x="223.0" y="485" width="1.2" height="15.0" fill="rgb(214,96,15)" rx="2" ry="2" />
<text  x="226.04" y="495.5" ></text>
</g>
<g >
<title>wq_worker_running (1 samples, 0.10%)</title><rect x="1096.5" y="709" width="1.2" height="15.0" fill="rgb(239,170,6)" rx="2" ry="2" />
<text  x="1099.50" y="719.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (5 samples, 0.50%)</title><rect x="217.1" y="549" width="5.9" height="15.0" fill="rgb(223,32,9)" rx="2" ry="2" />
<text  x="220.12" y="559.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.20%)</title><rect x="220.7" y="101" width="2.3" height="15.0" fill="rgb(226,173,43)" rx="2" ry="2" />
<text  x="223.67" y="111.5" ></text>
</g>
<g >
<title>execute_command_internal (1 samples, 0.10%)</title><rect x="11.2" y="693" width="1.2" height="15.0" fill="rgb(230,125,8)" rx="2" ry="2" />
<text  x="14.18" y="703.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (23 samples, 2.31%)</title><rect x="1155.7" y="613" width="27.2" height="15.0" fill="rgb(239,198,9)" rx="2" ry="2" />
<text  x="1158.68" y="623.5" >c..</text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.10%)</title><rect x="214.8" y="613" width="1.1" height="15.0" fill="rgb(218,111,47)" rx="2" ry="2" />
<text  x="217.75" y="623.5" ></text>
</g>
<g >
<title>CompareAndSwap (1 samples, 0.10%)</title><rect x="962.8" y="757" width="1.1" height="15.0" fill="rgb(209,205,27)" rx="2" ry="2" />
<text  x="965.76" y="767.5" ></text>
</g>
<g >
<title>cpu_startup_entry (46 samples, 4.61%)</title><rect x="1097.7" y="741" width="54.4" height="15.0" fill="rgb(253,48,4)" rx="2" ry="2" />
<text  x="1100.68" y="751.5" >cpu_s..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="972.2" y="709" width="1.2" height="15.0" fill="rgb(237,198,16)" rx="2" ry="2" />
<text  x="975.23" y="719.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.10%)</title><rect x="115.3" y="357" width="1.2" height="15.0" fill="rgb(237,130,48)" rx="2" ry="2" />
<text  x="118.34" y="367.5" ></text>
</g>
<g >
<title>do_anonymous_page (70 samples, 7.02%)</title><rect x="850.3" y="661" width="82.9" height="15.0" fill="rgb(243,98,14)" rx="2" ry="2" />
<text  x="853.32" y="671.5" >do_anonym..</text>
</g>
<g >
<title>worker_thread (2 samples, 0.20%)</title><rect x="1095.3" y="741" width="2.4" height="15.0" fill="rgb(237,220,38)" rx="2" ry="2" />
<text  x="1098.32" y="751.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (62 samples, 6.22%)</title><rect x="438.4" y="533" width="73.4" height="15.0" fill="rgb(210,176,6)" rx="2" ry="2" />
<text  x="441.45" y="543.5" >core::in..</text>
</g>
<g >
<title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.10%)</title><rect x="359.1" y="613" width="1.2" height="15.0" fill="rgb(243,80,3)" rx="2" ry="2" />
<text  x="362.15" y="623.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (5 samples, 0.50%)</title><rect x="217.1" y="453" width="5.9" height="15.0" fill="rgb(251,185,17)" rx="2" ry="2" />
<text  x="220.12" y="463.5" ></text>
</g>
<g >
<title>__mod_node_page_state (1 samples, 0.10%)</title><rect x="1074.0" y="453" width="1.2" height="15.0" fill="rgb(241,79,42)" rx="2" ry="2" />
<text  x="1077.01" y="463.5" ></text>
</g>
<g >
<title>std::sys::unix::mutex::Mutex::unlock (1 samples, 0.10%)</title><rect x="382.8" y="549" width="1.2" height="15.0" fill="rgb(231,55,25)" rx="2" ry="2" />
<text  x="385.82" y="559.5" ></text>
</g>
<g >
<title>NaClXMutexLock (1 samples, 0.10%)</title><rect x="161.5" y="725" width="1.2" height="15.0" fill="rgb(206,5,50)" rx="2" ry="2" />
<text  x="164.49" y="735.5" ></text>
</g>
<g >
<title>NaClSelLdrMain (3 samples, 0.30%)</title><rect x="968.7" y="757" width="3.5" height="15.0" fill="rgb(207,7,40)" rx="2" ry="2" />
<text  x="971.68" y="767.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.10%)</title><rect x="1072.8" y="341" width="1.2" height="15.0" fill="rgb(213,176,24)" rx="2" ry="2" />
<text  x="1075.83" y="351.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.10%)</title><rect x="972.2" y="549" width="1.2" height="15.0" fill="rgb(234,2,39)" rx="2" ry="2" />
<text  x="975.23" y="559.5" ></text>
</g>
<g >
<title>dentry_unlink_inode (1 samples, 0.10%)</title><rect x="1088.2" y="533" width="1.2" height="15.0" fill="rgb(248,11,9)" rx="2" ry="2" />
<text  x="1091.21" y="543.5" ></text>
</g>
<g >
<title>__do_fault (2 samples, 0.20%)</title><rect x="965.1" y="485" width="2.4" height="15.0" fill="rgb(248,5,47)" rx="2" ry="2" />
<text  x="968.13" y="495.5" ></text>
</g>
<g >
<title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.10%)</title><rect x="723.7" y="645" width="1.2" height="15.0" fill="rgb(233,124,46)" rx="2" ry="2" />
<text  x="726.68" y="655.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (8 samples, 0.80%)</title><rect x="997.1" y="757" width="9.4" height="15.0" fill="rgb(235,33,40)" rx="2" ry="2" />
<text  x="1000.08" y="767.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="1072.8" y="405" width="1.2" height="15.0" fill="rgb(212,203,8)" rx="2" ry="2" />
<text  x="1075.83" y="415.5" ></text>
</g>
<g >
<title>lru_cache_add (11 samples, 1.10%)</title><rect x="902.4" y="629" width="13.0" height="15.0" fill="rgb(232,215,29)" rx="2" ry="2" />
<text  x="905.40" y="639.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_u32 (2 samples, 0.20%)</title><rect x="220.7" y="213" width="2.3" height="15.0" fill="rgb(236,170,19)" rx="2" ry="2" />
<text  x="223.67" y="223.5" ></text>
</g>
<g >
<title>dispatcher (306 samples, 30.69%)</title><rect x="362.7" y="661" width="362.2" height="15.0" fill="rgb(230,129,44)" rx="2" ry="2" />
<text  x="365.70" y="671.5" >dispatcher</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.50%)</title><rect x="217.1" y="373" width="5.9" height="15.0" fill="rgb(224,49,24)" rx="2" ry="2" />
<text  x="220.12" y="383.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="1102.4" y="661" width="1.2" height="15.0" fill="rgb(219,19,42)" rx="2" ry="2" />
<text  x="1105.42" y="671.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="1102.4" y="613" width="1.2" height="15.0" fill="rgb(245,166,32)" rx="2" ry="2" />
<text  x="1105.42" y="623.5" ></text>
</g>
<g >
<title>__run_hrtimer (1 samples, 0.10%)</title><rect x="1072.8" y="357" width="1.2" height="15.0" fill="rgb(216,215,16)" rx="2" ry="2" />
<text  x="1075.83" y="367.5" ></text>
</g>
<g >
<title>tick_check_broadcast_expired (1 samples, 0.10%)</title><rect x="1188.8" y="645" width="1.2" height="15.0" fill="rgb(231,193,22)" rx="2" ry="2" />
<text  x="1191.82" y="655.5" ></text>
</g>
<g >
<title>x86_pmu_enable (1 samples, 0.10%)</title><rect x="1164.0" y="389" width="1.1" height="15.0" fill="rgb(213,6,1)" rx="2" ry="2" />
<text  x="1166.96" y="399.5" ></text>
</g>
<g >
<title>select_task_rq_fair (1 samples, 0.10%)</title><rect x="1172.2" y="405" width="1.2" height="15.0" fill="rgb(206,195,7)" rx="2" ry="2" />
<text  x="1175.25" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_write (2 samples, 0.20%)</title><rect x="124.8" y="741" width="2.4" height="15.0" fill="rgb(237,115,2)" rx="2" ry="2" />
<text  x="127.80" y="751.5" ></text>
</g>
<g >
<title>NaClRefCountUnref (1 samples, 0.10%)</title><rect x="724.9" y="693" width="1.1" height="15.0" fill="rgb(235,32,14)" rx="2" ry="2" />
<text  x="727.86" y="703.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.30%)</title><rect x="171.0" y="549" width="3.5" height="15.0" fill="rgb(234,41,18)" rx="2" ry="2" />
<text  x="173.96" y="559.5" ></text>
</g>
<g >
<title>do_syscall_64 (80 samples, 8.02%)</title><rect x="15.9" y="645" width="94.7" height="15.0" fill="rgb(207,91,21)" rx="2" ry="2" />
<text  x="18.92" y="655.5" >do_syscall_64</text>
</g>
<g >
<title>std::sys::unix::rwlock::RWLock::read (1 samples, 0.10%)</title><rect x="359.1" y="581" width="1.2" height="15.0" fill="rgb(238,217,40)" rx="2" ry="2" />
<text  x="362.15" y="591.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.10%)</title><rect x="14.7" y="677" width="1.2" height="15.0" fill="rgb(235,152,36)" rx="2" ry="2" />
<text  x="17.73" y="687.5" ></text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (1 samples, 0.10%)</title><rect x="214.8" y="581" width="1.1" height="15.0" fill="rgb(250,40,17)" rx="2" ry="2" />
<text  x="217.75" y="591.5" ></text>
</g>
<g >
<title>CopyBundleHeads (1 samples, 0.10%)</title><rect x="162.7" y="677" width="1.2" height="15.0" fill="rgb(254,78,31)" rx="2" ry="2" />
<text  x="165.68" y="687.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.10%)</title><rect x="1072.8" y="293" width="1.2" height="15.0" fill="rgb(251,184,51)" rx="2" ry="2" />
<text  x="1075.83" y="303.5" ></text>
</g>
<g >
<title>cgroup_throttle_swaprate (2 samples, 0.20%)</title><rect x="898.8" y="645" width="2.4" height="15.0" fill="rgb(209,60,5)" rx="2" ry="2" />
<text  x="901.85" y="655.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.10%)</title><rect x="1172.2" y="421" width="1.2" height="15.0" fill="rgb(211,168,42)" rx="2" ry="2" />
<text  x="1175.25" y="431.5" ></text>
</g>
<g >
<title>memcg_slab_post_alloc_hook (1 samples, 0.10%)</title><rect x="972.2" y="533" width="1.2" height="15.0" fill="rgb(253,145,47)" rx="2" ry="2" />
<text  x="975.23" y="543.5" ></text>
</g>
<g >
<title>ext4_da_write_end (1 samples, 0.10%)</title><rect x="126.0" y="565" width="1.2" height="15.0" fill="rgb(206,51,1)" rx="2" ry="2" />
<text  x="128.99" y="575.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (8 samples, 0.80%)</title><rect x="1156.9" y="565" width="9.4" height="15.0" fill="rgb(221,15,10)" rx="2" ry="2" />
<text  x="1159.86" y="575.5" ></text>
</g>
<g >
<title>__free_one_page (3 samples, 0.30%)</title><rect x="1081.1" y="421" width="3.6" height="15.0" fill="rgb(224,107,10)" rx="2" ry="2" />
<text  x="1084.11" y="431.5" ></text>
</g>
<g >
<title>task_state (1 samples, 0.10%)</title><rect x="111.8" y="501" width="1.2" height="15.0" fill="rgb(251,2,3)" rx="2" ry="2" />
<text  x="114.79" y="511.5" ></text>
</g>
<g >
<title>_start (2 samples, 0.20%)</title><rect x="1006.5" y="773" width="2.4" height="15.0" fill="rgb(244,1,20)" rx="2" ry="2" />
<text  x="1009.55" y="783.5" ></text>
</g>
<g >
<title>load_balance (2 samples, 0.20%)</title><rect x="1167.5" y="469" width="2.4" height="15.0" fill="rgb(250,27,21)" rx="2" ry="2" />
<text  x="1170.51" y="479.5" ></text>
</g>
<g >
<title>__GI___open64_nocancel (1 samples, 0.10%)</title><rect x="972.2" y="741" width="1.2" height="15.0" fill="rgb(214,152,47)" rx="2" ry="2" />
<text  x="975.23" y="751.5" ></text>
</g>
<g >
<title>rustposix::interface::file::EmulatedFile::readat (1 samples, 0.10%)</title><rect x="223.0" y="613" width="1.2" height="15.0" fill="rgb(244,171,21)" rx="2" ry="2" />
<text  x="226.04" y="623.5" ></text>
</g>
<g >
<title>iput (1 samples, 0.10%)</title><rect x="1088.2" y="517" width="1.2" height="15.0" fill="rgb(205,176,13)" rx="2" ry="2" />
<text  x="1091.21" y="527.5" ></text>
</g>
<g >
<title>alx_mask_msix (1 samples, 0.10%)</title><rect x="1100.1" y="549" width="1.1" height="15.0" fill="rgb(216,210,0)" rx="2" ry="2" />
<text  x="1103.05" y="559.5" ></text>
</g>
<g >
<title>xmalloc (1 samples, 0.10%)</title><rect x="11.2" y="581" width="1.2" height="15.0" fill="rgb(247,207,22)" rx="2" ry="2" />
<text  x="14.18" y="591.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy (98 samples, 9.83%)</title><rect x="243.2" y="581" width="115.9" height="15.0" fill="rgb(219,164,49)" rx="2" ry="2" />
<text  x="246.16" y="591.5" >ringbuf::consu..</text>
</g>
<g >
<title>up_read (2 samples, 0.20%)</title><rect x="936.7" y="709" width="2.4" height="15.0" fill="rgb(232,139,19)" rx="2" ry="2" />
<text  x="939.72" y="719.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.10%)</title><rect x="1072.8" y="309" width="1.2" height="15.0" fill="rgb(227,60,4)" rx="2" ry="2" />
<text  x="1075.83" y="319.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.50%)</title><rect x="217.1" y="389" width="5.9" height="15.0" fill="rgb(214,63,14)" rx="2" ry="2" />
<text  x="220.12" y="399.5" ></text>
</g>
<g >
<title>NaClSysExit (5 samples, 0.50%)</title><rect x="217.1" y="725" width="5.9" height="15.0" fill="rgb(214,37,54)" rx="2" ry="2" />
<text  x="220.12" y="735.5" ></text>
</g>
<g >
<title>alx_poll (1 samples, 0.10%)</title><rect x="1101.2" y="533" width="1.2" height="15.0" fill="rgb(205,199,10)" rx="2" ry="2" />
<text  x="1104.23" y="543.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.20%)</title><rect x="220.7" y="261" width="2.3" height="15.0" fill="rgb(254,125,39)" rx="2" ry="2" />
<text  x="223.67" y="271.5" ></text>
</g>
<g >
<title>update_dl_rq_load_avg (1 samples, 0.10%)</title><rect x="1171.1" y="469" width="1.1" height="15.0" fill="rgb(254,97,54)" rx="2" ry="2" />
<text  x="1174.06" y="479.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (5 samples, 0.50%)</title><rect x="217.1" y="661" width="5.9" height="15.0" fill="rgb(210,127,48)" rx="2" ry="2" />
<text  x="220.12" y="671.5" ></text>
</g>
<g >
<title>alx_clean_tx_irq (1 samples, 0.10%)</title><rect x="1101.2" y="517" width="1.2" height="15.0" fill="rgb(254,212,23)" rx="2" ry="2" />
<text  x="1104.23" y="527.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.10%)</title><rect x="217.1" y="165" width="1.2" height="15.0" fill="rgb(253,109,52)" rx="2" ry="2" />
<text  x="220.12" y="175.5" ></text>
</g>
<g >
<title>mm_update_next_owner (1 samples, 0.10%)</title><rect x="1048.0" y="677" width="1.2" height="15.0" fill="rgb(245,153,8)" rx="2" ry="2" />
<text  x="1050.97" y="687.5" ></text>
</g>
<g >
<title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.20%)</title><rect x="721.3" y="645" width="2.4" height="15.0" fill="rgb(247,18,8)" rx="2" ry="2" />
<text  x="724.31" y="655.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (116 samples, 11.63%)</title><rect x="223.0" y="645" width="137.3" height="15.0" fill="rgb(244,44,25)" rx="2" ry="2" />
<text  x="226.04" y="655.5" >rustposix::safepo..</text>
</g>
<g >
<title>perf_event_for_each_child (76 samples, 7.62%)</title><rect x="20.7" y="581" width="89.9" height="15.0" fill="rgb(226,118,46)" rx="2" ry="2" />
<text  x="23.65" y="591.5" >perf_event..</text>
</g>
<g >
<title>NaClSysDyncodeCreate (46 samples, 4.61%)</title><rect x="162.7" y="725" width="54.4" height="15.0" fill="rgb(219,227,30)" rx="2" ry="2" />
<text  x="165.68" y="735.5" >NaClS..</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (1 samples, 0.10%)</title><rect x="217.1" y="101" width="1.2" height="15.0" fill="rgb(246,28,52)" rx="2" ry="2" />
<text  x="220.12" y="111.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.50%)</title><rect x="217.1" y="565" width="5.9" height="15.0" fill="rgb(226,19,16)" rx="2" ry="2" />
<text  x="220.12" y="575.5" ></text>
</g>
<g >
<title>do_group_exit (34 samples, 3.41%)</title><rect x="1049.2" y="661" width="40.2" height="15.0" fill="rgb(222,182,53)" rx="2" ry="2" />
<text  x="1052.16" y="671.5" >do_..</text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Seek&gt;::seek (1 samples, 0.10%)</title><rect x="223.0" y="597" width="1.2" height="15.0" fill="rgb(240,151,6)" rx="2" ry="2" />
<text  x="226.04" y="607.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.10%)</title><rect x="966.3" y="389" width="1.2" height="15.0" fill="rgb(233,47,17)" rx="2" ry="2" />
<text  x="969.31" y="399.5" ></text>
</g>
<g >
<title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 0.10%)</title><rect x="1005.4" y="709" width="1.1" height="15.0" fill="rgb(243,50,38)" rx="2" ry="2" />
<text  x="1008.37" y="719.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::len (14 samples, 1.40%)</title><rect x="226.6" y="597" width="16.6" height="15.0" fill="rgb(219,6,42)" rx="2" ry="2" />
<text  x="229.59" y="607.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (1 samples, 0.10%)</title><rect x="358.0" y="565" width="1.1" height="15.0" fill="rgb(238,1,53)" rx="2" ry="2" />
<text  x="360.96" y="575.5" ></text>
</g>
<g >
<title>NaClXMutexUnlock (1 samples, 0.10%)</title><rect x="360.3" y="677" width="1.2" height="15.0" fill="rgb(244,201,0)" rx="2" ry="2" />
<text  x="363.33" y="687.5" ></text>
</g>
<g >
<title>ret_from_fork (2 samples, 0.20%)</title><rect x="1095.3" y="773" width="2.4" height="15.0" fill="rgb(237,107,4)" rx="2" ry="2" />
<text  x="1098.32" y="783.5" ></text>
</g>
<g >
<title>seq_printf (1 samples, 0.10%)</title><rect x="111.8" y="485" width="1.2" height="15.0" fill="rgb(251,98,30)" rx="2" ry="2" />
<text  x="114.79" y="495.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.10%)</title><rect x="218.3" y="117" width="1.2" height="15.0" fill="rgb(214,126,8)" rx="2" ry="2" />
<text  x="221.30" y="127.5" ></text>
</g>
<g >
<title>lru_cache_add (1 samples, 0.10%)</title><rect x="214.8" y="565" width="1.1" height="15.0" fill="rgb(214,32,38)" rx="2" ry="2" />
<text  x="217.75" y="575.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.10%)</title><rect x="966.3" y="405" width="1.2" height="15.0" fill="rgb(235,89,12)" rx="2" ry="2" />
<text  x="969.31" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.10%)</title><rect x="214.8" y="661" width="1.1" height="15.0" fill="rgb(211,174,47)" rx="2" ry="2" />
<text  x="217.75" y="671.5" ></text>
</g>
<g >
<title>jbd2__journal_start (1 samples, 0.10%)</title><rect x="114.2" y="325" width="1.1" height="15.0" fill="rgb(215,178,52)" rx="2" ry="2" />
<text  x="117.15" y="335.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.10%)</title><rect x="217.1" y="197" width="1.2" height="15.0" fill="rgb(242,210,46)" rx="2" ry="2" />
<text  x="220.12" y="207.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_access (97 samples, 9.73%)</title><rect x="243.2" y="565" width="114.8" height="15.0" fill="rgb(207,202,27)" rx="2" ry="2" />
<text  x="246.16" y="575.5" >ringbuf::consu..</text>
</g>
<g >
<title>MakeDynamicCodePagesVisible (4 samples, 0.40%)</title><rect x="169.8" y="661" width="4.7" height="15.0" fill="rgb(205,101,11)" rx="2" ry="2" />
<text  x="172.78" y="671.5" ></text>
</g>
<g >
<title>zap_pte_range (32 samples, 3.21%)</title><rect x="1049.2" y="533" width="37.8" height="15.0" fill="rgb(222,152,16)" rx="2" ry="2" />
<text  x="1052.16" y="543.5" >zap..</text>
</g>
<g >
<title>Process1OperandZeroExtends (2 samples, 0.20%)</title><rect x="207.7" y="645" width="2.3" height="15.0" fill="rgb(210,190,37)" rx="2" ry="2" />
<text  x="210.65" y="655.5" ></text>
</g>
<g >
<title>do_exit (34 samples, 3.41%)</title><rect x="1049.2" y="645" width="40.2" height="15.0" fill="rgb(246,122,46)" rx="2" ry="2" />
<text  x="1052.16" y="655.5" >do_..</text>
</g>
<g >
<title>dl_main (1 samples, 0.10%)</title><rect x="1007.7" y="725" width="1.2" height="15.0" fill="rgb(237,68,4)" rx="2" ry="2" />
<text  x="1010.73" y="735.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.10%)</title><rect x="1100.1" y="581" width="1.1" height="15.0" fill="rgb(241,153,31)" rx="2" ry="2" />
<text  x="1103.05" y="591.5" ></text>
</g>
<g >
<title>do_user_addr_fault (3 samples, 0.30%)</title><rect x="171.0" y="581" width="3.5" height="15.0" fill="rgb(249,16,33)" rx="2" ry="2" />
<text  x="173.96" y="591.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str_contents (1 samples, 0.10%)</title><rect x="217.1" y="37" width="1.2" height="15.0" fill="rgb(209,70,52)" rx="2" ry="2" />
<text  x="220.12" y="47.5" ></text>
</g>
<g >
<title>std::sys::unix::rwlock::RWLock::raw_unlock (1 samples, 0.10%)</title><rect x="157.9" y="677" width="1.2" height="15.0" fill="rgb(227,98,7)" rx="2" ry="2" />
<text  x="160.94" y="687.5" ></text>
</g>
<g >
<title>process_vm_rw_single_vec.constprop.0 (3 samples, 0.30%)</title><rect x="963.9" y="629" width="3.6" height="15.0" fill="rgb(214,46,7)" rx="2" ry="2" />
<text  x="966.94" y="639.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (5 samples, 0.50%)</title><rect x="217.1" y="645" width="5.9" height="15.0" fill="rgb(233,226,27)" rx="2" ry="2" />
<text  x="220.12" y="655.5" ></text>
</g>
<g >
<title>[unknown]  (200 samples, 20.06%)</title><rect x="726.0" y="773" width="236.8" height="15.0" fill="rgb(214,141,53)" rx="2" ry="2" />
<text  x="729.05" y="783.5" >[unknown] </text>
</g>
<g >
<title>_int_malloc (1 samples, 0.10%)</title><rect x="11.2" y="549" width="1.2" height="15.0" fill="rgb(221,142,39)" rx="2" ry="2" />
<text  x="14.18" y="559.5" ></text>
</g>
<g >
<title>do_syscall_64 (10 samples, 1.00%)</title><rect x="113.0" y="597" width="11.8" height="15.0" fill="rgb(218,86,27)" rx="2" ry="2" />
<text  x="115.97" y="607.5" ></text>
</g>
<g >
<title>lind_exit (5 samples, 0.50%)</title><rect x="217.1" y="709" width="5.9" height="15.0" fill="rgb(247,202,48)" rx="2" ry="2" />
<text  x="220.12" y="719.5" ></text>
</g>
<g >
<title>dput (1 samples, 0.10%)</title><rect x="1088.2" y="581" width="1.2" height="15.0" fill="rgb(214,215,15)" rx="2" ry="2" />
<text  x="1091.21" y="591.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (6 samples, 0.60%)</title><rect x="421.9" y="549" width="7.1" height="15.0" fill="rgb(238,189,23)" rx="2" ry="2" />
<text  x="424.88" y="559.5" ></text>
</g>
<g >
<title>NaClCopyDynamicTextAndVmmap (4 samples, 0.40%)</title><rect x="963.9" y="757" width="4.8" height="15.0" fill="rgb(240,51,2)" rx="2" ry="2" />
<text  x="966.94" y="767.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (5 samples, 0.50%)</title><rect x="217.1" y="613" width="5.9" height="15.0" fill="rgb(238,96,45)" rx="2" ry="2" />
<text  x="220.12" y="623.5" ></text>
</g>
<g >
<title>native_write_msr (1 samples, 0.10%)</title><rect x="1164.0" y="357" width="1.1" height="15.0" fill="rgb(219,6,12)" rx="2" ry="2" />
<text  x="1166.96" y="367.5" ></text>
</g>
<g >
<title>lock_page_memcg (1 samples, 0.10%)</title><rect x="1057.4" y="517" width="1.2" height="15.0" fill="rgb(216,49,33)" rx="2" ry="2" />
<text  x="1060.44" y="527.5" ></text>
</g>
<g >
<title>ovl_write_iter (2 samples, 0.20%)</title><rect x="124.8" y="677" width="2.4" height="15.0" fill="rgb(214,53,32)" rx="2" ry="2" />
<text  x="127.80" y="687.5" ></text>
</g>
<g >
<title>NaClSysWrite (308 samples, 30.89%)</title><rect x="361.5" y="725" width="364.5" height="15.0" fill="rgb(249,140,12)" rx="2" ry="2" />
<text  x="364.51" y="735.5" >NaClSysWrite</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (5 samples, 0.50%)</title><rect x="217.1" y="437" width="5.9" height="15.0" fill="rgb(225,187,31)" rx="2" ry="2" />
<text  x="220.12" y="447.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (15 samples, 1.50%)</title><rect x="1156.9" y="581" width="17.7" height="15.0" fill="rgb(236,114,41)" rx="2" ry="2" />
<text  x="1159.86" y="591.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (5 samples, 0.50%)</title><rect x="217.1" y="421" width="5.9" height="15.0" fill="rgb(220,97,20)" rx="2" ry="2" />
<text  x="220.12" y="431.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.10%)</title><rect x="1096.5" y="725" width="1.2" height="15.0" fill="rgb(220,199,41)" rx="2" ry="2" />
<text  x="1099.50" y="735.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.10%)</title><rect x="1072.8" y="373" width="1.2" height="15.0" fill="rgb(250,28,13)" rx="2" ry="2" />
<text  x="1075.83" y="383.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (43 samples, 4.31%)</title><rect x="1098.9" y="677" width="50.9" height="15.0" fill="rgb(229,62,42)" rx="2" ry="2" />
<text  x="1101.87" y="687.5" >cpuid..</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.50%)</title><rect x="217.1" y="501" width="5.9" height="15.0" fill="rgb(241,149,42)" rx="2" ry="2" />
<text  x="220.12" y="511.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_slice (6 samples, 0.60%)</title><rect x="517.7" y="565" width="7.1" height="15.0" fill="rgb(244,124,46)" rx="2" ry="2" />
<text  x="520.74" y="575.5" ></text>
</g>
<g >
<title>CheckValidityOfRegularInstruction (1 samples, 0.10%)</title><rect x="208.8" y="629" width="1.2" height="15.0" fill="rgb(212,9,43)" rx="2" ry="2" />
<text  x="211.84" y="639.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.10%)</title><rect x="1006.5" y="549" width="1.2" height="15.0" fill="rgb(241,121,36)" rx="2" ry="2" />
<text  x="1009.55" y="559.5" ></text>
</g>
<g >
<title>std::sys_common::rwlock::MovableRWLock::read (1 samples, 0.10%)</title><rect x="723.7" y="629" width="1.2" height="15.0" fill="rgb(212,26,17)" rx="2" ry="2" />
<text  x="726.68" y="639.5" ></text>
</g>
<g >
<title>remote_function (65 samples, 6.52%)</title><rect x="33.7" y="501" width="76.9" height="15.0" fill="rgb(245,39,13)" rx="2" ry="2" />
<text  x="36.67" y="511.5" >remote_f..</text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_copy (116 samples, 11.63%)</title><rect x="387.6" y="581" width="137.2" height="15.0" fill="rgb(217,170,22)" rx="2" ry="2" />
<text  x="390.55" y="591.5" >ringbuf::producer..</text>
</g>
<g >
<title>[perf-30901.map] (1 samples, 0.10%)</title><rect x="159.1" y="773" width="1.2" height="15.0" fill="rgb(234,87,26)" rx="2" ry="2" />
<text  x="162.13" y="783.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_slice (5 samples, 0.50%)</title><rect x="511.8" y="549" width="5.9" height="15.0" fill="rgb(242,167,35)" rx="2" ry="2" />
<text  x="514.83" y="559.5" ></text>
</g>
<g >
<title>smp_call_function_single (66 samples, 6.62%)</title><rect x="32.5" y="533" width="78.1" height="15.0" fill="rgb(227,95,35)" rx="2" ry="2" />
<text  x="35.49" y="543.5" >smp_call_..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="128.4" y="757" width="1.1" height="15.0" fill="rgb(228,45,33)" rx="2" ry="2" />
<text  x="131.36" y="767.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="11.2" y="565" width="1.2" height="15.0" fill="rgb(211,132,15)" rx="2" ry="2" />
<text  x="14.18" y="575.5" ></text>
</g>
<g >
<title>kthread (2 samples, 0.20%)</title><rect x="1095.3" y="757" width="2.4" height="15.0" fill="rgb(225,69,38)" rx="2" ry="2" />
<text  x="1098.32" y="767.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.10%)</title><rect x="1101.2" y="629" width="1.2" height="15.0" fill="rgb(243,111,6)" rx="2" ry="2" />
<text  x="1104.23" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_process_vm_writev (1 samples, 0.10%)</title><rect x="967.5" y="693" width="1.2" height="15.0" fill="rgb(218,223,3)" rx="2" ry="2" />
<text  x="970.49" y="703.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="1072.8" y="453" width="1.2" height="15.0" fill="rgb(243,131,35)" rx="2" ry="2" />
<text  x="1075.83" y="463.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.10%)</title><rect x="1048.0" y="725" width="1.2" height="15.0" fill="rgb(223,141,41)" rx="2" ry="2" />
<text  x="1050.97" y="735.5" ></text>
</g>
<g >
<title>__libc_start_main (1 samples, 0.10%)</title><rect x="1006.5" y="757" width="1.2" height="15.0" fill="rgb(208,15,0)" rx="2" ry="2" />
<text  x="1009.55" y="767.5" ></text>
</g>
<g >
<title>ksys_lseek (1 samples, 0.10%)</title><rect x="223.0" y="501" width="1.2" height="15.0" fill="rgb(224,33,24)" rx="2" ry="2" />
<text  x="226.04" y="511.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (1 samples, 0.10%)</title><rect x="907.1" y="581" width="1.2" height="15.0" fill="rgb(218,65,47)" rx="2" ry="2" />
<text  x="910.13" y="591.5" ></text>
</g>
<g >
<title>_raw_spin_lock (3 samples, 0.30%)</title><rect x="845.6" y="661" width="3.5" height="15.0" fill="rgb(231,139,51)" rx="2" ry="2" />
<text  x="848.59" y="671.5" ></text>
</g>
<g >
<title>kernfs_fop_open (1 samples, 0.10%)</title><rect x="972.2" y="581" width="1.2" height="15.0" fill="rgb(252,133,48)" rx="2" ry="2" />
<text  x="975.23" y="591.5" ></text>
</g>
<g >
<title>new_sync_write (2 samples, 0.20%)</title><rect x="124.8" y="693" width="2.4" height="15.0" fill="rgb(236,65,6)" rx="2" ry="2" />
<text  x="127.80" y="703.5" ></text>
</g>
<g >
<title>CompareAndSwap (1 samples, 0.10%)</title><rect x="160.3" y="725" width="1.2" height="15.0" fill="rgb(211,56,34)" rx="2" ry="2" />
<text  x="163.31" y="735.5" ></text>
</g>
<g >
<title>policy_nodemask (1 samples, 0.10%)</title><rect x="897.7" y="629" width="1.1" height="15.0" fill="rgb(241,156,53)" rx="2" ry="2" />
<text  x="900.66" y="639.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (15 samples, 1.50%)</title><rect x="1068.1" y="501" width="17.7" height="15.0" fill="rgb(235,81,46)" rx="2" ry="2" />
<text  x="1071.09" y="511.5" ></text>
</g>
<g >
<title>tick_nohz_restart (1 samples, 0.10%)</title><rect x="1150.9" y="693" width="1.2" height="15.0" fill="rgb(234,0,19)" rx="2" ry="2" />
<text  x="1153.94" y="703.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.20%)</title><rect x="384.0" y="597" width="2.4" height="15.0" fill="rgb(226,92,40)" rx="2" ry="2" />
<text  x="387.00" y="607.5" ></text>
</g>
<g >
<title>do_idle (32 samples, 3.21%)</title><rect x="1152.1" y="661" width="37.9" height="15.0" fill="rgb(254,216,36)" rx="2" ry="2" />
<text  x="1155.13" y="671.5" >do_..</text>
</g>
<g >
<title>__mod_node_page_state (1 samples, 0.10%)</title><rect x="933.2" y="565" width="1.2" height="15.0" fill="rgb(248,104,8)" rx="2" ry="2" />
<text  x="936.17" y="575.5" ></text>
</g>
<g >
<title>alloc_page_buffers (1 samples, 0.10%)</title><rect x="124.8" y="517" width="1.2" height="15.0" fill="rgb(225,149,38)" rx="2" ry="2" />
<text  x="127.80" y="527.5" ></text>
</g>
<g >
<title>do_fault (2 samples, 0.20%)</title><rect x="965.1" y="517" width="2.4" height="15.0" fill="rgb(224,142,42)" rx="2" ry="2" />
<text  x="968.13" y="527.5" ></text>
</g>
<g >
<title>sync_regs (19 samples, 1.91%)</title><rect x="940.3" y="757" width="22.5" height="15.0" fill="rgb(221,114,2)" rx="2" ry="2" />
<text  x="943.27" y="767.5" >s..</text>
</g>
<g >
<title>_perf_ioctl (80 samples, 8.02%)</title><rect x="15.9" y="597" width="94.7" height="15.0" fill="rgb(236,169,27)" rx="2" ry="2" />
<text  x="18.92" y="607.5" >_perf_ioctl</text>
</g>
<g >
<title>try_charge (4 samples, 0.40%)</title><rect x="921.3" y="629" width="4.8" height="15.0" fill="rgb(223,122,29)" rx="2" ry="2" />
<text  x="924.33" y="639.5" ></text>
</g>
<g >
<title>____fput (1 samples, 0.10%)</title><rect x="1088.2" y="613" width="1.2" height="15.0" fill="rgb(220,211,26)" rx="2" ry="2" />
<text  x="1091.21" y="623.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.10%)</title><rect x="1072.8" y="469" width="1.2" height="15.0" fill="rgb(250,28,16)" rx="2" ry="2" />
<text  x="1075.83" y="479.5" ></text>
</g>
<g >
<title>NaClThreadCreate (1 samples, 0.10%)</title><rect x="1006.5" y="597" width="1.2" height="15.0" fill="rgb(245,208,39)" rx="2" ry="2" />
<text  x="1009.55" y="607.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;std::collections::hash::map::HashMap&lt;i32,alloc::sync::Arc&lt;rustposix::interface::pipe::EmulatedPipe&gt;&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="157.9" y="741" width="1.2" height="15.0" fill="rgb(205,21,18)" rx="2" ry="2" />
<text  x="160.94" y="751.5" ></text>
</g>
<g >
<title>wait_for (1 samples, 0.10%)</title><rect x="11.2" y="677" width="1.2" height="15.0" fill="rgb(228,194,41)" rx="2" ry="2" />
<text  x="14.18" y="687.5" ></text>
</g>
<g >
<title>dispatcher (5 samples, 0.50%)</title><rect x="217.1" y="693" width="5.9" height="15.0" fill="rgb(214,118,31)" rx="2" ry="2" />
<text  x="220.12" y="703.5" ></text>
</g>
<g >
<title>main (3 samples, 0.30%)</title><rect x="10.0" y="741" width="3.6" height="15.0" fill="rgb(220,227,18)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="382.8" y="533" width="1.2" height="15.0" fill="rgb(230,183,34)" rx="2" ry="2" />
<text  x="385.82" y="543.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.10%)</title><rect x="247.9" y="533" width="1.2" height="15.0" fill="rgb(208,122,34)" rx="2" ry="2" />
<text  x="250.89" y="543.5" ></text>
</g>
<g >
<title>menu_select (4 samples, 0.40%)</title><rect x="1184.1" y="613" width="4.7" height="15.0" fill="rgb(236,14,18)" rx="2" ry="2" />
<text  x="1187.08" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="972.2" y="725" width="1.2" height="15.0" fill="rgb(227,25,52)" rx="2" ry="2" />
<text  x="975.23" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="1094.1" y="757" width="1.2" height="15.0" fill="rgb(214,132,37)" rx="2" ry="2" />
<text  x="1097.13" y="767.5" ></text>
</g>
<g >
<title>core::cmp::min (6 samples, 0.60%)</title><rect x="375.7" y="597" width="7.1" height="15.0" fill="rgb(235,116,32)" rx="2" ry="2" />
<text  x="378.72" y="607.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.10%)</title><rect x="111.8" y="661" width="1.2" height="15.0" fill="rgb(216,171,34)" rx="2" ry="2" />
<text  x="114.79" y="671.5" ></text>
</g>
<g >
<title>NaClMutexLock (1 samples, 0.10%)</title><rect x="161.5" y="709" width="1.2" height="15.0" fill="rgb(228,33,48)" rx="2" ry="2" />
<text  x="164.49" y="719.5" ></text>
</g>
<g >
<title>std::sys_common::rwlock::MovableRWLock::read (1 samples, 0.10%)</title><rect x="359.1" y="597" width="1.2" height="15.0" fill="rgb(213,62,41)" rx="2" ry="2" />
<text  x="362.15" y="607.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (1 samples, 0.10%)</title><rect x="907.1" y="565" width="1.2" height="15.0" fill="rgb(232,222,27)" rx="2" ry="2" />
<text  x="910.13" y="575.5" ></text>
</g>
<g >
<title>read_command (1 samples, 0.10%)</title><rect x="12.4" y="709" width="1.2" height="15.0" fill="rgb(233,7,32)" rx="2" ry="2" />
<text  x="15.37" y="719.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (2 samples, 0.20%)</title><rect x="220.7" y="245" width="2.3" height="15.0" fill="rgb(237,209,9)" rx="2" ry="2" />
<text  x="223.67" y="255.5" ></text>
</g>
<g >
<title>exc_page_fault (4 samples, 0.40%)</title><rect x="169.8" y="597" width="4.7" height="15.0" fill="rgb(243,179,19)" rx="2" ry="2" />
<text  x="172.78" y="607.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.10%)</title><rect x="1172.2" y="469" width="1.2" height="15.0" fill="rgb(234,124,52)" rx="2" ry="2" />
<text  x="1175.25" y="479.5" ></text>
</g>
<g >
<title>__do_fault (3 samples, 0.30%)</title><rect x="171.0" y="485" width="3.5" height="15.0" fill="rgb(254,15,24)" rx="2" ry="2" />
<text  x="173.96" y="495.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (1 samples, 0.10%)</title><rect x="1164.0" y="373" width="1.1" height="15.0" fill="rgb(205,7,21)" rx="2" ry="2" />
<text  x="1166.96" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.10%)</title><rect x="173.3" y="405" width="1.2" height="15.0" fill="rgb(226,22,31)" rx="2" ry="2" />
<text  x="176.33" y="415.5" ></text>
</g>
<g >
<title>__update_blocked_fair (1 samples, 0.10%)</title><rect x="1169.9" y="469" width="1.2" height="15.0" fill="rgb(210,119,24)" rx="2" ry="2" />
<text  x="1172.88" y="479.5" ></text>
</g>
<g >
<title>cpuidle_enter (26 samples, 2.61%)</title><rect x="1153.3" y="629" width="30.8" height="15.0" fill="rgb(244,77,28)" rx="2" ry="2" />
<text  x="1156.31" y="639.5" >cp..</text>
</g>
<g >
<title>process_vm_rw (1 samples, 0.10%)</title><rect x="967.5" y="677" width="1.2" height="15.0" fill="rgb(208,5,49)" rx="2" ry="2" />
<text  x="970.49" y="687.5" ></text>
</g>
<g >
<title>reader_loop (3 samples, 0.30%)</title><rect x="10.0" y="725" width="3.6" height="15.0" fill="rgb(221,188,48)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>generic_perform_write (7 samples, 0.70%)</title><rect x="115.3" y="421" width="8.3" height="15.0" fill="rgb(246,213,11)" rx="2" ry="2" />
<text  x="118.34" y="431.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (92 samples, 9.23%)</title><rect x="831.4" y="757" width="108.9" height="15.0" fill="rgb(228,144,22)" rx="2" ry="2" />
<text  x="834.38" y="767.5" >asm_exc_page_..</text>
</g>
<g >
<title>__softirqentry_text_start (6 samples, 0.60%)</title><rect x="1166.3" y="517" width="7.1" height="15.0" fill="rgb(231,113,51)" rx="2" ry="2" />
<text  x="1169.33" y="527.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="1072.8" y="437" width="1.2" height="15.0" fill="rgb(247,147,28)" rx="2" ry="2" />
<text  x="1075.83" y="447.5" ></text>
</g>
<g >
<title>page_add_file_rmap (1 samples, 0.10%)</title><rect x="933.2" y="597" width="1.2" height="15.0" fill="rgb(249,218,34)" rx="2" ry="2" />
<text  x="936.17" y="607.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u32 (2 samples, 0.20%)</title><rect x="220.7" y="229" width="2.3" height="15.0" fill="rgb(249,0,45)" rx="2" ry="2" />
<text  x="223.67" y="239.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (3 samples, 0.30%)</title><rect x="1161.6" y="405" width="3.5" height="15.0" fill="rgb(220,67,52)" rx="2" ry="2" />
<text  x="1164.59" y="415.5" ></text>
</g>
<g >
<title>lind_write (307 samples, 30.79%)</title><rect x="361.5" y="677" width="363.4" height="15.0" fill="rgb(233,133,1)" rx="2" ry="2" />
<text  x="364.51" y="687.5" >lind_write</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1 samples, 0.10%)</title><rect x="963.9" y="581" width="1.2" height="15.0" fill="rgb(224,85,16)" rx="2" ry="2" />
<text  x="966.94" y="591.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (2 samples, 0.20%)</title><rect x="1186.4" y="565" width="2.4" height="15.0" fill="rgb(229,120,44)" rx="2" ry="2" />
<text  x="1189.45" y="575.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.10%)</title><rect x="1006.5" y="533" width="1.2" height="15.0" fill="rgb(220,217,28)" rx="2" ry="2" />
<text  x="1009.55" y="543.5" ></text>
</g>
<g >
<title>shmem_getpage_gfp (3 samples, 0.30%)</title><rect x="171.0" y="453" width="3.5" height="15.0" fill="rgb(228,164,0)" rx="2" ry="2" />
<text  x="173.96" y="463.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (1 samples, 0.10%)</title><rect x="124.8" y="549" width="1.2" height="15.0" fill="rgb(206,96,33)" rx="2" ry="2" />
<text  x="127.80" y="559.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (10 samples, 1.00%)</title><rect x="113.0" y="709" width="11.8" height="15.0" fill="rgb(235,100,4)" rx="2" ry="2" />
<text  x="115.97" y="719.5" ></text>
</g>
<g >
<title>process_vm_rw (3 samples, 0.30%)</title><rect x="963.9" y="661" width="3.6" height="15.0" fill="rgb(218,180,4)" rx="2" ry="2" />
<text  x="966.94" y="671.5" ></text>
</g>
<g >
<title>__GI___poll (1 samples, 0.10%)</title><rect x="110.6" y="709" width="1.2" height="15.0" fill="rgb(243,137,24)" rx="2" ry="2" />
<text  x="113.60" y="719.5" ></text>
</g>
<g >
<title>handle_pte_fault (78 samples, 7.82%)</title><rect x="843.2" y="677" width="92.3" height="15.0" fill="rgb(217,66,15)" rx="2" ry="2" />
<text  x="846.22" y="687.5" >handle_pte_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10 samples, 1.00%)</title><rect x="113.0" y="613" width="11.8" height="15.0" fill="rgb(241,78,42)" rx="2" ry="2" />
<text  x="115.97" y="623.5" ></text>
</g>
<g >
<title>file_modified (1 samples, 0.10%)</title><rect x="114.2" y="421" width="1.1" height="15.0" fill="rgb(217,165,47)" rx="2" ry="2" />
<text  x="117.15" y="431.5" ></text>
</g>
<g >
<title>___slab_alloc (1 samples, 0.10%)</title><rect x="124.8" y="453" width="1.2" height="15.0" fill="rgb(243,78,40)" rx="2" ry="2" />
<text  x="127.80" y="463.5" ></text>
</g>
<g >
<title>handle_pte_fault (3 samples, 0.30%)</title><rect x="171.0" y="533" width="3.5" height="15.0" fill="rgb(224,163,18)" rx="2" ry="2" />
<text  x="173.96" y="543.5" ></text>
</g>
<g >
<title>dentry_kill (1 samples, 0.10%)</title><rect x="1088.2" y="565" width="1.2" height="15.0" fill="rgb(241,139,5)" rx="2" ry="2" />
<text  x="1091.21" y="575.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.10%)</title><rect x="218.3" y="165" width="1.2" height="15.0" fill="rgb(206,130,41)" rx="2" ry="2" />
<text  x="221.30" y="175.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1 samples, 0.10%)</title><rect x="114.2" y="373" width="1.1" height="15.0" fill="rgb(206,38,18)" rx="2" ry="2" />
<text  x="117.15" y="383.5" ></text>
</g>
<g >
<title>alloc_set_pte (1 samples, 0.10%)</title><rect x="933.2" y="613" width="1.2" height="15.0" fill="rgb(252,218,54)" rx="2" ry="2" />
<text  x="936.17" y="623.5" ></text>
</g>
<g >
<title>unmap_single_vma (32 samples, 3.21%)</title><rect x="1049.2" y="565" width="37.8" height="15.0" fill="rgb(208,42,12)" rx="2" ry="2" />
<text  x="1052.16" y="575.5" >unm..</text>
</g>
<g >
<title>__cmd_record (92 samples, 9.23%)</title><rect x="15.9" y="741" width="108.9" height="15.0" fill="rgb(243,124,32)" rx="2" ry="2" />
<text  x="18.92" y="751.5" >__cmd_record</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.10%)</title><rect x="217.1" y="261" width="1.2" height="15.0" fill="rgb(234,33,26)" rx="2" ry="2" />
<text  x="220.12" y="271.5" ></text>
</g>
<g >
<title>pagecache_get_page (4 samples, 0.40%)</title><rect x="117.7" y="373" width="4.7" height="15.0" fill="rgb(205,15,4)" rx="2" ry="2" />
<text  x="120.70" y="383.5" ></text>
</g>
<g >
<title>__get_vma_policy (2 samples, 0.20%)</title><rect x="850.3" y="645" width="2.4" height="15.0" fill="rgb(237,44,0)" rx="2" ry="2" />
<text  x="853.32" y="655.5" ></text>
</g>
<g >
<title>__fput (1 samples, 0.10%)</title><rect x="1088.2" y="597" width="1.2" height="15.0" fill="rgb(205,223,11)" rx="2" ry="2" />
<text  x="1091.21" y="607.5" ></text>
</g>
<g >
<title>__dentry_kill (1 samples, 0.10%)</title><rect x="1088.2" y="549" width="1.2" height="15.0" fill="rgb(215,108,24)" rx="2" ry="2" />
<text  x="1091.21" y="559.5" ></text>
</g>
<g >
<title>NaClSysExitDecoder (5 samples, 0.50%)</title><rect x="217.1" y="741" width="5.9" height="15.0" fill="rgb(243,91,43)" rx="2" ry="2" />
<text  x="220.12" y="751.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (89 samples, 8.93%)</title><rect x="250.3" y="517" width="105.3" height="15.0" fill="rgb(231,153,4)" rx="2" ry="2" />
<text  x="253.26" y="527.5" >__memmove_av..</text>
</g>
<g >
<title>ext4_buffered_write_iter (2 samples, 0.20%)</title><rect x="124.8" y="597" width="2.4" height="15.0" fill="rgb(216,73,45)" rx="2" ry="2" />
<text  x="127.80" y="607.5" ></text>
</g>
<g >
<title>x86_pmu_disable (1 samples, 0.10%)</title><rect x="1165.1" y="405" width="1.2" height="15.0" fill="rgb(244,168,31)" rx="2" ry="2" />
<text  x="1168.15" y="415.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (6 samples, 0.60%)</title><rect x="375.7" y="581" width="7.1" height="15.0" fill="rgb(226,78,52)" rx="2" ry="2" />
<text  x="378.72" y="591.5" ></text>
</g>
<g >
<title>generic_perform_write (2 samples, 0.20%)</title><rect x="124.8" y="581" width="2.4" height="15.0" fill="rgb(224,32,0)" rx="2" ry="2" />
<text  x="127.80" y="591.5" ></text>
</g>
<g >
<title>NaClAppLoadFileFromFilename (3 samples, 0.30%)</title><rect x="968.7" y="741" width="3.5" height="15.0" fill="rgb(205,79,40)" rx="2" ry="2" />
<text  x="971.68" y="751.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.10%)</title><rect x="121.3" y="309" width="1.1" height="15.0" fill="rgb(215,48,21)" rx="2" ry="2" />
<text  x="124.25" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="111.8" y="629" width="1.2" height="15.0" fill="rgb(240,229,13)" rx="2" ry="2" />
<text  x="114.79" y="639.5" ></text>
</g>
<g >
<title>napi_poll (1 samples, 0.10%)</title><rect x="1101.2" y="549" width="1.2" height="15.0" fill="rgb(238,203,51)" rx="2" ry="2" />
<text  x="1104.23" y="559.5" ></text>
</g>
<g >
<title>start_kernel (32 samples, 3.21%)</title><rect x="1152.1" y="725" width="37.9" height="15.0" fill="rgb(240,137,18)" rx="2" ry="2" />
<text  x="1155.13" y="735.5" >sta..</text>
</g>
<g >
<title>serde_json::ser::Formatter::begin_string (1 samples, 0.10%)</title><rect x="218.3" y="181" width="1.2" height="15.0" fill="rgb(245,174,4)" rx="2" ry="2" />
<text  x="221.30" y="191.5" ></text>
</g>
<g >
<title>perf_mmap__push (10 samples, 1.00%)</title><rect x="113.0" y="693" width="11.8" height="15.0" fill="rgb(219,197,33)" rx="2" ry="2" />
<text  x="115.97" y="703.5" ></text>
</g>
<g >
<title>propagate_entity_cfs_rq.isra.0 (1 samples, 0.10%)</title><rect x="1087.0" y="533" width="1.2" height="15.0" fill="rgb(243,83,47)" rx="2" ry="2" />
<text  x="1090.03" y="543.5" ></text>
</g>
<g >
<title>main (1 samples, 0.10%)</title><rect x="1006.5" y="741" width="1.2" height="15.0" fill="rgb(220,77,6)" rx="2" ry="2" />
<text  x="1009.55" y="751.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.10%)</title><rect x="217.1" y="229" width="1.2" height="15.0" fill="rgb(232,57,35)" rx="2" ry="2" />
<text  x="220.12" y="239.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::remaining (166 samples, 16.65%)</title><rect x="524.8" y="581" width="196.5" height="15.0" fill="rgb(208,218,45)" rx="2" ry="2" />
<text  x="527.84" y="591.5" >ringbuf::ring_buffer::Rin..</text>
</g>
<g >
<title>page_mapping (1 samples, 0.10%)</title><rect x="1088.2" y="373" width="1.2" height="15.0" fill="rgb(242,141,47)" rx="2" ry="2" />
<text  x="1091.21" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="110.6" y="693" width="1.2" height="15.0" fill="rgb(229,15,4)" rx="2" ry="2" />
<text  x="113.60" y="703.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_copy::{{closure}} (70 samples, 7.02%)</title><rect x="429.0" y="549" width="82.8" height="15.0" fill="rgb(216,105,48)" rx="2" ry="2" />
<text  x="431.98" y="559.5" >ringbuf::..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (8 samples, 0.80%)</title><rect x="1156.9" y="549" width="9.4" height="15.0" fill="rgb(249,117,9)" rx="2" ry="2" />
<text  x="1159.86" y="559.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.20%)</title><rect x="721.3" y="613" width="2.4" height="15.0" fill="rgb(236,184,3)" rx="2" ry="2" />
<text  x="724.31" y="623.5" ></text>
</g>
<g >
<title>swapper (85 samples, 8.53%)</title><rect x="1089.4" y="789" width="100.6" height="15.0" fill="rgb(244,73,0)" rx="2" ry="2" />
<text  x="1092.40" y="799.5" >swapper</text>
</g>
<g >
<title>schedule (1 samples, 0.10%)</title><rect x="110.6" y="581" width="1.2" height="15.0" fill="rgb(250,106,20)" rx="2" ry="2" />
<text  x="113.60" y="591.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (1 samples, 0.10%)</title><rect x="171.0" y="437" width="1.1" height="15.0" fill="rgb(217,216,30)" rx="2" ry="2" />
<text  x="173.96" y="447.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.20%)</title><rect x="721.3" y="581" width="2.4" height="15.0" fill="rgb(217,0,14)" rx="2" ry="2" />
<text  x="724.31" y="591.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1 samples, 0.10%)</title><rect x="122.4" y="389" width="1.2" height="15.0" fill="rgb(229,178,1)" rx="2" ry="2" />
<text  x="125.44" y="399.5" ></text>
</g>
<g >
<title>cgroup_throttle_swaprate (1 samples, 0.10%)</title><rect x="849.1" y="661" width="1.2" height="15.0" fill="rgb(238,173,34)" rx="2" ry="2" />
<text  x="852.14" y="671.5" ></text>
</g>
<g >
<title>detach_task_cfs_rq (1 samples, 0.10%)</title><rect x="1087.0" y="565" width="1.2" height="15.0" fill="rgb(252,212,21)" rx="2" ry="2" />
<text  x="1090.03" y="575.5" ></text>
</g>
<g >
<title>__get_user_pages (1 samples, 0.10%)</title><rect x="967.5" y="597" width="1.2" height="15.0" fill="rgb(226,187,0)" rx="2" ry="2" />
<text  x="970.49" y="607.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (6 samples, 0.60%)</title><rect x="414.8" y="533" width="7.1" height="15.0" fill="rgb(225,151,36)" rx="2" ry="2" />
<text  x="417.77" y="543.5" ></text>
</g>
<g >
<title>std::sys::unix::rwlock::RWLock::read (1 samples, 0.10%)</title><rect x="723.7" y="613" width="1.2" height="15.0" fill="rgb(234,220,5)" rx="2" ry="2" />
<text  x="726.68" y="623.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (303 samples, 30.39%)</title><rect x="362.7" y="613" width="358.6" height="15.0" fill="rgb(223,87,29)" rx="2" ry="2" />
<text  x="365.70" y="623.5" >rustposix::interface::pipe::EmulatedPipe::write_..</text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.10%)</title><rect x="173.3" y="373" width="1.2" height="15.0" fill="rgb(232,145,11)" rx="2" ry="2" />
<text  x="176.33" y="383.5" ></text>
</g>
<g >
<title>do_sys_poll (1 samples, 0.10%)</title><rect x="1094.1" y="725" width="1.2" height="15.0" fill="rgb(219,10,19)" rx="2" ry="2" />
<text  x="1097.13" y="735.5" ></text>
</g>
<g >
<title>detach_entity_cfs_rq (1 samples, 0.10%)</title><rect x="1087.0" y="549" width="1.2" height="15.0" fill="rgb(237,20,30)" rx="2" ry="2" />
<text  x="1090.03" y="559.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (2 samples, 0.20%)</title><rect x="986.4" y="757" width="2.4" height="15.0" fill="rgb(216,77,16)" rx="2" ry="2" />
<text  x="989.43" y="767.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (5 samples, 0.50%)</title><rect x="217.1" y="597" width="5.9" height="15.0" fill="rgb(248,156,26)" rx="2" ry="2" />
<text  x="220.12" y="607.5" ></text>
</g>
<g >
<title>do_open (1 samples, 0.10%)</title><rect x="972.2" y="629" width="1.2" height="15.0" fill="rgb(244,78,14)" rx="2" ry="2" />
<text  x="975.23" y="639.5" ></text>
</g>
<g >
<title>update_process_times (6 samples, 0.60%)</title><rect x="1159.2" y="453" width="7.1" height="15.0" fill="rgb(222,67,46)" rx="2" ry="2" />
<text  x="1162.23" y="463.5" ></text>
</g>
<g >
<title>yyparse (1 samples, 0.10%)</title><rect x="12.4" y="677" width="1.2" height="15.0" fill="rgb(228,39,24)" rx="2" ry="2" />
<text  x="15.37" y="687.5" ></text>
</g>
<g >
<title>page_counter_try_charge (1 samples, 0.10%)</title><rect x="967.5" y="485" width="1.2" height="15.0" fill="rgb(236,80,25)" rx="2" ry="2" />
<text  x="970.49" y="495.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.20%)</title><rect x="965.1" y="565" width="2.4" height="15.0" fill="rgb(226,96,39)" rx="2" ry="2" />
<text  x="968.13" y="575.5" ></text>
</g>
<g >
<title>NaClValidateCode (31 samples, 3.11%)</title><rect x="174.5" y="693" width="36.7" height="15.0" fill="rgb(242,60,46)" rx="2" ry="2" />
<text  x="177.51" y="703.5" >NaC..</text>
</g>
<g >
<title>cpuidle_enter (43 samples, 4.31%)</title><rect x="1098.9" y="693" width="50.9" height="15.0" fill="rgb(217,225,28)" rx="2" ry="2" />
<text  x="1101.87" y="703.5" >cpuid..</text>
</g>
<g >
<title>__hrtimer_init (1 samples, 0.10%)</title><rect x="1094.1" y="645" width="1.2" height="15.0" fill="rgb(216,60,42)" rx="2" ry="2" />
<text  x="1097.13" y="655.5" ></text>
</g>
<g >
<title>vsnprintf (1 samples, 0.10%)</title><rect x="111.8" y="469" width="1.2" height="15.0" fill="rgb(213,173,5)" rx="2" ry="2" />
<text  x="114.79" y="479.5" ></text>
</g>
<g >
<title>clear_page_erms (20 samples, 2.01%)</title><rect x="863.3" y="581" width="23.7" height="15.0" fill="rgb(210,116,49)" rx="2" ry="2" />
<text  x="866.34" y="591.5" >c..</text>
</g>
<g >
<title>seq_open (1 samples, 0.10%)</title><rect x="972.2" y="565" width="1.2" height="15.0" fill="rgb(244,181,52)" rx="2" ry="2" />
<text  x="975.23" y="575.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.10%)</title><rect x="1097.7" y="709" width="1.2" height="15.0" fill="rgb(244,65,18)" rx="2" ry="2" />
<text  x="1100.68" y="719.5" ></text>
</g>
<g >
<title>NaClLogGetVerbosity (1 samples, 0.10%)</title><rect x="360.3" y="709" width="1.2" height="15.0" fill="rgb(238,144,8)" rx="2" ry="2" />
<text  x="363.33" y="719.5" ></text>
</g>
<g >
<title>[[heap]] (1 samples, 0.10%)</title><rect x="127.2" y="773" width="1.2" height="15.0" fill="rgb(241,177,12)" rx="2" ry="2" />
<text  x="130.17" y="783.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (2 samples, 0.20%)</title><rect x="218.3" y="197" width="2.4" height="15.0" fill="rgb(212,9,31)" rx="2" ry="2" />
<text  x="221.30" y="207.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (2 samples, 0.20%)</title><rect x="1167.5" y="437" width="2.4" height="15.0" fill="rgb(242,54,46)" rx="2" ry="2" />
<text  x="1170.51" y="447.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.10%)</title><rect x="217.1" y="181" width="1.2" height="15.0" fill="rgb(214,85,29)" rx="2" ry="2" />
<text  x="220.12" y="191.5" ></text>
</g>
<g >
<title>[bash] (1 samples, 0.10%)</title><rect x="11.2" y="629" width="1.2" height="15.0" fill="rgb(232,209,34)" rx="2" ry="2" />
<text  x="14.18" y="639.5" ></text>
</g>
<g >
<title>do_idle (46 samples, 4.61%)</title><rect x="1097.7" y="725" width="54.4" height="15.0" fill="rgb(223,205,34)" rx="2" ry="2" />
<text  x="1100.68" y="735.5" >do_idle</text>
</g>
<g >
<title>ovl_real_fdget_meta (1 samples, 0.10%)</title><rect x="223.0" y="453" width="1.2" height="15.0" fill="rgb(253,93,30)" rx="2" ry="2" />
<text  x="226.04" y="463.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (38 samples, 3.81%)</title><rect x="1103.6" y="661" width="45.0" height="15.0" fill="rgb(230,222,16)" rx="2" ry="2" />
<text  x="1106.60" y="671.5" >mwai..</text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.10%)</title><rect x="219.5" y="181" width="1.2" height="15.0" fill="rgb(206,1,32)" rx="2" ry="2" />
<text  x="222.49" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (81 samples, 8.12%)</title><rect x="839.7" y="693" width="95.8" height="15.0" fill="rgb(239,51,26)" rx="2" ry="2" />
<text  x="842.67" y="703.5" >__handle_mm..</text>
</g>
<g >
<title>cpuidle_select (4 samples, 0.40%)</title><rect x="1184.1" y="629" width="4.7" height="15.0" fill="rgb(221,167,30)" rx="2" ry="2" />
<text  x="1187.08" y="639.5" ></text>
</g>
<g >
<title>perf_event_task_tick (4 samples, 0.40%)</title><rect x="1161.6" y="421" width="4.7" height="15.0" fill="rgb(219,141,13)" rx="2" ry="2" />
<text  x="1164.59" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_process_vm_writev (3 samples, 0.30%)</title><rect x="963.9" y="677" width="3.6" height="15.0" fill="rgb(235,195,42)" rx="2" ry="2" />
<text  x="966.94" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.20%)</title><rect x="124.8" y="773" width="2.4" height="15.0" fill="rgb(248,220,13)" rx="2" ry="2" />
<text  x="127.80" y="783.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (2 samples, 0.20%)</title><rect x="220.7" y="117" width="2.3" height="15.0" fill="rgb(254,114,29)" rx="2" ry="2" />
<text  x="223.67" y="127.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (5 samples, 0.50%)</title><rect x="217.1" y="405" width="5.9" height="15.0" fill="rgb(207,84,18)" rx="2" ry="2" />
<text  x="220.12" y="415.5" ></text>
</g>
<g >
<title>NaClFillMemoryRegionWithHalt (4 samples, 0.40%)</title><rect x="169.8" y="645" width="4.7" height="15.0" fill="rgb(228,207,42)" rx="2" ry="2" />
<text  x="172.78" y="655.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (1 samples, 0.10%)</title><rect x="1068.1" y="485" width="1.2" height="15.0" fill="rgb(230,0,54)" rx="2" ry="2" />
<text  x="1071.09" y="495.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (1 samples, 0.10%)</title><rect x="116.5" y="389" width="1.2" height="15.0" fill="rgb(250,50,14)" rx="2" ry="2" />
<text  x="119.52" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="14.7" y="773" width="1.2" height="15.0" fill="rgb(226,66,23)" rx="2" ry="2" />
<text  x="17.73" y="783.5" ></text>
</g>
<g >
<title>sched_change_group (1 samples, 0.10%)</title><rect x="1087.0" y="597" width="1.2" height="15.0" fill="rgb(221,170,13)" rx="2" ry="2" />
<text  x="1090.03" y="607.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.10%)</title><rect x="115.3" y="341" width="1.2" height="15.0" fill="rgb(239,152,52)" rx="2" ry="2" />
<text  x="118.34" y="351.5" ></text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="382.8" y="581" width="1.2" height="15.0" fill="rgb(224,156,7)" rx="2" ry="2" />
<text  x="385.82" y="591.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (1 samples, 0.10%)</title><rect x="1095.3" y="645" width="1.2" height="15.0" fill="rgb(231,21,9)" rx="2" ry="2" />
<text  x="1098.32" y="655.5" ></text>
</g>
<g >
<title>update_rq_clock (1 samples, 0.10%)</title><rect x="110.6" y="485" width="1.2" height="15.0" fill="rgb(214,94,18)" rx="2" ry="2" />
<text  x="113.60" y="495.5" ></text>
</g>
<g >
<title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="157.9" y="725" width="1.2" height="15.0" fill="rgb(210,2,35)" rx="2" ry="2" />
<text  x="160.94" y="735.5" ></text>
</g>
<g >
<title>generic_write_end (1 samples, 0.10%)</title><rect x="126.0" y="549" width="1.2" height="15.0" fill="rgb(226,97,9)" rx="2" ry="2" />
<text  x="128.99" y="559.5" ></text>
</g>
<g >
<title>NaClMutexUnlock (1 samples, 0.10%)</title><rect x="360.3" y="661" width="1.2" height="15.0" fill="rgb(235,159,37)" rx="2" ry="2" />
<text  x="363.33" y="671.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.10%)</title><rect x="967.5" y="581" width="1.2" height="15.0" fill="rgb(241,169,10)" rx="2" ry="2" />
<text  x="970.49" y="591.5" ></text>
</g>
<g >
<title>shmem_getpage_gfp (2 samples, 0.20%)</title><rect x="965.1" y="453" width="2.4" height="15.0" fill="rgb(214,176,33)" rx="2" ry="2" />
<text  x="968.13" y="463.5" ></text>
</g>
<g >
<title>NaClAppLoadFileAslr (3 samples, 0.30%)</title><rect x="968.7" y="709" width="3.5" height="15.0" fill="rgb(231,174,4)" rx="2" ry="2" />
<text  x="971.68" y="719.5" ></text>
</g>
<g >
<title>ApplyDfaValidator_x86_64 (3 samples, 0.30%)</title><rect x="968.7" y="661" width="3.5" height="15.0" fill="rgb(231,216,45)" rx="2" ry="2" />
<text  x="971.68" y="671.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.10%)</title><rect x="967.5" y="501" width="1.2" height="15.0" fill="rgb(248,86,23)" rx="2" ry="2" />
<text  x="970.49" y="511.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (114 samples, 11.43%)</title><rect x="224.2" y="613" width="134.9" height="15.0" fill="rgb(244,16,42)" rx="2" ry="2" />
<text  x="227.22" y="623.5" >rustposix::interf..</text>
</g>
<g >
<title>do_user_addr_fault (88 samples, 8.83%)</title><rect x="834.9" y="725" width="104.2" height="15.0" fill="rgb(209,40,15)" rx="2" ry="2" />
<text  x="837.93" y="735.5" >do_user_addr..</text>
</g>
<g >
<title>fdarray__poll (1 samples, 0.10%)</title><rect x="110.6" y="725" width="1.2" height="15.0" fill="rgb(211,178,32)" rx="2" ry="2" />
<text  x="113.60" y="735.5" ></text>
</g>
<g >
<title>__get_user_pages_remote (2 samples, 0.20%)</title><rect x="965.1" y="597" width="2.4" height="15.0" fill="rgb(249,147,24)" rx="2" ry="2" />
<text  x="968.13" y="607.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="217.1" y="85" width="1.2" height="15.0" fill="rgb(254,4,14)" rx="2" ry="2" />
<text  x="220.12" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_openat (1 samples, 0.10%)</title><rect x="972.2" y="693" width="1.2" height="15.0" fill="rgb(254,33,43)" rx="2" ry="2" />
<text  x="975.23" y="703.5" ></text>
</g>
<g >
<title>__libc_lseek (1 samples, 0.10%)</title><rect x="223.0" y="565" width="1.2" height="15.0" fill="rgb(220,187,18)" rx="2" ry="2" />
<text  x="226.04" y="575.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (3 samples, 0.30%)</title><rect x="129.5" y="757" width="3.6" height="15.0" fill="rgb(225,22,22)" rx="2" ry="2" />
<text  x="132.54" y="767.5" ></text>
</g>
<g >
<title>copy_page_from_iter (1 samples, 0.10%)</title><rect x="963.9" y="613" width="1.2" height="15.0" fill="rgb(228,61,32)" rx="2" ry="2" />
<text  x="966.94" y="623.5" ></text>
</g>
<g >
<title>ion (10 samples, 1.00%)</title><rect x="113.0" y="645" width="11.8" height="15.0" fill="rgb(244,179,12)" rx="2" ry="2" />
<text  x="115.97" y="655.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (10 samples, 1.00%)</title><rect x="903.6" y="613" width="11.8" height="15.0" fill="rgb(251,168,53)" rx="2" ry="2" />
<text  x="906.58" y="623.5" ></text>
</g>
<g >
<title>ValidateChunkAMD64 (3 samples, 0.30%)</title><rect x="968.7" y="645" width="3.5" height="15.0" fill="rgb(240,93,51)" rx="2" ry="2" />
<text  x="971.68" y="655.5" ></text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.40%)</title><rect x="371.0" y="597" width="4.7" height="15.0" fill="rgb(230,104,0)" rx="2" ry="2" />
<text  x="373.98" y="607.5" ></text>
</g>
<g >
<title>NaClCopyDynamicRegion (3 samples, 0.30%)</title><rect x="963.9" y="741" width="3.6" height="15.0" fill="rgb(234,199,25)" rx="2" ry="2" />
<text  x="966.94" y="751.5" ></text>
</g>
<g >
<title>rcu_idle_exit (1 samples, 0.10%)</title><rect x="1182.9" y="613" width="1.2" height="15.0" fill="rgb(244,127,24)" rx="2" ry="2" />
<text  x="1185.90" y="623.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.10%)</title><rect x="1100.1" y="629" width="1.1" height="15.0" fill="rgb(242,214,51)" rx="2" ry="2" />
<text  x="1103.05" y="639.5" ></text>
</g>
<g >
<title>nohz_newidle_balance (1 samples, 0.10%)</title><rect x="110.6" y="517" width="1.2" height="15.0" fill="rgb(206,31,11)" rx="2" ry="2" />
<text  x="113.60" y="527.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (8 samples, 0.80%)</title><rect x="1156.9" y="517" width="9.4" height="15.0" fill="rgb(230,1,34)" rx="2" ry="2" />
<text  x="1159.86" y="527.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (1 samples, 0.10%)</title><rect x="110.6" y="629" width="1.2" height="15.0" fill="rgb(224,168,14)" rx="2" ry="2" />
<text  x="113.60" y="639.5" ></text>
</g>
<g >
<title>lind_read (116 samples, 11.63%)</title><rect x="223.0" y="677" width="137.3" height="15.0" fill="rgb(228,224,16)" rx="2" ry="2" />
<text  x="226.04" y="687.5" >lind_read</text>
</g>
<g >
<title>hashbrown::map::make_hash (2 samples, 0.20%)</title><rect x="721.3" y="597" width="2.4" height="15.0" fill="rgb(218,193,13)" rx="2" ry="2" />
<text  x="724.31" y="607.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (34 samples, 3.41%)</title><rect x="1049.2" y="725" width="40.2" height="15.0" fill="rgb(223,4,9)" rx="2" ry="2" />
<text  x="1052.16" y="735.5" >exi..</text>
</g>
<g >
<title>evict (1 samples, 0.10%)</title><rect x="1088.2" y="469" width="1.2" height="15.0" fill="rgb(209,28,14)" rx="2" ry="2" />
<text  x="1091.21" y="479.5" ></text>
</g>
<g >
<title>arch_do_signal (34 samples, 3.41%)</title><rect x="1049.2" y="693" width="40.2" height="15.0" fill="rgb(254,20,35)" rx="2" ry="2" />
<text  x="1052.16" y="703.5" >arc..</text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.10%)</title><rect x="214.8" y="549" width="1.1" height="15.0" fill="rgb(226,192,23)" rx="2" ry="2" />
<text  x="217.75" y="559.5" ></text>
</g>
<g >
<title>iput_final (1 samples, 0.10%)</title><rect x="1088.2" y="485" width="1.2" height="15.0" fill="rgb(210,162,25)" rx="2" ry="2" />
<text  x="1091.21" y="495.5" ></text>
</g>
<g >
<title>get_page_from_freelist (34 samples, 3.41%)</title><rect x="856.2" y="613" width="40.3" height="15.0" fill="rgb(224,172,43)" rx="2" ry="2" />
<text  x="859.24" y="623.5" >get..</text>
</g>
<g >
<title>run_rebalance_domains (5 samples, 0.50%)</title><rect x="1166.3" y="501" width="5.9" height="15.0" fill="rgb(206,184,43)" rx="2" ry="2" />
<text  x="1169.33" y="511.5" ></text>
</g>
<g >
<title>rmqueue_pcplist.constprop.0 (7 samples, 0.70%)</title><rect x="888.2" y="581" width="8.3" height="15.0" fill="rgb(239,127,14)" rx="2" ry="2" />
<text  x="891.19" y="591.5" ></text>
</g>
<g >
<title>arch_cpu_idle_enter (1 samples, 0.10%)</title><rect x="1152.1" y="645" width="1.2" height="15.0" fill="rgb(207,32,19)" rx="2" ry="2" />
<text  x="1155.13" y="655.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.10%)</title><rect x="933.2" y="661" width="1.2" height="15.0" fill="rgb(244,116,20)" rx="2" ry="2" />
<text  x="936.17" y="671.5" ></text>
</g>
<g >
<title>alloc_pages_vma (39 samples, 3.91%)</title><rect x="852.7" y="645" width="46.1" height="15.0" fill="rgb(214,135,38)" rx="2" ry="2" />
<text  x="855.69" y="655.5" >allo..</text>
</g>
<g >
<title>cpuidle_idle_call (30 samples, 3.01%)</title><rect x="1153.3" y="645" width="35.5" height="15.0" fill="rgb(220,76,27)" rx="2" ry="2" />
<text  x="1156.31" y="655.5" >cpu..</text>
</g>
<g >
<title>proc_single_show (1 samples, 0.10%)</title><rect x="111.8" y="533" width="1.2" height="15.0" fill="rgb(247,61,18)" rx="2" ry="2" />
<text  x="114.79" y="543.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (6 samples, 0.60%)</title><rect x="414.8" y="517" width="7.1" height="15.0" fill="rgb(239,4,37)" rx="2" ry="2" />
<text  x="417.77" y="527.5" ></text>
</g>
<g >
<title>shmem_alloc_and_acct_page (1 samples, 0.10%)</title><rect x="173.3" y="437" width="1.2" height="15.0" fill="rgb(225,158,7)" rx="2" ry="2" />
<text  x="176.33" y="447.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (6 samples, 0.60%)</title><rect x="1166.3" y="533" width="7.1" height="15.0" fill="rgb(243,76,15)" rx="2" ry="2" />
<text  x="1169.33" y="543.5" ></text>
</g>
<g >
<title>release_pages (6 samples, 0.60%)</title><rect x="908.3" y="597" width="7.1" height="15.0" fill="rgb(239,98,25)" rx="2" ry="2" />
<text  x="911.31" y="607.5" ></text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.10%)</title><rect x="121.3" y="293" width="1.1" height="15.0" fill="rgb(215,221,49)" rx="2" ry="2" />
<text  x="124.25" y="303.5" ></text>
</g>
<g >
<title>CheckMemoryAccess (1 samples, 0.10%)</title><rect x="205.3" y="645" width="1.2" height="15.0" fill="rgb(248,59,29)" rx="2" ry="2" />
<text  x="208.29" y="655.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.10%)</title><rect x="1006.5" y="565" width="1.2" height="15.0" fill="rgb(239,41,37)" rx="2" ry="2" />
<text  x="1009.55" y="575.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.20%)</title><rect x="218.3" y="213" width="2.4" height="15.0" fill="rgb(212,86,43)" rx="2" ry="2" />
<text  x="221.30" y="223.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.10%)</title><rect x="127.2" y="757" width="1.2" height="15.0" fill="rgb(205,226,13)" rx="2" ry="2" />
<text  x="130.17" y="767.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.20%)</title><rect x="124.8" y="757" width="2.4" height="15.0" fill="rgb(211,40,20)" rx="2" ry="2" />
<text  x="127.80" y="767.5" ></text>
</g>
<g >
<title>tick_irq_enter (1 samples, 0.10%)</title><rect x="1173.4" y="565" width="1.2" height="15.0" fill="rgb(215,103,14)" rx="2" ry="2" />
<text  x="1176.43" y="575.5" ></text>
</g>
<g >
<title>MarkValidJumpTarget (1 samples, 0.10%)</title><rect x="206.5" y="645" width="1.2" height="15.0" fill="rgb(214,38,5)" rx="2" ry="2" />
<text  x="209.47" y="655.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.10%)</title><rect x="1048.0" y="709" width="1.2" height="15.0" fill="rgb(226,191,29)" rx="2" ry="2" />
<text  x="1050.97" y="719.5" ></text>
</g>
<g >
<title>__ioctl (80 samples, 8.02%)</title><rect x="15.9" y="677" width="94.7" height="15.0" fill="rgb(244,65,41)" rx="2" ry="2" />
<text  x="18.92" y="687.5" >__ioctl</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="217.1" y="69" width="1.2" height="15.0" fill="rgb(243,96,54)" rx="2" ry="2" />
<text  x="220.12" y="79.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1 samples, 0.10%)</title><rect x="114.2" y="357" width="1.1" height="15.0" fill="rgb(210,22,54)" rx="2" ry="2" />
<text  x="117.15" y="367.5" ></text>
</g>
<g >
<title>scheduler_tick (5 samples, 0.50%)</title><rect x="1160.4" y="437" width="5.9" height="15.0" fill="rgb(238,98,22)" rx="2" ry="2" />
<text  x="1163.41" y="447.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.10%)</title><rect x="1102.4" y="629" width="1.2" height="15.0" fill="rgb(236,213,52)" rx="2" ry="2" />
<text  x="1105.42" y="639.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (1 samples, 0.10%)</title><rect x="242.0" y="565" width="1.2" height="15.0" fill="rgb(248,173,0)" rx="2" ry="2" />
<text  x="244.98" y="575.5" ></text>
</g>
<g >
<title>_dl_start (1 samples, 0.10%)</title><rect x="1007.7" y="757" width="1.2" height="15.0" fill="rgb(228,140,46)" rx="2" ry="2" />
<text  x="1010.73" y="767.5" ></text>
</g>
<g >
<title>process_vm_rw_single_vec.constprop.0 (1 samples, 0.10%)</title><rect x="967.5" y="645" width="1.2" height="15.0" fill="rgb(251,123,18)" rx="2" ry="2" />
<text  x="970.49" y="655.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (1 samples, 0.10%)</title><rect x="114.2" y="341" width="1.1" height="15.0" fill="rgb(220,173,2)" rx="2" ry="2" />
<text  x="117.15" y="351.5" ></text>
</g>
<g >
<title>exc_page_fault (90 samples, 9.03%)</title><rect x="832.6" y="741" width="106.5" height="15.0" fill="rgb(236,38,27)" rx="2" ry="2" />
<text  x="835.57" y="751.5" >exc_page_fault</text>
</g>
<g >
<title>__mod_lruvec_state (1 samples, 0.10%)</title><rect x="930.8" y="629" width="1.2" height="15.0" fill="rgb(245,31,4)" rx="2" ry="2" />
<text  x="933.80" y="639.5" ></text>
</g>
<g >
<title>BitmapSetBit (1 samples, 0.10%)</title><rect x="206.5" y="629" width="1.2" height="15.0" fill="rgb(241,224,44)" rx="2" ry="2" />
<text  x="209.47" y="639.5" ></text>
</g>
<g >
<title>rcu_eqs_exit.constprop.0 (1 samples, 0.10%)</title><rect x="1148.6" y="645" width="1.2" height="15.0" fill="rgb(212,25,22)" rx="2" ry="2" />
<text  x="1151.58" y="655.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.10%)</title><rect x="1101.2" y="613" width="1.2" height="15.0" fill="rgb(223,197,28)" rx="2" ry="2" />
<text  x="1104.23" y="623.5" ></text>
</g>
<g >
<title>start_secondary (46 samples, 4.61%)</title><rect x="1097.7" y="757" width="54.4" height="15.0" fill="rgb(207,115,24)" rx="2" ry="2" />
<text  x="1100.68" y="767.5" >start..</text>
</g>
<g >
<title>do_iter_write (8 samples, 0.80%)</title><rect x="114.2" y="485" width="9.4" height="15.0" fill="rgb(214,26,1)" rx="2" ry="2" />
<text  x="117.15" y="495.5" ></text>
</g>
<g >
<title>update_load_avg (1 samples, 0.10%)</title><rect x="1087.0" y="517" width="1.2" height="15.0" fill="rgb(249,27,24)" rx="2" ry="2" />
<text  x="1090.03" y="527.5" ></text>
</g>
<g >
<title>page_remove_rmap (8 samples, 0.80%)</title><rect x="1058.6" y="517" width="9.5" height="15.0" fill="rgb(217,53,47)" rx="2" ry="2" />
<text  x="1061.63" y="527.5" ></text>
</g>
<g >
<title>try_charge (1 samples, 0.10%)</title><rect x="117.7" y="309" width="1.2" height="15.0" fill="rgb(238,5,14)" rx="2" ry="2" />
<text  x="120.70" y="319.5" ></text>
</g>
<g >
<title>mem_cgroup_charge (1 samples, 0.10%)</title><rect x="934.4" y="661" width="1.1" height="15.0" fill="rgb(245,43,26)" rx="2" ry="2" />
<text  x="937.35" y="671.5" ></text>
</g>
<g >
<title>iput.part.0 (1 samples, 0.10%)</title><rect x="1088.2" y="501" width="1.2" height="15.0" fill="rgb(223,194,17)" rx="2" ry="2" />
<text  x="1091.21" y="511.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::len (157 samples, 15.75%)</title><rect x="535.5" y="565" width="185.8" height="15.0" fill="rgb(216,61,44)" rx="2" ry="2" />
<text  x="538.50" y="575.5" >ringbuf::ring_buffer::Ri..</text>
</g>
<g >
<title>truncate_cleanup_page (1 samples, 0.10%)</title><rect x="1088.2" y="405" width="1.2" height="15.0" fill="rgb(247,167,19)" rx="2" ry="2" />
<text  x="1091.21" y="415.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (5 samples, 0.50%)</title><rect x="217.1" y="581" width="5.9" height="15.0" fill="rgb(238,68,21)" rx="2" ry="2" />
<text  x="220.12" y="591.5" ></text>
</g>
<g >
<title>unmap_vmas (32 samples, 3.21%)</title><rect x="1049.2" y="581" width="37.8" height="15.0" fill="rgb(230,107,31)" rx="2" ry="2" />
<text  x="1052.16" y="591.5" >unm..</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (1 samples, 0.10%)</title><rect x="110.6" y="597" width="1.2" height="15.0" fill="rgb(246,203,49)" rx="2" ry="2" />
<text  x="113.60" y="607.5" ></text>
</g>
<g >
<title>dispatcher (116 samples, 11.63%)</title><rect x="223.0" y="661" width="137.3" height="15.0" fill="rgb(249,67,35)" rx="2" ry="2" />
<text  x="226.04" y="671.5" >dispatcher</text>
</g>
<g >
<title>tick_sched_handle (7 samples, 0.70%)</title><rect x="1158.0" y="469" width="8.3" height="15.0" fill="rgb(247,24,43)" rx="2" ry="2" />
<text  x="1161.04" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="223.0" y="533" width="1.2" height="15.0" fill="rgb(236,86,5)" rx="2" ry="2" />
<text  x="226.04" y="543.5" ></text>
</g>
<g >
<title>_nohz_idle_balance (1 samples, 0.10%)</title><rect x="110.6" y="501" width="1.2" height="15.0" fill="rgb(216,173,47)" rx="2" ry="2" />
<text  x="113.60" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_read (1 samples, 0.10%)</title><rect x="111.8" y="613" width="1.2" height="15.0" fill="rgb(247,206,1)" rx="2" ry="2" />
<text  x="114.79" y="623.5" ></text>
</g>
<g >
<title>[sel_ldr] (478 samples, 47.94%)</title><rect x="160.3" y="773" width="565.7" height="15.0" fill="rgb(217,3,8)" rx="2" ry="2" />
<text  x="163.31" y="783.5" >[sel_ldr]</text>
</g>
<g >
<title>[anon] (26 samples, 2.61%)</title><rect x="128.4" y="773" width="30.7" height="15.0" fill="rgb(223,196,41)" rx="2" ry="2" />
<text  x="131.36" y="783.5" >[a..</text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="360.3" y="645" width="1.2" height="15.0" fill="rgb(242,34,3)" rx="2" ry="2" />
<text  x="363.33" y="655.5" ></text>
</g>
<g >
<title>vfs_write (2 samples, 0.20%)</title><rect x="124.8" y="709" width="2.4" height="15.0" fill="rgb(244,4,41)" rx="2" ry="2" />
<text  x="127.80" y="719.5" ></text>
</g>
<g >
<title>process_vm_rw_core.constprop.0 (3 samples, 0.30%)</title><rect x="963.9" y="645" width="3.6" height="15.0" fill="rgb(233,96,40)" rx="2" ry="2" />
<text  x="966.94" y="655.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (37 samples, 3.71%)</title><rect x="852.7" y="629" width="43.8" height="15.0" fill="rgb(247,140,0)" rx="2" ry="2" />
<text  x="855.69" y="639.5" >__al..</text>
</g>
<g >
<title>x86_pmu_enable (64 samples, 6.42%)</title><rect x="34.9" y="437" width="75.7" height="15.0" fill="rgb(219,139,36)" rx="2" ry="2" />
<text  x="37.85" y="447.5" >x86_pmu_..</text>
</g>
<g >
<title>process_vm_writev (1 samples, 0.10%)</title><rect x="967.5" y="741" width="1.2" height="15.0" fill="rgb(217,116,2)" rx="2" ry="2" />
<text  x="970.49" y="751.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.20%)</title><rect x="218.3" y="229" width="2.4" height="15.0" fill="rgb(207,28,54)" rx="2" ry="2" />
<text  x="221.30" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="110.6" y="677" width="1.2" height="15.0" fill="rgb(236,188,44)" rx="2" ry="2" />
<text  x="113.60" y="687.5" ></text>
</g>
<g >
<title>do_shared_fault (3 samples, 0.30%)</title><rect x="171.0" y="501" width="3.5" height="15.0" fill="rgb(227,154,35)" rx="2" ry="2" />
<text  x="173.96" y="511.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.10%)</title><rect x="14.7" y="709" width="1.2" height="15.0" fill="rgb(223,199,49)" rx="2" ry="2" />
<text  x="17.73" y="719.5" ></text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (11 samples, 1.10%)</title><rect x="902.4" y="645" width="13.0" height="15.0" fill="rgb(206,35,1)" rx="2" ry="2" />
<text  x="905.40" y="655.5" ></text>
</g>
<g >
<title>[bash] (1 samples, 0.10%)</title><rect x="11.2" y="597" width="1.2" height="15.0" fill="rgb(252,32,7)" rx="2" ry="2" />
<text  x="14.18" y="607.5" ></text>
</g>
<g >
<title>perf_event_task_tick (1 samples, 0.10%)</title><rect x="1072.8" y="277" width="1.2" height="15.0" fill="rgb(246,101,28)" rx="2" ry="2" />
<text  x="1075.83" y="287.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_slice (117 samples, 11.74%)</title><rect x="386.4" y="597" width="138.4" height="15.0" fill="rgb(243,224,38)" rx="2" ry="2" />
<text  x="389.37" y="607.5" >ringbuf::producer..</text>
</g>
<g >
<title>__irqentry_text_end (1 samples, 0.10%)</title><rect x="830.2" y="757" width="1.2" height="15.0" fill="rgb(226,17,5)" rx="2" ry="2" />
<text  x="833.20" y="767.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_slice (21 samples, 2.11%)</title><rect x="133.1" y="757" width="24.8" height="15.0" fill="rgb(237,142,42)" rx="2" ry="2" />
<text  x="136.09" y="767.5" >r..</text>
</g>
<g >
<title>ctx_resched (65 samples, 6.52%)</title><rect x="33.7" y="453" width="76.9" height="15.0" fill="rgb(215,9,4)" rx="2" ry="2" />
<text  x="36.67" y="463.5" >ctx_resc..</text>
</g>
<g >
<title>std::sys::unix::rwlock::RWLock::read_unlock (1 samples, 0.10%)</title><rect x="157.9" y="693" width="1.2" height="15.0" fill="rgb(245,123,43)" rx="2" ry="2" />
<text  x="160.94" y="703.5" ></text>
</g>
<g >
<title>fault_in_kernel_space (1 samples, 0.10%)</title><rect x="939.1" y="741" width="1.2" height="15.0" fill="rgb(230,71,7)" rx="2" ry="2" />
<text  x="942.09" y="751.5" ></text>
</g>
<g >
<title>asm_common_interrupt (2 samples, 0.20%)</title><rect x="1100.1" y="661" width="2.3" height="15.0" fill="rgb(249,189,24)" rx="2" ry="2" />
<text  x="1103.05" y="671.5" ></text>
</g>
<g >
<title>rmqueue (8 samples, 0.80%)</title><rect x="887.0" y="597" width="9.5" height="15.0" fill="rgb(207,80,45)" rx="2" ry="2" />
<text  x="890.01" y="607.5" ></text>
</g>
<g >
<title>exit_mm (1 samples, 0.10%)</title><rect x="1048.0" y="693" width="1.2" height="15.0" fill="rgb(215,49,29)" rx="2" ry="2" />
<text  x="1050.97" y="703.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.40%)</title><rect x="218.3" y="293" width="4.7" height="15.0" fill="rgb(251,117,52)" rx="2" ry="2" />
<text  x="221.30" y="303.5" ></text>
</g>
<g >
<title>ovl_write_iter (8 samples, 0.80%)</title><rect x="114.2" y="517" width="9.4" height="15.0" fill="rgb(225,88,25)" rx="2" ry="2" />
<text  x="117.15" y="527.5" ></text>
</g>
<g >
<title>ApplyDfaValidator_x86_64 (31 samples, 3.11%)</title><rect x="174.5" y="677" width="36.7" height="15.0" fill="rgb(237,192,41)" rx="2" ry="2" />
<text  x="177.51" y="687.5" >App..</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.10%)</title><rect x="218.3" y="149" width="1.2" height="15.0" fill="rgb(235,147,42)" rx="2" ry="2" />
<text  x="221.30" y="159.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.20%)</title><rect x="220.7" y="197" width="2.3" height="15.0" fill="rgb(246,192,25)" rx="2" ry="2" />
<text  x="223.67" y="207.5" ></text>
</g>
<g >
<title>[unknown] (92 samples, 9.23%)</title><rect x="15.9" y="773" width="108.9" height="15.0" fill="rgb(251,99,44)" rx="2" ry="2" />
<text  x="18.92" y="783.5" >[unknown]</text>
</g>
<g >
<title>perf (94 samples, 9.43%)</title><rect x="15.9" y="789" width="111.3" height="15.0" fill="rgb(233,199,30)" rx="2" ry="2" />
<text  x="18.92" y="799.5" >perf</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.10%)</title><rect x="214.8" y="645" width="1.1" height="15.0" fill="rgb(244,99,48)" rx="2" ry="2" />
<text  x="217.75" y="655.5" ></text>
</g>
<g >
<title>NaClSysRead (117 samples, 11.74%)</title><rect x="223.0" y="725" width="138.5" height="15.0" fill="rgb(222,176,3)" rx="2" ry="2" />
<text  x="226.04" y="735.5" >NaClSysRead</text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.10%)</title><rect x="124.8" y="485" width="1.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="127.80" y="495.5" ></text>
</g>
<g >
<title>exit_mm (32 samples, 3.21%)</title><rect x="1049.2" y="629" width="37.8" height="15.0" fill="rgb(240,41,4)" rx="2" ry="2" />
<text  x="1052.16" y="639.5" >exi..</text>
</g>
<g >
<title>__update_load_avg_cfs_rq (1 samples, 0.10%)</title><rect x="1169.9" y="453" width="1.2" height="15.0" fill="rgb(225,96,1)" rx="2" ry="2" />
<text  x="1172.88" y="463.5" ></text>
</g>
<g >
<title>__GI___pthread_rwlock_rdlock (1 samples, 0.10%)</title><rect x="723.7" y="597" width="1.2" height="15.0" fill="rgb(238,227,43)" rx="2" ry="2" />
<text  x="726.68" y="607.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (58 samples, 5.82%)</title><rect x="443.2" y="517" width="68.6" height="15.0" fill="rgb(245,176,1)" rx="2" ry="2" />
<text  x="446.18" y="527.5" >__memmo..</text>
</g>
<g >
<title>free_unref_page_list (8 samples, 0.80%)</title><rect x="1075.2" y="469" width="9.5" height="15.0" fill="rgb(244,12,26)" rx="2" ry="2" />
<text  x="1078.20" y="479.5" ></text>
</g>
<g >
<title>rcu_eqs_exit.constprop.0 (1 samples, 0.10%)</title><rect x="1181.7" y="581" width="1.2" height="15.0" fill="rgb(254,156,8)" rx="2" ry="2" />
<text  x="1184.72" y="591.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.10%)</title><rect x="218.3" y="133" width="1.2" height="15.0" fill="rgb(243,174,44)" rx="2" ry="2" />
<text  x="221.30" y="143.5" ></text>
</g>
<g >
<title>mutex_unlock (3 samples, 0.30%)</title><rect x="17.1" y="581" width="3.6" height="15.0" fill="rgb(240,20,4)" rx="2" ry="2" />
<text  x="20.10" y="591.5" ></text>
</g>
<g >
<title>perf_event__synthesize_comm (1 samples, 0.10%)</title><rect x="111.8" y="725" width="1.2" height="15.0" fill="rgb(224,163,52)" rx="2" ry="2" />
<text  x="114.79" y="735.5" ></text>
</g>
<g >
<title>ksys_write (2 samples, 0.20%)</title><rect x="124.8" y="725" width="2.4" height="15.0" fill="rgb(225,229,47)" rx="2" ry="2" />
<text  x="127.80" y="735.5" ></text>
</g>
<g >
<title>__x64_sys_poll (1 samples, 0.10%)</title><rect x="1094.1" y="741" width="1.2" height="15.0" fill="rgb(209,72,36)" rx="2" ry="2" />
<text  x="1097.13" y="751.5" ></text>
</g>
<g >
<title>prep_new_page (1 samples, 0.10%)</title><rect x="966.3" y="357" width="1.2" height="15.0" fill="rgb(236,208,46)" rx="2" ry="2" />
<text  x="969.31" y="367.5" ></text>
</g>
<g >
<title>page_poisoning_enabled (1 samples, 0.10%)</title><rect x="173.3" y="341" width="1.2" height="15.0" fill="rgb(225,84,28)" rx="2" ry="2" />
<text  x="176.33" y="351.5" ></text>
</g>
<g >
<title>copy_page_from_iter_iovec (1 samples, 0.10%)</title><rect x="963.9" y="597" width="1.2" height="15.0" fill="rgb(243,34,13)" rx="2" ry="2" />
<text  x="966.94" y="607.5" ></text>
</g>
<g >
<title>cpuidle_governor_latency_req (1 samples, 0.10%)</title><rect x="1184.1" y="597" width="1.2" height="15.0" fill="rgb(222,215,9)" rx="2" ry="2" />
<text  x="1187.08" y="607.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.10%)</title><rect x="1149.8" y="709" width="1.1" height="15.0" fill="rgb(241,42,26)" rx="2" ry="2" />
<text  x="1152.76" y="719.5" ></text>
</g>
<g >
<title>read (1 samples, 0.10%)</title><rect x="111.8" y="677" width="1.2" height="15.0" fill="rgb(232,220,11)" rx="2" ry="2" />
<text  x="114.79" y="687.5" ></text>
</g>
<g >
<title>generic_update_time (1 samples, 0.10%)</title><rect x="114.2" y="389" width="1.1" height="15.0" fill="rgb(253,212,34)" rx="2" ry="2" />
<text  x="117.15" y="399.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (3 samples, 0.30%)</title><rect x="117.7" y="341" width="3.6" height="15.0" fill="rgb(254,67,43)" rx="2" ry="2" />
<text  x="120.70" y="351.5" ></text>
</g>
<g >
<title>lock_page_memcg (1 samples, 0.10%)</title><rect x="1066.9" y="501" width="1.2" height="15.0" fill="rgb(223,61,1)" rx="2" ry="2" />
<text  x="1069.91" y="511.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (80 samples, 8.02%)</title><rect x="15.9" y="693" width="94.7" height="15.0" fill="rgb(250,115,26)" rx="2" ry="2" />
<text  x="18.92" y="703.5" >perf_evsel_..</text>
</g>
<g >
<title>common_interrupt (2 samples, 0.20%)</title><rect x="1100.1" y="645" width="2.3" height="15.0" fill="rgb(236,96,27)" rx="2" ry="2" />
<text  x="1103.05" y="655.5" ></text>
</g>
<g >
<title>NaClAddrSpSquattingThreadIfStartThread (1 samples, 0.10%)</title><rect x="1006.5" y="645" width="1.2" height="15.0" fill="rgb(221,125,31)" rx="2" ry="2" />
<text  x="1009.55" y="655.5" ></text>
</g>
<g >
<title>free_pcp_prepare (1 samples, 0.10%)</title><rect x="1075.2" y="453" width="1.2" height="15.0" fill="rgb(233,26,26)" rx="2" ry="2" />
<text  x="1078.20" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (4 samples, 0.40%)</title><rect x="169.8" y="629" width="4.7" height="15.0" fill="rgb(221,15,15)" rx="2" ry="2" />
<text  x="172.78" y="639.5" ></text>
</g>
<g >
<title>shmem_alloc_and_acct_page (1 samples, 0.10%)</title><rect x="966.3" y="437" width="1.2" height="15.0" fill="rgb(227,98,19)" rx="2" ry="2" />
<text  x="969.31" y="447.5" ></text>
</g>
<g >
<title>sync_regs (1 samples, 0.10%)</title><rect x="215.9" y="693" width="1.2" height="15.0" fill="rgb(254,26,22)" rx="2" ry="2" />
<text  x="218.94" y="703.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.10%)</title><rect x="217.1" y="117" width="1.2" height="15.0" fill="rgb(228,57,24)" rx="2" ry="2" />
<text  x="220.12" y="127.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.10%)</title><rect x="214.8" y="629" width="1.1" height="15.0" fill="rgb(228,90,38)" rx="2" ry="2" />
<text  x="217.75" y="639.5" ></text>
</g>
<g >
<title>process_vm_rw_core.constprop.0 (1 samples, 0.10%)</title><rect x="967.5" y="661" width="1.2" height="15.0" fill="rgb(239,200,36)" rx="2" ry="2" />
<text  x="970.49" y="671.5" ></text>
</g>
<g >
<title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.20%)</title><rect x="721.3" y="533" width="2.4" height="15.0" fill="rgb(210,18,51)" rx="2" ry="2" />
<text  x="724.31" y="543.5" ></text>
</g>
<g >
<title>do_sys_openat2 (1 samples, 0.10%)</title><rect x="972.2" y="677" width="1.2" height="15.0" fill="rgb(254,47,21)" rx="2" ry="2" />
<text  x="975.23" y="687.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (5 samples, 0.50%)</title><rect x="217.1" y="677" width="5.9" height="15.0" fill="rgb(215,118,2)" rx="2" ry="2" />
<text  x="220.12" y="687.5" ></text>
</g>
<g >
<title>shmem_alloc_page (1 samples, 0.10%)</title><rect x="966.3" y="421" width="1.2" height="15.0" fill="rgb(248,46,28)" rx="2" ry="2" />
<text  x="969.31" y="431.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.10%)</title><rect x="217.1" y="53" width="1.2" height="15.0" fill="rgb(237,225,27)" rx="2" ry="2" />
<text  x="220.12" y="63.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (1 samples, 0.10%)</title><rect x="161.5" y="693" width="1.2" height="15.0" fill="rgb(211,21,17)" rx="2" ry="2" />
<text  x="164.49" y="703.5" ></text>
</g>
<g >
<title>all (997 samples, 100%)</title><rect x="10.0" y="805" width="1180.0" height="15.0" fill="rgb(210,195,18)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.20%)</title><rect x="220.7" y="165" width="2.3" height="15.0" fill="rgb(243,11,50)" rx="2" ry="2" />
<text  x="223.67" y="175.5" ></text>
</g>
<g >
<title>shmem_fault (2 samples, 0.20%)</title><rect x="965.1" y="469" width="2.4" height="15.0" fill="rgb(232,69,41)" rx="2" ry="2" />
<text  x="968.13" y="479.5" ></text>
</g>
<g >
<title>exit_mm (1 samples, 0.10%)</title><rect x="14.7" y="693" width="1.2" height="15.0" fill="rgb(208,151,23)" rx="2" ry="2" />
<text  x="17.73" y="703.5" ></text>
</g>
<g >
<title>NaClLogUnlock (1 samples, 0.10%)</title><rect x="360.3" y="693" width="1.2" height="15.0" fill="rgb(248,9,50)" rx="2" ry="2" />
<text  x="363.33" y="703.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (1 samples, 0.10%)</title><rect x="930.8" y="613" width="1.2" height="15.0" fill="rgb(237,168,8)" rx="2" ry="2" />
<text  x="933.80" y="623.5" ></text>
</g>
<g >
<title>__mod_node_page_state (1 samples, 0.10%)</title><rect x="1065.7" y="501" width="1.2" height="15.0" fill="rgb(241,6,5)" rx="2" ry="2" />
<text  x="1068.73" y="511.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 1.10%)</title><rect x="973.4" y="757" width="13.0" height="15.0" fill="rgb(220,201,13)" rx="2" ry="2" />
<text  x="976.41" y="767.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::remaining (166 samples, 16.65%)</title><rect x="524.8" y="597" width="196.5" height="15.0" fill="rgb(219,224,22)" rx="2" ry="2" />
<text  x="527.84" y="607.5" >ringbuf::producer::Produc..</text>
</g>
<g >
<title>rmqueue_bulk.constprop.0 (4 samples, 0.40%)</title><rect x="891.7" y="565" width="4.8" height="15.0" fill="rgb(240,56,5)" rx="2" ry="2" />
<text  x="894.75" y="575.5" ></text>
</g>
<g >
<title>std::sys_common::rwlock::MovableRWLock::read_unlock (1 samples, 0.10%)</title><rect x="157.9" y="709" width="1.2" height="15.0" fill="rgb(210,23,45)" rx="2" ry="2" />
<text  x="160.94" y="719.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.10%)</title><rect x="247.9" y="517" width="1.2" height="15.0" fill="rgb(212,38,13)" rx="2" ry="2" />
<text  x="250.89" y="527.5" ></text>
</g>
<g >
<title>__slab_alloc (1 samples, 0.10%)</title><rect x="124.8" y="469" width="1.2" height="15.0" fill="rgb(211,131,47)" rx="2" ry="2" />
<text  x="127.80" y="479.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.10%)</title><rect x="217.1" y="133" width="1.2" height="15.0" fill="rgb(205,7,4)" rx="2" ry="2" />
<text  x="220.12" y="143.5" ></text>
</g>
<g >
<title>irq_exit_rcu (6 samples, 0.60%)</title><rect x="1166.3" y="565" width="7.1" height="15.0" fill="rgb(231,3,20)" rx="2" ry="2" />
<text  x="1169.33" y="575.5" ></text>
</g>
<g >
<title>NaClTextMapWrapper (4 samples, 0.40%)</title><rect x="169.8" y="693" width="4.7" height="15.0" fill="rgb(245,22,11)" rx="2" ry="2" />
<text  x="172.78" y="703.5" ></text>
</g>
<g >
<title>tick_nohz_idle_exit (1 samples, 0.10%)</title><rect x="1150.9" y="709" width="1.2" height="15.0" fill="rgb(243,95,23)" rx="2" ry="2" />
<text  x="1153.94" y="719.5" ></text>
</g>
<g >
<title>sh_set_lines_and_columns (1 samples, 0.10%)</title><rect x="11.2" y="645" width="1.2" height="15.0" fill="rgb(214,122,9)" rx="2" ry="2" />
<text  x="14.18" y="655.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (3 samples, 0.30%)</title><rect x="1062.2" y="501" width="3.5" height="15.0" fill="rgb(249,73,43)" rx="2" ry="2" />
<text  x="1065.18" y="511.5" ></text>
</g>
<g >
<title>rcu_idle_exit (1 samples, 0.10%)</title><rect x="1181.7" y="597" width="1.2" height="15.0" fill="rgb(254,43,37)" rx="2" ry="2" />
<text  x="1184.72" y="607.5" ></text>
</g>
<g >
<title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.20%)</title><rect x="721.3" y="549" width="2.4" height="15.0" fill="rgb(211,0,46)" rx="2" ry="2" />
<text  x="724.31" y="559.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.10%)</title><rect x="173.3" y="389" width="1.2" height="15.0" fill="rgb(226,49,48)" rx="2" ry="2" />
<text  x="176.33" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="1095.3" y="661" width="1.2" height="15.0" fill="rgb(238,188,17)" rx="2" ry="2" />
<text  x="1098.32" y="671.5" ></text>
</g>
<g >
<title>vfs_iter_write (2 samples, 0.20%)</title><rect x="124.8" y="661" width="2.4" height="15.0" fill="rgb(243,152,15)" rx="2" ry="2" />
<text  x="127.80" y="671.5" ></text>
</g>
<g >
<title>__get_user_pages_remote (1 samples, 0.10%)</title><rect x="967.5" y="613" width="1.2" height="15.0" fill="rgb(230,214,15)" rx="2" ry="2" />
<text  x="970.49" y="623.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (1 samples, 0.10%)</title><rect x="214.8" y="533" width="1.1" height="15.0" fill="rgb(244,101,51)" rx="2" ry="2" />
<text  x="217.75" y="543.5" ></text>
</g>
<g >
<title>__pthread_create_2_1 (1 samples, 0.10%)</title><rect x="1006.5" y="581" width="1.2" height="15.0" fill="rgb(219,106,10)" rx="2" ry="2" />
<text  x="1009.55" y="591.5" ></text>
</g>
<g >
<title>__cancel_dirty_page (1 samples, 0.10%)</title><rect x="1088.2" y="389" width="1.2" height="15.0" fill="rgb(227,137,27)" rx="2" ry="2" />
<text  x="1091.21" y="399.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.10%)</title><rect x="121.3" y="325" width="1.1" height="15.0" fill="rgb(228,10,50)" rx="2" ry="2" />
<text  x="124.25" y="335.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (8 samples, 0.80%)</title><rect x="1156.9" y="533" width="9.4" height="15.0" fill="rgb(217,148,6)" rx="2" ry="2" />
<text  x="1159.86" y="543.5" ></text>
</g>
<g >
<title>filemap_map_pages (1 samples, 0.10%)</title><rect x="933.2" y="629" width="1.2" height="15.0" fill="rgb(223,3,46)" rx="2" ry="2" />
<text  x="936.17" y="639.5" ></text>
</g>
<g >
<title>__libc_write (10 samples, 1.00%)</title><rect x="113.0" y="629" width="11.8" height="15.0" fill="rgb(228,136,11)" rx="2" ry="2" />
<text  x="115.97" y="639.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.10%)</title><rect x="1102.4" y="597" width="1.2" height="15.0" fill="rgb(213,81,6)" rx="2" ry="2" />
<text  x="1105.42" y="607.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.10%)</title><rect x="217.1" y="213" width="1.2" height="15.0" fill="rgb(223,218,38)" rx="2" ry="2" />
<text  x="220.12" y="223.5" ></text>
</g>
<g >
<title>execute_command (2 samples, 0.20%)</title><rect x="10.0" y="709" width="2.4" height="15.0" fill="rgb(242,120,50)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (64 samples, 6.42%)</title><rect x="34.9" y="421" width="75.7" height="15.0" fill="rgb(235,201,28)" rx="2" ry="2" />
<text  x="37.85" y="431.5" >intel_pm..</text>
</g>
<g >
<title>NaClThreadInterfaceStartThread (1 samples, 0.10%)</title><rect x="1006.5" y="629" width="1.2" height="15.0" fill="rgb(242,27,46)" rx="2" ry="2" />
<text  x="1009.55" y="639.5" ></text>
</g>
<g >
<title>__libc_start_main (3 samples, 0.30%)</title><rect x="10.0" y="757" width="3.6" height="15.0" fill="rgb(205,104,28)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>NaClTextDyncodeCreate (41 samples, 4.11%)</title><rect x="162.7" y="709" width="48.5" height="15.0" fill="rgb(242,215,51)" rx="2" ry="2" />
<text  x="165.68" y="719.5" >NaCl..</text>
</g>
<g >
<title>alloc_page_buffers (1 samples, 0.10%)</title><rect x="116.5" y="357" width="1.2" height="15.0" fill="rgb(215,203,18)" rx="2" ry="2" />
<text  x="119.52" y="367.5" ></text>
</g>
<g >
<title>shmem_fault (3 samples, 0.30%)</title><rect x="171.0" y="469" width="3.5" height="15.0" fill="rgb(207,17,14)" rx="2" ry="2" />
<text  x="173.96" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_poll (1 samples, 0.10%)</title><rect x="110.6" y="661" width="1.2" height="15.0" fill="rgb(235,143,52)" rx="2" ry="2" />
<text  x="113.60" y="671.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (1 samples, 0.10%)</title><rect x="933.2" y="581" width="1.2" height="15.0" fill="rgb(234,214,35)" rx="2" ry="2" />
<text  x="936.17" y="591.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.10%)</title><rect x="855.1" y="613" width="1.1" height="15.0" fill="rgb(209,222,1)" rx="2" ry="2" />
<text  x="858.06" y="623.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.20%)</title><rect x="220.7" y="133" width="2.3" height="15.0" fill="rgb(237,62,48)" rx="2" ry="2" />
<text  x="223.67" y="143.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.10%)</title><rect x="217.1" y="293" width="1.2" height="15.0" fill="rgb(217,200,5)" rx="2" ry="2" />
<text  x="220.12" y="303.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.10%)</title><rect x="13.6" y="773" width="1.1" height="15.0" fill="rgb(210,4,45)" rx="2" ry="2" />
<text  x="16.55" y="783.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;ringbuf::producer::Producer&lt;u8&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="1005.4" y="741" width="1.1" height="15.0" fill="rgb(229,154,38)" rx="2" ry="2" />
<text  x="1008.37" y="751.5" ></text>
</g>
<g >
<title>ksys_write (9 samples, 0.90%)</title><rect x="113.0" y="565" width="10.6" height="15.0" fill="rgb(241,125,0)" rx="2" ry="2" />
<text  x="115.97" y="575.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (1 samples, 0.10%)</title><rect x="1094.1" y="677" width="1.2" height="15.0" fill="rgb(241,202,43)" rx="2" ry="2" />
<text  x="1097.13" y="687.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (80 samples, 8.02%)</title><rect x="15.9" y="629" width="94.7" height="15.0" fill="rgb(231,60,11)" rx="2" ry="2" />
<text  x="18.92" y="639.5" >__x64_sys_i..</text>
</g>
<g >
<title>discard_unwind_frame (1 samples, 0.10%)</title><rect x="10.0" y="693" width="1.2" height="15.0" fill="rgb(232,76,12)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>NaClSysReadDecoder (117 samples, 11.74%)</title><rect x="223.0" y="741" width="138.5" height="15.0" fill="rgb(250,124,2)" rx="2" ry="2" />
<text  x="226.04" y="751.5" >NaClSysReadDecoder</text>
</g>
</g>
</svg>
