<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="806.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="789" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="789" > </text>
<g id="frames">
<g >
<title>std::sys_common::rwlock::MovableRWLock::write (1 samples, 0.27%)</title><rect x="258.3" y="549" width="3.2" height="15.0" fill="rgb(221,39,20)" rx="2" ry="2" />
<text  x="261.25" y="559.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.27%)</title><rect x="229.2" y="437" width="3.3" height="15.0" fill="rgb(243,218,47)" rx="2" ry="2" />
<text  x="232.23" y="447.5" ></text>
</g>
<g >
<title>tick_nohz_idle_enter (3 samples, 0.82%)</title><rect x="1180.3" y="597" width="9.7" height="15.0" fill="rgb(229,16,53)" rx="2" ry="2" />
<text  x="1183.33" y="607.5" ></text>
</g>
<g >
<title>menu_update (1 samples, 0.27%)</title><rect x="1138.4" y="549" width="3.2" height="15.0" fill="rgb(210,201,8)" rx="2" ry="2" />
<text  x="1141.42" y="559.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.27%)</title><rect x="229.2" y="533" width="3.3" height="15.0" fill="rgb(248,173,49)" rx="2" ry="2" />
<text  x="232.23" y="543.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.27%)</title><rect x="1144.9" y="517" width="3.2" height="15.0" fill="rgb(214,101,42)" rx="2" ry="2" />
<text  x="1147.86" y="527.5" ></text>
</g>
<g >
<title>NaClDescUnref (1 samples, 0.27%)</title><rect x="809.6" y="661" width="3.2" height="15.0" fill="rgb(214,96,20)" rx="2" ry="2" />
<text  x="812.56" y="671.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.27%)</title><rect x="816.0" y="245" width="3.2" height="15.0" fill="rgb(216,81,20)" rx="2" ry="2" />
<text  x="819.01" y="255.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.27%)</title><rect x="816.0" y="533" width="3.2" height="15.0" fill="rgb(205,226,33)" rx="2" ry="2" />
<text  x="819.01" y="543.5" ></text>
</g>
<g >
<title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.55%)</title><rect x="251.8" y="565" width="6.5" height="15.0" fill="rgb(252,124,35)" rx="2" ry="2" />
<text  x="254.80" y="575.5" ></text>
</g>
<g >
<title>new_sync_read (6 samples, 1.64%)</title><rect x="232.5" y="405" width="19.3" height="15.0" fill="rgb(209,175,4)" rx="2" ry="2" />
<text  x="235.46" y="415.5" ></text>
</g>
<g >
<title>rcu_idle_exit (3 samples, 0.82%)</title><rect x="1035.2" y="613" width="9.7" height="15.0" fill="rgb(233,191,13)" rx="2" ry="2" />
<text  x="1038.25" y="623.5" ></text>
</g>
<g >
<title>rcu_dynticks_eqs_exit (3 samples, 0.82%)</title><rect x="1035.2" y="597" width="9.7" height="15.0" fill="rgb(233,104,4)" rx="2" ry="2" />
<text  x="1038.25" y="607.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.27%)</title><rect x="229.2" y="629" width="3.3" height="15.0" fill="rgb(213,32,33)" rx="2" ry="2" />
<text  x="232.23" y="639.5" ></text>
</g>
<g >
<title>ApplyDfaValidator_x86_64 (1 samples, 0.27%)</title><rect x="226.0" y="629" width="3.2" height="15.0" fill="rgb(248,76,4)" rx="2" ry="2" />
<text  x="229.01" y="639.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.27%)</title><rect x="229.2" y="357" width="3.3" height="15.0" fill="rgb(241,114,2)" rx="2" ry="2" />
<text  x="232.23" y="367.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (47 samples, 12.84%)</title><rect x="893.4" y="629" width="151.5" height="15.0" fill="rgb(229,33,31)" rx="2" ry="2" />
<text  x="896.39" y="639.5" >cpuidle_enter_state</text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.27%)</title><rect x="1067.5" y="565" width="3.2" height="15.0" fill="rgb(240,162,9)" rx="2" ry="2" />
<text  x="1070.49" y="575.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.27%)</title><rect x="893.4" y="581" width="3.2" height="15.0" fill="rgb(237,44,40)" rx="2" ry="2" />
<text  x="896.39" y="591.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.27%)</title><rect x="809.6" y="213" width="3.2" height="15.0" fill="rgb(227,133,8)" rx="2" ry="2" />
<text  x="812.56" y="223.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreateDecoder (1 samples, 0.27%)</title><rect x="226.0" y="693" width="3.2" height="15.0" fill="rgb(222,219,28)" rx="2" ry="2" />
<text  x="229.01" y="703.5" ></text>
</g>
<g >
<title>smp_call_function_single_async (1 samples, 0.27%)</title><rect x="1177.1" y="501" width="3.2" height="15.0" fill="rgb(239,74,50)" rx="2" ry="2" />
<text  x="1180.10" y="511.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.27%)</title><rect x="229.2" y="501" width="3.3" height="15.0" fill="rgb(238,205,22)" rx="2" ry="2" />
<text  x="232.23" y="511.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.27%)</title><rect x="1077.2" y="645" width="3.2" height="15.0" fill="rgb(220,3,11)" rx="2" ry="2" />
<text  x="1080.16" y="655.5" ></text>
</g>
<g >
<title>rcu_idle_exit (1 samples, 0.27%)</title><rect x="1135.2" y="549" width="3.2" height="15.0" fill="rgb(243,129,2)" rx="2" ry="2" />
<text  x="1138.19" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (64 samples, 17.49%)</title><rect x="10.0" y="581" width="206.3" height="15.0" fill="rgb(236,226,15)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >__x64_sys_ioctl</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.27%)</title><rect x="816.0" y="581" width="3.2" height="15.0" fill="rgb(253,210,28)" rx="2" ry="2" />
<text  x="819.01" y="591.5" ></text>
</g>
<g >
<title>__perf_event_enable (64 samples, 17.49%)</title><rect x="10.0" y="421" width="206.3" height="15.0" fill="rgb(213,75,43)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >__perf_event_enable</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.55%)</title><rect x="251.8" y="533" width="6.5" height="15.0" fill="rgb(235,165,29)" rx="2" ry="2" />
<text  x="254.80" y="543.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.27%)</title><rect x="1067.5" y="581" width="3.2" height="15.0" fill="rgb(233,56,43)" rx="2" ry="2" />
<text  x="1070.49" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.27%)</title><rect x="886.9" y="709" width="3.3" height="15.0" fill="rgb(235,210,51)" rx="2" ry="2" />
<text  x="889.94" y="719.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (6 samples, 1.64%)</title><rect x="232.5" y="325" width="19.3" height="15.0" fill="rgb(211,77,16)" rx="2" ry="2" />
<text  x="235.46" y="335.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.27%)</title><rect x="816.0" y="517" width="3.2" height="15.0" fill="rgb(249,45,12)" rx="2" ry="2" />
<text  x="819.01" y="527.5" ></text>
</g>
<g >
<title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.55%)</title><rect x="251.8" y="485" width="6.5" height="15.0" fill="rgb(225,106,48)" rx="2" ry="2" />
<text  x="254.80" y="495.5" ></text>
</g>
<g >
<title>NaClSysClose (1 samples, 0.27%)</title><rect x="809.6" y="677" width="3.2" height="15.0" fill="rgb(221,73,13)" rx="2" ry="2" />
<text  x="812.56" y="687.5" ></text>
</g>
<g >
<title>rcu_idle_enter (1 samples, 0.27%)</title><rect x="1032.0" y="613" width="3.2" height="15.0" fill="rgb(228,34,50)" rx="2" ry="2" />
<text  x="1035.02" y="623.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (64 samples, 17.49%)</title><rect x="10.0" y="661" width="206.3" height="15.0" fill="rgb(221,144,13)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >perf_evsel__enable_cpu</text>
</g>
<g >
<title>_perf_ioctl (64 samples, 17.49%)</title><rect x="10.0" y="549" width="206.3" height="15.0" fill="rgb(231,12,28)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >_perf_ioctl</text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.27%)</title><rect x="809.6" y="181" width="3.2" height="15.0" fill="rgb(225,9,38)" rx="2" ry="2" />
<text  x="812.56" y="191.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.27%)</title><rect x="809.6" y="533" width="3.2" height="15.0" fill="rgb(241,57,30)" rx="2" ry="2" />
<text  x="812.56" y="543.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.27%)</title><rect x="229.2" y="421" width="3.3" height="15.0" fill="rgb(227,10,26)" rx="2" ry="2" />
<text  x="232.23" y="431.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.27%)</title><rect x="816.0" y="357" width="3.2" height="15.0" fill="rgb(214,8,4)" rx="2" ry="2" />
<text  x="819.01" y="367.5" ></text>
</g>
<g >
<title>llist_add_batch (1 samples, 0.27%)</title><rect x="1064.3" y="549" width="3.2" height="15.0" fill="rgb(218,40,44)" rx="2" ry="2" />
<text  x="1067.26" y="559.5" ></text>
</g>
<g >
<title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.27%)</title><rect x="806.3" y="709" width="3.3" height="15.0" fill="rgb(247,229,23)" rx="2" ry="2" />
<text  x="809.34" y="719.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (19 samples, 5.19%)</title><rect x="1090.1" y="597" width="61.2" height="15.0" fill="rgb(216,20,39)" rx="2" ry="2" />
<text  x="1093.05" y="607.5" >cpuidl..</text>
</g>
<g >
<title>intel_pmu_enable_all (64 samples, 17.49%)</title><rect x="10.0" y="373" width="206.3" height="15.0" fill="rgb(213,172,41)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.27%)</title><rect x="809.6" y="405" width="3.2" height="15.0" fill="rgb(220,95,20)" rx="2" ry="2" />
<text  x="812.56" y="415.5" ></text>
</g>
<g >
<title>___snprintf_chk (1 samples, 0.27%)</title><rect x="216.3" y="613" width="3.3" height="15.0" fill="rgb(242,41,29)" rx="2" ry="2" />
<text  x="219.34" y="623.5" ></text>
</g>
<g >
<title>pick_next_task_fair (2 samples, 0.55%)</title><rect x="1061.0" y="629" width="6.5" height="15.0" fill="rgb(226,192,21)" rx="2" ry="2" />
<text  x="1064.04" y="639.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (1 samples, 0.27%)</title><rect x="806.3" y="661" width="3.3" height="15.0" fill="rgb(217,54,15)" rx="2" ry="2" />
<text  x="809.34" y="671.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (2 samples, 0.55%)</title><rect x="261.5" y="501" width="6.4" height="15.0" fill="rgb(217,204,27)" rx="2" ry="2" />
<text  x="264.48" y="511.5" ></text>
</g>
<g >
<title>std::sync::rwlock::RwLock&lt;T&gt;::write (1 samples, 0.27%)</title><rect x="222.8" y="709" width="3.2" height="15.0" fill="rgb(237,168,38)" rx="2" ry="2" />
<text  x="225.79" y="719.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.27%)</title><rect x="816.0" y="469" width="3.2" height="15.0" fill="rgb(231,97,40)" rx="2" ry="2" />
<text  x="819.01" y="479.5" ></text>
</g>
<g >
<title>record_times (1 samples, 0.27%)</title><rect x="1067.5" y="597" width="3.2" height="15.0" fill="rgb(250,158,13)" rx="2" ry="2" />
<text  x="1070.49" y="607.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.27%)</title><rect x="1048.1" y="581" width="3.3" height="15.0" fill="rgb(214,222,47)" rx="2" ry="2" />
<text  x="1051.14" y="591.5" ></text>
</g>
<g >
<title>NaClSysRead (11 samples, 3.01%)</title><rect x="232.5" y="677" width="35.4" height="15.0" fill="rgb(224,82,46)" rx="2" ry="2" />
<text  x="235.46" y="687.5" >NaC..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.27%)</title><rect x="229.2" y="373" width="3.3" height="15.0" fill="rgb(218,9,52)" rx="2" ry="2" />
<text  x="232.23" y="383.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.27%)</title><rect x="229.2" y="453" width="3.3" height="15.0" fill="rgb(207,64,16)" rx="2" ry="2" />
<text  x="232.23" y="463.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.27%)</title><rect x="816.0" y="645" width="3.2" height="15.0" fill="rgb(222,174,29)" rx="2" ry="2" />
<text  x="819.01" y="655.5" ></text>
</g>
<g >
<title>psi_group_change (1 samples, 0.27%)</title><rect x="1067.5" y="613" width="3.2" height="15.0" fill="rgb(222,175,18)" rx="2" ry="2" />
<text  x="1070.49" y="623.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.27%)</title><rect x="1070.7" y="645" width="3.2" height="15.0" fill="rgb(247,21,5)" rx="2" ry="2" />
<text  x="1073.71" y="655.5" ></text>
</g>
<g >
<title>kick_ilb (1 samples, 0.27%)</title><rect x="1064.3" y="581" width="3.2" height="15.0" fill="rgb(223,64,20)" rx="2" ry="2" />
<text  x="1067.26" y="591.5" ></text>
</g>
<g >
<title>copy_page_to_iter (6 samples, 1.64%)</title><rect x="232.5" y="277" width="19.3" height="15.0" fill="rgb(214,8,35)" rx="2" ry="2" />
<text  x="235.46" y="287.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.27%)</title><rect x="809.6" y="437" width="3.2" height="15.0" fill="rgb(252,197,34)" rx="2" ry="2" />
<text  x="812.56" y="447.5" ></text>
</g>
<g >
<title>sel_ldr (186 samples, 50.82%)</title><rect x="219.6" y="741" width="599.6" height="15.0" fill="rgb(232,144,19)" rx="2" ry="2" />
<text  x="222.56" y="751.5" >sel_ldr</text>
</g>
<g >
<title>flush_smp_call_function_from_idle (1 samples, 0.27%)</title><rect x="1051.4" y="661" width="3.2" height="15.0" fill="rgb(253,55,0)" rx="2" ry="2" />
<text  x="1054.37" y="671.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.27%)</title><rect x="809.6" y="357" width="3.2" height="15.0" fill="rgb(240,184,7)" rx="2" ry="2" />
<text  x="812.56" y="367.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.55%)</title><rect x="261.5" y="565" width="6.4" height="15.0" fill="rgb(228,181,34)" rx="2" ry="2" />
<text  x="264.48" y="575.5" ></text>
</g>
<g >
<title>tick_nohz_idle_enter (1 samples, 0.27%)</title><rect x="1073.9" y="661" width="3.3" height="15.0" fill="rgb(245,145,12)" rx="2" ry="2" />
<text  x="1076.93" y="671.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.27%)</title><rect x="229.2" y="485" width="3.3" height="15.0" fill="rgb(243,80,20)" rx="2" ry="2" />
<text  x="232.23" y="495.5" ></text>
</g>
<g >
<title>cpuidle_select (4 samples, 1.09%)</title><rect x="1138.4" y="581" width="12.9" height="15.0" fill="rgb(205,227,18)" rx="2" ry="2" />
<text  x="1141.42" y="591.5" ></text>
</g>
<g >
<title>ctx_resched (64 samples, 17.49%)</title><rect x="10.0" y="405" width="206.3" height="15.0" fill="rgb(230,229,25)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >ctx_resched</text>
</g>
<g >
<title>NaClDescIoDescDtor (1 samples, 0.27%)</title><rect x="809.6" y="629" width="3.2" height="15.0" fill="rgb(238,8,26)" rx="2" ry="2" />
<text  x="812.56" y="639.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.27%)</title><rect x="816.0" y="549" width="3.2" height="15.0" fill="rgb(222,182,3)" rx="2" ry="2" />
<text  x="819.01" y="559.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.27%)</title><rect x="809.6" y="341" width="3.2" height="15.0" fill="rgb(223,153,39)" rx="2" ry="2" />
<text  x="812.56" y="351.5" ></text>
</g>
<g >
<title>cpuidle_enter (47 samples, 12.84%)</title><rect x="893.4" y="645" width="151.5" height="15.0" fill="rgb(218,106,28)" rx="2" ry="2" />
<text  x="896.39" y="655.5" >cpuidle_enter</text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.27%)</title><rect x="809.6" y="277" width="3.2" height="15.0" fill="rgb(242,45,5)" rx="2" ry="2" />
<text  x="812.56" y="287.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (1 samples, 0.27%)</title><rect x="816.0" y="325" width="3.2" height="15.0" fill="rgb(207,80,18)" rx="2" ry="2" />
<text  x="819.01" y="335.5" ></text>
</g>
<g >
<title>dispatcher (11 samples, 3.01%)</title><rect x="232.5" y="613" width="35.4" height="15.0" fill="rgb(207,112,43)" rx="2" ry="2" />
<text  x="235.46" y="623.5" >dis..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.27%)</title><rect x="809.6" y="85" width="3.2" height="15.0" fill="rgb(252,79,32)" rx="2" ry="2" />
<text  x="812.56" y="95.5" ></text>
</g>
<g >
<title>__evlist__enable (64 samples, 17.49%)</title><rect x="10.0" y="677" width="206.3" height="15.0" fill="rgb(243,14,7)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >__evlist__enable</text>
</g>
<g >
<title>secondary_startup_64_no_verify (93 samples, 25.41%)</title><rect x="890.2" y="725" width="299.8" height="15.0" fill="rgb(246,99,6)" rx="2" ry="2" />
<text  x="893.16" y="735.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>copy_page_to_iter_iovec (6 samples, 1.64%)</title><rect x="232.5" y="261" width="19.3" height="15.0" fill="rgb(217,93,8)" rx="2" ry="2" />
<text  x="235.46" y="271.5" ></text>
</g>
<g >
<title>start_kernel (32 samples, 8.74%)</title><rect x="1086.8" y="677" width="103.2" height="15.0" fill="rgb(240,83,10)" rx="2" ry="2" />
<text  x="1089.83" y="687.5" >start_kernel</text>
</g>
<g >
<title>hashbrown::map::make_hash (2 samples, 0.55%)</title><rect x="251.8" y="517" width="6.5" height="15.0" fill="rgb(209,48,22)" rx="2" ry="2" />
<text  x="254.80" y="527.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::close_syscall (1 samples, 0.27%)</title><rect x="809.6" y="549" width="3.2" height="15.0" fill="rgb(232,198,32)" rx="2" ry="2" />
<text  x="812.56" y="559.5" ></text>
</g>
<g >
<title>vfs_read (6 samples, 1.64%)</title><rect x="232.5" y="421" width="19.3" height="15.0" fill="rgb(205,218,7)" rx="2" ry="2" />
<text  x="235.46" y="431.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::read_syscall (9 samples, 2.46%)</title><rect x="232.5" y="581" width="29.0" height="15.0" fill="rgb(232,213,9)" rx="2" ry="2" />
<text  x="235.46" y="591.5" >ru..</text>
</g>
<g >
<title>pick_next_task_fair (4 samples, 1.09%)</title><rect x="1167.4" y="565" width="12.9" height="15.0" fill="rgb(237,186,52)" rx="2" ry="2" />
<text  x="1170.43" y="575.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_enum (1 samples, 0.27%)</title><rect x="806.3" y="549" width="3.3" height="15.0" fill="rgb(250,210,22)" rx="2" ry="2" />
<text  x="809.34" y="559.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.27%)</title><rect x="893.4" y="597" width="3.2" height="15.0" fill="rgb(235,162,46)" rx="2" ry="2" />
<text  x="896.39" y="607.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (6 samples, 1.64%)</title><rect x="232.5" y="245" width="19.3" height="15.0" fill="rgb(228,134,27)" rx="2" ry="2" />
<text  x="235.46" y="255.5" ></text>
</g>
<g >
<title>smp_call_function_single (64 samples, 17.49%)</title><rect x="10.0" y="485" width="206.3" height="15.0" fill="rgb(229,58,32)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >smp_call_function_single</text>
</g>
<g >
<title>perf_event_for_each_child (64 samples, 17.49%)</title><rect x="10.0" y="533" width="206.3" height="15.0" fill="rgb(247,141,37)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >perf_event_for_each_child</text>
</g>
<g >
<title>sched_clock_cpu (2 samples, 0.55%)</title><rect x="1183.6" y="565" width="6.4" height="15.0" fill="rgb(224,167,30)" rx="2" ry="2" />
<text  x="1186.55" y="575.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.55%)</title><rect x="261.5" y="533" width="6.4" height="15.0" fill="rgb(208,94,13)" rx="2" ry="2" />
<text  x="264.48" y="543.5" ></text>
</g>
<g >
<title>all (366 samples, 100%)</title><rect x="10.0" y="757" width="1180.0" height="15.0" fill="rgb(228,126,38)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.27%)</title><rect x="806.3" y="485" width="3.3" height="15.0" fill="rgb(217,32,44)" rx="2" ry="2" />
<text  x="809.34" y="495.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.27%)</title><rect x="809.6" y="197" width="3.2" height="15.0" fill="rgb(223,105,35)" rx="2" ry="2" />
<text  x="812.56" y="207.5" ></text>
</g>
<g >
<title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.27%)</title><rect x="806.3" y="597" width="3.3" height="15.0" fill="rgb(231,161,43)" rx="2" ry="2" />
<text  x="809.34" y="607.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (6 samples, 1.64%)</title><rect x="232.5" y="341" width="19.3" height="15.0" fill="rgb(250,72,22)" rx="2" ry="2" />
<text  x="235.46" y="351.5" ></text>
</g>
<g >
<title>__ioctl (64 samples, 17.49%)</title><rect x="10.0" y="629" width="206.3" height="15.0" fill="rgb(246,130,39)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >__ioctl</text>
</g>
<g >
<title>vfs_iter_read (6 samples, 1.64%)</title><rect x="232.5" y="373" width="19.3" height="15.0" fill="rgb(237,76,34)" rx="2" ry="2" />
<text  x="235.46" y="383.5" ></text>
</g>
<g >
<title>hrtimer_next_event_without (1 samples, 0.27%)</title><rect x="1048.1" y="597" width="3.3" height="15.0" fill="rgb(218,55,40)" rx="2" ry="2" />
<text  x="1051.14" y="607.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.55%)</title><rect x="1167.4" y="533" width="6.5" height="15.0" fill="rgb(226,44,29)" rx="2" ry="2" />
<text  x="1170.43" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_read (6 samples, 1.64%)</title><rect x="232.5" y="453" width="19.3" height="15.0" fill="rgb(233,180,34)" rx="2" ry="2" />
<text  x="235.46" y="463.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (9 samples, 2.46%)</title><rect x="232.5" y="597" width="29.0" height="15.0" fill="rgb(228,42,29)" rx="2" ry="2" />
<text  x="235.46" y="607.5" >ru..</text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.55%)</title><rect x="251.8" y="501" width="6.5" height="15.0" fill="rgb(207,57,45)" rx="2" ry="2" />
<text  x="254.80" y="511.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.27%)</title><rect x="893.4" y="565" width="3.2" height="15.0" fill="rgb(227,111,32)" rx="2" ry="2" />
<text  x="896.39" y="575.5" ></text>
</g>
<g >
<title>kick_ilb (2 samples, 0.55%)</title><rect x="1173.9" y="517" width="6.4" height="15.0" fill="rgb(243,209,7)" rx="2" ry="2" />
<text  x="1176.88" y="527.5" ></text>
</g>
<g >
<title>do_iter_read (6 samples, 1.64%)</title><rect x="232.5" y="357" width="19.3" height="15.0" fill="rgb(223,201,50)" rx="2" ry="2" />
<text  x="235.46" y="367.5" ></text>
</g>
<g >
<title>NaClRefCountUnref (1 samples, 0.27%)</title><rect x="809.6" y="645" width="3.2" height="15.0" fill="rgb(253,133,43)" rx="2" ry="2" />
<text  x="812.56" y="655.5" ></text>
</g>
<g >
<title>cpu_startup_entry (61 samples, 16.67%)</title><rect x="890.2" y="693" width="196.6" height="15.0" fill="rgb(239,59,45)" rx="2" ry="2" />
<text  x="893.16" y="703.5" >cpu_startup_entry</text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.27%)</title><rect x="229.2" y="245" width="3.3" height="15.0" fill="rgb(205,164,53)" rx="2" ry="2" />
<text  x="232.23" y="255.5" ></text>
</g>
<g >
<title>sched_clock_idle_sleep_event (1 samples, 0.27%)</title><rect x="1073.9" y="645" width="3.3" height="15.0" fill="rgb(249,54,6)" rx="2" ry="2" />
<text  x="1076.93" y="655.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.55%)</title><rect x="251.8" y="549" width="6.5" height="15.0" fill="rgb(242,31,28)" rx="2" ry="2" />
<text  x="254.80" y="559.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.27%)</title><rect x="229.2" y="261" width="3.3" height="15.0" fill="rgb(245,181,49)" rx="2" ry="2" />
<text  x="232.23" y="271.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.27%)</title><rect x="809.6" y="325" width="3.2" height="15.0" fill="rgb(247,4,29)" rx="2" ry="2" />
<text  x="812.56" y="335.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.27%)</title><rect x="816.0" y="709" width="3.2" height="15.0" fill="rgb(238,178,22)" rx="2" ry="2" />
<text  x="819.01" y="719.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.27%)</title><rect x="809.6" y="453" width="3.2" height="15.0" fill="rgb(221,148,11)" rx="2" ry="2" />
<text  x="812.56" y="463.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (6 samples, 1.64%)</title><rect x="232.5" y="293" width="19.3" height="15.0" fill="rgb(229,111,33)" rx="2" ry="2" />
<text  x="235.46" y="303.5" ></text>
</g>
<g >
<title>do_sys_poll (1 samples, 0.27%)</title><rect x="886.9" y="677" width="3.3" height="15.0" fill="rgb(212,111,41)" rx="2" ry="2" />
<text  x="889.94" y="687.5" ></text>
</g>
<g >
<title>psi_task_switch (1 samples, 0.27%)</title><rect x="1067.5" y="629" width="3.2" height="15.0" fill="rgb(224,15,4)" rx="2" ry="2" />
<text  x="1070.49" y="639.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (32 samples, 8.74%)</title><rect x="1086.8" y="709" width="103.2" height="15.0" fill="rgb(229,113,37)" rx="2" ry="2" />
<text  x="1089.83" y="719.5" >x86_64_start..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (1 samples, 0.27%)</title><rect x="229.2" y="613" width="3.3" height="15.0" fill="rgb(219,29,12)" rx="2" ry="2" />
<text  x="232.23" y="623.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.27%)</title><rect x="229.2" y="309" width="3.3" height="15.0" fill="rgb(237,222,26)" rx="2" ry="2" />
<text  x="232.23" y="319.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.27%)</title><rect x="816.0" y="661" width="3.2" height="15.0" fill="rgb(236,107,15)" rx="2" ry="2" />
<text  x="819.01" y="671.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.27%)</title><rect x="816.0" y="629" width="3.2" height="15.0" fill="rgb(227,199,4)" rx="2" ry="2" />
<text  x="819.01" y="639.5" ></text>
</g>
<g >
<title>alx_intr_msix_ring (1 samples, 0.27%)</title><rect x="893.4" y="517" width="3.2" height="15.0" fill="rgb(244,180,9)" rx="2" ry="2" />
<text  x="896.39" y="527.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1 samples, 0.27%)</title><rect x="216.3" y="581" width="3.3" height="15.0" fill="rgb(239,224,47)" rx="2" ry="2" />
<text  x="219.34" y="591.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.27%)</title><rect x="809.6" y="581" width="3.2" height="15.0" fill="rgb(244,68,48)" rx="2" ry="2" />
<text  x="812.56" y="591.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.27%)</title><rect x="816.0" y="277" width="3.2" height="15.0" fill="rgb(236,71,35)" rx="2" ry="2" />
<text  x="819.01" y="287.5" ></text>
</g>
<g >
<title>llist_add_batch (1 samples, 0.27%)</title><rect x="1177.1" y="485" width="3.2" height="15.0" fill="rgb(221,78,39)" rx="2" ry="2" />
<text  x="1180.10" y="495.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.27%)</title><rect x="1141.6" y="517" width="3.3" height="15.0" fill="rgb(240,174,36)" rx="2" ry="2" />
<text  x="1144.64" y="527.5" ></text>
</g>
<g >
<title>NaClSysCloseDecoder (1 samples, 0.27%)</title><rect x="809.6" y="693" width="3.2" height="15.0" fill="rgb(224,154,26)" rx="2" ry="2" />
<text  x="812.56" y="703.5" ></text>
</g>
<g >
<title>NaClSysExitDecoder (1 samples, 0.27%)</title><rect x="229.2" y="693" width="3.3" height="15.0" fill="rgb(243,88,32)" rx="2" ry="2" />
<text  x="232.23" y="703.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (64 samples, 17.49%)</title><rect x="10.0" y="645" width="206.3" height="15.0" fill="rgb(207,28,44)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >perf_evsel__run_ioctl</text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.27%)</title><rect x="893.4" y="613" width="3.2" height="15.0" fill="rgb(235,212,45)" rx="2" ry="2" />
<text  x="896.39" y="623.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.27%)</title><rect x="816.0" y="389" width="3.2" height="15.0" fill="rgb(211,167,50)" rx="2" ry="2" />
<text  x="819.01" y="399.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.27%)</title><rect x="229.2" y="645" width="3.3" height="15.0" fill="rgb(211,17,53)" rx="2" ry="2" />
<text  x="232.23" y="655.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.55%)</title><rect x="261.5" y="581" width="6.4" height="15.0" fill="rgb(220,43,24)" rx="2" ry="2" />
<text  x="264.48" y="591.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.27%)</title><rect x="816.0" y="229" width="3.2" height="15.0" fill="rgb(250,222,7)" rx="2" ry="2" />
<text  x="819.01" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (6 samples, 1.64%)</title><rect x="232.5" y="517" width="19.3" height="15.0" fill="rgb(217,101,34)" rx="2" ry="2" />
<text  x="235.46" y="527.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.27%)</title><rect x="816.0" y="437" width="3.2" height="15.0" fill="rgb(253,44,18)" rx="2" ry="2" />
<text  x="819.01" y="447.5" ></text>
</g>
<g >
<title>hrtimer_next_event_without (2 samples, 0.55%)</title><rect x="1141.6" y="533" width="6.5" height="15.0" fill="rgb(221,167,44)" rx="2" ry="2" />
<text  x="1144.64" y="543.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.27%)</title><rect x="809.6" y="229" width="3.2" height="15.0" fill="rgb(252,193,26)" rx="2" ry="2" />
<text  x="812.56" y="239.5" ></text>
</g>
<g >
<title>__GI__IO_setb (1 samples, 0.27%)</title><rect x="216.3" y="565" width="3.3" height="15.0" fill="rgb(228,127,30)" rx="2" ry="2" />
<text  x="219.34" y="575.5" ></text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.27%)</title><rect x="806.3" y="389" width="3.3" height="15.0" fill="rgb(232,41,18)" rx="2" ry="2" />
<text  x="809.34" y="399.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.27%)</title><rect x="229.2" y="581" width="3.3" height="15.0" fill="rgb(250,110,39)" rx="2" ry="2" />
<text  x="232.23" y="591.5" ></text>
</g>
<g >
<title>get_next_timer_interrupt (1 samples, 0.27%)</title><rect x="1148.1" y="517" width="3.2" height="15.0" fill="rgb(241,69,14)" rx="2" ry="2" />
<text  x="1151.09" y="527.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.27%)</title><rect x="229.2" y="293" width="3.3" height="15.0" fill="rgb(218,215,17)" rx="2" ry="2" />
<text  x="232.23" y="303.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.27%)</title><rect x="229.2" y="549" width="3.3" height="15.0" fill="rgb(252,203,45)" rx="2" ry="2" />
<text  x="232.23" y="559.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.27%)</title><rect x="229.2" y="405" width="3.3" height="15.0" fill="rgb(214,81,33)" rx="2" ry="2" />
<text  x="232.23" y="415.5" ></text>
</g>
<g >
<title>&lt;rustposix::safeposix::filesystem::_::&lt;impl serde::de::Deserialize for rustposix::safeposix::filesystem::Inode&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (1 samples, 0.27%)</title><rect x="806.3" y="533" width="3.3" height="15.0" fill="rgb(216,184,49)" rx="2" ry="2" />
<text  x="809.34" y="543.5" ></text>
</g>
<g >
<title>perf_ioctl (64 samples, 17.49%)</title><rect x="10.0" y="565" width="206.3" height="15.0" fill="rgb(253,146,53)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >perf_ioctl</text>
</g>
<g >
<title>__libc_read (6 samples, 1.64%)</title><rect x="232.5" y="501" width="19.3" height="15.0" fill="rgb(245,74,43)" rx="2" ry="2" />
<text  x="235.46" y="511.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.27%)</title><rect x="1148.1" y="501" width="3.2" height="15.0" fill="rgb(240,192,13)" rx="2" ry="2" />
<text  x="1151.09" y="511.5" ></text>
</g>
<g >
<title>poll_idle (12 samples, 3.28%)</title><rect x="1096.5" y="549" width="38.7" height="15.0" fill="rgb(237,89,24)" rx="2" ry="2" />
<text  x="1099.50" y="559.5" >pol..</text>
</g>
<g >
<title>flush_smp_call_function_queue (3 samples, 0.82%)</title><rect x="1154.5" y="581" width="9.7" height="15.0" fill="rgb(227,116,20)" rx="2" ry="2" />
<text  x="1157.54" y="591.5" ></text>
</g>
<g >
<title>NaClSysExit (1 samples, 0.27%)</title><rect x="229.2" y="677" width="3.3" height="15.0" fill="rgb(212,111,19)" rx="2" ry="2" />
<text  x="232.23" y="687.5" ></text>
</g>
<g >
<title>rcu_dynticks_eqs_enter (1 samples, 0.27%)</title><rect x="1032.0" y="597" width="3.2" height="15.0" fill="rgb(244,168,0)" rx="2" ry="2" />
<text  x="1035.02" y="607.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.27%)</title><rect x="229.2" y="517" width="3.3" height="15.0" fill="rgb(227,122,36)" rx="2" ry="2" />
<text  x="232.23" y="527.5" ></text>
</g>
<g >
<title>newidle_balance (4 samples, 1.09%)</title><rect x="1167.4" y="549" width="12.9" height="15.0" fill="rgb(205,156,44)" rx="2" ry="2" />
<text  x="1170.43" y="559.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u64 (1 samples, 0.27%)</title><rect x="806.3" y="357" width="3.3" height="15.0" fill="rgb(239,99,29)" rx="2" ry="2" />
<text  x="809.34" y="367.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.27%)</title><rect x="229.2" y="469" width="3.3" height="15.0" fill="rgb(250,84,16)" rx="2" ry="2" />
<text  x="232.23" y="479.5" ></text>
</g>
<g >
<title>do_idle (32 samples, 8.74%)</title><rect x="1086.8" y="613" width="103.2" height="15.0" fill="rgb(216,225,40)" rx="2" ry="2" />
<text  x="1089.83" y="623.5" >do_idle</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.27%)</title><rect x="809.6" y="373" width="3.2" height="15.0" fill="rgb(242,53,9)" rx="2" ry="2" />
<text  x="812.56" y="383.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.27%)</title><rect x="809.6" y="149" width="3.2" height="15.0" fill="rgb(209,38,19)" rx="2" ry="2" />
<text  x="812.56" y="159.5" ></text>
</g>
<g >
<title>perf (65 samples, 17.76%)</title><rect x="10.0" y="741" width="209.6" height="15.0" fill="rgb(245,224,31)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >perf</text>
</g>
<g >
<title>__schedule (4 samples, 1.09%)</title><rect x="1167.4" y="581" width="12.9" height="15.0" fill="rgb(250,59,16)" rx="2" ry="2" />
<text  x="1170.43" y="591.5" ></text>
</g>
<g >
<title>swapper (115 samples, 31.42%)</title><rect x="819.2" y="741" width="370.8" height="15.0" fill="rgb(248,122,13)" rx="2" ry="2" />
<text  x="822.23" y="751.5" >swapper</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.27%)</title><rect x="229.2" y="325" width="3.3" height="15.0" fill="rgb(250,189,6)" rx="2" ry="2" />
<text  x="232.23" y="335.5" ></text>
</g>
<g >
<title>NaClTextDyncodeCreate (1 samples, 0.27%)</title><rect x="226.0" y="661" width="3.2" height="15.0" fill="rgb(240,79,12)" rx="2" ry="2" />
<text  x="229.01" y="671.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.27%)</title><rect x="816.0" y="421" width="3.2" height="15.0" fill="rgb(208,183,41)" rx="2" ry="2" />
<text  x="819.01" y="431.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (1 samples, 0.27%)</title><rect x="809.6" y="709" width="3.2" height="15.0" fill="rgb(227,189,32)" rx="2" ry="2" />
<text  x="812.56" y="719.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.27%)</title><rect x="809.6" y="245" width="3.2" height="15.0" fill="rgb(243,191,29)" rx="2" ry="2" />
<text  x="812.56" y="255.5" ></text>
</g>
<g >
<title>sched_clock_idle_sleep_event (2 samples, 0.55%)</title><rect x="1183.6" y="581" width="6.4" height="15.0" fill="rgb(241,127,24)" rx="2" ry="2" />
<text  x="1186.55" y="591.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.27%)</title><rect x="893.4" y="549" width="3.2" height="15.0" fill="rgb(205,30,50)" rx="2" ry="2" />
<text  x="896.39" y="559.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.27%)</title><rect x="809.6" y="261" width="3.2" height="15.0" fill="rgb(235,9,44)" rx="2" ry="2" />
<text  x="812.56" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.27%)</title><rect x="264.7" y="469" width="3.2" height="15.0" fill="rgb(239,39,11)" rx="2" ry="2" />
<text  x="267.70" y="479.5" ></text>
</g>
<g >
<title>cpuidle_enter (14 samples, 3.83%)</title><rect x="1093.3" y="581" width="45.1" height="15.0" fill="rgb(220,28,4)" rx="2" ry="2" />
<text  x="1096.28" y="591.5" >cpui..</text>
</g>
<g >
<title>serde_json::de::Deserializer&lt;R&gt;::deserialize_number (1 samples, 0.27%)</title><rect x="806.3" y="341" width="3.3" height="15.0" fill="rgb(244,91,53)" rx="2" ry="2" />
<text  x="809.34" y="351.5" ></text>
</g>
<g >
<title>[[heap]] (1 samples, 0.27%)</title><rect x="222.8" y="725" width="3.2" height="15.0" fill="rgb(245,26,11)" rx="2" ry="2" />
<text  x="225.79" y="735.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (64 samples, 17.49%)</title><rect x="10.0" y="613" width="206.3" height="15.0" fill="rgb(223,146,34)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >entry_SYSCALL_64_after_hwfr..</text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.27%)</title><rect x="816.0" y="213" width="3.2" height="15.0" fill="rgb(236,123,3)" rx="2" ry="2" />
<text  x="819.01" y="223.5" ></text>
</g>
<g >
<title>NaClSysReadDecoder (11 samples, 3.01%)</title><rect x="232.5" y="693" width="35.4" height="15.0" fill="rgb(249,14,48)" rx="2" ry="2" />
<text  x="235.46" y="703.5" >NaC..</text>
</g>
<g >
<title>remote_function (64 samples, 17.49%)</title><rect x="10.0" y="453" width="206.3" height="15.0" fill="rgb(247,220,47)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >remote_function</text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (33 samples, 9.02%)</title><rect x="896.6" y="613" width="106.4" height="15.0" fill="rgb(229,208,24)" rx="2" ry="2" />
<text  x="899.61" y="623.5" >mwait_idle_wi..</text>
</g>
<g >
<title>do_syscall_64 (6 samples, 1.64%)</title><rect x="232.5" y="469" width="19.3" height="15.0" fill="rgb(230,167,52)" rx="2" ry="2" />
<text  x="235.46" y="479.5" ></text>
</g>
<g >
<title>arch_call_rest_init (32 samples, 8.74%)</title><rect x="1086.8" y="661" width="103.2" height="15.0" fill="rgb(244,108,1)" rx="2" ry="2" />
<text  x="1089.83" y="671.5" >arch_call_re..</text>
</g>
<g >
<title>__cmd_record (65 samples, 17.76%)</title><rect x="10.0" y="693" width="209.6" height="15.0" fill="rgb(247,26,47)" rx="2" ry="2" />
<text  x="13.00" y="703.5" >__cmd_record</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.27%)</title><rect x="809.6" y="53" width="3.2" height="15.0" fill="rgb(208,64,31)" rx="2" ry="2" />
<text  x="812.56" y="63.5" ></text>
</g>
<g >
<title>ovl_read_iter (6 samples, 1.64%)</title><rect x="232.5" y="389" width="19.3" height="15.0" fill="rgb(233,45,47)" rx="2" ry="2" />
<text  x="235.46" y="399.5" ></text>
</g>
<g >
<title>generic_exec_single (64 samples, 17.49%)</title><rect x="10.0" y="469" width="206.3" height="15.0" fill="rgb(249,101,14)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >generic_exec_single</text>
</g>
<g >
<title>NaClValidateCode (1 samples, 0.27%)</title><rect x="226.0" y="645" width="3.2" height="15.0" fill="rgb(218,142,51)" rx="2" ry="2" />
<text  x="229.01" y="655.5" ></text>
</g>
<g >
<title>NaClHostDescRead (11 samples, 3.01%)</title><rect x="232.5" y="645" width="35.4" height="15.0" fill="rgb(242,7,24)" rx="2" ry="2" />
<text  x="235.46" y="655.5" >NaC..</text>
</g>
<g >
<title>perf_event__get_comm_ids (1 samples, 0.27%)</title><rect x="216.3" y="645" width="3.3" height="15.0" fill="rgb(215,81,49)" rx="2" ry="2" />
<text  x="219.34" y="655.5" ></text>
</g>
<g >
<title>do_idle (59 samples, 16.12%)</title><rect x="890.2" y="677" width="190.2" height="15.0" fill="rgb(240,124,40)" rx="2" ry="2" />
<text  x="893.16" y="687.5" >do_idle</text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::load (1 samples, 0.27%)</title><rect x="261.5" y="469" width="3.2" height="15.0" fill="rgb(250,220,4)" rx="2" ry="2" />
<text  x="264.48" y="479.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.27%)</title><rect x="229.2" y="277" width="3.3" height="15.0" fill="rgb(208,185,25)" rx="2" ry="2" />
<text  x="232.23" y="287.5" ></text>
</g>
<g >
<title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.55%)</title><rect x="261.5" y="597" width="6.4" height="15.0" fill="rgb(252,96,13)" rx="2" ry="2" />
<text  x="264.48" y="607.5" ></text>
</g>
<g >
<title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.55%)</title><rect x="251.8" y="469" width="6.5" height="15.0" fill="rgb(227,103,27)" rx="2" ry="2" />
<text  x="254.80" y="479.5" ></text>
</g>
<g >
<title>[sel_ldr] (13 samples, 3.55%)</title><rect x="226.0" y="725" width="41.9" height="15.0" fill="rgb(245,55,0)" rx="2" ry="2" />
<text  x="229.01" y="735.5" >[se..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.27%)</title><rect x="229.2" y="389" width="3.3" height="15.0" fill="rgb(231,52,9)" rx="2" ry="2" />
<text  x="232.23" y="399.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (1 samples, 0.27%)</title><rect x="1093.3" y="549" width="3.2" height="15.0" fill="rgb(248,86,2)" rx="2" ry="2" />
<text  x="1096.28" y="559.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.27%)</title><rect x="816.0" y="613" width="3.2" height="15.0" fill="rgb(230,17,20)" rx="2" ry="2" />
<text  x="819.01" y="623.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.27%)</title><rect x="809.6" y="501" width="3.2" height="15.0" fill="rgb(237,140,9)" rx="2" ry="2" />
<text  x="812.56" y="511.5" ></text>
</g>
<g >
<title>&lt;rustposix::safeposix::filesystem::_::&lt;impl serde::de::Deserialize for rustposix::safeposix::filesystem::GenericInode&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.27%)</title><rect x="806.3" y="437" width="3.3" height="15.0" fill="rgb(227,229,10)" rx="2" ry="2" />
<text  x="809.34" y="447.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.27%)</title><rect x="816.0" y="309" width="3.2" height="15.0" fill="rgb(214,54,1)" rx="2" ry="2" />
<text  x="819.01" y="319.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.27%)</title><rect x="1180.3" y="581" width="3.3" height="15.0" fill="rgb(228,89,3)" rx="2" ry="2" />
<text  x="1183.33" y="591.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.27%)</title><rect x="809.6" y="133" width="3.2" height="15.0" fill="rgb(247,141,39)" rx="2" ry="2" />
<text  x="812.56" y="143.5" ></text>
</g>
<g >
<title>__GI___pthread_rwlock_wrlock (1 samples, 0.27%)</title><rect x="258.3" y="517" width="3.2" height="15.0" fill="rgb(229,23,41)" rx="2" ry="2" />
<text  x="261.25" y="527.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (14 samples, 3.83%)</title><rect x="1093.3" y="565" width="45.1" height="15.0" fill="rgb(232,197,29)" rx="2" ry="2" />
<text  x="1096.28" y="575.5" >cpui..</text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.27%)</title><rect x="809.6" y="293" width="3.2" height="15.0" fill="rgb(212,198,6)" rx="2" ry="2" />
<text  x="812.56" y="303.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.27%)</title><rect x="809.6" y="37" width="3.2" height="15.0" fill="rgb(210,140,52)" rx="2" ry="2" />
<text  x="812.56" y="47.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.27%)</title><rect x="816.0" y="597" width="3.2" height="15.0" fill="rgb(229,0,47)" rx="2" ry="2" />
<text  x="819.01" y="607.5" ></text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (6 samples, 1.64%)</title><rect x="232.5" y="549" width="19.3" height="15.0" fill="rgb(220,169,33)" rx="2" ry="2" />
<text  x="235.46" y="559.5" ></text>
</g>
<g >
<title>lind_exit (1 samples, 0.27%)</title><rect x="229.2" y="661" width="3.3" height="15.0" fill="rgb(223,224,28)" rx="2" ry="2" />
<text  x="232.23" y="671.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.27%)</title><rect x="809.6" y="101" width="3.2" height="15.0" fill="rgb(238,57,4)" rx="2" ry="2" />
<text  x="812.56" y="111.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (2 samples, 0.55%)</title><rect x="261.5" y="517" width="6.4" height="15.0" fill="rgb(240,220,15)" rx="2" ry="2" />
<text  x="264.48" y="527.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreate (1 samples, 0.27%)</title><rect x="226.0" y="677" width="3.2" height="15.0" fill="rgb(243,89,23)" rx="2" ry="2" />
<text  x="229.01" y="687.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.27%)</title><rect x="816.0" y="373" width="3.2" height="15.0" fill="rgb(206,176,17)" rx="2" ry="2" />
<text  x="819.01" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 1.64%)</title><rect x="232.5" y="485" width="19.3" height="15.0" fill="rgb(213,118,4)" rx="2" ry="2" />
<text  x="235.46" y="495.5" ></text>
</g>
<g >
<title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.27%)</title><rect x="806.3" y="677" width="3.3" height="15.0" fill="rgb(243,10,28)" rx="2" ry="2" />
<text  x="809.34" y="687.5" ></text>
</g>
<g >
<title>nohz_csd_func (1 samples, 0.27%)</title><rect x="1164.2" y="581" width="3.2" height="15.0" fill="rgb(253,169,10)" rx="2" ry="2" />
<text  x="1167.21" y="591.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (1 samples, 0.27%)</title><rect x="816.0" y="677" width="3.2" height="15.0" fill="rgb(244,105,8)" rx="2" ry="2" />
<text  x="819.01" y="687.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.27%)</title><rect x="1073.9" y="629" width="3.3" height="15.0" fill="rgb(228,173,18)" rx="2" ry="2" />
<text  x="1076.93" y="639.5" ></text>
</g>
<g >
<title>lind_read (11 samples, 3.01%)</title><rect x="232.5" y="629" width="35.4" height="15.0" fill="rgb(251,69,42)" rx="2" ry="2" />
<text  x="235.46" y="639.5" >lin..</text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts (1 samples, 0.27%)</title><rect x="812.8" y="709" width="3.2" height="15.0" fill="rgb(226,177,13)" rx="2" ry="2" />
<text  x="815.79" y="719.5" ></text>
</g>
<g >
<title>perf_event__prepare_comm (1 samples, 0.27%)</title><rect x="216.3" y="661" width="3.3" height="15.0" fill="rgb(216,192,19)" rx="2" ry="2" />
<text  x="219.34" y="671.5" ></text>
</g>
<g >
<title>cpuidle_select (2 samples, 0.55%)</title><rect x="1044.9" y="645" width="6.5" height="15.0" fill="rgb(227,28,13)" rx="2" ry="2" />
<text  x="1047.92" y="655.5" ></text>
</g>
<g >
<title>ksys_read (6 samples, 1.64%)</title><rect x="232.5" y="437" width="19.3" height="15.0" fill="rgb(228,43,6)" rx="2" ry="2" />
<text  x="235.46" y="447.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1 samples, 0.27%)</title><rect x="816.0" y="261" width="3.2" height="15.0" fill="rgb(240,5,4)" rx="2" ry="2" />
<text  x="819.01" y="271.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.27%)</title><rect x="809.6" y="469" width="3.2" height="15.0" fill="rgb(230,223,14)" rx="2" ry="2" />
<text  x="812.56" y="479.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.27%)</title><rect x="816.0" y="693" width="3.2" height="15.0" fill="rgb(235,119,46)" rx="2" ry="2" />
<text  x="819.01" y="703.5" ></text>
</g>
<g >
<title>perf_event__synthesize_comm (1 samples, 0.27%)</title><rect x="216.3" y="677" width="3.3" height="15.0" fill="rgb(244,68,48)" rx="2" ry="2" />
<text  x="219.34" y="687.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.27%)</title><rect x="816.0" y="453" width="3.2" height="15.0" fill="rgb(218,100,54)" rx="2" ry="2" />
<text  x="819.01" y="463.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_entry_seed (1 samples, 0.27%)</title><rect x="806.3" y="613" width="3.3" height="15.0" fill="rgb(241,96,9)" rx="2" ry="2" />
<text  x="809.34" y="623.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.27%)</title><rect x="816.0" y="405" width="3.2" height="15.0" fill="rgb(207,198,30)" rx="2" ry="2" />
<text  x="819.01" y="415.5" ></text>
</g>
<g >
<title>poll_idle (9 samples, 2.46%)</title><rect x="1003.0" y="613" width="29.0" height="15.0" fill="rgb(253,212,53)" rx="2" ry="2" />
<text  x="1006.01" y="623.5" >po..</text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.27%)</title><rect x="806.3" y="693" width="3.3" height="15.0" fill="rgb(245,132,45)" rx="2" ry="2" />
<text  x="809.34" y="703.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::de::Deserialize for rustposix::safeposix::filesystem::Inode&gt;::deserialize (1 samples, 0.27%)</title><rect x="806.3" y="565" width="3.3" height="15.0" fill="rgb(236,203,5)" rx="2" ry="2" />
<text  x="809.34" y="575.5" ></text>
</g>
<g >
<title>flush_smp_call_function_from_idle (5 samples, 1.37%)</title><rect x="1151.3" y="597" width="16.1" height="15.0" fill="rgb(214,101,45)" rx="2" ry="2" />
<text  x="1154.31" y="607.5" ></text>
</g>
<g >
<title>alx_mask_msix (1 samples, 0.27%)</title><rect x="893.4" y="501" width="3.2" height="15.0" fill="rgb(210,17,26)" rx="2" ry="2" />
<text  x="896.39" y="511.5" ></text>
</g>
<g >
<title>tick_nohz_get_sleep_length (1 samples, 0.27%)</title><rect x="1048.1" y="613" width="3.3" height="15.0" fill="rgb(226,150,8)" rx="2" ry="2" />
<text  x="1051.14" y="623.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.27%)</title><rect x="816.0" y="501" width="3.2" height="15.0" fill="rgb(219,187,15)" rx="2" ry="2" />
<text  x="819.01" y="511.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.27%)</title><rect x="1186.8" y="549" width="3.2" height="15.0" fill="rgb(214,7,24)" rx="2" ry="2" />
<text  x="1189.78" y="559.5" ></text>
</g>
<g >
<title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize::MapVisitor&lt;K,V,S&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.27%)</title><rect x="806.3" y="645" width="3.3" height="15.0" fill="rgb(240,96,46)" rx="2" ry="2" />
<text  x="809.34" y="655.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.27%)</title><rect x="809.6" y="565" width="3.2" height="15.0" fill="rgb(224,17,51)" rx="2" ry="2" />
<text  x="812.56" y="575.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.27%)</title><rect x="809.6" y="389" width="3.2" height="15.0" fill="rgb(220,103,47)" rx="2" ry="2" />
<text  x="812.56" y="399.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.27%)</title><rect x="816.0" y="293" width="3.2" height="15.0" fill="rgb(245,133,0)" rx="2" ry="2" />
<text  x="819.01" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_poll (1 samples, 0.27%)</title><rect x="886.9" y="693" width="3.3" height="15.0" fill="rgb(246,92,43)" rx="2" ry="2" />
<text  x="889.94" y="703.5" ></text>
</g>
<g >
<title>NaClDescIoDescRead (11 samples, 3.01%)</title><rect x="232.5" y="661" width="35.4" height="15.0" fill="rgb(239,57,13)" rx="2" ry="2" />
<text  x="235.46" y="671.5" >NaC..</text>
</g>
<g >
<title>schedule_idle (4 samples, 1.09%)</title><rect x="1167.4" y="597" width="12.9" height="15.0" fill="rgb(248,203,1)" rx="2" ry="2" />
<text  x="1170.43" y="607.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.27%)</title><rect x="806.3" y="453" width="3.3" height="15.0" fill="rgb(206,211,7)" rx="2" ry="2" />
<text  x="809.34" y="463.5" ></text>
</g>
<g >
<title>event_function (64 samples, 17.49%)</title><rect x="10.0" y="437" width="206.3" height="15.0" fill="rgb(224,124,36)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >event_function</text>
</g>
<g >
<title>newidle_balance (2 samples, 0.55%)</title><rect x="1061.0" y="613" width="6.5" height="15.0" fill="rgb(230,215,10)" rx="2" ry="2" />
<text  x="1064.04" y="623.5" ></text>
</g>
<g >
<title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.27%)</title><rect x="806.3" y="581" width="3.3" height="15.0" fill="rgb(250,135,5)" rx="2" ry="2" />
<text  x="809.34" y="591.5" ></text>
</g>
<g >
<title>schedule_idle (6 samples, 1.64%)</title><rect x="1054.6" y="661" width="19.3" height="15.0" fill="rgb(230,70,42)" rx="2" ry="2" />
<text  x="1057.59" y="671.5" ></text>
</g>
<g >
<title>menu_select (4 samples, 1.09%)</title><rect x="1138.4" y="565" width="12.9" height="15.0" fill="rgb(215,136,7)" rx="2" ry="2" />
<text  x="1141.42" y="575.5" ></text>
</g>
<g >
<title>&lt;serde_json::de::VariantAccess&lt;R&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (1 samples, 0.27%)</title><rect x="806.3" y="501" width="3.3" height="15.0" fill="rgb(250,60,32)" rx="2" ry="2" />
<text  x="809.34" y="511.5" ></text>
</g>
<g >
<title>_perf_event_enable (64 samples, 17.49%)</title><rect x="10.0" y="517" width="206.3" height="15.0" fill="rgb(239,52,8)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >_perf_event_enable</text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.27%)</title><rect x="809.6" y="485" width="3.2" height="15.0" fill="rgb(210,226,52)" rx="2" ry="2" />
<text  x="812.56" y="495.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.27%)</title><rect x="809.6" y="309" width="3.2" height="15.0" fill="rgb(222,127,26)" rx="2" ry="2" />
<text  x="812.56" y="319.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.27%)</title><rect x="809.6" y="69" width="3.2" height="15.0" fill="rgb(216,110,42)" rx="2" ry="2" />
<text  x="812.56" y="79.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::de::Deserialize for rustposix::safeposix::filesystem::GenericInode&gt;::deserialize (1 samples, 0.27%)</title><rect x="806.3" y="469" width="3.3" height="15.0" fill="rgb(222,138,43)" rx="2" ry="2" />
<text  x="809.34" y="479.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.27%)</title><rect x="816.0" y="341" width="3.2" height="15.0" fill="rgb(242,141,46)" rx="2" ry="2" />
<text  x="819.01" y="351.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.27%)</title><rect x="816.0" y="181" width="3.2" height="15.0" fill="rgb(240,211,16)" rx="2" ry="2" />
<text  x="819.01" y="191.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (1 samples, 0.27%)</title><rect x="216.3" y="597" width="3.3" height="15.0" fill="rgb(238,32,24)" rx="2" ry="2" />
<text  x="219.34" y="607.5" ></text>
</g>
<g >
<title>cpu_startup_entry (32 samples, 8.74%)</title><rect x="1086.8" y="629" width="103.2" height="15.0" fill="rgb(222,98,16)" rx="2" ry="2" />
<text  x="1089.83" y="639.5" >cpu_startup_..</text>
</g>
<g >
<title>NaClHostDescClose (1 samples, 0.27%)</title><rect x="809.6" y="613" width="3.2" height="15.0" fill="rgb(242,129,4)" rx="2" ry="2" />
<text  x="812.56" y="623.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (2 samples, 0.55%)</title><rect x="261.5" y="485" width="6.4" height="15.0" fill="rgb(230,102,44)" rx="2" ry="2" />
<text  x="264.48" y="495.5" ></text>
</g>
<g >
<title>x86_pmu_enable (64 samples, 17.49%)</title><rect x="10.0" y="389" width="206.3" height="15.0" fill="rgb(226,68,35)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >x86_pmu_enable</text>
</g>
<g >
<title>[unknown] (4 samples, 1.09%)</title><rect x="806.3" y="725" width="12.9" height="15.0" fill="rgb(208,9,5)" rx="2" ry="2" />
<text  x="809.34" y="735.5" ></text>
</g>
<g >
<title>native_write_msr (64 samples, 17.49%)</title><rect x="10.0" y="357" width="206.3" height="15.0" fill="rgb(250,179,31)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >native_write_msr</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.27%)</title><rect x="816.0" y="565" width="3.2" height="15.0" fill="rgb(225,171,44)" rx="2" ry="2" />
<text  x="819.01" y="575.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.27%)</title><rect x="229.2" y="597" width="3.3" height="15.0" fill="rgb(222,226,8)" rx="2" ry="2" />
<text  x="232.23" y="607.5" ></text>
</g>
<g >
<title>std::sync::rwlock::RwLock&lt;T&gt;::write (1 samples, 0.27%)</title><rect x="258.3" y="565" width="3.2" height="15.0" fill="rgb(252,89,53)" rx="2" ry="2" />
<text  x="261.25" y="575.5" ></text>
</g>
<g >
<title>start_secondary (61 samples, 16.67%)</title><rect x="890.2" y="709" width="196.6" height="15.0" fill="rgb(220,173,38)" rx="2" ry="2" />
<text  x="893.16" y="719.5" >start_secondary</text>
</g>
<g >
<title>cpuidle_idle_call (49 samples, 13.39%)</title><rect x="893.4" y="661" width="158.0" height="15.0" fill="rgb(223,52,29)" rx="2" ry="2" />
<text  x="896.39" y="671.5" >cpuidle_idle_call</text>
</g>
<g >
<title>llist_reverse_order (1 samples, 0.27%)</title><rect x="1051.4" y="645" width="3.2" height="15.0" fill="rgb(210,139,5)" rx="2" ry="2" />
<text  x="1054.37" y="655.5" ></text>
</g>
<g >
<title>tick_nohz_idle_exit (1 samples, 0.27%)</title><rect x="1077.2" y="661" width="3.2" height="15.0" fill="rgb(222,52,49)" rx="2" ry="2" />
<text  x="1080.16" y="671.5" ></text>
</g>
<g >
<title>tick_nohz_get_sleep_length (3 samples, 0.82%)</title><rect x="1141.6" y="549" width="9.7" height="15.0" fill="rgb(219,164,11)" rx="2" ry="2" />
<text  x="1144.64" y="559.5" ></text>
</g>
<g >
<title>event_function_call (64 samples, 17.49%)</title><rect x="10.0" y="501" width="206.3" height="15.0" fill="rgb(236,153,2)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >event_function_call</text>
</g>
<g >
<title>serde::de::MapAccess::next_entry (1 samples, 0.27%)</title><rect x="806.3" y="629" width="3.3" height="15.0" fill="rgb(240,47,34)" rx="2" ry="2" />
<text  x="809.34" y="639.5" ></text>
</g>
<g >
<title>rest_init (32 samples, 8.74%)</title><rect x="1086.8" y="645" width="103.2" height="15.0" fill="rgb(252,186,31)" rx="2" ry="2" />
<text  x="1089.83" y="655.5" >rest_init</text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.27%)</title><rect x="229.2" y="341" width="3.3" height="15.0" fill="rgb(215,54,45)" rx="2" ry="2" />
<text  x="232.23" y="351.5" ></text>
</g>
<g >
<title>serde::de::impls::&lt;impl serde::de::Deserialize for u64&gt;::deserialize (1 samples, 0.27%)</title><rect x="806.3" y="373" width="3.3" height="15.0" fill="rgb(235,75,28)" rx="2" ry="2" />
<text  x="809.34" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (64 samples, 17.49%)</title><rect x="10.0" y="597" width="206.3" height="15.0" fill="rgb(219,57,14)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >do_syscall_64</text>
</g>
<g >
<title>[unknown] (65 samples, 17.76%)</title><rect x="10.0" y="725" width="209.6" height="15.0" fill="rgb(216,145,5)" rx="2" ry="2" />
<text  x="13.00" y="735.5" >[unknown]</text>
</g>
<g >
<title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.27%)</title><rect x="806.3" y="405" width="3.3" height="15.0" fill="rgb(235,163,5)" rx="2" ry="2" />
<text  x="809.34" y="415.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.27%)</title><rect x="1183.6" y="549" width="3.2" height="15.0" fill="rgb(238,162,17)" rx="2" ry="2" />
<text  x="1186.55" y="559.5" ></text>
</g>
<g >
<title>std::sys::unix::rwlock::RWLock::write (1 samples, 0.27%)</title><rect x="258.3" y="533" width="3.2" height="15.0" fill="rgb(252,49,21)" rx="2" ry="2" />
<text  x="261.25" y="543.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.27%)</title><rect x="229.2" y="565" width="3.3" height="15.0" fill="rgb(229,115,3)" rx="2" ry="2" />
<text  x="232.23" y="575.5" ></text>
</g>
<g >
<title>serde::de::MapAccess::next_value (1 samples, 0.27%)</title><rect x="806.3" y="421" width="3.3" height="15.0" fill="rgb(208,210,51)" rx="2" ry="2" />
<text  x="809.34" y="431.5" ></text>
</g>
<g >
<title>nohz_newidle_balance (2 samples, 0.55%)</title><rect x="1061.0" y="597" width="6.5" height="15.0" fill="rgb(253,60,24)" rx="2" ry="2" />
<text  x="1064.04" y="607.5" ></text>
</g>
<g >
<title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.55%)</title><rect x="251.8" y="453" width="6.5" height="15.0" fill="rgb(219,48,46)" rx="2" ry="2" />
<text  x="254.80" y="463.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (13 samples, 3.55%)</title><rect x="226.0" y="709" width="41.9" height="15.0" fill="rgb(252,148,0)" rx="2" ry="2" />
<text  x="229.01" y="719.5" >NaC..</text>
</g>
<g >
<title>std::sys::unix::fs::File::read (6 samples, 1.64%)</title><rect x="232.5" y="533" width="19.3" height="15.0" fill="rgb(246,93,46)" rx="2" ry="2" />
<text  x="235.46" y="543.5" ></text>
</g>
<g >
<title>get_cpu_device (1 samples, 0.27%)</title><rect x="1044.9" y="613" width="3.2" height="15.0" fill="rgb(243,54,45)" rx="2" ry="2" />
<text  x="1047.92" y="623.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.27%)</title><rect x="1073.9" y="613" width="3.3" height="15.0" fill="rgb(216,228,37)" rx="2" ry="2" />
<text  x="1076.93" y="623.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.27%)</title><rect x="809.6" y="517" width="3.2" height="15.0" fill="rgb(246,144,31)" rx="2" ry="2" />
<text  x="812.56" y="527.5" ></text>
</g>
<g >
<title>[unknown]  (167 samples, 45.63%)</title><rect x="267.9" y="725" width="538.4" height="15.0" fill="rgb(236,102,48)" rx="2" ry="2" />
<text  x="270.92" y="735.5" >[unknown] </text>
</g>
<g >
<title>serde::de::VariantAccess::newtype_variant (1 samples, 0.27%)</title><rect x="806.3" y="517" width="3.3" height="15.0" fill="rgb(240,48,5)" rx="2" ry="2" />
<text  x="809.34" y="527.5" ></text>
</g>
<g >
<title>cpuidle_get_cpu_driver (1 samples, 0.27%)</title><rect x="1086.8" y="597" width="3.3" height="15.0" fill="rgb(235,206,6)" rx="2" ry="2" />
<text  x="1089.83" y="607.5" ></text>
</g>
<g >
<title>menu_select (2 samples, 0.55%)</title><rect x="1044.9" y="629" width="6.5" height="15.0" fill="rgb(226,38,28)" rx="2" ry="2" />
<text  x="1047.92" y="639.5" ></text>
</g>
<g >
<title>flush_smp_call_function_from_idle (2 samples, 0.55%)</title><rect x="1080.4" y="677" width="6.4" height="15.0" fill="rgb(219,48,27)" rx="2" ry="2" />
<text  x="1083.38" y="687.5" ></text>
</g>
<g >
<title>snprintf (1 samples, 0.27%)</title><rect x="216.3" y="629" width="3.3" height="15.0" fill="rgb(213,188,35)" rx="2" ry="2" />
<text  x="219.34" y="639.5" ></text>
</g>
<g >
<title>generic_file_read_iter (6 samples, 1.64%)</title><rect x="232.5" y="309" width="19.3" height="15.0" fill="rgb(225,36,49)" rx="2" ry="2" />
<text  x="235.46" y="319.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (32 samples, 8.74%)</title><rect x="1086.8" y="693" width="103.2" height="15.0" fill="rgb(247,132,48)" rx="2" ry="2" />
<text  x="1089.83" y="703.5" >x86_64_start..</text>
</g>
<g >
<title>__schedule (5 samples, 1.37%)</title><rect x="1054.6" y="645" width="16.1" height="15.0" fill="rgb(229,149,29)" rx="2" ry="2" />
<text  x="1057.59" y="655.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.27%)</title><rect x="809.6" y="117" width="3.2" height="15.0" fill="rgb(240,224,40)" rx="2" ry="2" />
<text  x="812.56" y="127.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.27%)</title><rect x="809.6" y="421" width="3.2" height="15.0" fill="rgb(253,199,12)" rx="2" ry="2" />
<text  x="812.56" y="431.5" ></text>
</g>
<g >
<title>smp_call_function_single_async (1 samples, 0.27%)</title><rect x="1064.3" y="565" width="3.2" height="15.0" fill="rgb(227,15,12)" rx="2" ry="2" />
<text  x="1067.26" y="575.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::end_string (1 samples, 0.27%)</title><rect x="809.6" y="165" width="3.2" height="15.0" fill="rgb(222,48,2)" rx="2" ry="2" />
<text  x="812.56" y="175.5" ></text>
</g>
<g >
<title>lind_close (1 samples, 0.27%)</title><rect x="809.6" y="597" width="3.2" height="15.0" fill="rgb(207,110,4)" rx="2" ry="2" />
<text  x="812.56" y="607.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.55%)</title><rect x="261.5" y="549" width="6.4" height="15.0" fill="rgb(227,192,41)" rx="2" ry="2" />
<text  x="264.48" y="559.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.27%)</title><rect x="893.4" y="533" width="3.2" height="15.0" fill="rgb(217,202,16)" rx="2" ry="2" />
<text  x="896.39" y="543.5" ></text>
</g>
<g >
<title>cmd_record (65 samples, 17.76%)</title><rect x="10.0" y="709" width="209.6" height="15.0" fill="rgb(228,207,6)" rx="2" ry="2" />
<text  x="13.00" y="719.5" >cmd_record</text>
</g>
<g >
<title>ValidateChunkAMD64 (1 samples, 0.27%)</title><rect x="226.0" y="613" width="3.2" height="15.0" fill="rgb(239,181,29)" rx="2" ry="2" />
<text  x="229.01" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.27%)</title><rect x="886.9" y="725" width="3.3" height="15.0" fill="rgb(251,171,47)" rx="2" ry="2" />
<text  x="889.94" y="735.5" ></text>
</g>
<g >
<title>rustposix::interface::file::EmulatedFile::readat (6 samples, 1.64%)</title><rect x="232.5" y="565" width="19.3" height="15.0" fill="rgb(232,129,17)" rx="2" ry="2" />
<text  x="235.46" y="575.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str_contents (1 samples, 0.27%)</title><rect x="816.0" y="197" width="3.2" height="15.0" fill="rgb(219,56,37)" rx="2" ry="2" />
<text  x="819.01" y="207.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.27%)</title><rect x="816.0" y="485" width="3.2" height="15.0" fill="rgb(205,6,28)" rx="2" ry="2" />
<text  x="819.01" y="495.5" ></text>
</g>
<g >
<title>tick_nohz_next_event (1 samples, 0.27%)</title><rect x="1148.1" y="533" width="3.2" height="15.0" fill="rgb(215,176,20)" rx="2" ry="2" />
<text  x="1151.09" y="543.5" ></text>
</g>
<g >
<title>_nohz_idle_balance (1 samples, 0.27%)</title><rect x="1061.0" y="581" width="3.3" height="15.0" fill="rgb(213,92,13)" rx="2" ry="2" />
<text  x="1064.04" y="591.5" ></text>
</g>
<g >
<title>nohz_newidle_balance (2 samples, 0.55%)</title><rect x="1173.9" y="533" width="6.4" height="15.0" fill="rgb(225,136,40)" rx="2" ry="2" />
<text  x="1176.88" y="543.5" ></text>
</g>
</g>
</svg>
