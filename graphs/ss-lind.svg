<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>psi_task_switch (2,565,786 samples, 0.03%)</title><rect x="335.9" y="101" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="338.86" y="111.5" ></text>
</g>
<g >
<title>__raw_spin_lock_irqsave (382,733,548 samples, 4.93%)</title><rect x="214.8" y="229" width="58.2" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="217.83" y="239.5" >__raw_..</text>
</g>
<g >
<title>unlink_anon_vmas (641,546,099 samples, 8.26%)</title><rect x="10.0" y="181" width="97.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >unlink_anon..</text>
</g>
<g >
<title>enqueue_task_fair (6,480,227 samples, 0.08%)</title><rect x="671.2" y="149" width="0.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="674.16" y="159.5" ></text>
</g>
<g >
<title>perf-exec (707,405,103 samples, 9.10%)</title><rect x="107.4" y="437" width="107.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="110.42" y="447.5" >perf-exec</text>
</g>
<g >
<title>set_next_entity (1,283,525 samples, 0.02%)</title><rect x="1108.8" y="293" width="0.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1111.82" y="303.5" ></text>
</g>
<g >
<title>__switch_to (1,276,520 samples, 0.02%)</title><rect x="335.2" y="101" width="0.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="338.18" y="111.5" ></text>
</g>
<g >
<title>[unknown] (744,075 samples, 0.01%)</title><rect x="337.9" y="421" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="340.86" y="431.5" ></text>
</g>
<g >
<title>bprm_execve (641,546,099 samples, 8.26%)</title><rect x="10.0" y="357" width="97.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >bprm_execve</text>
</g>
<g >
<title>bprm_execve (707,405,103 samples, 9.10%)</title><rect x="107.4" y="357" width="107.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="110.42" y="367.5" >bprm_execve</text>
</g>
<g >
<title>sel_ldr (428,854,682 samples, 5.52%)</title><rect x="273.0" y="437" width="65.1" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="275.95" y="447.5" >sel_ldr</text>
</g>
<g >
<title>__nanosleep (24,959,022 samples, 0.32%)</title><rect x="334.0" y="261" width="3.8" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="336.97" y="271.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (2,182,416,412 samples, 28.08%)</title><rect x="595.3" y="325" width="331.4" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="598.32" y="335.5" >cpuidle_enter_state</text>
</g>
<g >
<title>native_write_msr (1,276,045 samples, 0.02%)</title><rect x="334.9" y="69" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="337.86" y="79.5" ></text>
</g>
<g >
<title>std::thread::sleep (26,290,688 samples, 0.34%)</title><rect x="333.8" y="293" width="4.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="336.77" y="303.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (707,405,103 samples, 9.10%)</title><rect x="107.4" y="149" width="107.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="110.42" y="159.5" >zap_pmd_range..</text>
</g>
<g >
<title>perf_evlist__poll_thread (382,733,548 samples, 4.93%)</title><rect x="214.8" y="389" width="58.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="217.83" y="399.5" >perf_e..</text>
</g>
<g >
<title>do_idle (3,914,117,547 samples, 50.37%)</title><rect x="594.7" y="373" width="594.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="597.73" y="383.5" >do_idle</text>
</g>
<g >
<title>ret_from_fork (12,979,279 samples, 0.17%)</title><rect x="592.8" y="421" width="1.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="595.76" y="431.5" ></text>
</g>
<g >
<title>cpu_startup_entry (3,914,117,547 samples, 50.37%)</title><rect x="594.7" y="389" width="594.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="597.73" y="399.5" >cpu_startup_entry</text>
</g>
<g >
<title>ct_idle_exit (660,287 samples, 0.01%)</title><rect x="1189.6" y="261" width="0.1" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1192.59" y="271.5" ></text>
</g>
<g >
<title>call_timer_fn (406,022,625 samples, 5.22%)</title><rect x="673.3" y="197" width="61.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="676.32" y="207.5" >call_t..</text>
</g>
<g >
<title>ct_kernel_exit_state (660,287 samples, 0.01%)</title><rect x="1189.6" y="245" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1192.59" y="255.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (26,934,064 samples, 0.35%)</title><rect x="333.8" y="405" width="4.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="336.77" y="415.5" ></text>
</g>
<g >
<title>do_sys_poll (382,733,548 samples, 4.93%)</title><rect x="214.8" y="293" width="58.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="217.83" y="303.5" >do_sys..</text>
</g>
<g >
<title>native_load_tls (682,746 samples, 0.01%)</title><rect x="592.7" y="421" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="595.66" y="431.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (2,572,858 samples, 0.03%)</title><rect x="336.7" y="197" width="0.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="339.75" y="207.5" ></text>
</g>
<g >
<title>pick_next_task_fair (1,928,132 samples, 0.02%)</title><rect x="1108.7" y="309" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1111.72" y="319.5" ></text>
</g>
<g >
<title>tick_nohz_idle_exit (525,356,553 samples, 6.76%)</title><rect x="1109.3" y="357" width="79.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1112.30" y="367.5" >tick_nohz..</text>
</g>
<g >
<title>psi_group_change (1,288,718 samples, 0.02%)</title><rect x="672.3" y="133" width="0.2" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="675.34" y="143.5" ></text>
</g>
<g >
<title>ttwu_do_activate (500,800,693 samples, 6.44%)</title><rect x="596.5" y="181" width="76.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="599.49" y="191.5" >ttwu_do_..</text>
</g>
<g >
<title>__update_load_avg_se (406,022,625 samples, 5.22%)</title><rect x="673.3" y="37" width="61.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="676.32" y="47.5" >__upda..</text>
</g>
<g >
<title>__wrgsbase_inactive (772,045 samples, 0.01%)</title><rect x="592.4" y="421" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="595.43" y="431.5" ></text>
</g>
<g >
<title>NaClSysSelect (26,934,064 samples, 0.35%)</title><rect x="333.8" y="373" width="4.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="336.77" y="383.5" ></text>
</g>
<g >
<title>____fput (758,878 samples, 0.01%)</title><rect x="592.5" y="325" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="595.54" y="335.5" ></text>
</g>
<g >
<title>__update_load_avg_se (1,270,526 samples, 0.02%)</title><rect x="671.9" y="101" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="674.95" y="111.5" ></text>
</g>
<g >
<title>try_to_wake_up (406,022,625 samples, 5.22%)</title><rect x="673.3" y="133" width="61.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="676.32" y="143.5" >try_to..</text>
</g>
<g >
<title>cpuidle_select (672,039,542 samples, 8.65%)</title><rect x="926.7" y="341" width="102.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="929.71" y="351.5" >cpuidle_select</text>
</g>
<g >
<title>bprm_execve.part.0 (641,546,099 samples, 8.26%)</title><rect x="10.0" y="341" width="97.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >bprm_execve..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (707,405,103 samples, 9.10%)</title><rect x="107.4" y="373" width="107.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="110.42" y="383.5" >do_execveat_c..</text>
</g>
<g >
<title>clock_nanosleep (24,959,022 samples, 0.32%)</title><rect x="334.0" y="245" width="3.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="336.97" y="255.5" ></text>
</g>
<g >
<title>do_idle (5,439,296 samples, 0.07%)</title><rect x="1189.2" y="325" width="0.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1192.17" y="335.5" ></text>
</g>
<g >
<title>update_load_avg (1,926,305 samples, 0.02%)</title><rect x="335.6" y="53" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="338.57" y="63.5" ></text>
</g>
<g >
<title>fdarray__poll (382,733,548 samples, 4.93%)</title><rect x="214.8" y="373" width="58.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="217.83" y="383.5" >fdarra..</text>
</g>
<g >
<title>__x64_sys_execve (707,405,103 samples, 9.10%)</title><rect x="107.4" y="389" width="107.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="110.42" y="399.5" >__x64_sys_exe..</text>
</g>
<g >
<title>[libc.so.6] (744,075 samples, 0.01%)</title><rect x="337.9" y="405" width="0.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="340.86" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (707,405,103 samples, 9.10%)</title><rect x="107.4" y="405" width="107.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="110.42" y="415.5" >do_syscall_64</text>
</g>
<g >
<title>__unmap_and_move.constprop.0 (12,979,279 samples, 0.17%)</title><rect x="592.8" y="309" width="1.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="595.76" y="319.5" ></text>
</g>
<g >
<title>load_elf_binary (707,405,103 samples, 9.10%)</title><rect x="107.4" y="293" width="107.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="110.42" y="303.5" >load_elf_binary</text>
</g>
<g >
<title>exit_to_user_mode_loop (1,283,235 samples, 0.02%)</title><rect x="336.9" y="165" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="339.94" y="175.5" ></text>
</g>
<g >
<title>mmput (641,546,099 samples, 8.26%)</title><rect x="10.0" y="245" width="97.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >mmput</text>
</g>
<g >
<title>hrtimer_cancel (525,356,553 samples, 6.76%)</title><rect x="1109.3" y="325" width="79.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1112.30" y="335.5" >hrtimer_c..</text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (1,258,843,578 samples, 16.20%)</title><rect x="735.6" y="309" width="191.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="738.56" y="319.5" >mwait_idle_with_hints.co..</text>
</g>
<g >
<title>wake_up_process (503,422,942 samples, 6.48%)</title><rect x="596.3" y="213" width="76.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="599.29" y="223.5" >wake_up_..</text>
</g>
<g >
<title>folio_migrate_mapping (12,979,279 samples, 0.17%)</title><rect x="592.8" y="277" width="1.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="595.76" y="287.5" ></text>
</g>
<g >
<title>[anon] (399,905,695 samples, 5.15%)</title><rect x="273.0" y="421" width="60.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="276.05" y="431.5" >[anon]</text>
</g>
<g >
<title>cpuidle_idle_call (5,439,296 samples, 0.07%)</title><rect x="1189.2" y="309" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1192.17" y="319.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (2,554,159 samples, 0.03%)</title><rect x="334.7" y="133" width="0.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="337.67" y="143.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (2,857,762,718 samples, 36.77%)</title><rect x="594.9" y="357" width="434.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="597.93" y="367.5" >cpuidle_idle_call</text>
</g>
<g >
<title>kfree (758,878 samples, 0.01%)</title><rect x="592.5" y="245" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="595.54" y="255.5" ></text>
</g>
<g >
<title>start_secondary (3,914,749,845 samples, 50.38%)</title><rect x="594.7" y="405" width="594.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="597.73" y="415.5" >start_secondary</text>
</g>
<g >
<title>unmap_single_vma (707,405,103 samples, 9.10%)</title><rect x="107.4" y="181" width="107.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="110.42" y="191.5" >unmap_single_..</text>
</g>
<g >
<title>tick_nohz_restart (525,356,553 samples, 6.76%)</title><rect x="1109.3" y="341" width="79.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1112.30" y="351.5" >tick_nohz..</text>
</g>
<g >
<title>schedule_idle (5,792,960 samples, 0.07%)</title><rect x="1108.4" y="357" width="0.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1111.42" y="367.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (507,278,760 samples, 6.53%)</title><rect x="596.1" y="261" width="77.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="599.10" y="271.5" >hrtimer_..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (758,878 samples, 0.01%)</title><rect x="592.5" y="389" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="595.54" y="399.5" ></text>
</g>
<g >
<title>kvfree (758,878 samples, 0.01%)</title><rect x="592.5" y="261" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="595.54" y="271.5" ></text>
</g>
<g >
<title>exit_mmap (707,405,103 samples, 9.10%)</title><rect x="107.4" y="213" width="107.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="110.42" y="223.5" >exit_mmap</text>
</g>
<g >
<title>kcompactd (12,979,279 samples, 0.17%)</title><rect x="592.8" y="389" width="1.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="595.76" y="399.5" ></text>
</g>
<g >
<title>tick_nohz_get_next_hrtimer (730,585 samples, 0.01%)</title><rect x="1028.8" y="341" width="0.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1031.76" y="351.5" ></text>
</g>
<g >
<title>menu_select (672,039,542 samples, 8.65%)</title><rect x="926.7" y="325" width="102.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="929.71" y="335.5" >menu_select</text>
</g>
<g >
<title>proactive_compact_node (12,979,279 samples, 0.17%)</title><rect x="592.8" y="373" width="1.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="595.76" y="383.5" ></text>
</g>
<g >
<title>__schedule (5,792,960 samples, 0.07%)</title><rect x="1108.4" y="341" width="0.9" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1111.42" y="351.5" ></text>
</g>
<g >
<title>__mmput (641,546,099 samples, 8.26%)</title><rect x="10.0" y="229" width="97.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >__mmput</text>
</g>
<g >
<title>exec_binprm (641,546,099 samples, 8.26%)</title><rect x="10.0" y="325" width="97.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >exec_binprm</text>
</g>
<g >
<title>unmap_vmas (707,405,103 samples, 9.10%)</title><rect x="107.4" y="197" width="107.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="110.42" y="207.5" >unmap_vmas</text>
</g>
<g >
<title>compact_zone (12,979,279 samples, 0.17%)</title><rect x="592.8" y="357" width="1.9" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="595.76" y="367.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,284,693 samples, 0.02%)</title><rect x="595.1" y="325" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="598.12" y="335.5" ></text>
</g>
<g >
<title>enqueue_task (406,022,625 samples, 5.22%)</title><rect x="673.3" y="101" width="61.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="676.32" y="111.5" >enqueu..</text>
</g>
<g >
<title>__do_softirq (406,022,625 samples, 5.22%)</title><rect x="673.3" y="245" width="61.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="676.32" y="255.5" >__do_s..</text>
</g>
<g >
<title>schedule (9,134,159 samples, 0.12%)</title><rect x="335.1" y="133" width="1.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="338.06" y="143.5" ></text>
</g>
<g >
<title>exec_binprm (707,405,103 samples, 9.10%)</title><rect x="107.4" y="325" width="107.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="110.42" y="335.5" >exec_binprm</text>
</g>
<g >
<title>kmem_cache_free (641,546,099 samples, 8.26%)</title><rect x="10.0" y="165" width="97.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >kmem_cache_..</text>
</g>
<g >
<title>obj_cgroup_uncharge (758,878 samples, 0.01%)</title><rect x="592.5" y="213" width="0.2" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="595.54" y="223.5" ></text>
</g>
<g >
<title>exec_mmap (707,405,103 samples, 9.10%)</title><rect x="107.4" y="261" width="107.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="110.42" y="271.5" >exec_mmap</text>
</g>
<g >
<title>refill_obj_stock (758,878 samples, 0.01%)</title><rect x="592.5" y="197" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="595.54" y="207.5" ></text>
</g>
<g >
<title>tick_program_event (525,356,553 samples, 6.76%)</title><rect x="1109.3" y="277" width="79.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1112.30" y="287.5" >tick_prog..</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (918,443,965 samples, 11.82%)</title><rect x="596.0" y="293" width="139.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="599.00" y="303.5" >sysvec_apic_timer..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::select_syscall (26,934,064 samples, 0.35%)</title><rect x="333.8" y="309" width="4.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="336.77" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (382,733,548 samples, 4.93%)</title><rect x="214.8" y="325" width="58.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="217.83" y="335.5" >do_sys..</text>
</g>
<g >
<title>__x64_sys_poll (382,733,548 samples, 4.93%)</title><rect x="214.8" y="309" width="58.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="217.83" y="319.5" >__x64_..</text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (26,934,064 samples, 0.35%)</title><rect x="333.8" y="325" width="4.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="336.77" y="335.5" ></text>
</g>
<g >
<title>cpu_startup_entry (5,439,296 samples, 0.07%)</title><rect x="1189.2" y="341" width="0.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.17" y="351.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (2,032,532 samples, 0.03%)</title><rect x="1189.7" y="261" width="0.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1192.69" y="271.5" ></text>
</g>
<g >
<title>enqueue_task (9,689,018 samples, 0.12%)</title><rect x="671.1" y="165" width="1.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="674.06" y="175.5" ></text>
</g>
<g >
<title>lapic_next_deadline (525,356,553 samples, 6.76%)</title><rect x="1109.3" y="261" width="79.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1112.30" y="271.5" >lapic_nex..</text>
</g>
<g >
<title>tick_nohz_get_sleep_length (1,278,670 samples, 0.02%)</title><rect x="1028.6" y="309" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1031.56" y="319.5" ></text>
</g>
<g >
<title>begin_new_exec (641,546,099 samples, 8.26%)</title><rect x="10.0" y="277" width="97.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >begin_new_e..</text>
</g>
<g >
<title>start_kernel (5,439,296 samples, 0.07%)</title><rect x="1189.2" y="389" width="0.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1192.17" y="399.5" ></text>
</g>
<g >
<title>hrtimer_nanosleep (12,319,871 samples, 0.16%)</title><rect x="334.6" y="165" width="1.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="337.57" y="175.5" ></text>
</g>
<g >
<title>psi_task_switch (1,932,281 samples, 0.02%)</title><rect x="1109.0" y="325" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1112.01" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_execve (641,546,099 samples, 8.26%)</title><rect x="10.0" y="389" width="97.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >__x64_sys_e..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (17,506,097 samples, 0.23%)</title><rect x="334.5" y="229" width="2.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="337.48" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (17,506,097 samples, 0.23%)</title><rect x="334.5" y="213" width="2.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="337.48" y="223.5" ></text>
</g>
<g >
<title>_nohz_idle_balance.isra.0 (523,926,582 samples, 6.74%)</title><rect x="1028.9" y="341" width="79.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1031.87" y="351.5" >_nohz_idl..</text>
</g>
<g >
<title>seq_release (758,878 samples, 0.01%)</title><rect x="592.5" y="277" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="595.54" y="287.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (508,567,331 samples, 6.54%)</title><rect x="596.0" y="277" width="77.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="599.00" y="287.5" >__sysvec..</text>
</g>
<g >
<title>begin_new_exec (707,405,103 samples, 9.10%)</title><rect x="107.4" y="277" width="107.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="110.42" y="287.5" >begin_new_exec</text>
</g>
<g >
<title>__poll (382,733,548 samples, 4.93%)</title><rect x="214.8" y="357" width="58.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="217.83" y="367.5" >__poll</text>
</g>
<g >
<title>update_load_avg (2,555,261 samples, 0.03%)</title><rect x="671.8" y="117" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="674.75" y="127.5" ></text>
</g>
<g >
<title>mmput (707,405,103 samples, 9.10%)</title><rect x="107.4" y="245" width="107.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="110.42" y="255.5" >mmput</text>
</g>
<g >
<title>update_rq_clock (708,784 samples, 0.01%)</title><rect x="672.6" y="197" width="0.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="675.63" y="207.5" ></text>
</g>
<g >
<title>get_timespec64 (1,344,221 samples, 0.02%)</title><rect x="336.4" y="181" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="339.45" y="191.5" ></text>
</g>
<g >
<title>__run_timers.part.0 (406,022,625 samples, 5.22%)</title><rect x="673.3" y="213" width="61.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="676.32" y="223.5" >__run_..</text>
</g>
<g >
<title>dequeue_task_fair (3,208,737 samples, 0.04%)</title><rect x="335.4" y="85" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="338.37" y="95.5" ></text>
</g>
<g >
<title>irq_exit_rcu (406,022,625 samples, 5.22%)</title><rect x="673.3" y="277" width="61.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="676.32" y="287.5" >irq_ex..</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::normpath (399,263,223 samples, 5.14%)</title><rect x="273.0" y="405" width="60.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="276.05" y="415.5" >rustpo..</text>
</g>
<g >
<title>do_nanosleep (12,319,871 samples, 0.16%)</title><rect x="334.6" y="149" width="1.8" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="337.57" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (382,733,548 samples, 4.93%)</title><rect x="214.8" y="405" width="58.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="217.83" y="415.5" >[libc...</text>
</g>
<g >
<title>kernfs_fop_release (758,878 samples, 0.01%)</title><rect x="592.5" y="293" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="595.54" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (382,733,548 samples, 4.93%)</title><rect x="214.8" y="341" width="58.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="217.83" y="351.5" >entry_..</text>
</g>
<g >
<title>__kmem_cache_free (758,878 samples, 0.01%)</title><rect x="592.5" y="229" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="595.54" y="239.5" ></text>
</g>
<g >
<title>clockevents_program_event (1,276,045 samples, 0.02%)</title><rect x="334.9" y="85" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="337.86" y="95.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (406,022,625 samples, 5.22%)</title><rect x="673.3" y="261" width="61.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="676.32" y="271.5" >__irq_..</text>
</g>
<g >
<title>enqueue_task_fair (406,022,625 samples, 5.22%)</title><rect x="673.3" y="85" width="61.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="676.32" y="95.5" >enqueu..</text>
</g>
<g >
<title>enqueue_entity (5,836,839 samples, 0.08%)</title><rect x="671.3" y="133" width="0.8" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="674.26" y="143.5" ></text>
</g>
<g >
<title>dequeue_entity (3,208,737 samples, 0.04%)</title><rect x="335.4" y="69" width="0.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="338.37" y="79.5" ></text>
</g>
<g >
<title>psi_task_change (1,922,484 samples, 0.02%)</title><rect x="672.2" y="149" width="0.3" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="675.24" y="159.5" ></text>
</g>
<g >
<title>native_apic_msr_eoi_write (2,560,561 samples, 0.03%)</title><rect x="735.1" y="277" width="0.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="738.07" y="287.5" ></text>
</g>
<g >
<title>run_timer_softirq (406,022,625 samples, 5.22%)</title><rect x="673.3" y="229" width="61.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="676.32" y="239.5" >run_ti..</text>
</g>
<g >
<title>migrate_pages (12,979,279 samples, 0.17%)</title><rect x="592.8" y="341" width="1.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="595.76" y="351.5" ></text>
</g>
<g >
<title>wake_up_process (406,022,625 samples, 5.22%)</title><rect x="673.3" y="149" width="61.7" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="676.32" y="159.5" >wake_u..</text>
</g>
<g >
<title>free_pgtables (641,546,099 samples, 8.26%)</title><rect x="10.0" y="197" width="97.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >free_pgtables</text>
</g>
<g >
<title>secondary_startup_64_no_verify (3,920,189,141 samples, 50.45%)</title><rect x="594.7" y="421" width="595.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="597.73" y="431.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>unmap_page_range (707,405,103 samples, 9.10%)</title><rect x="107.4" y="165" width="107.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="110.42" y="175.5" >unmap_page_ra..</text>
</g>
<g >
<title>__slab_free (641,546,099 samples, 8.26%)</title><rect x="10.0" y="149" width="97.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >__slab_free</text>
</g>
<g >
<title>cpuidle_enter (4,764,097 samples, 0.06%)</title><rect x="1189.3" y="293" width="0.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.28" y="303.5" ></text>
</g>
<g >
<title>nohz_run_idle_balance (523,926,582 samples, 6.74%)</title><rect x="1028.9" y="357" width="79.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1031.87" y="367.5" >nohz_run_..</text>
</g>
<g >
<title>do_syscall_64 (641,546,099 samples, 8.26%)</title><rect x="10.0" y="405" width="97.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >do_syscall_64</text>
</g>
<g >
<title>kthread (12,979,279 samples, 0.17%)</title><rect x="592.8" y="405" width="1.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="595.76" y="415.5" ></text>
</g>
<g >
<title>all (7,770,997,339 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>pick_next_task (1,928,132 samples, 0.02%)</title><rect x="1108.7" y="325" width="0.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1111.72" y="335.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel.part.0 (525,356,553 samples, 6.76%)</title><rect x="1109.3" y="309" width="79.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1112.30" y="319.5" >hrtimer_t..</text>
</g>
<g >
<title>__update_load_avg_se (1,281,453 samples, 0.02%)</title><rect x="335.7" y="37" width="0.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="338.67" y="47.5" ></text>
</g>
<g >
<title>do_syscall_64 (758,878 samples, 0.01%)</title><rect x="592.5" y="405" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="595.54" y="415.5" ></text>
</g>
<g >
<title>__entry_text_start (1,292,712 samples, 0.02%)</title><rect x="334.1" y="229" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="337.07" y="239.5" ></text>
</g>
<g >
<title>__update_load_avg_cfs_rq (1,284,735 samples, 0.02%)</title><rect x="671.8" y="101" width="0.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="674.75" y="111.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (758,878 samples, 0.01%)</title><rect x="592.5" y="373" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="595.54" y="383.5" ></text>
</g>
<g >
<title>__fput (758,878 samples, 0.01%)</title><rect x="592.5" y="309" width="0.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="595.54" y="319.5" ></text>
</g>
<g >
<title>cmpxchg_double_slab.constprop.0.isra.0 (641,546,099 samples, 8.26%)</title><rect x="10.0" y="133" width="97.4" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >cmpxchg_dou..</text>
</g>
<g >
<title>common_nsleep (12,319,871 samples, 0.16%)</title><rect x="334.6" y="181" width="1.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="337.57" y="191.5" ></text>
</g>
<g >
<title>ttwu_do_activate (406,022,625 samples, 5.22%)</title><rect x="673.3" y="117" width="61.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="676.32" y="127.5" >ttwu_d..</text>
</g>
<g >
<title>search_binary_handler (641,546,099 samples, 8.26%)</title><rect x="10.0" y="309" width="97.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >search_bina..</text>
</g>
<g >
<title>dequeue_task (3,208,737 samples, 0.04%)</title><rect x="335.4" y="101" width="0.5" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="338.37" y="111.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (918,443,965 samples, 11.82%)</title><rect x="596.0" y="309" width="139.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="599.00" y="319.5" >asm_sysvec_apic_t..</text>
</g>
<g >
<title>search_binary_handler (707,405,103 samples, 9.10%)</title><rect x="107.4" y="309" width="107.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="110.42" y="319.5" >search_binary..</text>
</g>
<g >
<title>NaClSysSelectDecoder (26,934,064 samples, 0.35%)</title><rect x="333.8" y="389" width="4.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="336.77" y="399.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (5,439,296 samples, 0.07%)</title><rect x="1189.2" y="405" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.17" y="415.5" ></text>
</g>
<g >
<title>__x64_sys_clock_nanosleep (14,298,745 samples, 0.18%)</title><rect x="334.5" y="197" width="2.1" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="337.48" y="207.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (707,405,103 samples, 9.10%)</title><rect x="107.4" y="341" width="107.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="110.42" y="351.5" >bprm_execve.p..</text>
</g>
<g >
<title>__switch_to (744,576 samples, 0.01%)</title><rect x="334.4" y="229" width="0.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="337.37" y="239.5" ></text>
</g>
<g >
<title>__remove_hrtimer (525,356,553 samples, 6.76%)</title><rect x="1109.3" y="293" width="79.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1112.30" y="303.5" >__remove_..</text>
</g>
<g >
<title>obj_cgroup_uncharge_pages (758,878 samples, 0.01%)</title><rect x="592.5" y="181" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="595.54" y="191.5" ></text>
</g>
<g >
<title>cpuidle_enter (2,184,356,396 samples, 28.11%)</title><rect x="595.0" y="341" width="331.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="598.02" y="351.5" >cpuidle_enter</text>
</g>
<g >
<title>__clone (382,733,548 samples, 4.93%)</title><rect x="214.8" y="421" width="58.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="217.83" y="431.5" >__clone</text>
</g>
<g >
<title>delayed_work_timer_fn (406,022,625 samples, 5.22%)</title><rect x="673.3" y="181" width="61.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="676.32" y="191.5" >delaye..</text>
</g>
<g >
<title>zap_pte_range (707,405,103 samples, 9.10%)</title><rect x="107.4" y="133" width="107.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="110.42" y="143.5" >zap_pte_range</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (758,878 samples, 0.01%)</title><rect x="592.5" y="421" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="595.54" y="431.5" ></text>
</g>
<g >
<title>std::sys::unix::thread::Thread::sleep (26,290,688 samples, 0.34%)</title><rect x="333.8" y="277" width="4.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="336.77" y="287.5" ></text>
</g>
<g >
<title>__schedule (9,134,159 samples, 0.12%)</title><rect x="335.1" y="117" width="1.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="338.06" y="127.5" ></text>
</g>
<g >
<title>load_elf_binary (641,546,099 samples, 8.26%)</title><rect x="10.0" y="293" width="97.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >load_elf_bi..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (641,546,099 samples, 8.26%)</title><rect x="10.0" y="421" width="97.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >entry_SYSCA..</text>
</g>
<g >
<title>move_to_new_folio (12,979,279 samples, 0.17%)</title><rect x="592.8" y="293" width="1.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="595.76" y="303.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (907,476 samples, 0.01%)</title><rect x="1189.5" y="245" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1192.45" y="255.5" ></text>
</g>
<g >
<title>__update_blocked_fair (523,926,582 samples, 6.74%)</title><rect x="1028.9" y="309" width="79.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1031.87" y="319.5" >__update_..</text>
</g>
<g >
<title>_raw_spin_lock_irqsave (382,733,548 samples, 4.93%)</title><rect x="214.8" y="245" width="58.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="217.83" y="255.5" >_raw_s..</text>
</g>
<g >
<title>exit_to_user_mode_loop (758,878 samples, 0.01%)</title><rect x="592.5" y="357" width="0.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="595.54" y="367.5" ></text>
</g>
<g >
<title>__queue_work (406,022,625 samples, 5.22%)</title><rect x="673.3" y="165" width="61.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="676.32" y="175.5" >__queu..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (907,476 samples, 0.01%)</title><rect x="1189.5" y="261" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1192.45" y="271.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (505,988,329 samples, 6.51%)</title><rect x="596.1" y="245" width="76.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="599.10" y="255.5" >__hrtime..</text>
</g>
<g >
<title>hrtimer_reprogram (1,276,045 samples, 0.02%)</title><rect x="334.9" y="117" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="337.86" y="127.5" ></text>
</g>
<g >
<title>poll_freewait (382,733,548 samples, 4.93%)</title><rect x="214.8" y="277" width="58.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="217.83" y="287.5" >poll_f..</text>
</g>
<g >
<title>arch_call_rest_init (5,439,296 samples, 0.07%)</title><rect x="1189.2" y="373" width="0.8" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1192.17" y="383.5" ></text>
</g>
<g >
<title>native_apic_msr_eoi_write (907,476 samples, 0.01%)</title><rect x="1189.5" y="229" width="0.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1192.45" y="239.5" ></text>
</g>
<g >
<title>dispatcher (26,934,064 samples, 0.35%)</title><rect x="333.8" y="341" width="4.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="336.77" y="351.5" ></text>
</g>
<g >
<title>update_blocked_averages (523,926,582 samples, 6.74%)</title><rect x="1028.9" y="325" width="79.5" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="1031.87" y="335.5" >update_bl..</text>
</g>
<g >
<title>hrtimer_wakeup (503,422,942 samples, 6.48%)</title><rect x="596.3" y="229" width="76.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="599.29" y="239.5" >hrtimer_..</text>
</g>
<g >
<title>update_load_avg (406,022,625 samples, 5.22%)</title><rect x="673.3" y="53" width="61.7" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="676.32" y="63.5" >update..</text>
</g>
<g >
<title>cpuidle_enter_state (4,764,097 samples, 0.06%)</title><rect x="1189.3" y="277" width="0.7" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1192.28" y="287.5" ></text>
</g>
<g >
<title>enqueue_entity (406,022,625 samples, 5.22%)</title><rect x="673.3" y="69" width="61.7" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="676.32" y="79.5" >enqueu..</text>
</g>
<g >
<title>os_xsave (2,857,361 samples, 0.04%)</title><rect x="337.2" y="229" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="340.23" y="239.5" ></text>
</g>
<g >
<title>exec_mmap (641,546,099 samples, 8.26%)</title><rect x="10.0" y="261" width="97.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >exec_mmap</text>
</g>
<g >
<title>rest_init (5,439,296 samples, 0.07%)</title><rect x="1189.2" y="357" width="0.8" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1192.17" y="367.5" ></text>
</g>
<g >
<title>lind (641,546,099 samples, 8.26%)</title><rect x="10.0" y="437" width="97.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >lind</text>
</g>
<g >
<title>do_execveat_common.isra.0 (641,546,099 samples, 8.26%)</title><rect x="10.0" y="373" width="97.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >do_execveat..</text>
</g>
<g >
<title>task_work_run (758,878 samples, 0.01%)</title><rect x="592.5" y="341" width="0.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="595.54" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (707,405,103 samples, 9.10%)</title><rect x="107.4" y="421" width="107.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="110.42" y="431.5" >entry_SYSCALL..</text>
</g>
<g >
<title>remove_wait_queue (382,733,548 samples, 4.93%)</title><rect x="214.8" y="261" width="58.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="217.83" y="271.5" >remove..</text>
</g>
<g >
<title>_copy_from_user (702,460 samples, 0.01%)</title><rect x="336.4" y="165" width="0.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="339.45" y="175.5" ></text>
</g>
<g >
<title>[sel_ldr] (26,934,064 samples, 0.35%)</title><rect x="333.8" y="421" width="4.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="336.77" y="431.5" ></text>
</g>
<g >
<title>try_to_wake_up (502,068,617 samples, 6.46%)</title><rect x="596.4" y="197" width="76.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="599.39" y="207.5" >try_to_w..</text>
</g>
<g >
<title>perf (382,733,564 samples, 4.93%)</title><rect x="214.8" y="437" width="58.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="217.83" y="447.5" >perf</text>
</g>
<g >
<title>__mmput (707,405,103 samples, 9.10%)</title><rect x="107.4" y="229" width="107.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="110.42" y="239.5" >__mmput</text>
</g>
<g >
<title>tick_program_event (1,276,045 samples, 0.02%)</title><rect x="334.9" y="101" width="0.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="337.86" y="111.5" ></text>
</g>
<g >
<title>lind_select (26,934,064 samples, 0.35%)</title><rect x="333.8" y="357" width="4.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="336.77" y="367.5" ></text>
</g>
<g >
<title>unmap_and_move (12,979,279 samples, 0.17%)</title><rect x="592.8" y="325" width="1.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="595.76" y="335.5" ></text>
</g>
<g >
<title>exit_mmap (641,546,099 samples, 8.26%)</title><rect x="10.0" y="213" width="97.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >exit_mmap</text>
</g>
<g >
<title>exit_to_user_mode_prepare (2,572,858 samples, 0.03%)</title><rect x="336.7" y="181" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="339.75" y="191.5" ></text>
</g>
<g >
<title>swapper (5,610,457,891 samples, 72.20%)</title><rect x="338.1" y="437" width="851.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="341.07" y="447.5" >swapper</text>
</g>
</g>
</svg>
