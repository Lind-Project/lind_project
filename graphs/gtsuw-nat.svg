<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.57%)</title><rect x="993.3" y="389" width="6.8" height="15.0" fill="rgb(217,157,47)" rx="2" ry="2" />
<text  x="996.33" y="399.5" ></text>
</g>
<g >
<title>clocksource_watchdog (1 samples, 0.57%)</title><rect x="993.3" y="309" width="6.8" height="15.0" fill="rgb(242,72,30)" rx="2" ry="2" />
<text  x="996.33" y="319.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.57%)</title><rect x="898.4" y="341" width="6.8" height="15.0" fill="rgb(225,108,50)" rx="2" ry="2" />
<text  x="901.39" y="351.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.57%)</title><rect x="16.8" y="389" width="6.8" height="15.0" fill="rgb(213,224,1)" rx="2" ry="2" />
<text  x="19.78" y="399.5" ></text>
</g>
<g >
<title>event_function_call (64 samples, 36.78%)</title><rect x="464.4" y="341" width="434.0" height="15.0" fill="rgb(224,210,41)" rx="2" ry="2" />
<text  x="467.37" y="351.5" >event_function_call</text>
</g>
<g >
<title>ext4_file_read_iter (11 samples, 6.32%)</title><rect x="383.0" y="293" width="74.6" height="15.0" fill="rgb(251,100,8)" rx="2" ry="2" />
<text  x="385.99" y="303.5" >ext4_fil..</text>
</g>
<g >
<title>alloc_set_pte (1 samples, 0.57%)</title><rect x="898.4" y="53" width="6.8" height="15.0" fill="rgb(237,28,4)" rx="2" ry="2" />
<text  x="901.39" y="63.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (19 samples, 10.92%)</title><rect x="1000.1" y="453" width="128.9" height="15.0" fill="rgb(218,135,31)" rx="2" ry="2" />
<text  x="1003.11" y="463.5" >mwait_idle_with_..</text>
</g>
<g >
<title>cpu_startup_entry (23 samples, 13.22%)</title><rect x="993.3" y="533" width="156.0" height="15.0" fill="rgb(219,186,37)" rx="2" ry="2" />
<text  x="996.33" y="543.5" >cpu_startup_entry</text>
</g>
<g >
<title>[grep] (62 samples, 35.63%)</title><rect x="37.1" y="501" width="420.5" height="15.0" fill="rgb(237,147,4)" rx="2" ry="2" />
<text  x="40.13" y="511.5" >[grep]</text>
</g>
<g >
<title>find_get_pages_contig (1 samples, 0.57%)</title><rect x="450.8" y="229" width="6.8" height="15.0" fill="rgb(220,1,14)" rx="2" ry="2" />
<text  x="453.80" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 6.32%)</title><rect x="383.0" y="453" width="74.6" height="15.0" fill="rgb(234,76,33)" rx="2" ry="2" />
<text  x="385.99" y="463.5" >entry_SY..</text>
</g>
<g >
<title>copy_page_to_iter (10 samples, 5.75%)</title><rect x="383.0" y="245" width="67.8" height="15.0" fill="rgb(224,2,27)" rx="2" ry="2" />
<text  x="385.99" y="255.5" >copy_pa..</text>
</g>
<g >
<title>__libc_start_main (3 samples, 1.72%)</title><rect x="16.8" y="549" width="20.3" height="15.0" fill="rgb(236,169,12)" rx="2" ry="2" />
<text  x="19.78" y="559.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (6 samples, 3.45%)</title><rect x="1149.3" y="533" width="40.7" height="15.0" fill="rgb(228,26,28)" rx="2" ry="2" />
<text  x="1152.31" y="543.5" >x86..</text>
</g>
<g >
<title>alloc_bprm (1 samples, 0.57%)</title><rect x="457.6" y="405" width="6.8" height="15.0" fill="rgb(228,28,7)" rx="2" ry="2" />
<text  x="460.59" y="415.5" ></text>
</g>
<g >
<title>flush_smp_call_function_from_idle (1 samples, 0.57%)</title><rect x="1135.7" y="501" width="6.8" height="15.0" fill="rgb(214,120,29)" rx="2" ry="2" />
<text  x="1138.75" y="511.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.57%)</title><rect x="1183.2" y="389" width="6.8" height="15.0" fill="rgb(247,116,41)" rx="2" ry="2" />
<text  x="1186.22" y="399.5" ></text>
</g>
<g >
<title>remote_function (64 samples, 36.78%)</title><rect x="464.4" y="293" width="434.0" height="15.0" fill="rgb(226,106,25)" rx="2" ry="2" />
<text  x="467.37" y="303.5" >remote_function</text>
</g>
<g >
<title>insert_vm_struct (1 samples, 0.57%)</title><rect x="457.6" y="373" width="6.8" height="15.0" fill="rgb(253,198,23)" rx="2" ry="2" />
<text  x="460.59" y="383.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.57%)</title><rect x="16.8" y="293" width="6.8" height="15.0" fill="rgb(212,183,47)" rx="2" ry="2" />
<text  x="19.78" y="303.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (6 samples, 3.45%)</title><rect x="1149.3" y="549" width="40.7" height="15.0" fill="rgb(240,115,39)" rx="2" ry="2" />
<text  x="1152.31" y="559.5" >x86..</text>
</g>
<g >
<title>perf-exec (1 samples, 0.57%)</title><rect x="457.6" y="581" width="6.8" height="15.0" fill="rgb(218,82,16)" rx="2" ry="2" />
<text  x="460.59" y="591.5" ></text>
</g>
<g >
<title>do_fault_around (1 samples, 0.57%)</title><rect x="16.8" y="277" width="6.8" height="15.0" fill="rgb(218,59,1)" rx="2" ry="2" />
<text  x="19.78" y="287.5" ></text>
</g>
<g >
<title>unset_bash_input (1 samples, 0.57%)</title><rect x="10.0" y="549" width="6.8" height="15.0" fill="rgb(252,154,20)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>[grep] (51 samples, 29.31%)</title><rect x="37.1" y="469" width="345.9" height="15.0" fill="rgb(231,24,41)" rx="2" ry="2" />
<text  x="40.13" y="479.5" >[grep]</text>
</g>
<g >
<title>arch_call_rest_init (6 samples, 3.45%)</title><rect x="1149.3" y="501" width="40.7" height="15.0" fill="rgb(224,196,5)" rx="2" ry="2" />
<text  x="1152.31" y="511.5" >arc..</text>
</g>
<g >
<title>poll_idle (2 samples, 1.15%)</title><rect x="1156.1" y="389" width="13.6" height="15.0" fill="rgb(247,177,24)" rx="2" ry="2" />
<text  x="1159.09" y="399.5" ></text>
</g>
<g >
<title>[bash] (3 samples, 1.72%)</title><rect x="16.8" y="469" width="20.3" height="15.0" fill="rgb(245,42,29)" rx="2" ry="2" />
<text  x="19.78" y="479.5" ></text>
</g>
<g >
<title>perf_ioctl (64 samples, 36.78%)</title><rect x="464.4" y="405" width="434.0" height="15.0" fill="rgb(205,160,39)" rx="2" ry="2" />
<text  x="467.37" y="415.5" >perf_ioctl</text>
</g>
<g >
<title>do_iter_readv_writev (11 samples, 6.32%)</title><rect x="383.0" y="309" width="74.6" height="15.0" fill="rgb(242,177,40)" rx="2" ry="2" />
<text  x="385.99" y="319.5" >do_iter_..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.57%)</title><rect x="898.4" y="165" width="6.8" height="15.0" fill="rgb(247,50,33)" rx="2" ry="2" />
<text  x="901.39" y="175.5" ></text>
</g>
<g >
<title>copy_page_to_iter_iovec (10 samples, 5.75%)</title><rect x="383.0" y="229" width="67.8" height="15.0" fill="rgb(231,107,22)" rx="2" ry="2" />
<text  x="385.99" y="239.5" >copy_pa..</text>
</g>
<g >
<title>event_function (64 samples, 36.78%)</title><rect x="464.4" y="277" width="434.0" height="15.0" fill="rgb(248,192,48)" rx="2" ry="2" />
<text  x="467.37" y="287.5" >event_function</text>
</g>
<g >
<title>do_idle (6 samples, 3.45%)</title><rect x="1149.3" y="453" width="40.7" height="15.0" fill="rgb(240,80,24)" rx="2" ry="2" />
<text  x="1152.31" y="463.5" >do_..</text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.57%)</title><rect x="457.6" y="437" width="6.8" height="15.0" fill="rgb(228,196,30)" rx="2" ry="2" />
<text  x="460.59" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (64 samples, 36.78%)</title><rect x="464.4" y="437" width="434.0" height="15.0" fill="rgb(223,182,2)" rx="2" ry="2" />
<text  x="467.37" y="447.5" >do_syscall_64</text>
</g>
<g >
<title>ion (1 samples, 0.57%)</title><rect x="898.4" y="437" width="6.8" height="15.0" fill="rgb(211,114,22)" rx="2" ry="2" />
<text  x="901.39" y="447.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (1 samples, 0.57%)</title><rect x="898.4" y="501" width="6.8" height="15.0" fill="rgb(239,150,53)" rx="2" ry="2" />
<text  x="901.39" y="511.5" ></text>
</g>
<g >
<title>do_iter_read (11 samples, 6.32%)</title><rect x="383.0" y="325" width="74.6" height="15.0" fill="rgb(209,196,21)" rx="2" ry="2" />
<text  x="385.99" y="335.5" >do_iter_..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.57%)</title><rect x="23.6" y="373" width="6.7" height="15.0" fill="rgb(237,162,16)" rx="2" ry="2" />
<text  x="26.56" y="383.5" ></text>
</g>
<g >
<title>swapper (42 samples, 24.14%)</title><rect x="905.2" y="581" width="284.8" height="15.0" fill="rgb(225,101,41)" rx="2" ry="2" />
<text  x="908.17" y="591.5" >swapper</text>
</g>
<g >
<title>smp_call_function_single (64 samples, 36.78%)</title><rect x="464.4" y="325" width="434.0" height="15.0" fill="rgb(243,26,31)" rx="2" ry="2" />
<text  x="467.37" y="335.5" >smp_call_function_single</text>
</g>
<g >
<title>security_vm_enough_memory_mm (1 samples, 0.57%)</title><rect x="457.6" y="357" width="6.8" height="15.0" fill="rgb(246,156,3)" rx="2" ry="2" />
<text  x="460.59" y="367.5" ></text>
</g>
<g >
<title>main (3 samples, 1.72%)</title><rect x="16.8" y="533" width="20.3" height="15.0" fill="rgb(238,208,20)" rx="2" ry="2" />
<text  x="19.78" y="543.5" ></text>
</g>
<g >
<title>do_execveat_common (1 samples, 0.57%)</title><rect x="457.6" y="421" width="6.8" height="15.0" fill="rgb(221,45,0)" rx="2" ry="2" />
<text  x="460.59" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.57%)</title><rect x="457.6" y="469" width="6.8" height="15.0" fill="rgb(216,69,26)" rx="2" ry="2" />
<text  x="460.59" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.57%)</title><rect x="23.6" y="389" width="6.7" height="15.0" fill="rgb(205,52,12)" rx="2" ry="2" />
<text  x="26.56" y="399.5" ></text>
</g>
<g >
<title>__GI___read (11 samples, 6.32%)</title><rect x="383.0" y="469" width="74.6" height="15.0" fill="rgb(227,225,42)" rx="2" ry="2" />
<text  x="385.99" y="479.5" >__GI___r..</text>
</g>
<g >
<title>__GI___getpid (2 samples, 1.15%)</title><rect x="16.8" y="405" width="13.5" height="15.0" fill="rgb(231,202,11)" rx="2" ry="2" />
<text  x="19.78" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.57%)</title><rect x="898.4" y="149" width="6.8" height="15.0" fill="rgb(227,31,7)" rx="2" ry="2" />
<text  x="901.39" y="159.5" ></text>
</g>
<g >
<title>__run_timers.part.0 (1 samples, 0.57%)</title><rect x="993.3" y="341" width="6.8" height="15.0" fill="rgb(231,2,26)" rx="2" ry="2" />
<text  x="996.33" y="351.5" ></text>
</g>
<g >
<title>[[stack]] (1 samples, 0.57%)</title><rect x="10.0" y="565" width="6.8" height="15.0" fill="rgb(238,226,31)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.57%)</title><rect x="993.3" y="357" width="6.8" height="15.0" fill="rgb(238,215,21)" rx="2" ry="2" />
<text  x="996.33" y="367.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.57%)</title><rect x="898.4" y="133" width="6.8" height="15.0" fill="rgb(207,108,6)" rx="2" ry="2" />
<text  x="901.39" y="143.5" ></text>
</g>
<g >
<title>cs_watchdog_read (1 samples, 0.57%)</title><rect x="993.3" y="293" width="6.8" height="15.0" fill="rgb(223,65,10)" rx="2" ry="2" />
<text  x="996.33" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_read (11 samples, 6.32%)</title><rect x="383.0" y="421" width="74.6" height="15.0" fill="rgb(223,91,45)" rx="2" ry="2" />
<text  x="385.99" y="431.5" >__x64_sy..</text>
</g>
<g >
<title>__perf_event_enable (64 samples, 36.78%)</title><rect x="464.4" y="261" width="434.0" height="15.0" fill="rgb(253,175,5)" rx="2" ry="2" />
<text  x="467.37" y="271.5" >__perf_event_enable</text>
</g>
<g >
<title>[grep] (62 samples, 35.63%)</title><rect x="37.1" y="485" width="420.5" height="15.0" fill="rgb(233,60,32)" rx="2" ry="2" />
<text  x="40.13" y="495.5" >[grep]</text>
</g>
<g >
<title>vfs_iter_write (1 samples, 0.57%)</title><rect x="898.4" y="293" width="6.8" height="15.0" fill="rgb(215,21,49)" rx="2" ry="2" />
<text  x="901.39" y="303.5" ></text>
</g>
<g >
<title>_perf_event_enable (64 samples, 36.78%)</title><rect x="464.4" y="357" width="434.0" height="15.0" fill="rgb(241,58,4)" rx="2" ry="2" />
<text  x="467.37" y="367.5" >_perf_event_enable</text>
</g>
<g >
<title>__x64_sys_ioctl (64 samples, 36.78%)</title><rect x="464.4" y="421" width="434.0" height="15.0" fill="rgb(236,202,53)" rx="2" ry="2" />
<text  x="467.37" y="431.5" >__x64_sys_ioctl</text>
</g>
<g >
<title>ext4_file_write_iter (1 samples, 0.57%)</title><rect x="898.4" y="245" width="6.8" height="15.0" fill="rgb(251,98,25)" rx="2" ry="2" />
<text  x="901.39" y="255.5" ></text>
</g>
<g >
<title>__bprm_mm_init (1 samples, 0.57%)</title><rect x="457.6" y="389" width="6.8" height="15.0" fill="rgb(214,153,16)" rx="2" ry="2" />
<text  x="460.59" y="399.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (1 samples, 0.57%)</title><rect x="1135.7" y="485" width="6.8" height="15.0" fill="rgb(213,81,32)" rx="2" ry="2" />
<text  x="1138.75" y="495.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 35.63%)</title><rect x="37.1" y="565" width="420.5" height="15.0" fill="rgb(253,13,44)" rx="2" ry="2" />
<text  x="40.13" y="575.5" >[grep]</text>
</g>
<g >
<title>read_hpet (1 samples, 0.57%)</title><rect x="993.3" y="277" width="6.8" height="15.0" fill="rgb(246,25,11)" rx="2" ry="2" />
<text  x="996.33" y="287.5" ></text>
</g>
<g >
<title>finish_fault (1 samples, 0.57%)</title><rect x="898.4" y="69" width="6.8" height="15.0" fill="rgb(242,70,20)" rx="2" ry="2" />
<text  x="901.39" y="79.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.57%)</title><rect x="1183.2" y="421" width="6.8" height="15.0" fill="rgb(215,60,27)" rx="2" ry="2" />
<text  x="1186.22" y="431.5" ></text>
</g>
<g >
<title>__vm_enough_memory (1 samples, 0.57%)</title><rect x="457.6" y="341" width="6.8" height="15.0" fill="rgb(221,53,20)" rx="2" ry="2" />
<text  x="460.59" y="351.5" ></text>
</g>
<g >
<title>evlist__prepare_workload (1 samples, 0.57%)</title><rect x="457.6" y="517" width="6.8" height="15.0" fill="rgb(232,58,21)" rx="2" ry="2" />
<text  x="460.59" y="527.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.57%)</title><rect x="30.3" y="341" width="6.8" height="15.0" fill="rgb(209,28,54)" rx="2" ry="2" />
<text  x="33.34" y="351.5" ></text>
</g>
<g >
<title>__execvpe_common (1 samples, 0.57%)</title><rect x="457.6" y="501" width="6.8" height="15.0" fill="rgb(244,167,12)" rx="2" ry="2" />
<text  x="460.59" y="511.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (1 samples, 0.57%)</title><rect x="898.4" y="261" width="6.8" height="15.0" fill="rgb(210,159,3)" rx="2" ry="2" />
<text  x="901.39" y="271.5" ></text>
</g>
<g >
<title>__GI_execve (1 samples, 0.57%)</title><rect x="457.6" y="485" width="6.8" height="15.0" fill="rgb(249,61,29)" rx="2" ry="2" />
<text  x="460.59" y="495.5" ></text>
</g>
<g >
<title>grep (62 samples, 35.63%)</title><rect x="37.1" y="581" width="420.5" height="15.0" fill="rgb(235,218,7)" rx="2" ry="2" />
<text  x="40.13" y="591.5" >grep</text>
</g>
<g >
<title>bash (4 samples, 2.30%)</title><rect x="10.0" y="581" width="27.1" height="15.0" fill="rgb(254,67,12)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >b..</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.57%)</title><rect x="993.3" y="437" width="6.8" height="15.0" fill="rgb(225,110,9)" rx="2" ry="2" />
<text  x="996.33" y="447.5" ></text>
</g>
<g >
<title>execute_command (3 samples, 1.72%)</title><rect x="16.8" y="501" width="20.3" height="15.0" fill="rgb(211,6,26)" rx="2" ry="2" />
<text  x="19.78" y="511.5" ></text>
</g>
<g >
<title>_start (3 samples, 1.72%)</title><rect x="16.8" y="565" width="20.3" height="15.0" fill="rgb(247,190,10)" rx="2" ry="2" />
<text  x="19.78" y="575.5" ></text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.57%)</title><rect x="16.8" y="309" width="6.8" height="15.0" fill="rgb(216,62,45)" rx="2" ry="2" />
<text  x="19.78" y="319.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (4 samples, 2.30%)</title><rect x="1149.3" y="405" width="27.1" height="15.0" fill="rgb(237,203,30)" rx="2" ry="2" />
<text  x="1152.31" y="415.5" >c..</text>
</g>
<g >
<title>generic_file_read_iter (11 samples, 6.32%)</title><rect x="383.0" y="277" width="74.6" height="15.0" fill="rgb(224,139,5)" rx="2" ry="2" />
<text  x="385.99" y="287.5" >generic_..</text>
</g>
<g >
<title>ext4_buffered_write_iter (1 samples, 0.57%)</title><rect x="898.4" y="229" width="6.8" height="15.0" fill="rgb(232,147,31)" rx="2" ry="2" />
<text  x="901.39" y="239.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (64 samples, 36.78%)</title><rect x="464.4" y="213" width="434.0" height="15.0" fill="rgb(225,28,13)" rx="2" ry="2" />
<text  x="467.37" y="223.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>do_iter_write (1 samples, 0.57%)</title><rect x="898.4" y="277" width="6.8" height="15.0" fill="rgb(254,12,13)" rx="2" ry="2" />
<text  x="901.39" y="287.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.57%)</title><rect x="1169.7" y="389" width="6.7" height="15.0" fill="rgb(206,112,38)" rx="2" ry="2" />
<text  x="1172.66" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.57%)</title><rect x="898.4" y="373" width="6.8" height="15.0" fill="rgb(211,14,30)" rx="2" ry="2" />
<text  x="901.39" y="383.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.57%)</title><rect x="898.4" y="181" width="6.8" height="15.0" fill="rgb(215,72,10)" rx="2" ry="2" />
<text  x="901.39" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.57%)</title><rect x="898.4" y="405" width="6.8" height="15.0" fill="rgb(225,199,3)" rx="2" ry="2" />
<text  x="901.39" y="415.5" ></text>
</g>
<g >
<title>rest_init (6 samples, 3.45%)</title><rect x="1149.3" y="485" width="40.7" height="15.0" fill="rgb(253,82,8)" rx="2" ry="2" />
<text  x="1152.31" y="495.5" >res..</text>
</g>
<g >
<title>do_fault (1 samples, 0.57%)</title><rect x="898.4" y="85" width="6.8" height="15.0" fill="rgb(243,125,16)" rx="2" ry="2" />
<text  x="901.39" y="95.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (5 samples, 2.87%)</title><rect x="1149.3" y="437" width="33.9" height="15.0" fill="rgb(244,65,10)" rx="2" ry="2" />
<text  x="1152.31" y="447.5" >cp..</text>
</g>
<g >
<title>schedule_idle (1 samples, 0.57%)</title><rect x="1183.2" y="437" width="6.8" height="15.0" fill="rgb(245,188,4)" rx="2" ry="2" />
<text  x="1186.22" y="447.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (1 samples, 0.57%)</title><rect x="898.4" y="37" width="6.8" height="15.0" fill="rgb(216,143,51)" rx="2" ry="2" />
<text  x="901.39" y="47.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.57%)</title><rect x="457.6" y="453" width="6.8" height="15.0" fill="rgb(236,50,43)" rx="2" ry="2" />
<text  x="460.59" y="463.5" ></text>
</g>
<g >
<title>__ioctl (64 samples, 36.78%)</title><rect x="464.4" y="469" width="434.0" height="15.0" fill="rgb(211,133,16)" rx="2" ry="2" />
<text  x="467.37" y="479.5" >__ioctl</text>
</g>
<g >
<title>do_syscall_64 (11 samples, 6.32%)</title><rect x="383.0" y="437" width="74.6" height="15.0" fill="rgb(237,92,25)" rx="2" ry="2" />
<text  x="385.99" y="447.5" >do_sysca..</text>
</g>
<g >
<title>make_child (3 samples, 1.72%)</title><rect x="16.8" y="421" width="20.3" height="15.0" fill="rgb(225,158,30)" rx="2" ry="2" />
<text  x="19.78" y="431.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.57%)</title><rect x="30.3" y="373" width="6.8" height="15.0" fill="rgb(251,52,0)" rx="2" ry="2" />
<text  x="33.34" y="383.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.57%)</title><rect x="993.3" y="405" width="6.8" height="15.0" fill="rgb(221,213,16)" rx="2" ry="2" />
<text  x="996.33" y="415.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.57%)</title><rect x="1169.7" y="373" width="6.7" height="15.0" fill="rgb(254,206,27)" rx="2" ry="2" />
<text  x="1172.66" y="383.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (20 samples, 11.49%)</title><rect x="993.3" y="469" width="135.7" height="15.0" fill="rgb(253,133,32)" rx="2" ry="2" />
<text  x="996.33" y="479.5" >cpuidle_enter_state</text>
</g>
<g >
<title>get_next_timer_interrupt (1 samples, 0.57%)</title><rect x="1129.0" y="421" width="6.7" height="15.0" fill="rgb(212,213,12)" rx="2" ry="2" />
<text  x="1131.97" y="431.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 37.36%)</title><rect x="464.4" y="565" width="440.8" height="15.0" fill="rgb(212,218,1)" rx="2" ry="2" />
<text  x="467.37" y="575.5" >[unknown]</text>
</g>
<g >
<title>percpu_counter_add_batch (1 samples, 0.57%)</title><rect x="457.6" y="325" width="6.8" height="15.0" fill="rgb(232,50,33)" rx="2" ry="2" />
<text  x="460.59" y="335.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (64 samples, 36.78%)</title><rect x="464.4" y="373" width="434.0" height="15.0" fill="rgb(248,109,42)" rx="2" ry="2" />
<text  x="467.37" y="383.5" >perf_event_for_each_child</text>
</g>
<g >
<title>ovl_read_iter (11 samples, 6.32%)</title><rect x="383.0" y="357" width="74.6" height="15.0" fill="rgb(224,67,24)" rx="2" ry="2" />
<text  x="385.99" y="367.5" >ovl_read..</text>
</g>
<g >
<title>perf (65 samples, 37.36%)</title><rect x="464.4" y="581" width="440.8" height="15.0" fill="rgb(209,90,24)" rx="2" ry="2" />
<text  x="467.37" y="591.5" >perf</text>
</g>
<g >
<title>reader_loop (3 samples, 1.72%)</title><rect x="16.8" y="517" width="20.3" height="15.0" fill="rgb(253,136,15)" rx="2" ry="2" />
<text  x="19.78" y="527.5" ></text>
</g>
<g >
<title>__cmd_record (1 samples, 0.57%)</title><rect x="457.6" y="533" width="6.8" height="15.0" fill="rgb(227,9,17)" rx="2" ry="2" />
<text  x="460.59" y="543.5" ></text>
</g>
<g >
<title>tick_nohz_next_event (1 samples, 0.57%)</title><rect x="1129.0" y="437" width="6.7" height="15.0" fill="rgb(220,62,47)" rx="2" ry="2" />
<text  x="1131.97" y="447.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 35.63%)</title><rect x="37.1" y="517" width="420.5" height="15.0" fill="rgb(242,202,24)" rx="2" ry="2" />
<text  x="40.13" y="527.5" >[grep]</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.57%)</title><rect x="30.3" y="325" width="6.8" height="15.0" fill="rgb(244,123,3)" rx="2" ry="2" />
<text  x="33.34" y="335.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (11 samples, 6.32%)</title><rect x="383.0" y="261" width="74.6" height="15.0" fill="rgb(216,6,36)" rx="2" ry="2" />
<text  x="385.99" y="271.5" >generic_..</text>
</g>
<g >
<title>new_sync_read (11 samples, 6.32%)</title><rect x="383.0" y="373" width="74.6" height="15.0" fill="rgb(236,46,37)" rx="2" ry="2" />
<text  x="385.99" y="383.5" >new_sync..</text>
</g>
<g >
<title>all (174 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(238,34,5)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>cpuidle_select (1 samples, 0.57%)</title><rect x="1129.0" y="485" width="6.7" height="15.0" fill="rgb(216,129,46)" rx="2" ry="2" />
<text  x="1131.97" y="495.5" ></text>
</g>
<g >
<title>record__pushfn (1 samples, 0.57%)</title><rect x="898.4" y="469" width="6.8" height="15.0" fill="rgb(213,22,5)" rx="2" ry="2" />
<text  x="901.39" y="479.5" ></text>
</g>
<g >
<title>do_idle (23 samples, 13.22%)</title><rect x="993.3" y="517" width="156.0" height="15.0" fill="rgb(248,155,54)" rx="2" ry="2" />
<text  x="996.33" y="527.5" >do_idle</text>
</g>
<g >
<title>cpuidle_idle_call (21 samples, 12.07%)</title><rect x="993.3" y="501" width="142.4" height="15.0" fill="rgb(251,177,20)" rx="2" ry="2" />
<text  x="996.33" y="511.5" >cpuidle_idle_call</text>
</g>
<g >
<title>__cmd_record (65 samples, 37.36%)</title><rect x="464.4" y="533" width="440.8" height="15.0" fill="rgb(241,202,38)" rx="2" ry="2" />
<text  x="467.37" y="543.5" >__cmd_record</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.57%)</title><rect x="16.8" y="325" width="6.8" height="15.0" fill="rgb(216,40,43)" rx="2" ry="2" />
<text  x="19.78" y="335.5" ></text>
</g>
<g >
<title>start_kernel (6 samples, 3.45%)</title><rect x="1149.3" y="517" width="40.7" height="15.0" fill="rgb(245,171,28)" rx="2" ry="2" />
<text  x="1152.31" y="527.5" >sta..</text>
</g>
<g >
<title>perf_evsel__enable_cpu (64 samples, 36.78%)</title><rect x="464.4" y="501" width="434.0" height="15.0" fill="rgb(244,26,22)" rx="2" ry="2" />
<text  x="467.37" y="511.5" >perf_evsel__enable_cpu</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (64 samples, 36.78%)</title><rect x="464.4" y="453" width="434.0" height="15.0" fill="rgb(213,187,27)" rx="2" ry="2" />
<text  x="467.37" y="463.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>record__mmap_read_all (1 samples, 0.57%)</title><rect x="898.4" y="517" width="6.8" height="15.0" fill="rgb(226,95,52)" rx="2" ry="2" />
<text  x="901.39" y="527.5" ></text>
</g>
<g >
<title>ovl_write_iter (1 samples, 0.57%)</title><rect x="898.4" y="309" width="6.8" height="15.0" fill="rgb(223,185,54)" rx="2" ry="2" />
<text  x="901.39" y="319.5" ></text>
</g>
<g >
<title>generic_perform_write (1 samples, 0.57%)</title><rect x="898.4" y="213" width="6.8" height="15.0" fill="rgb(245,213,53)" rx="2" ry="2" />
<text  x="901.39" y="223.5" ></text>
</g>
<g >
<title>execute_command_internal (3 samples, 1.72%)</title><rect x="16.8" y="437" width="20.3" height="15.0" fill="rgb(238,73,43)" rx="2" ry="2" />
<text  x="19.78" y="447.5" ></text>
</g>
<g >
<title>cpuidle_enter (20 samples, 11.49%)</title><rect x="993.3" y="485" width="135.7" height="15.0" fill="rgb(234,91,54)" rx="2" ry="2" />
<text  x="996.33" y="495.5" >cpuidle_enter</text>
</g>
<g >
<title>vfs_iter_read (11 samples, 6.32%)</title><rect x="383.0" y="341" width="74.6" height="15.0" fill="rgb(231,139,53)" rx="2" ry="2" />
<text  x="385.99" y="351.5" >vfs_iter..</text>
</g>
<g >
<title>start_secondary (23 samples, 13.22%)</title><rect x="993.3" y="549" width="156.0" height="15.0" fill="rgb(236,73,26)" rx="2" ry="2" />
<text  x="996.33" y="559.5" >start_secondary</text>
</g>
<g >
<title>ksys_read (11 samples, 6.32%)</title><rect x="383.0" y="405" width="74.6" height="15.0" fill="rgb(216,144,46)" rx="2" ry="2" />
<text  x="385.99" y="415.5" >ksys_read</text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.57%)</title><rect x="993.3" y="421" width="6.8" height="15.0" fill="rgb(246,32,26)" rx="2" ry="2" />
<text  x="996.33" y="431.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.57%)</title><rect x="16.8" y="373" width="6.8" height="15.0" fill="rgb(219,25,46)" rx="2" ry="2" />
<text  x="19.78" y="383.5" ></text>
</g>
<g >
<title>[bash] (3 samples, 1.72%)</title><rect x="16.8" y="453" width="20.3" height="15.0" fill="rgb(207,150,53)" rx="2" ry="2" />
<text  x="19.78" y="463.5" ></text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.57%)</title><rect x="898.4" y="101" width="6.8" height="15.0" fill="rgb(243,188,41)" rx="2" ry="2" />
<text  x="901.39" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.57%)</title><rect x="898.4" y="389" width="6.8" height="15.0" fill="rgb(213,29,43)" rx="2" ry="2" />
<text  x="901.39" y="399.5" ></text>
</g>
<g >
<title>record__write (1 samples, 0.57%)</title><rect x="898.4" y="453" width="6.8" height="15.0" fill="rgb(226,31,13)" rx="2" ry="2" />
<text  x="901.39" y="463.5" ></text>
</g>
<g >
<title>menu_select (1 samples, 0.57%)</title><rect x="1129.0" y="469" width="6.7" height="15.0" fill="rgb(239,175,44)" rx="2" ry="2" />
<text  x="1131.97" y="479.5" ></text>
</g>
<g >
<title>tick_nohz_get_sleep_length (1 samples, 0.57%)</title><rect x="1129.0" y="453" width="6.7" height="15.0" fill="rgb(223,37,52)" rx="2" ry="2" />
<text  x="1131.97" y="463.5" ></text>
</g>
<g >
<title>ctx_resched (64 samples, 36.78%)</title><rect x="464.4" y="245" width="434.0" height="15.0" fill="rgb(252,213,5)" rx="2" ry="2" />
<text  x="467.37" y="255.5" >ctx_resched</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.57%)</title><rect x="30.3" y="309" width="6.8" height="15.0" fill="rgb(221,49,5)" rx="2" ry="2" />
<text  x="33.34" y="319.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (64 samples, 36.78%)</title><rect x="464.4" y="485" width="434.0" height="15.0" fill="rgb(230,224,15)" rx="2" ry="2" />
<text  x="467.37" y="495.5" >perf_evsel__run_ioctl</text>
</g>
<g >
<title>cpu_startup_entry (6 samples, 3.45%)</title><rect x="1149.3" y="469" width="40.7" height="15.0" fill="rgb(244,59,9)" rx="2" ry="2" />
<text  x="1152.31" y="479.5" >cpu..</text>
</g>
<g >
<title>__evlist__enable (64 samples, 36.78%)</title><rect x="464.4" y="517" width="434.0" height="15.0" fill="rgb(249,119,49)" rx="2" ry="2" />
<text  x="467.37" y="527.5" >__evlist__enable</text>
</g>
<g >
<title>pick_next_task_fair (1 samples, 0.57%)</title><rect x="1183.2" y="405" width="6.8" height="15.0" fill="rgb(213,35,53)" rx="2" ry="2" />
<text  x="1186.22" y="415.5" ></text>
</g>
<g >
<title>native_write_msr (64 samples, 36.78%)</title><rect x="464.4" y="197" width="434.0" height="15.0" fill="rgb(228,154,6)" rx="2" ry="2" />
<text  x="467.37" y="207.5" >native_write_msr</text>
</g>
<g >
<title>read_hpet.part.0 (1 samples, 0.57%)</title><rect x="993.3" y="261" width="6.8" height="15.0" fill="rgb(215,52,14)" rx="2" ry="2" />
<text  x="996.33" y="271.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.57%)</title><rect x="16.8" y="341" width="6.8" height="15.0" fill="rgb(246,196,2)" rx="2" ry="2" />
<text  x="19.78" y="351.5" ></text>
</g>
<g >
<title>cpuidle_enter (4 samples, 2.30%)</title><rect x="1149.3" y="421" width="27.1" height="15.0" fill="rgb(231,51,30)" rx="2" ry="2" />
<text  x="1152.31" y="431.5" >c..</text>
</g>
<g >
<title>close_buffered_fd (1 samples, 0.57%)</title><rect x="30.3" y="389" width="6.8" height="15.0" fill="rgb(207,146,0)" rx="2" ry="2" />
<text  x="33.34" y="399.5" ></text>
</g>
<g >
<title>cmd_record (65 samples, 37.36%)</title><rect x="464.4" y="549" width="440.8" height="15.0" fill="rgb(249,125,19)" rx="2" ry="2" />
<text  x="467.37" y="559.5" >cmd_record</text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (1 samples, 0.57%)</title><rect x="1149.3" y="389" width="6.8" height="15.0" fill="rgb(224,126,39)" rx="2" ry="2" />
<text  x="1152.31" y="399.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 35.63%)</title><rect x="37.1" y="533" width="420.5" height="15.0" fill="rgb(207,1,12)" rx="2" ry="2" />
<text  x="40.13" y="543.5" >[grep]</text>
</g>
<g >
<title>new_sync_write (1 samples, 0.57%)</title><rect x="898.4" y="325" width="6.8" height="15.0" fill="rgb(236,139,40)" rx="2" ry="2" />
<text  x="901.39" y="335.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.57%)</title><rect x="1142.5" y="501" width="6.8" height="15.0" fill="rgb(208,124,24)" rx="2" ry="2" />
<text  x="1145.53" y="511.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.57%)</title><rect x="993.3" y="373" width="6.8" height="15.0" fill="rgb(220,215,19)" rx="2" ry="2" />
<text  x="996.33" y="383.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.57%)</title><rect x="898.4" y="357" width="6.8" height="15.0" fill="rgb(246,68,19)" rx="2" ry="2" />
<text  x="901.39" y="367.5" ></text>
</g>
<g >
<title>_perf_ioctl (64 samples, 36.78%)</title><rect x="464.4" y="389" width="434.0" height="15.0" fill="rgb(252,127,50)" rx="2" ry="2" />
<text  x="467.37" y="399.5" >_perf_ioctl</text>
</g>
<g >
<title>__libc_start_main (62 samples, 35.63%)</title><rect x="37.1" y="549" width="420.5" height="15.0" fill="rgb(211,67,28)" rx="2" ry="2" />
<text  x="40.13" y="559.5" >__libc_start_main</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.57%)</title><rect x="993.3" y="453" width="6.8" height="15.0" fill="rgb(252,47,52)" rx="2" ry="2" />
<text  x="996.33" y="463.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.57%)</title><rect x="457.6" y="565" width="6.8" height="15.0" fill="rgb(209,88,12)" rx="2" ry="2" />
<text  x="460.59" y="575.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (29 samples, 16.67%)</title><rect x="993.3" y="565" width="196.7" height="15.0" fill="rgb(224,179,51)" rx="2" ry="2" />
<text  x="996.33" y="575.5" >secondary_startup_64_no_v..</text>
</g>
<g >
<title>cmd_record (1 samples, 0.57%)</title><rect x="457.6" y="549" width="6.8" height="15.0" fill="rgb(232,142,36)" rx="2" ry="2" />
<text  x="460.59" y="559.5" ></text>
</g>
<g >
<title>filemap_map_pages (1 samples, 0.57%)</title><rect x="16.8" y="261" width="6.8" height="15.0" fill="rgb(221,88,18)" rx="2" ry="2" />
<text  x="19.78" y="271.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.57%)</title><rect x="16.8" y="357" width="6.8" height="15.0" fill="rgb(251,95,54)" rx="2" ry="2" />
<text  x="19.78" y="367.5" ></text>
</g>
<g >
<title>__get_user_nocheck_1 (1 samples, 0.57%)</title><rect x="898.4" y="197" width="6.8" height="15.0" fill="rgb(211,103,4)" rx="2" ry="2" />
<text  x="901.39" y="207.5" ></text>
</g>
<g >
<title>vfs_read (11 samples, 6.32%)</title><rect x="383.0" y="389" width="74.6" height="15.0" fill="rgb(254,117,15)" rx="2" ry="2" />
<text  x="385.99" y="399.5" >vfs_read</text>
</g>
<g >
<title>unset_bash_input (1 samples, 0.57%)</title><rect x="30.3" y="405" width="6.8" height="15.0" fill="rgb(254,33,1)" rx="2" ry="2" />
<text  x="33.34" y="415.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.57%)</title><rect x="898.4" y="421" width="6.8" height="15.0" fill="rgb(233,143,33)" rx="2" ry="2" />
<text  x="901.39" y="431.5" ></text>
</g>
<g >
<title>x86_pmu_enable (64 samples, 36.78%)</title><rect x="464.4" y="229" width="434.0" height="15.0" fill="rgb(215,133,53)" rx="2" ry="2" />
<text  x="467.37" y="239.5" >x86_pmu_enable</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.57%)</title><rect x="898.4" y="117" width="6.8" height="15.0" fill="rgb(228,144,5)" rx="2" ry="2" />
<text  x="901.39" y="127.5" ></text>
</g>
<g >
<title>generic_exec_single (64 samples, 36.78%)</title><rect x="464.4" y="309" width="434.0" height="15.0" fill="rgb(205,89,44)" rx="2" ry="2" />
<text  x="467.37" y="319.5" >generic_exec_single</text>
</g>
<g >
<title>cpuidle_not_available (1 samples, 0.57%)</title><rect x="1176.4" y="421" width="6.8" height="15.0" fill="rgb(232,45,3)" rx="2" ry="2" />
<text  x="1179.44" y="431.5" ></text>
</g>
<g >
<title>execute_command_internal (3 samples, 1.72%)</title><rect x="16.8" y="485" width="20.3" height="15.0" fill="rgb(212,71,30)" rx="2" ry="2" />
<text  x="19.78" y="495.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.57%)</title><rect x="993.3" y="325" width="6.8" height="15.0" fill="rgb(214,23,39)" rx="2" ry="2" />
<text  x="996.33" y="335.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (10 samples, 5.75%)</title><rect x="383.0" y="213" width="67.8" height="15.0" fill="rgb(224,11,10)" rx="2" ry="2" />
<text  x="385.99" y="223.5" >copy_us..</text>
</g>
<g >
<title>generic_file_buffered_read_get_pages (1 samples, 0.57%)</title><rect x="450.8" y="245" width="6.8" height="15.0" fill="rgb(224,21,39)" rx="2" ry="2" />
<text  x="453.80" y="255.5" ></text>
</g>
<g >
<title>perf_mmap__push (1 samples, 0.57%)</title><rect x="898.4" y="485" width="6.8" height="15.0" fill="rgb(249,139,26)" rx="2" ry="2" />
<text  x="901.39" y="495.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.57%)</title><rect x="30.3" y="357" width="6.8" height="15.0" fill="rgb(252,93,16)" rx="2" ry="2" />
<text  x="33.34" y="367.5" ></text>
</g>
</g>
</svg>
