<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="630.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="613" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="613" > </text>
<g id="frames">
<g >
<title>arch_call_rest_init (4,835,187 samples, 0.03%)</title><rect x="1189.7" y="485" width="0.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1192.68" y="495.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (356,712,062 samples, 1.97%)</title><rect x="1166.4" y="437" width="23.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1169.40" y="447.5" >c..</text>
</g>
<g >
<title>NaClSysRecv (8,351,786,694 samples, 46.19%)</title><rect x="61.9" y="501" width="545.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="64.86" y="511.5" >NaClSysRecv</text>
</g>
<g >
<title>schedule (256,409,015 samples, 1.42%)</title><rect x="1022.9" y="341" width="16.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1025.89" y="351.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (5,320,054 samples, 0.03%)</title><rect x="47.3" y="197" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="50.29" y="207.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (287,439,393 samples, 1.59%)</title><rect x="27.7" y="389" width="18.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="30.65" y="399.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (166,530,601 samples, 0.92%)</title><rect x="47.6" y="245" width="10.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="50.65" y="255.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (220,145,408 samples, 1.22%)</title><rect x="1102.7" y="469" width="14.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1105.69" y="479.5" ></text>
</g>
<g >
<title>record__write (166,530,601 samples, 0.92%)</title><rect x="47.6" y="453" width="10.9" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="50.65" y="463.5" ></text>
</g>
<g >
<title>schedule (220,145,408 samples, 1.22%)</title><rect x="1102.7" y="437" width="14.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1105.69" y="447.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (9,846,292 samples, 0.05%)</title><rect x="47.7" y="149" width="0.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="50.66" y="159.5" ></text>
</g>
<g >
<title>leaf_walk_rcu (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="325" width="18.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1120.06" y="335.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (166,530,601 samples, 0.92%)</title><rect x="47.6" y="261" width="10.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="50.65" y="271.5" ></text>
</g>
<g >
<title>do_sched_yield (617,505,347 samples, 3.42%)</title><rect x="999.3" y="357" width="40.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1002.32" y="367.5" >do_..</text>
</g>
<g >
<title>perf (185,489,013 samples, 1.03%)</title><rect x="46.4" y="565" width="12.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="49.41" y="575.5" ></text>
</g>
<g >
<title>record__pushfn (166,530,601 samples, 0.92%)</title><rect x="47.6" y="469" width="10.9" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="50.65" y="479.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (92,003,731 samples, 0.51%)</title><rect x="1039.6" y="373" width="6.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1042.62" y="383.5" ></text>
</g>
<g >
<title>ion (166,530,601 samples, 0.92%)</title><rect x="47.6" y="437" width="10.9" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="50.65" y="447.5" ></text>
</g>
<g >
<title>__ext4_mark_inode_dirty (150,299,819 samples, 0.83%)</title><rect x="48.3" y="149" width="9.8" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="51.31" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (709,509,078 samples, 3.92%)</title><rect x="999.3" y="405" width="46.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1002.32" y="415.5" >entr..</text>
</g>
<g >
<title>generic_exec_single (5,320,054 samples, 0.03%)</title><rect x="47.3" y="309" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="50.29" y="319.5" ></text>
</g>
<g >
<title>rtnetlink_rcv_msg (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="421" width="18.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1120.06" y="431.5" ></text>
</g>
<g >
<title>intel_idle (356,712,062 samples, 1.97%)</title><rect x="1166.4" y="421" width="23.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1169.40" y="431.5" >i..</text>
</g>
<g >
<title>smp_call_function_single (5,320,054 samples, 0.03%)</title><rect x="47.3" y="325" width="0.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="50.29" y="335.5" ></text>
</g>
<g >
<title>call_cpuidle (572,220,650 samples, 3.16%)</title><rect x="1152.3" y="469" width="37.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1155.34" y="479.5" >cal..</text>
</g>
<g >
<title>[libc.so.6] (5,346,412,922 samples, 29.57%)</title><rect x="640.4" y="421" width="348.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="643.36" y="431.5" >[libc.so.6]</text>
</g>
<g >
<title>fault_in_iov_iter_readable (6,083,361 samples, 0.03%)</title><rect x="58.1" y="213" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="61.12" y="223.5" ></text>
</g>
<g >
<title>lind (270,459,338 samples, 1.50%)</title><rect x="10.0" y="565" width="17.7" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (150,299,819 samples, 0.83%)</title><rect x="48.3" y="85" width="9.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="51.31" y="95.5" ></text>
</g>
<g >
<title>crypto_shash_update (150,299,819 samples, 0.83%)</title><rect x="48.3" y="53" width="9.8" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="51.31" y="63.5" ></text>
</g>
<g >
<title>native_sched_clock (51,246,954 samples, 0.28%)</title><rect x="1032.9" y="245" width="3.4" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1035.93" y="255.5" ></text>
</g>
<g >
<title>NaClSysSendDecoder (6,722,476,532 samples, 37.18%)</title><rect x="606.9" y="517" width="438.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="609.91" y="527.5" >NaClSysSendDecoder</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (220,145,408 samples, 1.22%)</title><rect x="1102.7" y="453" width="14.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1105.69" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (270,459,338 samples, 1.50%)</title><rect x="10.0" y="389" width="17.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>__sched_yield (863,424,468 samples, 4.78%)</title><rect x="989.3" y="421" width="56.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="992.28" y="431.5" >__sch..</text>
</g>
<g >
<title>finish_task_switch.isra.0 (220,145,408 samples, 1.22%)</title><rect x="1102.7" y="405" width="14.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1105.69" y="415.5" ></text>
</g>
<g >
<title>_perf_ioctl (5,320,054 samples, 0.03%)</title><rect x="47.3" y="389" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="50.29" y="399.5" ></text>
</g>
<g >
<title>sel_ldr (15,279,312,015 samples, 84.50%)</title><rect x="58.5" y="565" width="997.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="61.51" y="575.5" >sel_ldr</text>
</g>
<g >
<title>do_iter_readv_writev (166,530,601 samples, 0.92%)</title><rect x="47.6" y="277" width="10.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="50.65" y="287.5" ></text>
</g>
<g >
<title>__cmd_record (287,439,393 samples, 1.59%)</title><rect x="27.7" y="533" width="18.7" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="30.65" y="543.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (215,508,588 samples, 1.19%)</title><rect x="1152.3" y="437" width="14.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1155.34" y="447.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (2,836,820 samples, 0.02%)</title><rect x="1189.7" y="373" width="0.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1192.72" y="383.5" ></text>
</g>
<g >
<title>execute_command_internal (270,459,338 samples, 1.50%)</title><rect x="10.0" y="453" width="17.7" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (150,299,819 samples, 0.83%)</title><rect x="48.3" y="133" width="9.8" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="51.31" y="143.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (8,300,466,618 samples, 45.91%)</title><rect x="65.2" y="405" width="541.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="68.21" y="415.5" >rustposix::interface::pipe::EmulatedPipe::read_from_pipe</text>
</g>
<g >
<title>exec_binprm (287,439,393 samples, 1.59%)</title><rect x="27.7" y="373" width="18.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="30.65" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_poll (220,145,408 samples, 1.22%)</title><rect x="1102.7" y="517" width="14.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1105.69" y="527.5" ></text>
</g>
<g >
<title>do_idle (4,835,187 samples, 0.03%)</title><rect x="1189.7" y="437" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1192.68" y="447.5" ></text>
</g>
<g >
<title>[sel_ldr] (15,074,263,226 samples, 83.37%)</title><rect x="61.9" y="549" width="983.7" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="64.86" y="559.5" >[sel_ldr]</text>
</g>
<g >
<title>__mark_inode_dirty (150,299,819 samples, 0.83%)</title><rect x="48.3" y="181" width="9.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="51.31" y="191.5" ></text>
</g>
<g >
<title>do_sys_poll (220,145,408 samples, 1.22%)</title><rect x="1102.7" y="501" width="14.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1105.69" y="511.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (270,459,338 samples, 1.50%)</title><rect x="10.0" y="309" width="17.7" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (51,243,354 samples, 0.28%)</title><rect x="58.5" y="533" width="3.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="61.51" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_sched_setaffinity (13,528,349 samples, 0.07%)</title><rect x="46.4" y="421" width="0.9" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="49.41" y="431.5" ></text>
</g>
<g >
<title>cpuidle_enter (2,946,541 samples, 0.02%)</title><rect x="1189.7" y="389" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.71" y="399.5" ></text>
</g>
<g >
<title>record__mmap_read_all (166,530,601 samples, 0.92%)</title><rect x="47.6" y="517" width="10.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="50.65" y="527.5" ></text>
</g>
<g >
<title>evlist_cpu_iterator__next (13,528,349 samples, 0.07%)</title><rect x="46.4" y="501" width="0.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="49.41" y="511.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (4,726,564 samples, 0.03%)</title><rect x="1189.7" y="421" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1192.68" y="431.5" ></text>
</g>
<g >
<title>__evlist__enable (18,848,403 samples, 0.10%)</title><rect x="46.4" y="517" width="1.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="49.41" y="527.5" ></text>
</g>
<g >
<title>netlink_dump (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="389" width="18.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1120.06" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (270,459,338 samples, 1.50%)</title><rect x="10.0" y="517" width="17.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>perf_ioctl (5,320,054 samples, 0.03%)</title><rect x="47.3" y="405" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="50.29" y="415.5" ></text>
</g>
<g >
<title>NaClSysRecvDecoder (8,351,786,694 samples, 46.19%)</title><rect x="61.9" y="517" width="545.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="64.86" y="527.5" >NaClSysRecvDecoder</text>
</g>
<g >
<title>dispatcher (6,619,973,162 samples, 36.61%)</title><rect x="613.6" y="469" width="432.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="616.60" y="479.5" >dispatcher</text>
</g>
<g >
<title>inet_dump_fib (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="357" width="18.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1120.06" y="367.5" ></text>
</g>
<g >
<title>vfs_write (166,530,601 samples, 0.92%)</title><rect x="47.6" y="341" width="10.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="50.65" y="351.5" ></text>
</g>
<g >
<title>generic_perform_write (166,530,601 samples, 0.92%)</title><rect x="47.6" y="229" width="10.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="50.65" y="239.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (5,320,054 samples, 0.03%)</title><rect x="47.3" y="373" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="50.29" y="383.5" ></text>
</g>
<g >
<title>all (18,081,120,888 samples, 100%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>event_function (5,320,054 samples, 0.03%)</title><rect x="47.3" y="277" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="50.29" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_execve (270,459,338 samples, 1.50%)</title><rect x="10.0" y="357" width="17.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2,135,733 samples, 0.01%)</title><rect x="1189.7" y="341" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1192.73" y="351.5" ></text>
</g>
<g >
<title>perf_mmap__push (166,530,601 samples, 0.92%)</title><rect x="47.6" y="485" width="10.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="50.65" y="495.5" ></text>
</g>
<g >
<title>filemap_add_folio (9,846,292 samples, 0.05%)</title><rect x="47.7" y="181" width="0.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="50.66" y="191.5" ></text>
</g>
<g >
<title>execve (287,439,393 samples, 1.59%)</title><rect x="27.7" y="485" width="18.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="30.65" y="495.5" ></text>
</g>
<g >
<title>search_binary_handler (287,439,393 samples, 1.59%)</title><rect x="27.7" y="357" width="18.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="30.65" y="367.5" ></text>
</g>
<g >
<title>bprm_execve (287,439,393 samples, 1.59%)</title><rect x="27.7" y="405" width="18.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="30.65" y="415.5" ></text>
</g>
<g >
<title>rest_init (4,835,187 samples, 0.03%)</title><rect x="1189.7" y="469" width="0.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1192.68" y="479.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (287,439,393 samples, 1.59%)</title><rect x="27.7" y="421" width="18.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="30.65" y="431.5" ></text>
</g>
<g >
<title>fault_in_readable (5,968,302 samples, 0.03%)</title><rect x="58.1" y="197" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="61.13" y="207.5" ></text>
</g>
<g >
<title>__set_cpus_allowed_ptr_locked (13,528,349 samples, 0.07%)</title><rect x="46.4" y="357" width="0.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="49.41" y="367.5" ></text>
</g>
<g >
<title>getname_flags.part.0 (270,459,338 samples, 1.50%)</title><rect x="10.0" y="325" width="17.7" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>do_idle (572,220,650 samples, 3.16%)</title><rect x="1152.3" y="501" width="37.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1155.34" y="511.5" >do_..</text>
</g>
<g >
<title>native_write_msr (5,320,054 samples, 0.03%)</title><rect x="47.3" y="181" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="50.29" y="191.5" ></text>
</g>
<g >
<title>__set_cpus_allowed_ptr (13,528,349 samples, 0.07%)</title><rect x="46.4" y="373" width="0.9" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="49.41" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (13,528,349 samples, 0.07%)</title><rect x="46.4" y="453" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="49.41" y="463.5" ></text>
</g>
<g >
<title>netlink_unicast (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="469" width="18.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1120.06" y="479.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (15,074,263,226 samples, 83.37%)</title><rect x="61.9" y="533" width="983.7" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="64.86" y="543.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>sched_setaffinity (13,528,349 samples, 0.07%)</title><rect x="46.4" y="469" width="0.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="49.41" y="479.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common_inner (8,351,786,694 samples, 46.19%)</title><rect x="61.9" y="421" width="545.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="64.86" y="431.5" >rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cag..</text>
</g>
<g >
<title>ext4_da_write_end (150,299,819 samples, 0.83%)</title><rect x="48.3" y="213" width="9.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="51.31" y="223.5" ></text>
</g>
<g >
<title>_start (270,459,338 samples, 1.50%)</title><rect x="10.0" y="549" width="17.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>vfs_iter_write (166,530,601 samples, 0.92%)</title><rect x="47.6" y="309" width="10.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="50.65" y="319.5" ></text>
</g>
<g >
<title>__schedule (220,145,408 samples, 1.22%)</title><rect x="1102.7" y="421" width="14.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1105.69" y="431.5" ></text>
</g>
<g >
<title>start_kernel (4,835,187 samples, 0.03%)</title><rect x="1189.7" y="501" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1192.68" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (102,634,027 samples, 0.57%)</title><rect x="992.6" y="405" width="6.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="995.63" y="415.5" ></text>
</g>
<g >
<title>[sel_ldr] (153,805,435 samples, 0.85%)</title><rect x="1045.6" y="533" width="10.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1048.63" y="543.5" ></text>
</g>
<g >
<title>strrchr (287,439,393 samples, 1.59%)</title><rect x="27.7" y="325" width="18.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="30.65" y="335.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (166,530,601 samples, 0.92%)</title><rect x="47.6" y="501" width="10.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="50.65" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (502,581,890 samples, 2.78%)</title><rect x="1102.7" y="533" width="32.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1105.69" y="543.5" >do..</text>
</g>
<g >
<title>charge_memcg (9,846,292 samples, 0.05%)</title><rect x="47.7" y="133" width="0.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="50.66" y="143.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (51,246,954 samples, 0.28%)</title><rect x="1032.9" y="261" width="3.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1035.93" y="271.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::send_syscall (6,619,973,162 samples, 36.61%)</title><rect x="613.6" y="453" width="432.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="616.60" y="463.5" >rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix:..</text>
</g>
<g >
<title>__cmd_record (185,489,013 samples, 1.03%)</title><rect x="46.4" y="533" width="12.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="49.41" y="543.5" ></text>
</g>
<g >
<title>cpu_startup_entry (4,835,187 samples, 0.03%)</title><rect x="1189.7" y="453" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.68" y="463.5" ></text>
</g>
<g >
<title>[unknown]  (153,805,435 samples, 0.85%)</title><rect x="1045.6" y="549" width="10.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1048.63" y="559.5" ></text>
</g>
<g >
<title>perf_ctx_enable (5,320,054 samples, 0.03%)</title><rect x="47.3" y="229" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="50.29" y="239.5" ></text>
</g>
<g >
<title>evlist__prepare_workload (287,439,393 samples, 1.59%)</title><rect x="27.7" y="517" width="18.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="30.65" y="527.5" ></text>
</g>
<g >
<title>enqueue_task_fair (13,528,349 samples, 0.07%)</title><rect x="46.4" y="325" width="0.9" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="49.41" y="335.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (835,228,694 samples, 4.62%)</title><rect x="1135.5" y="549" width="54.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1138.49" y="559.5" >secon..</text>
</g>
<g >
<title>__x64_sys_write (166,530,601 samples, 0.92%)</title><rect x="47.6" y="373" width="10.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="50.65" y="383.5" ></text>
</g>
<g >
<title>netlink_rcv_skb (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="437" width="18.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1120.06" y="447.5" ></text>
</g>
<g >
<title>ovl_write_iter (166,530,601 samples, 0.92%)</title><rect x="47.6" y="325" width="10.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="50.65" y="335.5" ></text>
</g>
<g >
<title>rtnl_dump_all (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="373" width="18.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1120.06" y="383.5" ></text>
</g>
<g >
<title>__calc_delta (51,263,836 samples, 0.28%)</title><rect x="1026.2" y="261" width="3.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1029.24" y="271.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common (8,351,786,694 samples, 46.19%)</title><rect x="61.9" y="437" width="545.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="64.86" y="447.5" >rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cag..</text>
</g>
<g >
<title>arch_cpu_idle_exit (258,172,857 samples, 1.43%)</title><rect x="1135.5" y="501" width="16.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1138.49" y="511.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (150,299,819 samples, 0.83%)</title><rect x="48.3" y="165" width="9.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="51.31" y="175.5" ></text>
</g>
<g >
<title>update_curr (153,870,570 samples, 0.85%)</title><rect x="1022.9" y="277" width="10.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1025.89" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,135,733 samples, 0.01%)</title><rect x="1189.7" y="357" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1192.73" y="367.5" ></text>
</g>
<g >
<title>update_min_vruntime (51,308,364 samples, 0.28%)</title><rect x="1029.6" y="261" width="3.3" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1032.58" y="271.5" ></text>
</g>
<g >
<title>ctx_resched (5,320,054 samples, 0.03%)</title><rect x="47.3" y="245" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="50.29" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock (307,676,017 samples, 1.70%)</title><rect x="1002.8" y="341" width="20.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1005.81" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (709,509,078 samples, 3.92%)</title><rect x="999.3" y="389" width="46.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1002.32" y="399.5" >do_s..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (166,530,601 samples, 0.92%)</title><rect x="47.6" y="405" width="10.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="50.65" y="415.5" ></text>
</g>
<g >
<title>event_function_call (5,320,054 samples, 0.03%)</title><rect x="47.3" y="341" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="50.29" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (270,459,338 samples, 1.50%)</title><rect x="10.0" y="373" width="17.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_sendto (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="517" width="18.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1120.06" y="527.5" ></text>
</g>
<g >
<title>ext4_inode_csum (150,299,819 samples, 0.83%)</title><rect x="48.3" y="69" width="9.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="51.31" y="79.5" ></text>
</g>
<g >
<title>update_rq_clock (51,246,954 samples, 0.28%)</title><rect x="1032.9" y="309" width="3.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1035.93" y="319.5" ></text>
</g>
<g >
<title>write (166,530,601 samples, 0.92%)</title><rect x="47.6" y="421" width="10.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="50.65" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (287,439,393 samples, 1.59%)</title><rect x="27.7" y="501" width="18.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.65" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (287,439,393 samples, 1.59%)</title><rect x="27.7" y="453" width="18.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="30.65" y="463.5" ></text>
</g>
<g >
<title>__do_set_cpus_allowed (13,528,349 samples, 0.07%)</title><rect x="46.4" y="341" width="0.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="49.41" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_sched_yield (617,505,347 samples, 3.42%)</title><rect x="999.3" y="373" width="40.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1002.32" y="383.5" >__x..</text>
</g>
<g >
<title>[unknown] (287,439,393 samples, 1.59%)</title><rect x="27.7" y="549" width="18.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="30.65" y="559.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (5,320,054 samples, 0.03%)</title><rect x="47.3" y="485" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="50.29" y="495.5" ></text>
</g>
<g >
<title>sched_clock (51,246,954 samples, 0.28%)</title><rect x="1032.9" y="277" width="3.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1035.93" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (5,320,054 samples, 0.03%)</title><rect x="47.3" y="437" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="50.29" y="447.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (220,145,408 samples, 1.22%)</title><rect x="1102.7" y="485" width="14.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1105.69" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (5,320,054 samples, 0.03%)</title><rect x="47.3" y="421" width="0.3" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="50.29" y="431.5" ></text>
</g>
<g >
<title>ext4_do_update_inode.isra.0 (150,299,819 samples, 0.83%)</title><rect x="48.3" y="117" width="9.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="51.31" y="127.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (150,299,819 samples, 0.83%)</title><rect x="48.3" y="37" width="9.8" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="51.31" y="47.5" ></text>
</g>
<g >
<title>call_cpuidle (2,946,541 samples, 0.02%)</title><rect x="1189.7" y="405" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1192.71" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,320,054 samples, 0.03%)</title><rect x="47.3" y="453" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="50.29" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (8,197,953,994 samples, 45.34%)</title><rect x="71.9" y="389" width="535.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="74.90" y="399.5" >[libc.so.6]</text>
</g>
<g >
<title>[bash] (270,459,338 samples, 1.50%)</title><rect x="10.0" y="437" width="17.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_execve (287,439,393 samples, 1.59%)</title><rect x="27.7" y="437" width="18.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="30.65" y="447.5" ></text>
</g>
<g >
<title>sched_clock_cpu (51,246,954 samples, 0.28%)</title><rect x="1032.9" y="293" width="3.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1035.93" y="303.5" ></text>
</g>
<g >
<title>[anon] (51,243,354 samples, 0.28%)</title><rect x="58.5" y="549" width="3.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="61.51" y="559.5" ></text>
</g>
<g >
<title>__netlink_dump_start (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="405" width="18.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1120.06" y="415.5" ></text>
</g>
<g >
<title>__libc_start_main (270,459,338 samples, 1.50%)</title><rect x="10.0" y="533" width="17.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (572,220,650 samples, 3.16%)</title><rect x="1152.3" y="485" width="37.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1155.34" y="495.5" >cpu..</text>
</g>
<g >
<title>lind_send (6,671,179,469 samples, 36.90%)</title><rect x="610.3" y="485" width="435.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="613.26" y="495.5" >lind_send</text>
</g>
<g >
<title>x86_64_start_kernel (4,835,187 samples, 0.03%)</title><rect x="1189.7" y="533" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.68" y="543.5" ></text>
</g>
<g >
<title>sched_setaffinity (13,528,349 samples, 0.07%)</title><rect x="46.4" y="405" width="0.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="49.41" y="415.5" ></text>
</g>
<g >
<title>remote_function (5,320,054 samples, 0.03%)</title><rect x="47.3" y="293" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="50.29" y="303.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (4,835,187 samples, 0.03%)</title><rect x="1189.7" y="517" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.68" y="527.5" ></text>
</g>
<g >
<title>pick_next_task (153,870,570 samples, 0.85%)</title><rect x="1022.9" y="309" width="10.0" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1025.89" y="319.5" ></text>
</g>
<g >
<title>affinity__set (13,528,349 samples, 0.07%)</title><rect x="46.4" y="485" width="0.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="49.41" y="495.5" ></text>
</g>
<g >
<title>__filemap_add_folio (9,846,292 samples, 0.05%)</title><rect x="47.7" y="165" width="0.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="50.66" y="175.5" ></text>
</g>
<g >
<title>ext4_fill_raw_inode (150,299,819 samples, 0.83%)</title><rect x="48.3" y="101" width="9.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="51.31" y="111.5" ></text>
</g>
<g >
<title>cpuidle_enter (572,220,650 samples, 3.16%)</title><rect x="1152.3" y="453" width="37.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1155.34" y="463.5" >cpu..</text>
</g>
<g >
<title>ksys_write (166,530,601 samples, 0.92%)</title><rect x="47.6" y="357" width="10.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="50.65" y="367.5" ></text>
</g>
<g >
<title>lind_recv (8,351,786,694 samples, 46.19%)</title><rect x="61.9" y="485" width="545.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="64.86" y="495.5" >lind_recv</text>
</g>
<g >
<title>x86_pmu_enable (5,320,054 samples, 0.03%)</title><rect x="47.3" y="213" width="0.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="50.29" y="223.5" ></text>
</g>
<g >
<title>update_rq_clock (51,291,491 samples, 0.28%)</title><rect x="1036.3" y="325" width="3.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1039.28" y="335.5" ></text>
</g>
<g >
<title>netlink_sendmsg (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="485" width="18.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1120.06" y="495.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (6,568,682,773 samples, 36.33%)</title><rect x="616.9" y="437" width="428.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="619.95" y="447.5" >rustposix::interface::pipe::EmulatedPipe::write_to_pipe</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (287,439,393 samples, 1.59%)</title><rect x="27.7" y="469" width="18.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="30.65" y="479.5" ></text>
</g>
<g >
<title>cpu_startup_entry (830,393,507 samples, 4.59%)</title><rect x="1135.5" y="517" width="54.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1138.49" y="527.5" >cpu_s..</text>
</g>
<g >
<title>getname (270,459,338 samples, 1.50%)</title><rect x="10.0" y="341" width="17.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>enqueue_entity (13,528,349 samples, 0.07%)</title><rect x="46.4" y="309" width="0.9" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="49.41" y="319.5" ></text>
</g>
<g >
<title>pick_next_task_fair (153,870,570 samples, 0.85%)</title><rect x="1022.9" y="293" width="10.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1025.89" y="303.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (5,320,054 samples, 0.03%)</title><rect x="47.3" y="501" width="0.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="50.29" y="511.5" ></text>
</g>
<g >
<title>NaClSysSend (6,722,476,532 samples, 37.18%)</title><rect x="606.9" y="501" width="438.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="609.91" y="511.5" >NaClSysSend</text>
</g>
<g >
<title>dispatcher (8,351,786,694 samples, 46.19%)</title><rect x="61.9" y="469" width="545.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="64.86" y="479.5" >dispatcher</text>
</g>
<g >
<title>do_syscall_64 (166,530,601 samples, 0.92%)</title><rect x="47.6" y="389" width="10.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="50.65" y="399.5" ></text>
</g>
<g >
<title>fib_table_dump (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="341" width="18.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1120.06" y="351.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (9,960,835 samples, 0.06%)</title><rect x="47.7" y="213" width="0.6" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="50.66" y="223.5" ></text>
</g>
<g >
<title>start_secondary (830,393,507 samples, 4.59%)</title><rect x="1135.5" y="533" width="54.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1138.49" y="543.5" >start..</text>
</g>
<g >
<title>ioctl (5,320,054 samples, 0.03%)</title><rect x="47.3" y="469" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="50.29" y="479.5" ></text>
</g>
<g >
<title>swapper (2,058,421,129 samples, 11.38%)</title><rect x="1055.7" y="565" width="134.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1058.66" y="575.5" >swapper</text>
</g>
<g >
<title>load_misc_binary (287,439,393 samples, 1.59%)</title><rect x="27.7" y="341" width="18.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="30.65" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (502,581,890 samples, 2.78%)</title><rect x="1102.7" y="549" width="32.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1105.69" y="559.5" >en..</text>
</g>
<g >
<title>perf-exec (287,439,393 samples, 1.59%)</title><rect x="27.7" y="565" width="18.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="30.65" y="575.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (8,351,786,694 samples, 46.19%)</title><rect x="61.9" y="453" width="545.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="64.86" y="463.5" >rustposix::safeposix::dispatcher::dispatcher::{{closure}}</text>
</g>
<g >
<title>reader_loop (270,459,338 samples, 1.50%)</title><rect x="10.0" y="485" width="17.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>shell_execve (270,459,338 samples, 1.50%)</title><rect x="10.0" y="421" width="17.7" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>try_charge_memcg (9,846,292 samples, 0.05%)</title><rect x="47.7" y="117" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="50.66" y="127.5" ></text>
</g>
<g >
<title>_perf_event_enable (5,320,054 samples, 0.03%)</title><rect x="47.3" y="357" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="50.29" y="367.5" ></text>
</g>
<g >
<title>execve (270,459,338 samples, 1.50%)</title><rect x="10.0" y="405" width="17.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>execute_command (270,459,338 samples, 1.50%)</title><rect x="10.0" y="469" width="17.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>__filemap_get_folio (9,960,835 samples, 0.06%)</title><rect x="47.7" y="197" width="0.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="50.66" y="207.5" ></text>
</g>
<g >
<title>do_iter_write (166,530,601 samples, 0.92%)</title><rect x="47.6" y="293" width="10.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="50.65" y="303.5" ></text>
</g>
<g >
<title>rtnetlink_rcv (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="453" width="18.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1120.06" y="463.5" ></text>
</g>
<g >
<title>__perf_event_enable (5,320,054 samples, 0.03%)</title><rect x="47.3" y="261" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="50.29" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (13,528,349 samples, 0.07%)</title><rect x="46.4" y="437" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="49.41" y="447.5" ></text>
</g>
<g >
<title>__sched_setaffinity (13,528,349 samples, 0.07%)</title><rect x="46.4" y="389" width="0.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="49.41" y="399.5" ></text>
</g>
<g >
<title>__schedule (205,117,524 samples, 1.13%)</title><rect x="1022.9" y="325" width="13.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1025.89" y="335.5" ></text>
</g>
<g >
<title>[unknown] (185,489,013 samples, 1.03%)</title><rect x="46.4" y="549" width="12.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="49.41" y="559.5" ></text>
</g>
<g >
<title>main (270,459,338 samples, 1.50%)</title><rect x="10.0" y="501" width="17.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>__sys_sendto (282,436,482 samples, 1.56%)</title><rect x="1117.1" y="501" width="18.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1120.06" y="511.5" ></text>
</g>
<g >
<title>generic_write_end (150,299,819 samples, 0.83%)</title><rect x="48.3" y="197" width="9.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="51.31" y="207.5" ></text>
</g>
</g>
</svg>
