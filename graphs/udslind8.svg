<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="534.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="517" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="517" > </text>
<g id="frames">
<g >
<title>NaClUserToSysAddrRange (1,077,809,594 samples, 0.41%)</title><rect x="235.2" y="389" width="4.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="238.25" y="399.5" ></text>
</g>
<g >
<title>__schedule (215,347,842 samples, 0.08%)</title><rect x="25.4" y="373" width="1.0" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="28.43" y="383.5" ></text>
</g>
<g >
<title>sched_use_asym_prio (51,318,510 samples, 0.02%)</title><rect x="140.0" y="229" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="143.03" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (187,552,048 samples, 0.07%)</title><rect x="29.7" y="293" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="32.75" y="303.5" ></text>
</g>
<g >
<title>start_secondary (1,943,581,531 samples, 0.74%)</title><rect x="17.7" y="437" width="8.7" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="20.69" y="447.5" ></text>
</g>
<g >
<title>dispatcher@plt (205,400,829 samples, 0.08%)</title><rect x="621.8" y="373" width="1.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="624.84" y="383.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1,507,945,425 samples, 0.57%)</title><rect x="17.7" y="341" width="6.8" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="20.69" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,142,376,534 samples, 0.43%)</title><rect x="1012.5" y="325" width="5.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1015.51" y="335.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (126,247,785 samples, 0.05%)</title><rect x="13.5" y="453" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="16.47" y="463.5" ></text>
</g>
<g >
<title>NaClStackSafetyNowOnTrustedStack (256,690,998 samples, 0.10%)</title><rect x="55.9" y="437" width="1.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="58.90" y="447.5" ></text>
</g>
<g >
<title>do_iter_read (292,984,736 samples, 0.11%)</title><rect x="28.4" y="181" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="31.36" y="191.5" ></text>
</g>
<g >
<title>dispatcher (343,315,775 samples, 0.13%)</title><rect x="39.4" y="437" width="1.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="42.36" y="447.5" ></text>
</g>
<g >
<title>call_cpuidle (211,983,864 samples, 0.08%)</title><rect x="26.4" y="309" width="1.0" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="29.41" y="319.5" ></text>
</g>
<g >
<title>reader_loop (202,387,763 samples, 0.08%)</title><rect x="27.5" y="389" width="0.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="30.46" y="399.5" ></text>
</g>
<g >
<title>kernel_read (292,984,736 samples, 0.11%)</title><rect x="28.4" y="245" width="1.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="31.36" y="255.5" ></text>
</g>
<g >
<title>record__write (187,674,184 samples, 0.07%)</title><rect x="29.7" y="357" width="0.9" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="32.75" y="367.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (39,048,662,775 samples, 14.83%)</title><rect x="842.6" y="341" width="175.0" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="845.60" y="351.5" >rustposix::interface::..</text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (45,898,288,425 samples, 17.44%)</title><rect x="416.1" y="309" width="205.7" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="419.10" y="319.5" >rustposix::interface::pipe:..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::send_syscall (564,633,556 samples, 0.21%)</title><rect x="30.6" y="437" width="2.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="33.61" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_epoll_wait (22,580,497 samples, 0.01%)</title><rect x="13.2" y="421" width="0.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="16.22" y="431.5" ></text>
</g>
<g >
<title>copyin (24,624,713 samples, 0.01%)</title><rect x="29.8" y="101" width="0.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="32.78" y="111.5" ></text>
</g>
<g >
<title>tick_sched_timer (51,318,510 samples, 0.02%)</title><rect x="140.0" y="325" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="143.03" y="335.5" ></text>
</g>
<g >
<title>execve (292,984,736 samples, 0.11%)</title><rect x="28.4" y="389" width="1.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="31.36" y="399.5" ></text>
</g>
<g >
<title>switch_fpu_return (170,907,042 samples, 0.06%)</title><rect x="16.9" y="389" width="0.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="19.88" y="399.5" ></text>
</g>
<g >
<title>ovl_write_iter (187,415,139 samples, 0.07%)</title><rect x="29.7" y="229" width="0.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="32.75" y="239.5" ></text>
</g>
<g >
<title>NaClMaskRestore (821,177,295 samples, 0.31%)</title><rect x="223.1" y="405" width="3.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="226.07" y="415.5" ></text>
</g>
<g >
<title>__run_timers (186,078,080 samples, 0.07%)</title><rect x="18.9" y="229" width="0.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="21.91" y="239.5" ></text>
</g>
<g >
<title>exec_binprm (292,984,736 samples, 0.11%)</title><rect x="28.4" y="277" width="1.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="31.36" y="287.5" ></text>
</g>
<g >
<title>__get_free_pages (202,387,763 samples, 0.08%)</title><rect x="27.5" y="165" width="0.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="30.46" y="175.5" ></text>
</g>
<g >
<title>run_rebalance_domains (265,436,355 samples, 0.10%)</title><rect x="17.7" y="245" width="1.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="20.72" y="255.5" ></text>
</g>
<g >
<title>NaClLog (410,651,134 samples, 0.16%)</title><rect x="640.2" y="405" width="1.9" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="643.24" y="415.5" ></text>
</g>
<g >
<title>NaClVmmapCheckAddrMapping (1,282,970,563 samples, 0.49%)</title><rect x="665.3" y="373" width="5.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="668.32" y="383.5" ></text>
</g>
<g >
<title>NaClLog (1,180,583,030 samples, 0.45%)</title><rect x="654.5" y="389" width="5.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="657.51" y="399.5" ></text>
</g>
<g >
<title>do_iter_write (187,304,026 samples, 0.07%)</title><rect x="29.7" y="197" width="0.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="32.75" y="207.5" ></text>
</g>
<g >
<title>trigger_load_balance (51,318,510 samples, 0.02%)</title><rect x="140.0" y="261" width="0.3" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="143.03" y="271.5" ></text>
</g>
<g >
<title>journal-offline (900,465,146 samples, 0.34%)</title><rect x="10.0" y="469" width="4.0" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>lind_send (77,519,684,348 samples, 29.45%)</title><rect x="671.1" y="389" width="347.4" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="674.07" y="399.5" >lind_send</text>
</g>
<g >
<title>syscall_exit_to_user_mode (170,907,042 samples, 0.06%)</title><rect x="16.9" y="421" width="0.7" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="19.88" y="431.5" ></text>
</g>
<g >
<title>cpu_startup_entry (233,320,991 samples, 0.09%)</title><rect x="26.4" y="357" width="1.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="29.40" y="367.5" ></text>
</g>
<g >
<title>NaClAppThreadSetSuspendState (51,300,387 samples, 0.02%)</title><rect x="53.4" y="437" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="56.37" y="447.5" ></text>
</g>
<g >
<title>search_binary_handler (292,984,736 samples, 0.11%)</title><rect x="28.4" y="261" width="1.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="31.36" y="271.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (214,032,822 samples, 0.08%)</title><rect x="24.5" y="389" width="0.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="27.47" y="399.5" ></text>
</g>
<g >
<title>NaClAppThreadSetSuspendState (15,036,989,834 samples, 5.71%)</title><rect x="140.3" y="421" width="67.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="143.26" y="431.5" >NaClApp..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::send_syscall (256,732,897 samples, 0.10%)</title><rect x="46.0" y="437" width="1.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="49.01" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_execve (292,984,736 samples, 0.11%)</title><rect x="28.4" y="341" width="1.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="31.36" y="351.5" ></text>
</g>
<g >
<title>enqueue_task_fair (186,078,080 samples, 0.07%)</title><rect x="18.9" y="101" width="0.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="21.91" y="111.5" ></text>
</g>
<g >
<title>run_timer_softirq (186,078,080 samples, 0.07%)</title><rect x="18.9" y="245" width="0.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="21.91" y="255.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (48,297,464 samples, 0.02%)</title><rect x="13.7" y="277" width="0.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="16.68" y="287.5" ></text>
</g>
<g >
<title>CompareAndSwap (564,781,295 samples, 0.21%)</title><rect x="88.0" y="421" width="2.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="91.05" y="431.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (202,387,763 samples, 0.08%)</title><rect x="27.5" y="117" width="0.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="30.46" y="127.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (31,474,001 samples, 0.01%)</title><rect x="13.5" y="389" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="16.48" y="399.5" ></text>
</g>
<g >
<title>NaClSysSendDecoder (256,733,069 samples, 0.10%)</title><rect x="1174.6" y="437" width="1.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1177.56" y="447.5" ></text>
</g>
<g >
<title>filemap_read (292,984,736 samples, 0.11%)</title><rect x="28.4" y="117" width="1.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="31.36" y="127.5" ></text>
</g>
<g >
<title>rest_init (233,482,285 samples, 0.09%)</title><rect x="26.4" y="373" width="1.0" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="29.40" y="383.5" ></text>
</g>
<g >
<title>perf_mmap__push (187,674,184 samples, 0.07%)</title><rect x="29.7" y="389" width="0.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="32.75" y="399.5" ></text>
</g>
<g >
<title>start_kernel (80,413,193 samples, 0.03%)</title><rect x="13.7" y="405" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="16.68" y="415.5" ></text>
</g>
<g >
<title>lind_send (153,941,024 samples, 0.06%)</title><rect x="1018.5" y="405" width="0.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1021.55" y="415.5" ></text>
</g>
<g >
<title>NaClSysSendDecoder (88,247,115,138 samples, 33.52%)</title><rect x="623.7" y="421" width="395.5" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="626.68" y="431.5" >NaClSysSendDecoder</text>
</g>
<g >
<title>[anon] (3,126,439,093 samples, 1.19%)</title><rect x="33.1" y="453" width="14.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="36.14" y="463.5" ></text>
</g>
<g >
<title>dispatcher (74,491,451,433 samples, 28.30%)</title><rect x="287.9" y="373" width="333.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="290.93" y="383.5" >dispatcher</text>
</g>
<g >
<title>[bash] (202,387,763 samples, 0.08%)</title><rect x="27.5" y="341" width="0.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="30.46" y="351.5" ></text>
</g>
<g >
<title>ep_poll (22,580,497 samples, 0.01%)</title><rect x="13.2" y="389" width="0.1" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="16.22" y="399.5" ></text>
</g>
<g >
<title>do_idle (43,804,690 samples, 0.02%)</title><rect x="13.5" y="405" width="0.2" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="16.48" y="415.5" ></text>
</g>
<g >
<title>enqueue_entity (186,078,080 samples, 0.07%)</title><rect x="18.9" y="85" width="0.8" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="21.91" y="95.5" ></text>
</g>
<g >
<title>NaClCopyInFromUserAndDropLock (153,894,216 samples, 0.06%)</title><rect x="1161.9" y="437" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1164.91" y="447.5" ></text>
</g>
<g >
<title>HandleStackContext (10,815,311,988 samples, 4.11%)</title><rect x="90.6" y="421" width="48.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="93.58" y="431.5" >Hand..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (187,552,048 samples, 0.07%)</title><rect x="29.7" y="309" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="32.75" y="319.5" ></text>
</g>
<g >
<title>wake_up_process (186,078,080 samples, 0.07%)</title><rect x="18.9" y="165" width="0.8" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="21.91" y="175.5" ></text>
</g>
<g >
<title>NaClSysSend (51,303,741 samples, 0.02%)</title><rect x="623.4" y="421" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="626.45" y="431.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (233,482,285 samples, 0.09%)</title><rect x="26.4" y="437" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="29.40" y="447.5" ></text>
</g>
<g >
<title>NaClVmmapCheckAddrMapping (1,799,597,718 samples, 0.68%)</title><rect x="264.9" y="373" width="8.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="267.91" y="383.5" ></text>
</g>
<g >
<title>do_idle (232,046,375 samples, 0.09%)</title><rect x="26.4" y="341" width="1.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="29.40" y="351.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (187,304,026 samples, 0.07%)</title><rect x="29.7" y="181" width="0.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="32.75" y="191.5" ></text>
</g>
<g >
<title>cpuidle_enter (26,379,289 samples, 0.01%)</title><rect x="13.5" y="357" width="0.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.48" y="367.5" ></text>
</g>
<g >
<title>nohz_balancer_kick (51,318,510 samples, 0.02%)</title><rect x="140.0" y="245" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="143.03" y="255.5" ></text>
</g>
<g >
<title>NaClLog (1,538,995,303 samples, 0.58%)</title><rect x="250.2" y="389" width="6.9" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="253.18" y="399.5" ></text>
</g>
<g >
<title>lind (202,387,763 samples, 0.08%)</title><rect x="27.5" y="469" width="0.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="30.46" y="479.5" ></text>
</g>
<g >
<title>[libc.so.6] (205,254,628 samples, 0.08%)</title><rect x="639.1" y="389" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="642.09" y="399.5" ></text>
</g>
<g >
<title>__cmd_record (209,128,250 samples, 0.08%)</title><rect x="29.7" y="437" width="0.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="32.68" y="447.5" ></text>
</g>
<g >
<title>call_cpuidle (26,379,289 samples, 0.01%)</title><rect x="13.5" y="373" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="16.48" y="383.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (32,288,230 samples, 0.01%)</title><rect x="30.0" y="53" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="32.98" y="63.5" ></text>
</g>
<g >
<title>all (263,249,364,366 samples, 100%)</title><rect x="10.0" y="485" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common (359,382,979 samples, 0.14%)</title><rect x="43.7" y="437" width="1.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="46.71" y="447.5" ></text>
</g>
<g >
<title>main (202,387,763 samples, 0.08%)</title><rect x="27.5" y="405" width="0.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="30.46" y="415.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (69,925,398,152 samples, 26.56%)</title><rect x="308.4" y="357" width="313.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="311.40" y="367.5" >rustposix::safeposix::dispatcher::dispatch..</text>
</g>
<g >
<title>NaClUserToSysStackAddr (256,633,281 samples, 0.10%)</title><rect x="137.9" y="405" width="1.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="140.91" y="415.5" ></text>
</g>
<g >
<title>ksys_write (187,415,139 samples, 0.07%)</title><rect x="29.7" y="261" width="0.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="32.75" y="271.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRangeProt (3,546,774,195 samples, 1.35%)</title><rect x="257.1" y="389" width="15.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="260.08" y="399.5" ></text>
</g>
<g >
<title>__libc_start_main (202,387,763 samples, 0.08%)</title><rect x="27.5" y="437" width="0.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="30.46" y="447.5" ></text>
</g>
<g >
<title>CompareAndSwap (10,827,741,693 samples, 4.11%)</title><rect x="159.1" y="405" width="48.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="162.12" y="415.5" >Comp..</text>
</g>
<g >
<title>dispatcher@plt (205,346,279 samples, 0.08%)</title><rect x="1017.6" y="373" width="0.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1020.63" y="383.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (205,196,983 samples, 0.08%)</title><rect x="47.2" y="437" width="0.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="50.16" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (205,205,017 samples, 0.08%)</title><rect x="16.7" y="453" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="19.73" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (37,469,926 samples, 0.01%)</title><rect x="13.2" y="437" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="16.21" y="447.5" ></text>
</g>
<g >
<title>NaClGetThreadCtxSp (205,300,990 samples, 0.08%)</title><rect x="132.6" y="405" width="0.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="135.61" y="415.5" ></text>
</g>
<g >
<title>arch_call_rest_init (80,413,193 samples, 0.03%)</title><rect x="13.7" y="389" width="0.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="16.68" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (202,387,763 samples, 0.08%)</title><rect x="27.5" y="277" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="30.46" y="287.5" ></text>
</g>
<g >
<title>vfs_write (187,415,139 samples, 0.07%)</title><rect x="29.7" y="245" width="0.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="32.75" y="255.5" ></text>
</g>
<g >
<title>_start (202,387,763 samples, 0.08%)</title><rect x="27.5" y="453" width="0.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="30.46" y="463.5" ></text>
</g>
<g >
<title>copy_page_from_iter_atomic (31,805,832 samples, 0.01%)</title><rect x="29.7" y="117" width="0.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="32.75" y="127.5" ></text>
</g>
<g >
<title>NaClSysRecvDecoder (102,695,427 samples, 0.04%)</title><rect x="1173.6" y="437" width="0.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1176.64" y="447.5" ></text>
</g>
<g >
<title>sched_ttwu_pending (212,148,033 samples, 0.08%)</title><rect x="24.5" y="373" width="0.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="27.48" y="383.5" ></text>
</g>
<g >
<title>NaClStackSafetyNowOnTrustedStack (359,401,455 samples, 0.14%)</title><rect x="1171.1" y="437" width="1.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1174.11" y="447.5" ></text>
</g>
<g >
<title>vfs_iter_read (292,984,736 samples, 0.11%)</title><rect x="28.4" y="197" width="1.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="31.36" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_write (187,415,139 samples, 0.07%)</title><rect x="29.7" y="277" width="0.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="32.75" y="287.5" ></text>
</g>
<g >
<title>ion (187,674,184 samples, 0.07%)</title><rect x="29.7" y="341" width="0.9" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="32.75" y="351.5" ></text>
</g>
<g >
<title>call_timer_fn (186,078,080 samples, 0.07%)</title><rect x="18.9" y="213" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="21.91" y="223.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (153,933,987 samples, 0.06%)</title><rect x="42.8" y="437" width="0.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="45.79" y="447.5" ></text>
</g>
<g >
<title>NaClStackSafetyNowOnUntrustedStack (153,597,272 samples, 0.06%)</title><rect x="1172.7" y="437" width="0.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1175.72" y="447.5" ></text>
</g>
<g >
<title>NaClSysRecv (51,338,863 samples, 0.02%)</title><rect x="1173.4" y="437" width="0.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1176.41" y="447.5" ></text>
</g>
<g >
<title>NaClRawUserStackAddrNormalize (462,097,185 samples, 0.18%)</title><rect x="1169.0" y="437" width="2.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1172.04" y="447.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (233,482,285 samples, 0.09%)</title><rect x="26.4" y="421" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="29.40" y="431.5" ></text>
</g>
<g >
<title>rest_init (80,413,193 samples, 0.03%)</title><rect x="13.7" y="373" width="0.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="16.68" y="383.5" ></text>
</g>
<g >
<title>CompareAndSwap (821,503,014 samples, 0.31%)</title><rect x="1154.8" y="437" width="3.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1157.78" y="447.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRange (1,437,196,055 samples, 0.55%)</title><rect x="632.6" y="389" width="6.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="635.65" y="399.5" ></text>
</g>
<g >
<title>do_epoll_wait (22,580,497 samples, 0.01%)</title><rect x="13.2" y="405" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="16.22" y="415.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (458,276,181 samples, 0.17%)</title><rect x="17.7" y="309" width="2.0" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="20.69" y="319.5" ></text>
</g>
<g >
<title>record__pushfn (187,674,184 samples, 0.07%)</title><rect x="29.7" y="373" width="0.9" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="32.75" y="383.5" ></text>
</g>
<g >
<title>alloc_bprm (202,387,763 samples, 0.08%)</title><rect x="27.5" y="229" width="0.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="30.46" y="239.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (202,387,763 samples, 0.08%)</title><rect x="27.5" y="245" width="0.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="30.46" y="255.5" ></text>
</g>
<g >
<title>pgd_alloc (202,387,763 samples, 0.08%)</title><rect x="27.5" y="181" width="0.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="30.46" y="191.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRange (307,289,575 samples, 0.12%)</title><rect x="1175.7" y="437" width="1.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1178.71" y="447.5" ></text>
</g>
<g >
<title>NaClVmmapCheckAddrMapping (153,694,664 samples, 0.06%)</title><rect x="1178.2" y="437" width="0.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1181.24" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (51,101,367 samples, 0.02%)</title><rect x="240.1" y="389" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="243.08" y="399.5" ></text>
</g>
<g >
<title>[librustposix.so] (205,196,983 samples, 0.08%)</title><rect x="47.2" y="453" width="0.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="50.16" y="463.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (51,318,510 samples, 0.02%)</title><rect x="140.0" y="373" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="143.03" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_execve (202,387,763 samples, 0.08%)</title><rect x="27.5" y="261" width="0.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="30.46" y="271.5" ></text>
</g>
<g >
<title>NaClSysSend (102,709,844 samples, 0.04%)</title><rect x="1174.1" y="437" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1177.10" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (37,925,187 samples, 0.01%)</title><rect x="13.2" y="453" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="16.21" y="463.5" ></text>
</g>
<g >
<title>[unknown]  (30,237,097,103 samples, 11.49%)</title><rect x="1019.2" y="453" width="135.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1022.24" y="463.5" >[unknown] </text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common (69,771,434,191 samples, 26.50%)</title><rect x="309.1" y="341" width="312.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="312.09" y="351.5" >rustposix::safeposix::syscalls::net_calls:..</text>
</g>
<g >
<title>dispatcher (673,815,378 samples, 0.26%)</title><rect x="1179.6" y="437" width="3.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1182.62" y="447.5" ></text>
</g>
<g >
<title>NaClSandboxCodeAddr (975,491,920 samples, 0.37%)</title><rect x="133.5" y="405" width="4.4" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="136.53" y="415.5" ></text>
</g>
<g >
<title>generic_write_end (37,587,217 samples, 0.01%)</title><rect x="30.4" y="101" width="0.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="33.42" y="111.5" ></text>
</g>
<g >
<title>NaClGetThreadCtxSp (461,995,901 samples, 0.18%)</title><rect x="33.1" y="437" width="2.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="36.14" y="447.5" ></text>
</g>
<g >
<title>memcpy@plt (51,354,964 samples, 0.02%)</title><rect x="240.3" y="389" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="243.31" y="399.5" ></text>
</g>
<g >
<title>alloc_pages (202,387,763 samples, 0.08%)</title><rect x="27.5" y="149" width="0.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="30.46" y="159.5" ></text>
</g>
<g >
<title>start_secondary (45,834,592 samples, 0.02%)</title><rect x="13.5" y="437" width="0.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="16.47" y="447.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::send_syscall (70,229,952,942 samples, 26.68%)</title><rect x="702.8" y="357" width="314.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="705.83" y="367.5" >rustposix::safeposix::syscalls::net_calls:..</text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (422,223,328 samples, 0.16%)</title><rect x="40.9" y="437" width="1.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="43.89" y="447.5" ></text>
</g>
<g >
<title>arch_call_rest_init (233,482,285 samples, 0.09%)</title><rect x="26.4" y="389" width="1.0" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="29.40" y="399.5" ></text>
</g>
<g >
<title>scheduler_tick (51,318,510 samples, 0.02%)</title><rect x="140.0" y="277" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="143.03" y="287.5" ></text>
</g>
<g >
<title>cpu_startup_entry (80,413,193 samples, 0.03%)</title><rect x="13.7" y="357" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="16.68" y="367.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common_inner (410,744,941 samples, 0.16%)</title><rect x="1188.2" y="437" width="1.8" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1191.16" y="447.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (102,678,838 samples, 0.04%)</title><rect x="702.4" y="357" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="705.37" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (154,055,608 samples, 0.06%)</title><rect x="1178.9" y="437" width="0.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1181.93" y="447.5" ></text>
</g>
<g >
<title>[unknown] (292,984,736 samples, 0.11%)</title><rect x="28.4" y="453" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="31.36" y="463.5" ></text>
</g>
<g >
<title>irq_exit_rcu (451,514,435 samples, 0.17%)</title><rect x="17.7" y="293" width="2.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="20.72" y="303.5" ></text>
</g>
<g >
<title>cpuidle_enter (62,177,993 samples, 0.02%)</title><rect x="13.7" y="293" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="16.68" y="303.5" ></text>
</g>
<g >
<title>mm_alloc (202,387,763 samples, 0.08%)</title><rect x="27.5" y="213" width="0.9" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="30.46" y="223.5" ></text>
</g>
<g >
<title>NaClLog (923,887,027 samples, 0.35%)</title><rect x="1162.6" y="437" width="4.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1165.60" y="447.5" ></text>
</g>
<g >
<title>call_cpuidle (1,508,881,926 samples, 0.57%)</title><rect x="17.7" y="373" width="6.8" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="20.69" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (205,205,017 samples, 0.08%)</title><rect x="16.7" y="437" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="19.73" y="447.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (211,514,372 samples, 0.08%)</title><rect x="26.4" y="277" width="1.0" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="29.41" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (307,500,318 samples, 0.12%)</title><rect x="38.0" y="437" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="40.98" y="447.5" ></text>
</g>
<g >
<title>NaClSwitchToApp (1,744,032,600 samples, 0.66%)</title><rect x="218.9" y="421" width="7.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="221.93" y="431.5" ></text>
</g>
<g >
<title>NaClSysRecv (154,028,871 samples, 0.06%)</title><rect x="226.8" y="421" width="0.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="229.75" y="431.5" ></text>
</g>
<g >
<title>__filemap_get_folio (108,786,349 samples, 0.04%)</title><rect x="29.9" y="101" width="0.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="32.89" y="111.5" ></text>
</g>
<g >
<title>dispatcher (74,593,555,387 samples, 28.34%)</title><rect x="683.3" y="373" width="334.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="686.27" y="383.5" >dispatcher</text>
</g>
<g >
<title>enqueue_task (186,078,080 samples, 0.07%)</title><rect x="18.9" y="117" width="0.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="21.91" y="127.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (187,304,026 samples, 0.07%)</title><rect x="29.7" y="165" width="0.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="32.75" y="175.5" ></text>
</g>
<g >
<title>cpuidle_enter (211,983,864 samples, 0.08%)</title><rect x="26.4" y="293" width="1.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="29.41" y="303.5" ></text>
</g>
<g >
<title>generic_perform_write (187,185,624 samples, 0.07%)</title><rect x="29.7" y="133" width="0.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="32.75" y="143.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (292,984,736 samples, 0.11%)</title><rect x="28.4" y="325" width="1.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="31.36" y="335.5" ></text>
</g>
<g >
<title>do_idle (1,943,581,531 samples, 0.74%)</title><rect x="17.7" y="405" width="8.7" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="20.69" y="415.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (170,907,042 samples, 0.06%)</title><rect x="16.9" y="405" width="0.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="19.88" y="415.5" ></text>
</g>
<g >
<title>record__mmap_read_all (194,043,353 samples, 0.07%)</title><rect x="29.7" y="421" width="0.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="32.74" y="431.5" ></text>
</g>
<g >
<title>call_cpuidle (62,667,273 samples, 0.02%)</title><rect x="13.7" y="309" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="16.68" y="319.5" ></text>
</g>
<g >
<title>NaClLog (359,310,585 samples, 0.14%)</title><rect x="240.5" y="405" width="1.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="243.54" y="415.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (80,413,193 samples, 0.03%)</title><rect x="13.7" y="437" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="16.68" y="447.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (194,043,353 samples, 0.07%)</title><rect x="29.7" y="405" width="0.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="32.74" y="415.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common (410,479,685 samples, 0.16%)</title><rect x="1186.3" y="437" width="1.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1189.32" y="447.5" ></text>
</g>
<g >
<title>HandleStackContext (256,662,729 samples, 0.10%)</title><rect x="1158.5" y="437" width="1.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1161.46" y="447.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRangeProt (256,668,351 samples, 0.10%)</title><rect x="1177.1" y="437" width="1.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1180.09" y="447.5" ></text>
</g>
<g >
<title>bprm_execve (292,984,736 samples, 0.11%)</title><rect x="28.4" y="309" width="1.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="31.36" y="319.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1,943,581,531 samples, 0.74%)</title><rect x="17.7" y="421" width="8.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="20.69" y="431.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (51,318,510 samples, 0.02%)</title><rect x="140.0" y="389" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="143.03" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (292,984,736 samples, 0.11%)</title><rect x="28.4" y="373" width="1.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="31.36" y="383.5" ></text>
</g>
<g >
<title>delayed_work_timer_fn (186,078,080 samples, 0.07%)</title><rect x="18.9" y="197" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="21.91" y="207.5" ></text>
</g>
<g >
<title>intel_idle (1,049,669,244 samples, 0.40%)</title><rect x="19.7" y="325" width="4.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="22.75" y="335.5" ></text>
</g>
<g >
<title>[sel_ldr] (25,846,290,715 samples, 9.82%)</title><rect x="1038.9" y="437" width="115.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1041.92" y="447.5" >[sel_ldr]</text>
</g>
<g >
<title>ttwu_do_activate (186,078,080 samples, 0.07%)</title><rect x="18.9" y="133" width="0.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="21.91" y="143.5" ></text>
</g>
<g >
<title>__memcpy (292,984,736 samples, 0.11%)</title><rect x="28.4" y="85" width="1.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="31.36" y="95.5" ></text>
</g>
<g >
<title>__sched_yield (51,327,806 samples, 0.02%)</title><rect x="621.6" y="293" width="0.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="624.61" y="303.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (451,514,435 samples, 0.17%)</title><rect x="17.7" y="277" width="2.0" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="20.72" y="287.5" ></text>
</g>
<g >
<title>tick_sched_handle (51,318,510 samples, 0.02%)</title><rect x="140.0" y="309" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="143.03" y="319.5" ></text>
</g>
<g >
<title>memcpy@plt (51,290,862 samples, 0.02%)</title><rect x="640.0" y="389" width="0.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="643.01" y="399.5" ></text>
</g>
<g >
<title>generic_file_read_iter (292,984,736 samples, 0.11%)</title><rect x="28.4" y="133" width="1.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="31.36" y="143.5" ></text>
</g>
<g >
<title>evlist__prepare_workload (292,984,736 samples, 0.11%)</title><rect x="28.4" y="421" width="1.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="31.36" y="431.5" ></text>
</g>
<g >
<title>filemap_add_folio (86,896,564 samples, 0.03%)</title><rect x="29.9" y="85" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="32.89" y="95.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (117,679,620 samples, 0.04%)</title><rect x="29.9" y="117" width="0.5" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="32.89" y="127.5" ></text>
</g>
<g >
<title>lind_recv (153,777,555 samples, 0.06%)</title><rect x="622.8" y="405" width="0.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="625.76" y="415.5" ></text>
</g>
<g >
<title>[unknown] (209,128,250 samples, 0.08%)</title><rect x="29.7" y="453" width="0.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="32.68" y="463.5" ></text>
</g>
<g >
<title>NaClSysSend (83,987,366,211 samples, 31.90%)</title><rect x="642.1" y="405" width="376.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="645.08" y="415.5" >NaClSysSend</text>
</g>
<g >
<title>cpu_startup_entry (45,834,592 samples, 0.02%)</title><rect x="13.5" y="421" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="16.47" y="431.5" ></text>
</g>
<g >
<title>NaClAppThreadFromThreadContext (102,709,050 samples, 0.04%)</title><rect x="1159.6" y="437" width="0.5" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1162.61" y="447.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (51,318,510 samples, 0.02%)</title><rect x="140.0" y="357" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="143.03" y="367.5" ></text>
</g>
<g >
<title>NaClSysRecv (84,910,705,356 samples, 32.25%)</title><rect x="242.2" y="405" width="380.6" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="245.15" y="415.5" >NaClSysRecv</text>
</g>
<g >
<title>cpuidle_enter (1,508,881,926 samples, 0.57%)</title><rect x="17.7" y="357" width="6.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="20.69" y="367.5" ></text>
</g>
<g >
<title>NaClRawUserStackAddrNormalize (256,683,385 samples, 0.10%)</title><rect x="217.8" y="421" width="1.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="220.78" y="431.5" ></text>
</g>
<g >
<title>NaClLog (2,155,671,480 samples, 0.82%)</title><rect x="208.1" y="421" width="9.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="211.12" y="431.5" ></text>
</g>
<g >
<title>perf (209,128,250 samples, 0.08%)</title><rect x="29.7" y="469" width="0.9" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="32.68" y="479.5" ></text>
</g>
<g >
<title>perf-exec (292,984,736 samples, 0.11%)</title><rect x="28.4" y="469" width="1.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="31.36" y="479.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (51,318,510 samples, 0.02%)</title><rect x="140.0" y="405" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="143.03" y="415.5" ></text>
</g>
<g >
<title>NaClSysRecvDecoder (88,346,185,452 samples, 33.56%)</title><rect x="227.4" y="421" width="396.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="230.44" y="431.5" >NaClSysRecvDecoder</text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (51,354,741 samples, 0.02%)</title><rect x="43.5" y="437" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="46.48" y="447.5" ></text>
</g>
<g >
<title>lind_send (205,374,628 samples, 0.08%)</title><rect x="1182.6" y="437" width="1.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1185.64" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (292,984,736 samples, 0.11%)</title><rect x="28.4" y="405" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="31.36" y="415.5" ></text>
</g>
<g >
<title>restore_fpregs_from_fpstate (170,907,042 samples, 0.06%)</title><rect x="16.9" y="373" width="0.7" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="19.88" y="383.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (2,177,063,816 samples, 0.83%)</title><rect x="17.7" y="453" width="9.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="20.69" y="463.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRangeProt (2,514,876,543 samples, 0.96%)</title><rect x="659.8" y="389" width="11.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="662.80" y="399.5" ></text>
</g>
<g >
<title>[sel_ldr] (216,145,563,601 samples, 82.11%)</title><rect x="50.4" y="453" width="968.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="53.38" y="463.5" >[sel_ldr]</text>
</g>
<g >
<title>NaClCopyInFromUserAndDropLock (1,947,389,404 samples, 0.74%)</title><rect x="231.8" y="405" width="8.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="234.81" y="415.5" ></text>
</g>
<g >
<title>intel_idle (25,401,272 samples, 0.01%)</title><rect x="13.8" y="261" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="16.78" y="271.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (292,984,736 samples, 0.11%)</title><rect x="28.4" y="149" width="1.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="31.36" y="159.5" ></text>
</g>
<g >
<title>__queue_work (186,078,080 samples, 0.07%)</title><rect x="18.9" y="181" width="0.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="21.91" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (292,984,736 samples, 0.11%)</title><rect x="28.4" y="357" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="31.36" y="367.5" ></text>
</g>
<g >
<title>__update_blocked_fair (265,167,384 samples, 0.10%)</title><rect x="17.7" y="213" width="1.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="20.72" y="223.5" ></text>
</g>
<g >
<title>execve (202,387,763 samples, 0.08%)</title><rect x="27.5" y="309" width="0.9" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="30.46" y="319.5" ></text>
</g>
<g >
<title>[perf-997.map] (513,382,026 samples, 0.20%)</title><rect x="48.1" y="453" width="2.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="51.08" y="463.5" ></text>
</g>
<g >
<title>mm_init (202,387,763 samples, 0.08%)</title><rect x="27.5" y="197" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="30.46" y="207.5" ></text>
</g>
<g >
<title>ext4_da_write_end (37,587,217 samples, 0.01%)</title><rect x="30.4" y="117" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="33.42" y="127.5" ></text>
</g>
<g >
<title>schedule_idle (216,418,687 samples, 0.08%)</title><rect x="25.4" y="389" width="1.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="28.43" y="399.5" ></text>
</g>
<g >
<title>NaClUserToSysStackAddr (307,995,555 samples, 0.12%)</title><rect x="36.6" y="437" width="1.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="39.60" y="447.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (292,984,736 samples, 0.11%)</title><rect x="28.4" y="165" width="1.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="31.36" y="175.5" ></text>
</g>
<g >
<title>[unknown] (7,858,271,371 samples, 2.99%)</title><rect x="1154.8" y="453" width="35.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1157.78" y="463.5" >[u..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (458,276,181 samples, 0.17%)</title><rect x="17.7" y="325" width="2.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="20.69" y="335.5" ></text>
</g>
<g >
<title>sel_ldr (258,650,583,733 samples, 98.25%)</title><rect x="30.6" y="469" width="1159.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="33.61" y="479.5" >sel_ldr</text>
</g>
<g >
<title>__alloc_pages (202,387,763 samples, 0.08%)</title><rect x="27.5" y="133" width="0.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="30.46" y="143.5" ></text>
</g>
<g >
<title>shell_execve (202,387,763 samples, 0.08%)</title><rect x="27.5" y="325" width="0.9" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="30.46" y="335.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (187,304,026 samples, 0.07%)</title><rect x="29.7" y="149" width="0.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="32.75" y="159.5" ></text>
</g>
<g >
<title>NaClCopyInFromUserAndDropLock (2,720,371,628 samples, 1.03%)</title><rect x="628.0" y="405" width="12.2" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="631.05" y="415.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (214,348,957,686 samples, 81.42%)</title><rect x="58.4" y="437" width="960.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="61.43" y="447.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>lind_recv (78,032,934,055 samples, 29.64%)</title><rect x="273.0" y="389" width="349.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="275.98" y="399.5" >lind_recv</text>
</g>
<g >
<title>__filemap_add_folio (69,464,700 samples, 0.03%)</title><rect x="29.9" y="69" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="32.89" y="79.5" ></text>
</g>
<g >
<title>NaClLog (513,359,174 samples, 0.20%)</title><rect x="53.6" y="437" width="2.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="56.60" y="447.5" ></text>
</g>
<g >
<title>write (187,674,184 samples, 0.07%)</title><rect x="29.7" y="325" width="0.9" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="32.75" y="335.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (51,318,510 samples, 0.02%)</title><rect x="140.0" y="341" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="143.03" y="351.5" ></text>
</g>
<g >
<title>__kernel_read (292,984,736 samples, 0.11%)</title><rect x="28.4" y="229" width="1.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="31.36" y="239.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (80,413,193 samples, 0.03%)</title><rect x="13.7" y="421" width="0.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="16.68" y="431.5" ></text>
</g>
<g >
<title>NaClAppThreadFromThreadContext (267,651,013 samples, 0.10%)</title><rect x="139.1" y="421" width="1.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="142.06" y="431.5" ></text>
</g>
<g >
<title>vfs_iter_write (187,304,026 samples, 0.07%)</title><rect x="29.7" y="213" width="0.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="32.75" y="223.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (25,979,355 samples, 0.01%)</title><rect x="13.5" y="341" width="0.1" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="16.48" y="351.5" ></text>
</g>
<g >
<title>NaClSandboxCodeAddr (307,996,857 samples, 0.12%)</title><rect x="35.2" y="437" width="1.4" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="38.22" y="447.5" ></text>
</g>
<g >
<title>NaClAppThreadSetSuspendState (410,328,383 samples, 0.16%)</title><rect x="1160.1" y="437" width="1.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1163.07" y="447.5" ></text>
</g>
<g >
<title>do_idle (80,413,193 samples, 0.03%)</title><rect x="13.7" y="341" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="16.68" y="351.5" ></text>
</g>
<g >
<title>copy_page_to_iter (292,984,736 samples, 0.11%)</title><rect x="28.4" y="101" width="1.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="31.36" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (202,387,763 samples, 0.08%)</title><rect x="27.5" y="421" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="30.46" y="431.5" ></text>
</g>
<g >
<title>execute_command (202,387,763 samples, 0.08%)</title><rect x="27.5" y="373" width="0.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="30.46" y="383.5" ></text>
</g>
<g >
<title>kworker/dying (2,993,814,738 samples, 1.14%)</title><rect x="14.0" y="469" width="13.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="17.04" y="479.5" ></text>
</g>
<g >
<title>start_kernel (233,482,285 samples, 0.09%)</title><rect x="26.4" y="405" width="1.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="29.40" y="415.5" ></text>
</g>
<g >
<title>ovl_read_iter (292,984,736 samples, 0.11%)</title><rect x="28.4" y="213" width="1.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="31.36" y="223.5" ></text>
</g>
<g >
<title>intel_idle (198,359,249 samples, 0.08%)</title><rect x="26.5" y="261" width="0.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="29.47" y="271.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (292,984,736 samples, 0.11%)</title><rect x="28.4" y="293" width="1.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="31.36" y="303.5" ></text>
</g>
<g >
<title>__do_softirq (451,514,435 samples, 0.17%)</title><rect x="17.7" y="261" width="2.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="20.72" y="271.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (219,821,012 samples, 0.08%)</title><rect x="26.4" y="325" width="1.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="29.40" y="335.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (1,511,558,012 samples, 0.57%)</title><rect x="17.7" y="389" width="6.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="20.69" y="399.5" ></text>
</g>
<g >
<title>NaClCopyInFromUserAndDropLock (102,634,832 samples, 0.04%)</title><rect x="207.7" y="421" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="210.66" y="431.5" ></text>
</g>
<g >
<title>update_process_times (51,318,510 samples, 0.02%)</title><rect x="140.0" y="293" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="143.03" y="303.5" ></text>
</g>
<g >
<title>update_blocked_averages (265,167,384 samples, 0.10%)</title><rect x="17.7" y="229" width="1.2" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="20.72" y="239.5" ></text>
</g>
<g >
<title>NaClMaskRestore (512,643,449 samples, 0.19%)</title><rect x="1166.7" y="437" width="2.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1169.74" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (202,387,763 samples, 0.08%)</title><rect x="27.5" y="293" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="30.46" y="303.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (70,921,042 samples, 0.03%)</title><rect x="13.7" y="325" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="16.68" y="335.5" ></text>
</g>
<g >
<title>execute_command_internal (202,387,763 samples, 0.08%)</title><rect x="27.5" y="357" width="0.9" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="30.46" y="367.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common_inner (154,006,755 samples, 0.06%)</title><rect x="45.3" y="437" width="0.7" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="48.32" y="447.5" ></text>
</g>
<g >
<title>[[heap]] (564,633,556 samples, 0.21%)</title><rect x="30.6" y="453" width="2.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="33.61" y="463.5" ></text>
</g>
<g >
<title>__cmd_record (292,984,736 samples, 0.11%)</title><rect x="28.4" y="437" width="1.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="31.36" y="447.5" ></text>
</g>
<g >
<title>[libc.so.6] (15,686,984,319 samples, 5.96%)</title><rect x="551.3" y="293" width="70.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="554.29" y="303.5" >[libc.s..</text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (615,947,558 samples, 0.23%)</title><rect x="1183.6" y="437" width="2.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1186.56" y="447.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::net_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::recv_common_inner (62,378,658,663 samples, 23.70%)</title><rect x="342.2" y="325" width="279.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="345.23" y="335.5" >rustposix::safeposix::syscalls::net_c..</text>
</g>
<g >
<title>rcu_note_context_switch (214,075,183 samples, 0.08%)</title><rect x="25.4" y="357" width="1.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="28.44" y="367.5" ></text>
</g>
<g >
<title>try_to_wake_up (186,078,080 samples, 0.07%)</title><rect x="18.9" y="149" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="21.91" y="159.5" ></text>
</g>
<g >
<title>NaClStackSafetyNowOnUntrustedStack (307,978,704 samples, 0.12%)</title><rect x="57.1" y="437" width="1.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="60.05" y="447.5" ></text>
</g>
<g >
<title>charge_memcg (32,169,107 samples, 0.01%)</title><rect x="30.0" y="37" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="32.98" y="47.5" ></text>
</g>
</g>
</svg>
