<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>lru_gen_add_folio (62,855,101 samples, 2.02%)</title><rect x="264.2" y="101" width="23.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="267.21" y="111.5" >l..</text>
</g>
<g >
<title>ext4_da_write_begin (911,287,411 samples, 29.31%)</title><rect x="113.1" y="197" width="345.9" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="116.13" y="207.5" >ext4_da_write_begin</text>
</g>
<g >
<title>do_syscall_64 (5,354,077 samples, 0.17%)</title><rect x="609.3" y="453" width="2.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="612.35" y="463.5" ></text>
</g>
<g >
<title>ext4_es_lookup_extent (65,929,367 samples, 2.12%)</title><rect x="434.0" y="133" width="25.0" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="436.98" y="143.5" >e..</text>
</g>
<g >
<title>secondary_startup_64_no_verify (1,045,360,270 samples, 33.62%)</title><rect x="793.2" y="565" width="396.8" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="796.24" y="575.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>do_iter_readv_writev (1,176,224,853 samples, 37.83%)</title><rect x="32.4" y="261" width="446.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="35.42" y="271.5" >do_iter_readv_writev</text>
</g>
<g >
<title>tick_nohz_restart (227,442,555 samples, 7.32%)</title><rect x="1047.3" y="485" width="86.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1050.34" y="495.5" >tick_nohz_..</text>
</g>
<g >
<title>vm_normal_page (291,120,920 samples, 9.36%)</title><rect x="498.9" y="277" width="110.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="501.85" y="287.5" >vm_normal_page</text>
</g>
<g >
<title>_raw_spin_trylock (136,493,851 samples, 4.39%)</title><rect x="288.1" y="85" width="51.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="291.07" y="95.5" >_raw_..</text>
</g>
<g >
<title>do_idle (896,932,786 samples, 28.85%)</title><rect x="793.2" y="517" width="340.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="796.24" y="527.5" >do_idle</text>
</g>
<g >
<title>get_page_from_freelist (136,493,851 samples, 4.39%)</title><rect x="288.1" y="101" width="51.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="291.07" y="111.5" >get_p..</text>
</g>
<g >
<title>perf_ioctl (5,354,077 samples, 0.17%)</title><rect x="609.3" y="421" width="2.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="612.35" y="431.5" ></text>
</g>
<g >
<title>hrtimer_cancel (227,442,555 samples, 7.32%)</title><rect x="1047.3" y="469" width="86.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1050.34" y="479.5" >hrtimer_ca..</text>
</g>
<g >
<title>ext4_da_write_end (52,276,701 samples, 1.68%)</title><rect x="459.0" y="197" width="19.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="462.00" y="207.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (56,524,354 samples, 1.82%)</title><rect x="215.8" y="133" width="21.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="218.83" y="143.5" >g..</text>
</g>
<g >
<title>smp_call_function_single (5,354,077 samples, 0.17%)</title><rect x="609.3" y="341" width="2.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="612.35" y="351.5" ></text>
</g>
<g >
<title>splice_folio_into_pipe (52,714,409 samples, 1.70%)</title><rect x="478.8" y="277" width="20.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="481.85" y="287.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (5,354,077 samples, 0.17%)</title><rect x="609.3" y="501" width="2.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="612.35" y="511.5" ></text>
</g>
<g >
<title>page_cache_pipe_buf_release (59,069,386 samples, 1.90%)</title><rect x="10.0" y="293" width="22.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >p..</text>
</g>
<g >
<title>__raw_spin_lock_irqsave (227,442,555 samples, 7.32%)</title><rect x="1047.3" y="421" width="86.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1050.34" y="431.5" >__raw_spin..</text>
</g>
<g >
<title>do_syscall_64 (291,120,920 samples, 9.36%)</title><rect x="498.9" y="549" width="110.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="501.85" y="559.5" >do_syscall_64</text>
</g>
<g >
<title>__libc_start_main (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="549" width="488.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >__libc_start_main</text>
</g>
<g >
<title>cpuidle_enter_state (507,223,628 samples, 16.31%)</title><rect x="854.8" y="453" width="192.5" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="857.83" y="463.5" >cpuidle_enter_state</text>
</g>
<g >
<title>_perf_event_enable (5,354,077 samples, 0.17%)</title><rect x="609.3" y="373" width="2.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="612.35" y="383.5" ></text>
</g>
<g >
<title>_raw_spin_lock (53,996,768 samples, 1.74%)</title><rect x="392.5" y="133" width="20.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="395.50" y="143.5" ></text>
</g>
<g >
<title>filemap_alloc_folio (136,493,851 samples, 4.39%)</title><rect x="288.1" y="165" width="51.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="291.07" y="175.5" >filem..</text>
</g>
<g >
<title>load_elf_binary (291,120,920 samples, 9.36%)</title><rect x="498.9" y="437" width="110.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="501.85" y="447.5" >load_elf_binary</text>
</g>
<g >
<title>alloc_pages (136,493,851 samples, 4.39%)</title><rect x="288.1" y="133" width="51.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="291.07" y="143.5" >alloc..</text>
</g>
<g >
<title>create_empty_buffers (51,615,675 samples, 1.66%)</title><rect x="339.9" y="165" width="19.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="342.88" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="533" width="488.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >[libc.so.6]</text>
</g>
<g >
<title>__raw_spin_lock_irqsave (52,276,701 samples, 1.68%)</title><rect x="459.0" y="37" width="19.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="462.00" y="47.5" ></text>
</g>
<g >
<title>event_function_call (5,354,077 samples, 0.17%)</title><rect x="609.3" y="357" width="2.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="612.35" y="367.5" ></text>
</g>
<g >
<title>stop_this_handle (52,276,701 samples, 1.68%)</title><rect x="459.0" y="101" width="19.8" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="462.00" y="111.5" ></text>
</g>
<g >
<title>event_function (5,354,077 samples, 0.17%)</title><rect x="609.3" y="293" width="2.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="612.35" y="303.5" ></text>
</g>
<g >
<title>cat (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="581" width="488.9" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >cat</text>
</g>
<g >
<title>__ext4_journal_stop (52,276,701 samples, 1.68%)</title><rect x="459.0" y="133" width="19.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="462.00" y="143.5" ></text>
</g>
<g >
<title>splice_direct_to_actor (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="341" width="488.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >splice_direct_to_actor</text>
</g>
<g >
<title>start_secondary (896,932,786 samples, 28.85%)</title><rect x="793.2" y="549" width="340.5" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="796.24" y="559.5" >start_secondary</text>
</g>
<g >
<title>cpuidle_enter (669,490,231 samples, 21.53%)</title><rect x="793.2" y="469" width="254.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="796.24" y="479.5" >cpuidle_enter</text>
</g>
<g >
<title>do_idle (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="453" width="56.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1136.67" y="463.5" >do_idle</text>
</g>
<g >
<title>cpuidle_idle_call (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="437" width="56.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1136.67" y="447.5" >cpuid..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (137,709,408 samples, 4.43%)</title><rect x="934.7" y="437" width="52.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="937.69" y="447.5" >asm_s..</text>
</g>
<g >
<title>cpu_startup_entry (896,932,786 samples, 28.85%)</title><rect x="793.2" y="533" width="340.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="796.24" y="543.5" >cpu_startup_entry</text>
</g>
<g >
<title>cpuidle_enter_state (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="389" width="56.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1136.67" y="399.5" >cpuid..</text>
</g>
<g >
<title>__count_memcg_events (84,783,573 samples, 2.73%)</title><rect x="135.9" y="101" width="32.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="138.92" y="111.5" >__..</text>
</g>
<g >
<title>__memcpy (212,660,741 samples, 6.84%)</title><rect x="32.4" y="181" width="80.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="35.42" y="191.5" >__memcpy</text>
</g>
<g >
<title>all (3,109,012,102 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irq (70,948,783 samples, 2.28%)</title><rect x="237.3" y="149" width="26.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="240.29" y="159.5" >_..</text>
</g>
<g >
<title>perf_ctx_enable (5,354,077 samples, 0.17%)</title><rect x="609.3" y="245" width="2.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="612.35" y="255.5" ></text>
</g>
<g >
<title>copy_page_from_iter_atomic (212,660,741 samples, 6.84%)</title><rect x="32.4" y="197" width="80.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="35.42" y="207.5" >copy_page..</text>
</g>
<g >
<title>_raw_read_unlock (87,023,865 samples, 2.80%)</title><rect x="359.5" y="133" width="33.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="362.47" y="143.5" >_r..</text>
</g>
<g >
<title>copy_file_range (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="501" width="488.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >copy_file_range</text>
</g>
<g >
<title>perf_evsel__enable_cpu (5,354,077 samples, 0.17%)</title><rect x="609.3" y="517" width="2.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="612.35" y="527.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="485" width="488.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>try_charge_memcg (53,122,765 samples, 1.71%)</title><rect x="168.1" y="101" width="20.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="171.09" y="111.5" ></text>
</g>
<g >
<title>direct_splice_actor (1,235,294,239 samples, 39.73%)</title><rect x="10.0" y="325" width="468.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >direct_splice_actor</text>
</g>
<g >
<title>folio_batch_move_lru (62,855,101 samples, 2.02%)</title><rect x="264.2" y="133" width="23.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="267.21" y="143.5" >f..</text>
</g>
<g >
<title>__alloc_pages (136,493,851 samples, 4.39%)</title><rect x="288.1" y="117" width="51.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="291.07" y="127.5" >__all..</text>
</g>
<g >
<title>ovl_copy_file_range (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="405" width="488.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >ovl_copy_file_range</text>
</g>
<g >
<title>asm_common_interrupt (162,266,603 samples, 5.22%)</title><rect x="793.2" y="453" width="61.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="796.24" y="463.5" >asm_co..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (231,932,436 samples, 7.46%)</title><rect x="705.2" y="565" width="88.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="708.21" y="575.5" >entry_SYSC..</text>
</g>
<g >
<title>__mem_cgroup_charge (270,590,885 samples, 8.70%)</title><rect x="113.1" y="133" width="102.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="116.13" y="143.5" >__mem_cgroup..</text>
</g>
<g >
<title>__x64_sys_ioctl (5,354,077 samples, 0.17%)</title><rect x="609.3" y="437" width="2.1" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="612.35" y="447.5" ></text>
</g>
<g >
<title>__filemap_get_folio (597,412,974 samples, 19.22%)</title><rect x="113.1" y="181" width="226.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="116.13" y="191.5" >__filemap_get_folio</text>
</g>
<g >
<title>ext4_es_insert_delayed_block (55,308,762 samples, 1.78%)</title><rect x="413.0" y="133" width="21.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="415.99" y="143.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (52,276,701 samples, 1.68%)</title><rect x="459.0" y="117" width="19.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="462.00" y="127.5" ></text>
</g>
<g >
<title>call_cpuidle (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="421" width="56.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1136.67" y="431.5" >call_..</text>
</g>
<g >
<title>mmput (291,120,920 samples, 9.36%)</title><rect x="498.9" y="389" width="110.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="501.85" y="399.5" >mmput</text>
</g>
<g >
<title>exec_mmap (291,120,920 samples, 9.36%)</title><rect x="498.9" y="405" width="110.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="501.85" y="415.5" >exec_mmap</text>
</g>
<g >
<title>run_rebalance_domains (137,709,408 samples, 4.43%)</title><rect x="934.7" y="357" width="52.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="937.69" y="367.5" >run_r..</text>
</g>
<g >
<title>perf-exec (291,120,920 samples, 9.36%)</title><rect x="498.9" y="581" width="110.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="501.85" y="591.5" >perf-exec</text>
</g>
<g >
<title>__do_sys_copy_file_range (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="437" width="488.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >__do_sys_copy_file_range</text>
</g>
<g >
<title>x86_pmu_enable (5,354,077 samples, 0.17%)</title><rect x="609.3" y="229" width="2.1" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="612.35" y="239.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (1,176,224,853 samples, 37.83%)</title><rect x="32.4" y="229" width="446.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="35.42" y="239.5" >ext4_buffered_write_iter</text>
</g>
<g >
<title>vfs_copy_file_range (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="421" width="488.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >vfs_copy_file_range</text>
</g>
<g >
<title>cpuidle_enter (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="405" width="56.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1136.67" y="415.5" >cpuid..</text>
</g>
<g >
<title>ctx_resched (5,354,077 samples, 0.17%)</title><rect x="609.3" y="261" width="2.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="612.35" y="271.5" ></text>
</g>
<g >
<title>_perf_ioctl (5,354,077 samples, 0.17%)</title><rect x="609.3" y="405" width="2.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="612.35" y="415.5" ></text>
</g>
<g >
<title>__wake_up (52,276,701 samples, 1.68%)</title><rect x="459.0" y="85" width="19.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="462.00" y="95.5" ></text>
</g>
<g >
<title>__evlist__enable (5,354,077 samples, 0.17%)</title><rect x="609.3" y="533" width="2.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="612.35" y="543.5" ></text>
</g>
<g >
<title>__filemap_add_folio (327,115,239 samples, 10.52%)</title><rect x="113.1" y="149" width="124.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="116.13" y="159.5" >__filemap_add_f..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,354,077 samples, 0.17%)</title><rect x="609.3" y="469" width="2.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="612.35" y="479.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (291,120,920 samples, 9.36%)</title><rect x="498.9" y="517" width="110.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="501.85" y="527.5" >do_execveat_c..</text>
</g>
<g >
<title>iter_file_splice_write (1,235,294,239 samples, 39.73%)</title><rect x="10.0" y="309" width="468.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >iter_file_splice_write</text>
</g>
<g >
<title>__perf_event_enable (5,354,077 samples, 0.17%)</title><rect x="609.3" y="277" width="2.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="612.35" y="287.5" ></text>
</g>
<g >
<title>ovl_copyfile (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="389" width="488.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >ovl_copyfile</text>
</g>
<g >
<title>__x64_sys_execve (291,120,920 samples, 9.36%)</title><rect x="498.9" y="533" width="110.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="501.85" y="543.5" >__x64_sys_exe..</text>
</g>
<g >
<title>bprm_execve (291,120,920 samples, 9.36%)</title><rect x="498.9" y="501" width="110.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="501.85" y="511.5" >bprm_execve</text>
</g>
<g >
<title>ioctl (5,354,077 samples, 0.17%)</title><rect x="609.3" y="485" width="2.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="612.35" y="495.5" ></text>
</g>
<g >
<title>begin_new_exec (291,120,920 samples, 9.36%)</title><rect x="498.9" y="421" width="110.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="501.85" y="431.5" >begin_new_exec</text>
</g>
<g >
<title>unmap_single_vma (291,120,920 samples, 9.36%)</title><rect x="498.9" y="325" width="110.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="501.85" y="335.5" >unmap_single_..</text>
</g>
<g >
<title>__do_softirq (137,709,408 samples, 4.43%)</title><rect x="934.7" y="373" width="52.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="937.69" y="383.5" >__do_..</text>
</g>
<g >
<title>remote_function (5,354,077 samples, 0.17%)</title><rect x="609.3" y="309" width="2.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="612.35" y="319.5" ></text>
</g>
<g >
<title>perf (5,354,077 samples, 0.17%)</title><rect x="609.3" y="581" width="2.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="612.35" y="591.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (5,354,077 samples, 0.17%)</title><rect x="609.3" y="389" width="2.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="612.35" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_copy_file_range (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="453" width="488.9" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >__x64_sys_copy_file_range</text>
</g>
<g >
<title>tick_nohz_idle_exit (227,442,555 samples, 7.32%)</title><rect x="1047.3" y="501" width="86.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1050.34" y="511.5" >tick_nohz_..</text>
</g>
<g >
<title>cpu_startup_entry (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="469" width="56.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1136.67" y="479.5" >cpu_s..</text>
</g>
<g >
<title>start_kernel (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="517" width="56.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1136.67" y="527.5" >start..</text>
</g>
<g >
<title>__cmd_record (5,354,077 samples, 0.17%)</title><rect x="609.3" y="549" width="2.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="612.35" y="559.5" ></text>
</g>
<g >
<title>arch_call_rest_init (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="501" width="56.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1136.67" y="511.5" >arch_..</text>
</g>
<g >
<title>unmap_vmas (291,120,920 samples, 9.36%)</title><rect x="498.9" y="341" width="110.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="501.85" y="351.5" >unmap_vmas</text>
</g>
<g >
<title>folio_create_empty_buffers (51,615,675 samples, 1.66%)</title><rect x="339.9" y="149" width="19.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="342.88" y="159.5" ></text>
</g>
<g >
<title>ext4_da_get_block_prep (262,258,762 samples, 8.44%)</title><rect x="359.5" y="165" width="99.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="362.47" y="175.5" >ext4_da_get_..</text>
</g>
<g >
<title>__mark_inode_dirty (52,276,701 samples, 1.68%)</title><rect x="459.0" y="165" width="19.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="462.00" y="175.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel (227,442,555 samples, 7.32%)</title><rect x="1047.3" y="453" width="86.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1050.34" y="463.5" >hrtimer_tr..</text>
</g>
<g >
<title>consume_stock (53,122,765 samples, 1.71%)</title><rect x="168.1" y="85" width="20.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="171.09" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_write (231,932,436 samples, 7.46%)</title><rect x="705.2" y="549" width="88.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="708.21" y="559.5" >__x64_sys_..</text>
</g>
<g >
<title>filemap_splice_read (52,714,409 samples, 1.70%)</title><rect x="478.8" y="293" width="20.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="481.85" y="303.5" ></text>
</g>
<g >
<title>load_balance (137,709,408 samples, 4.43%)</title><rect x="934.7" y="325" width="52.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="937.69" y="335.5" >load_..</text>
</g>
<g >
<title>folio_alloc (136,493,851 samples, 4.39%)</title><rect x="288.1" y="149" width="51.8" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="291.07" y="159.5" >folio..</text>
</g>
<g >
<title>filemap_add_folio (460,919,123 samples, 14.83%)</title><rect x="113.1" y="165" width="175.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="116.13" y="175.5" >filemap_add_folio</text>
</g>
<g >
<title>rebalance_domains (137,709,408 samples, 4.43%)</title><rect x="934.7" y="341" width="52.3" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="937.69" y="351.5" >rebal..</text>
</g>
<g >
<title>get_mem_cgroup_from_mm (72,659,324 samples, 2.34%)</title><rect x="188.3" y="117" width="27.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="191.26" y="127.5" >g..</text>
</g>
<g >
<title>[unknown] (5,354,077 samples, 0.17%)</title><rect x="609.3" y="565" width="2.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="612.35" y="575.5" ></text>
</g>
<g >
<title>intel_idle (159,111,534 samples, 5.12%)</title><rect x="987.0" y="437" width="60.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="989.95" y="447.5" >intel_..</text>
</g>
<g >
<title>search_binary_handler (291,120,920 samples, 9.36%)</title><rect x="498.9" y="453" width="110.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="501.85" y="463.5" >search_binary..</text>
</g>
<g >
<title>ext4_da_map_blocks.constprop.0 (262,258,762 samples, 8.44%)</title><rect x="359.5" y="149" width="99.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="362.47" y="159.5" >ext4_da_map_..</text>
</g>
<g >
<title>[cat] (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="517" width="488.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >[cat]</text>
</g>
<g >
<title>_raw_spin_lock_irqsave (52,276,701 samples, 1.68%)</title><rect x="459.0" y="53" width="19.8" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="462.00" y="63.5" ></text>
</g>
<g >
<title>generic_perform_write (1,176,224,853 samples, 37.83%)</title><rect x="32.4" y="213" width="446.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="35.42" y="223.5" >generic_perform_write</text>
</g>
<g >
<title>swapper (1,524,528,457 samples, 49.04%)</title><rect x="611.4" y="581" width="578.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="614.38" y="591.5" >swapper</text>
</g>
<g >
<title>__es_insert_extent (55,308,762 samples, 1.78%)</title><rect x="413.0" y="117" width="21.0" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="415.99" y="127.5" ></text>
</g>
<g >
<title>[cat] (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="565" width="488.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >[cat]</text>
</g>
<g >
<title>intel_pmu_enable_all (5,354,077 samples, 0.17%)</title><rect x="609.3" y="213" width="2.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="612.35" y="223.5" ></text>
</g>
<g >
<title>lru_add_fn (62,855,101 samples, 2.02%)</title><rect x="264.2" y="117" width="23.9" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="267.21" y="127.5" >l..</text>
</g>
<g >
<title>charge_memcg (197,931,561 samples, 6.37%)</title><rect x="113.1" y="117" width="75.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="116.13" y="127.5" >charge_m..</text>
</g>
<g >
<title>unmap_page_range (291,120,920 samples, 9.36%)</title><rect x="498.9" y="309" width="110.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="501.85" y="319.5" >unmap_page_ra..</text>
</g>
<g >
<title>intel_idle (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="373" width="56.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1136.67" y="383.5" >intel..</text>
</g>
<g >
<title>ext4_block_write_begin (313,874,437 samples, 10.10%)</title><rect x="339.9" y="181" width="119.1" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="342.88" y="191.5" >ext4_block_wri..</text>
</g>
<g >
<title>do_iter_write (1,176,224,853 samples, 37.83%)</title><rect x="32.4" y="277" width="446.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="35.42" y="287.5" >do_iter_write</text>
</g>
<g >
<title>vfs_splice_read (52,714,409 samples, 1.70%)</title><rect x="478.8" y="325" width="20.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="481.85" y="335.5" ></text>
</g>
<g >
<title>exit_mmap (291,120,920 samples, 9.36%)</title><rect x="498.9" y="357" width="110.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="501.85" y="367.5" >exit_mmap</text>
</g>
<g >
<title>folio_add_lru (62,855,101 samples, 2.02%)</title><rect x="264.2" y="149" width="23.9" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="267.21" y="159.5" >f..</text>
</g>
<g >
<title>x86_64_start_kernel (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="549" width="56.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1136.67" y="559.5" >x86_6..</text>
</g>
<g >
<title>irq_exit_rcu (137,709,408 samples, 4.43%)</title><rect x="934.7" y="405" width="52.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="937.69" y="415.5" >irq_e..</text>
</g>
<g >
<title>percpu_counter_add_batch (65,929,367 samples, 2.12%)</title><rect x="434.0" y="117" width="25.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="436.98" y="127.5" >p..</text>
</g>
<g >
<title>ext4_file_splice_read (52,714,409 samples, 1.70%)</title><rect x="478.8" y="309" width="20.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="481.85" y="319.5" ></text>
</g>
<g >
<title>exec_binprm (291,120,920 samples, 9.36%)</title><rect x="498.9" y="469" width="110.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="501.85" y="479.5" >exec_binprm</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (291,120,920 samples, 9.36%)</title><rect x="498.9" y="565" width="110.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="501.85" y="575.5" >entry_SYSCALL..</text>
</g>
<g >
<title>ext4_dirty_inode (52,276,701 samples, 1.68%)</title><rect x="459.0" y="149" width="19.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="462.00" y="159.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (137,709,408 samples, 4.43%)</title><rect x="934.7" y="389" width="52.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="937.69" y="399.5" >__irq..</text>
</g>
<g >
<title>call_cpuidle (669,490,231 samples, 21.53%)</title><rect x="793.2" y="485" width="254.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="796.24" y="495.5" >call_cpuidle</text>
</g>
<g >
<title>vfs_copy_file_range (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="373" width="488.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >vfs_copy_file_range</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (137,709,408 samples, 4.43%)</title><rect x="934.7" y="421" width="52.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="937.69" y="431.5" >sysve..</text>
</g>
<g >
<title>native_write_msr (5,354,077 samples, 0.17%)</title><rect x="609.3" y="197" width="2.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="612.35" y="207.5" ></text>
</g>
<g >
<title>vfs_iter_write (1,176,224,853 samples, 37.83%)</title><rect x="32.4" y="293" width="446.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="35.42" y="303.5" >vfs_iter_write</text>
</g>
<g >
<title>__wake_up_common_lock (52,276,701 samples, 1.68%)</title><rect x="459.0" y="69" width="19.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="462.00" y="79.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="533" width="56.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1136.67" y="543.5" >x86_6..</text>
</g>
<g >
<title>generic_write_end (52,276,701 samples, 1.68%)</title><rect x="459.0" y="181" width="19.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="462.00" y="191.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1,176,224,853 samples, 37.83%)</title><rect x="32.4" y="245" width="446.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="35.42" y="255.5" >ext4_file_write_iter</text>
</g>
<g >
<title>bprm_execve.part.0 (291,120,920 samples, 9.36%)</title><rect x="498.9" y="485" width="110.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="501.85" y="495.5" >bprm_execve.p..</text>
</g>
<g >
<title>rest_init (148,427,484 samples, 4.77%)</title><rect x="1133.7" y="485" width="56.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1136.67" y="495.5" >rest_..</text>
</g>
<g >
<title>do_syscall_64 (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="469" width="488.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >do_syscall_64</text>
</g>
<g >
<title>generic_exec_single (5,354,077 samples, 0.17%)</title><rect x="609.3" y="325" width="2.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="612.35" y="335.5" ></text>
</g>
<g >
<title>__mmput (291,120,920 samples, 9.36%)</title><rect x="498.9" y="373" width="110.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="501.85" y="383.5" >__mmput</text>
</g>
<g >
<title>_raw_spin_lock_irqsave (227,442,555 samples, 7.32%)</title><rect x="1047.3" y="437" width="86.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1050.34" y="447.5" >_raw_spin_..</text>
</g>
<g >
<title>zap_pmd_range.isra.0 (291,120,920 samples, 9.36%)</title><rect x="498.9" y="293" width="110.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="501.85" y="303.5" >zap_pmd_range..</text>
</g>
<g >
<title>cpuidle_idle_call (669,490,231 samples, 21.53%)</title><rect x="793.2" y="501" width="254.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="796.24" y="511.5" >cpuidle_idle_call</text>
</g>
<g >
<title>do_splice_direct (1,288,008,648 samples, 41.43%)</title><rect x="10.0" y="357" width="488.9" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >do_splice_direct</text>
</g>
</g>
</svg>
