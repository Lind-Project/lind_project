<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>pick_next_entity (210,488,207 samples, 1.20%)</title><rect x="876.0" y="277" width="14.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="879.03" y="287.5" ></text>
</g>
<g >
<title>yield_task_fair (53,831,874 samples, 0.31%)</title><rect x="975.3" y="341" width="3.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="978.27" y="351.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRangeProt (51,866,090 samples, 0.30%)</title><rect x="47.9" y="453" width="3.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="50.94" y="463.5" ></text>
</g>
<g >
<title>pci_bus_read_config_word (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="389" width="14.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1127.23" y="399.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="293" width="11.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1115.86" y="303.5" ></text>
</g>
<g >
<title>intel_idle (190,797,071 samples, 1.09%)</title><rect x="1139.0" y="389" width="12.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1142.02" y="399.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (5,043,247 samples, 0.03%)</title><rect x="47.2" y="453" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="50.19" y="463.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (306,224,686 samples, 1.75%)</title><rect x="10.0" y="309" width="20.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>_raw_spin_lock (153,741,827 samples, 0.88%)</title><rect x="841.3" y="309" width="10.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="844.31" y="319.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (120,277,824 samples, 0.69%)</title><rect x="953.1" y="261" width="8.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="956.05" y="271.5" ></text>
</g>
<g >
<title>pci_read (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="373" width="14.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1127.23" y="383.5" ></text>
</g>
<g >
<title>generic_exec_single (5,043,247 samples, 0.03%)</title><rect x="47.2" y="277" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="50.19" y="287.5" ></text>
</g>
<g >
<title>sched_clock_cpu (120,277,824 samples, 0.69%)</title><rect x="953.1" y="293" width="8.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="956.05" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (169,626,775 samples, 0.97%)</title><rect x="1112.8" y="501" width="11.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1115.80" y="511.5" ></text>
</g>
<g >
<title>cpuidle_enter (191,159,096 samples, 1.09%)</title><rect x="1139.0" y="421" width="12.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1141.99" y="431.5" ></text>
</g>
<g >
<title>ioctl (5,043,247 samples, 0.03%)</title><rect x="47.2" y="437" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="50.19" y="447.5" ></text>
</g>
<g >
<title>check_cfs_rq_runtime (51,238,179 samples, 0.29%)</title><rect x="428.7" y="293" width="3.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="431.73" y="303.5" ></text>
</g>
<g >
<title>schedule_idle (151,327,085 samples, 0.86%)</title><rect x="1158.9" y="453" width="10.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1161.89" y="463.5" ></text>
</g>
<g >
<title>remote_function (5,043,247 samples, 0.03%)</title><rect x="47.2" y="261" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="50.19" y="271.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (5,043,247 samples, 0.03%)</title><rect x="47.2" y="341" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="50.19" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,215,489,537 samples, 24.07%)</title><rect x="82.5" y="421" width="284.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="85.53" y="431.5" >[libc.so.6]</text>
</g>
<g >
<title>pick_next_entity (51,220,301 samples, 0.29%)</title><rect x="432.2" y="293" width="3.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="435.19" y="303.5" ></text>
</g>
<g >
<title>[sel_ldr] (14,385,112,283 samples, 82.15%)</title><rect x="47.5" y="517" width="969.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="50.53" y="527.5" >[sel_ldr]</text>
</g>
<g >
<title>mprotect_fixup (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="261" width="10.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1032.73" y="271.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (54,810,060 samples, 0.31%)</title><rect x="1185.9" y="341" width="3.7" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1188.94" y="351.5" ></text>
</g>
<g >
<title>bprm_execve (306,224,686 samples, 1.75%)</title><rect x="10.0" y="293" width="20.6" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>execute_command_internal (306,792,441 samples, 1.75%)</title><rect x="10.0" y="421" width="20.7" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>[libc.so.6] (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="389" width="10.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1032.73" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_sched_yield (2,852,177,053 samples, 16.29%)</title><rect x="786.7" y="373" width="192.2" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="789.70" y="383.5" >__x64_sys_sched_yield</text>
</g>
<g >
<title>__munmap (6,069,497 samples, 0.03%)</title><rect x="47.5" y="373" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="50.53" y="383.5" ></text>
</g>
<g >
<title>raw_spin_rq_lock_nested (51,196,285 samples, 0.29%)</title><rect x="473.7" y="309" width="3.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="476.66" y="319.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (5,811,549 samples, 0.03%)</title><rect x="47.5" y="133" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="50.55" y="143.5" ></text>
</g>
<g >
<title>__sched_yield (4,514,966,504 samples, 25.78%)</title><rect x="712.6" y="421" width="304.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="715.64" y="431.5" >__sched_yield</text>
</g>
<g >
<title>do_filp_open (306,224,686 samples, 1.75%)</title><rect x="10.0" y="181" width="20.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>__mprotect (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="341" width="10.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1032.73" y="351.5" ></text>
</g>
<g >
<title>__sched_yield (2,375,708,182 samples, 13.57%)</title><rect x="366.6" y="421" width="160.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="369.59" y="431.5" >__sched_yield</text>
</g>
<g >
<title>NaClCopyDynamicTextAndVmmap (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="501" width="5.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1019.89" y="511.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (295,300,852 samples, 1.69%)</title><rect x="1139.0" y="453" width="19.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1141.99" y="463.5" ></text>
</g>
<g >
<title>do_idle (696,528,160 samples, 3.98%)</title><rect x="1139.0" y="469" width="46.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1141.99" y="479.5" >do_i..</text>
</g>
<g >
<title>x86_64_start_reservations (60,400,084 samples, 0.34%)</title><rect x="1185.9" y="485" width="4.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1188.93" y="495.5" ></text>
</g>
<g >
<title>malloc (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="405" width="10.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1032.73" y="415.5" ></text>
</g>
<g >
<title>pci_conf1_read (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="357" width="14.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1127.23" y="367.5" ></text>
</g>
<g >
<title>arch_call_rest_init (60,400,084 samples, 0.34%)</title><rect x="1185.9" y="453" width="4.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1188.93" y="463.5" ></text>
</g>
<g >
<title>update_min_vruntime (154,545,376 samples, 0.88%)</title><rect x="921.9" y="277" width="10.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="924.91" y="287.5" ></text>
</g>
<g >
<title>sock_write_iter (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="437" width="11.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1115.86" y="447.5" ></text>
</g>
<g >
<title>NaClSysWrite (7,274,587,952 samples, 41.54%)</title><rect x="526.7" y="469" width="490.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="529.68" y="479.5" >NaClSysWrite</text>
</g>
<g >
<title>ovl_permission (306,224,686 samples, 1.75%)</title><rect x="10.0" y="117" width="20.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>__split_vma (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="229" width="10.8" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1032.73" y="239.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (153,773,831 samples, 0.88%)</title><rect x="487.5" y="261" width="10.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="490.48" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_execve (306,224,686 samples, 1.75%)</title><rect x="10.0" y="325" width="20.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (756,928,244 samples, 4.32%)</title><rect x="1139.0" y="517" width="51.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1141.99" y="527.5" >secon..</text>
</g>
<g >
<title>update_curr (470,305,642 samples, 2.69%)</title><rect x="890.2" y="277" width="31.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="893.21" y="287.5" >up..</text>
</g>
<g >
<title>ctx_resched (5,043,247 samples, 0.03%)</title><rect x="47.2" y="213" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="50.19" y="223.5" ></text>
</g>
<g >
<title>ret_from_fork (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="501" width="14.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1127.23" y="511.5" ></text>
</g>
<g >
<title>do_open_execat (306,224,686 samples, 1.75%)</title><rect x="10.0" y="197" width="20.6" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>get_user_pages_remote (245,133,232 samples, 1.40%)</title><rect x="30.7" y="341" width="16.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="33.67" y="351.5" ></text>
</g>
<g >
<title>evlist__prepare_workload (245,133,232 samples, 1.40%)</title><rect x="30.7" y="485" width="16.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="33.67" y="495.5" ></text>
</g>
<g >
<title>tick_nohz_stop_tick (104,141,756 samples, 0.59%)</title><rect x="1151.9" y="421" width="7.0" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1154.88" y="431.5" ></text>
</g>
<g >
<title>hrtimer_reprogram (249,900,223 samples, 1.43%)</title><rect x="1169.1" y="421" width="16.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1172.09" y="431.5" ></text>
</g>
<g >
<title>update_min_vruntime (51,576,765 samples, 0.29%)</title><rect x="466.7" y="277" width="3.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="469.73" y="287.5" ></text>
</g>
<g >
<title>__cgroup_account_cputime (51,254,185 samples, 0.29%)</title><rect x="872.6" y="277" width="3.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="875.58" y="287.5" ></text>
</g>
<g >
<title>perf-exec (245,133,232 samples, 1.40%)</title><rect x="30.7" y="533" width="16.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="33.67" y="543.5" ></text>
</g>
<g >
<title>[libc.so.6] (306,792,441 samples, 1.75%)</title><rect x="10.0" y="485" width="20.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>__calc_delta (51,218,894 samples, 0.29%)</title><rect x="442.5" y="277" width="3.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="445.55" y="287.5" ></text>
</g>
<g >
<title>__evlist__enable (5,043,247 samples, 0.03%)</title><rect x="47.2" y="485" width="0.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="50.19" y="495.5" ></text>
</g>
<g >
<title>pick_next_task (769,171,857 samples, 4.39%)</title><rect x="421.8" y="309" width="51.9" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="424.83" y="319.5" >pick_..</text>
</g>
<g >
<title>call_cpuidle (54,810,060 samples, 0.31%)</title><rect x="1185.9" y="373" width="3.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1188.94" y="383.5" ></text>
</g>
<g >
<title>perf_ctx_enable (5,043,247 samples, 0.03%)</title><rect x="47.2" y="197" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="50.19" y="207.5" ></text>
</g>
<g >
<title>__vm_munmap (6,069,497 samples, 0.03%)</title><rect x="47.5" y="309" width="0.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="50.53" y="319.5" ></text>
</g>
<g >
<title>do_vmi_munmap (6,069,497 samples, 0.03%)</title><rect x="47.5" y="293" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="50.53" y="303.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="373" width="5.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1019.89" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,069,497 samples, 0.03%)</title><rect x="47.5" y="341" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="50.53" y="351.5" ></text>
</g>
<g >
<title>NaClAppThreadLauncher (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="485" width="10.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1032.73" y="495.5" ></text>
</g>
<g >
<title>update_curr (51,248,270 samples, 0.29%)</title><rect x="932.3" y="293" width="3.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="935.32" y="303.5" ></text>
</g>
<g >
<title>__perf_event_enable (5,043,247 samples, 0.03%)</title><rect x="47.2" y="229" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="50.19" y="239.5" ></text>
</g>
<g >
<title>do_idle (60,400,084 samples, 0.34%)</title><rect x="1185.9" y="405" width="4.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1188.93" y="415.5" ></text>
</g>
<g >
<title>NaClSysRead (7,104,454,834 samples, 40.57%)</title><rect x="47.9" y="469" width="478.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="50.94" y="479.5" >NaClSysRead</text>
</g>
<g >
<title>execute_command (306,792,441 samples, 1.75%)</title><rect x="10.0" y="437" width="20.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>cpu_startup_entry (696,528,160 samples, 3.98%)</title><rect x="1139.0" y="485" width="46.9" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1141.99" y="495.5" >cpu_..</text>
</g>
<g >
<title>pick_next_task (1,246,111,926 samples, 7.12%)</title><rect x="851.8" y="309" width="84.0" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="854.80" y="319.5" >pick_next..</text>
</g>
<g >
<title>inode_permission (306,224,686 samples, 1.75%)</title><rect x="10.0" y="133" width="20.6" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="421" width="10.8" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1032.73" y="431.5" ></text>
</g>
<g >
<title>raw_spin_rq_unlock (102,543,806 samples, 0.59%)</title><rect x="961.2" y="325" width="6.9" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="964.16" y="335.5" ></text>
</g>
<g >
<title>native_sched_clock (153,773,831 samples, 0.88%)</title><rect x="487.5" y="245" width="10.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="490.48" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="501" width="10.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1032.73" y="511.5" ></text>
</g>
<g >
<title>pci_read_config_word (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="405" width="14.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1127.23" y="415.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (6,069,497 samples, 0.03%)</title><rect x="47.5" y="277" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="50.53" y="287.5" ></text>
</g>
<g >
<title>__get_user_pages (245,133,232 samples, 1.40%)</title><rect x="30.7" y="325" width="16.5" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="33.67" y="335.5" ></text>
</g>
<g >
<title>raw_spin_rq_lock_nested (51,171,823 samples, 0.29%)</title><rect x="501.3" y="325" width="3.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="504.30" y="335.5" ></text>
</g>
<g >
<title>__calc_delta (51,273,557 samples, 0.29%)</title><rect x="452.9" y="261" width="3.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="455.91" y="271.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (7,274,587,952 samples, 41.54%)</title><rect x="526.7" y="437" width="490.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="529.68" y="447.5" >rustposix::interface::pipe::EmulatedPipe::write_to_pipe</text>
</g>
<g >
<title>unmap_single_vma (5,940,523 samples, 0.03%)</title><rect x="47.5" y="229" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="50.54" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_sched_yield (1,793,623,781 samples, 10.24%)</title><rect x="390.8" y="373" width="120.8" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="393.78" y="383.5" >__x64_sys_sched..</text>
</g>
<g >
<title>_raw_spin_lock (204,700,969 samples, 1.17%)</title><rect x="408.0" y="309" width="13.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="411.03" y="319.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="341" width="5.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1019.89" y="351.5" ></text>
</g>
<g >
<title>mas_alloc_nodes (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="197" width="10.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1032.73" y="207.5" ></text>
</g>
<g >
<title>check_cfs_rq_runtime (51,328,824 samples, 0.29%)</title><rect x="851.8" y="293" width="3.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="854.80" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,043,247 samples, 0.03%)</title><rect x="47.2" y="421" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="50.19" y="431.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="389" width="5.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1019.89" y="399.5" ></text>
</g>
<g >
<title>tcp_write_xmit (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="341" width="11.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1115.86" y="351.5" ></text>
</g>
<g >
<title>[unknown] (5,043,247 samples, 0.03%)</title><rect x="47.2" y="517" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="50.19" y="527.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (306,224,686 samples, 1.75%)</title><rect x="10.0" y="277" width="20.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>rcu_note_context_switch (51,343,139 samples, 0.29%)</title><rect x="477.1" y="309" width="3.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="480.11" y="319.5" ></text>
</g>
<g >
<title>path_openat (306,224,686 samples, 1.75%)</title><rect x="10.0" y="165" width="20.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (307,238,743 samples, 1.75%)</title><rect x="989.3" y="357" width="20.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="992.28" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (481,355,532 samples, 2.75%)</title><rect x="750.8" y="405" width="32.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="753.81" y="415.5" >en..</text>
</g>
<g >
<title>rustposix_thread_init (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="469" width="10.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1032.73" y="479.5" ></text>
</g>
<g >
<title>event_function (5,043,247 samples, 0.03%)</title><rect x="47.2" y="245" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="50.19" y="255.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (5,043,247 samples, 0.03%)</title><rect x="47.2" y="389" width="0.3" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="50.19" y="399.5" ></text>
</g>
<g >
<title>schedule (2,346,828,918 samples, 13.40%)</title><rect x="817.1" y="341" width="158.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="820.12" y="351.5" >schedule</text>
</g>
<g >
<title>update_rq_clock (120,277,824 samples, 0.69%)</title><rect x="953.1" y="309" width="8.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="956.05" y="319.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="389" width="11.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1115.86" y="399.5" ></text>
</g>
<g >
<title>vfs_write (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="453" width="11.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1115.86" y="463.5" ></text>
</g>
<g >
<title>[libc.so.6] (245,133,232 samples, 1.40%)</title><rect x="30.7" y="469" width="16.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="33.67" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="453" width="5.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1019.89" y="463.5" ></text>
</g>
<g >
<title>native_flush_tlb_multi (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="357" width="5.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1019.89" y="367.5" ></text>
</g>
<g >
<title>&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="453" width="10.8" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1032.73" y="463.5" ></text>
</g>
<g >
<title>__schedule (1,435,363,462 samples, 8.20%)</title><rect x="401.1" y="325" width="96.7" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="404.12" y="335.5" >__schedule</text>
</g>
<g >
<title>pick_next_task (151,327,085 samples, 0.86%)</title><rect x="1158.9" y="421" width="10.2" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1161.89" y="431.5" ></text>
</g>
<g >
<title>main (306,792,441 samples, 1.75%)</title><rect x="10.0" y="469" width="20.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (191,159,096 samples, 1.09%)</title><rect x="1139.0" y="405" width="12.9" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1141.99" y="415.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1,578,091 samples, 0.01%)</title><rect x="1186.0" y="277" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1189.01" y="287.5" ></text>
</g>
<g >
<title>native_sched_clock (120,277,824 samples, 0.69%)</title><rect x="953.1" y="245" width="8.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="956.05" y="255.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (51,262,791 samples, 0.29%)</title><rect x="1010.0" y="405" width="3.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1012.98" y="415.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="357" width="11.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1115.86" y="367.5" ></text>
</g>
<g >
<title>_perf_event_enable (5,043,247 samples, 0.03%)</title><rect x="47.2" y="325" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="50.19" y="335.5" ></text>
</g>
<g >
<title>schedule (51,308,432 samples, 0.29%)</title><rect x="508.2" y="357" width="3.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="511.18" y="367.5" ></text>
</g>
<g >
<title>[libc.so.6] (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="357" width="10.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1032.73" y="367.5" ></text>
</g>
<g >
<title>NaClSysExecveDecoder (6,069,497 samples, 0.03%)</title><rect x="47.5" y="485" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="50.53" y="495.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (5,811,549 samples, 0.03%)</title><rect x="47.5" y="149" width="0.4" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="50.55" y="159.5" ></text>
</g>
<g >
<title>cpuidle_enter (54,810,060 samples, 0.31%)</title><rect x="1185.9" y="357" width="3.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1188.94" y="367.5" ></text>
</g>
<g >
<title>NaClSysExecve (6,069,497 samples, 0.03%)</title><rect x="47.5" y="469" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="50.53" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (6,069,497 samples, 0.03%)</title><rect x="47.5" y="325" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="50.53" y="335.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (5,940,523 samples, 0.03%)</title><rect x="47.5" y="197" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="50.54" y="207.5" ></text>
</g>
<g >
<title>NaClAppThreadTeardown (6,069,497 samples, 0.03%)</title><rect x="47.5" y="437" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="50.53" y="447.5" ></text>
</g>
<g >
<title>ip_output (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="261" width="11.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1115.86" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,965,550,939 samples, 11.22%)</title><rect x="390.8" y="389" width="132.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="393.78" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>nohz_run_idle_balance (1,794,670 samples, 0.01%)</title><rect x="1189.7" y="389" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1192.74" y="399.5" ></text>
</g>
<g >
<title>__get_acl.part.0 (306,224,686 samples, 1.75%)</title><rect x="10.0" y="69" width="20.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="13.00" y="79.5" ></text>
</g>
<g >
<title>NaClAppThreadTeardownInner (6,069,497 samples, 0.03%)</title><rect x="47.5" y="421" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="50.53" y="431.5" ></text>
</g>
<g >
<title>perf_ioctl (5,043,247 samples, 0.03%)</title><rect x="47.2" y="373" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="50.19" y="383.5" ></text>
</g>
<g >
<title>tick_nohz_idle_exit (249,900,223 samples, 1.43%)</title><rect x="1169.1" y="453" width="16.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1172.09" y="463.5" ></text>
</g>
<g >
<title>ovl_get_inode_acl (306,224,686 samples, 1.75%)</title><rect x="10.0" y="53" width="20.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="13.00" y="63.5" ></text>
</g>
<g >
<title>unmap_vmas (5,940,523 samples, 0.03%)</title><rect x="47.5" y="245" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="50.54" y="255.5" ></text>
</g>
<g >
<title>__schedule (53,119,426 samples, 0.30%)</title><rect x="790.1" y="341" width="3.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="793.15" y="351.5" ></text>
</g>
<g >
<title>rest_init (60,400,084 samples, 0.34%)</title><rect x="1185.9" y="437" width="4.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1188.93" y="447.5" ></text>
</g>
<g >
<title>rcu_note_context_switch (205,070,061 samples, 1.17%)</title><rect x="935.8" y="309" width="13.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="938.77" y="319.5" ></text>
</g>
<g >
<title>copy_string_kernel (245,133,232 samples, 1.40%)</title><rect x="30.7" y="373" width="16.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="33.67" y="383.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (7,052,588,744 samples, 40.28%)</title><rect x="51.4" y="437" width="475.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="54.44" y="447.5" >rustposix::interface::pipe::EmulatedPipe::read_from_pipe</text>
</g>
<g >
<title>timerqueue_add (104,141,756 samples, 0.59%)</title><rect x="1151.9" y="357" width="7.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1154.88" y="367.5" ></text>
</g>
<g >
<title>[bash] (306,224,686 samples, 1.75%)</title><rect x="10.0" y="405" width="20.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (102,787,149 samples, 0.59%)</title><rect x="978.9" y="373" width="6.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="981.89" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (245,133,232 samples, 1.40%)</title><rect x="30.7" y="421" width="16.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="33.67" y="431.5" ></text>
</g>
<g >
<title>do_sched_yield (2,852,177,053 samples, 16.29%)</title><rect x="786.7" y="357" width="192.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="789.70" y="367.5" >do_sched_yield</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,016,836,540 samples, 11.52%)</title><rect x="390.8" y="405" width="135.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="393.78" y="415.5" >entry_SYSCALL_64_..</text>
</g>
<g >
<title>entry_SYSCALL_64 (102,517,086 samples, 0.59%)</title><rect x="383.9" y="405" width="6.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="386.87" y="415.5" ></text>
</g>
<g >
<title>pick_next_task_fair (512,921,267 samples, 2.93%)</title><rect x="435.6" y="293" width="34.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="438.64" y="303.5" >pi..</text>
</g>
<g >
<title>__x64_sys_write (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="485" width="11.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1115.86" y="495.5" ></text>
</g>
<g >
<title>get_inode_acl (306,224,686 samples, 1.75%)</title><rect x="10.0" y="85" width="20.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (51,261,479 samples, 0.29%)</title><rect x="1013.4" y="405" width="3.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1016.43" y="415.5" ></text>
</g>
<g >
<title>split_vma (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="245" width="10.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1032.73" y="255.5" ></text>
</g>
<g >
<title>perf (5,043,247 samples, 0.03%)</title><rect x="47.2" y="533" width="0.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="50.19" y="543.5" ></text>
</g>
<g >
<title>x86_pmu_enable (5,043,247 samples, 0.03%)</title><rect x="47.2" y="181" width="0.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="50.19" y="191.5" ></text>
</g>
<g >
<title>start_secondary (696,528,160 samples, 3.98%)</title><rect x="1139.0" y="501" width="46.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1141.99" y="511.5" >star..</text>
</g>
<g >
<title>zap_pte_range (5,811,549 samples, 0.03%)</title><rect x="47.5" y="181" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="50.55" y="191.5" ></text>
</g>
<g >
<title>__alloc_pages (245,133,232 samples, 1.40%)</title><rect x="30.7" y="245" width="16.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="33.67" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (306,224,686 samples, 1.75%)</title><rect x="10.0" y="341" width="20.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (120,706,714 samples, 0.69%)</title><rect x="515.1" y="357" width="8.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="518.09" y="367.5" ></text>
</g>
<g >
<title>raw_spin_rq_lock_nested (52,389,597 samples, 0.30%)</title><rect x="813.6" y="341" width="3.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="816.59" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (5,043,247 samples, 0.03%)</title><rect x="47.2" y="405" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="50.19" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="325" width="10.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1032.73" y="335.5" ></text>
</g>
<g >
<title>native_write_msr (5,043,247 samples, 0.03%)</title><rect x="47.2" y="149" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="50.19" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (306,224,686 samples, 1.75%)</title><rect x="10.0" y="357" width="20.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>open_exec (306,224,686 samples, 1.75%)</title><rect x="10.0" y="213" width="20.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>pci_check_pme_status (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="421" width="14.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1127.23" y="431.5" ></text>
</g>
<g >
<title>flush_tlb_func (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="309" width="5.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1019.89" y="319.5" ></text>
</g>
<g >
<title>_raw_spin_lock (51,012,750 samples, 0.29%)</title><rect x="397.7" y="341" width="3.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="400.69" y="351.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (245,133,232 samples, 1.40%)</title><rect x="30.7" y="229" width="16.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="33.67" y="239.5" ></text>
</g>
<g >
<title>free_unref_page_commit (5,811,549 samples, 0.03%)</title><rect x="47.5" y="101" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="50.55" y="111.5" ></text>
</g>
<g >
<title>intel_idle (52,130,522 samples, 0.30%)</title><rect x="1186.1" y="325" width="3.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1189.12" y="335.5" ></text>
</g>
<g >
<title>_start (306,792,441 samples, 1.75%)</title><rect x="10.0" y="517" width="20.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>sched_clock (153,773,831 samples, 0.88%)</title><rect x="487.5" y="277" width="10.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="490.48" y="287.5" ></text>
</g>
<g >
<title>NaClSysWriteDecoder (7,274,587,952 samples, 41.54%)</title><rect x="526.7" y="485" width="490.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="529.68" y="495.5" >NaClSysWriteDecoder</text>
</g>
<g >
<title>update_rq_clock (256,414,244 samples, 1.46%)</title><rect x="480.6" y="309" width="17.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="483.57" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="437" width="5.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1019.89" y="447.5" ></text>
</g>
<g >
<title>pick_next_task (51,286,001 samples, 0.29%)</title><rect x="497.8" y="325" width="3.5" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="500.85" y="335.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="277" width="10.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1032.73" y="287.5" ></text>
</g>
<g >
<title>__hrtimer_start_range_ns (104,141,756 samples, 0.59%)</title><rect x="1151.9" y="389" width="7.0" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1154.88" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (2,018,693 samples, 0.01%)</title><rect x="851.7" y="309" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="854.67" y="319.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::read_syscall (7,052,588,744 samples, 40.28%)</title><rect x="51.4" y="453" width="475.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="54.44" y="463.5" >rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safepo..</text>
</g>
<g >
<title>enqueue_hrtimer (104,141,756 samples, 0.59%)</title><rect x="1151.9" y="373" width="7.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1154.88" y="383.5" ></text>
</g>
<g >
<title>kthread (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="485" width="14.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1127.23" y="495.5" ></text>
</g>
<g >
<title>ip_finish_output2 (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="213" width="11.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1115.86" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (3,313,505,461 samples, 18.92%)</title><rect x="786.7" y="389" width="223.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="789.70" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>__sched_yield (102,346,510 samples, 0.58%)</title><rect x="1022.8" y="501" width="6.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1025.83" y="511.5" ></text>
</g>
<g >
<title>ip_queue_xmit (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="309" width="11.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1115.86" y="319.5" ></text>
</g>
<g >
<title>start_kernel (60,400,084 samples, 0.34%)</title><rect x="1185.9" y="469" width="4.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1188.93" y="479.5" ></text>
</g>
<g >
<title>__ip_finish_output (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="229" width="11.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1115.86" y="239.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (104,141,756 samples, 0.59%)</title><rect x="1151.9" y="405" width="7.0" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1154.88" y="415.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_bulk (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="165" width="10.8" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="1032.73" y="175.5" ></text>
</g>
<g >
<title>ksys_write (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="469" width="11.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1115.86" y="479.5" ></text>
</g>
<g >
<title>[unknown] (190,533,237 samples, 1.09%)</title><rect x="1016.9" y="517" width="12.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1019.89" y="527.5" ></text>
</g>
<g >
<title>__clone (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="517" width="10.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1032.73" y="527.5" ></text>
</g>
<g >
<title>__libc_start_main (306,792,441 samples, 1.75%)</title><rect x="10.0" y="501" width="20.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>sched_clock_cpu (205,151,208 samples, 1.17%)</title><rect x="484.0" y="293" width="13.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="487.02" y="303.5" ></text>
</g>
<g >
<title>NaClSysReadDecoder (7,104,454,834 samples, 40.57%)</title><rect x="47.9" y="485" width="478.8" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="50.94" y="495.5" >NaClSysReadDecoder</text>
</g>
<g >
<title>__cgroup_account_cputime (102,506,062 samples, 0.59%)</title><rect x="456.4" y="261" width="6.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="459.36" y="271.5" ></text>
</g>
<g >
<title>__schedule (151,327,085 samples, 0.86%)</title><rect x="1158.9" y="437" width="10.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1161.89" y="447.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (358,541,259 samples, 2.05%)</title><rect x="985.8" y="373" width="24.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="988.82" y="383.5" >s..</text>
</g>
<g >
<title>pick_next_task_fair (989,096,328 samples, 5.65%)</title><rect x="865.7" y="293" width="66.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="868.67" y="303.5" >pick_ne..</text>
</g>
<g >
<title>sel_ldr (14,787,055,988 samples, 84.44%)</title><rect x="47.5" y="533" width="996.5" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="50.53" y="543.5" >sel_ldr</text>
</g>
<g >
<title>handle_mm_fault (245,133,232 samples, 1.40%)</title><rect x="30.7" y="309" width="16.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="33.67" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="309" width="10.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1032.73" y="319.5" ></text>
</g>
<g >
<title>NaClAddrSpaceFree (6,069,497 samples, 0.03%)</title><rect x="47.5" y="389" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="50.53" y="399.5" ></text>
</g>
<g >
<title>NaClSysExecv (6,069,497 samples, 0.03%)</title><rect x="47.5" y="453" width="0.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="50.53" y="463.5" ></text>
</g>
<g >
<title>load_elf_binary (306,224,686 samples, 1.75%)</title><rect x="10.0" y="229" width="20.6" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>cpuacct_charge (59,350,076 samples, 0.34%)</title><rect x="917.9" y="261" width="4.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="920.91" y="271.5" ></text>
</g>
<g >
<title>_raw_spin_lock (243,526,820 samples, 1.39%)</title><rect x="793.7" y="341" width="16.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="796.73" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="373" width="10.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1032.73" y="383.5" ></text>
</g>
<g >
<title>__pmd_alloc (245,133,232 samples, 1.40%)</title><rect x="30.7" y="277" width="16.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="33.67" y="287.5" ></text>
</g>
<g >
<title>unmap_region (5,940,523 samples, 0.03%)</title><rect x="47.5" y="261" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="50.54" y="271.5" ></text>
</g>
<g >
<title>try_charge_memcg (245,133,232 samples, 1.40%)</title><rect x="30.7" y="213" width="16.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="33.67" y="223.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_bulk (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="181" width="10.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1032.73" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,367,292,864 samples, 13.52%)</title><rect x="553.1" y="421" width="159.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="556.12" y="431.5" >[libc.so.6]</text>
</g>
<g >
<title>ip_local_out (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="277" width="11.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1115.86" y="287.5" ></text>
</g>
<g >
<title>lind (306,792,441 samples, 1.75%)</title><rect x="10.0" y="533" width="20.7" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>sched_clock_cpu (51,306,690 samples, 0.29%)</title><rect x="949.6" y="309" width="3.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="952.59" y="319.5" ></text>
</g>
<g >
<title>__x64_sys_execve (245,133,232 samples, 1.40%)</title><rect x="30.7" y="405" width="16.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="33.67" y="415.5" ></text>
</g>
<g >
<title>execve (306,224,686 samples, 1.75%)</title><rect x="10.0" y="373" width="20.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>call_cpuidle (191,159,096 samples, 1.09%)</title><rect x="1139.0" y="437" width="12.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1141.99" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (51,273,032 samples, 0.29%)</title><rect x="1040.5" y="517" width="3.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1043.52" y="527.5" ></text>
</g>
<g >
<title>__mprotect (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="469" width="5.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1019.89" y="479.5" ></text>
</g>
<g >
<title>process_one_work (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="453" width="14.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1127.23" y="463.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (60,400,084 samples, 0.34%)</title><rect x="1185.9" y="501" width="4.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1188.93" y="511.5" ></text>
</g>
<g >
<title>get_arg_page (245,133,232 samples, 1.40%)</title><rect x="30.7" y="357" width="16.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="33.67" y="367.5" ></text>
</g>
<g >
<title>__do_softirq (1,578,091 samples, 0.01%)</title><rect x="1186.0" y="261" width="0.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1189.01" y="271.5" ></text>
</g>
<g >
<title>__handle_mm_fault (245,133,232 samples, 1.40%)</title><rect x="30.7" y="293" width="16.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="33.67" y="303.5" ></text>
</g>
<g >
<title>worker_thread (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="469" width="14.8" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1127.23" y="479.5" ></text>
</g>
<g >
<title>execve (245,133,232 samples, 1.40%)</title><rect x="30.7" y="453" width="16.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="33.67" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="293" width="10.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1032.73" y="303.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (5,043,247 samples, 0.03%)</title><rect x="47.2" y="165" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="50.19" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="437" width="10.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1032.73" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6,069,497 samples, 0.03%)</title><rect x="47.5" y="357" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="50.53" y="367.5" ></text>
</g>
<g >
<title>cpu_startup_entry (60,400,084 samples, 0.34%)</title><rect x="1185.9" y="421" width="4.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1188.93" y="431.5" ></text>
</g>
<g >
<title>update_curr (307,589,400 samples, 1.76%)</title><rect x="446.0" y="277" width="20.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="449.00" y="287.5" ></text>
</g>
<g >
<title>reader_loop (306,792,441 samples, 1.75%)</title><rect x="10.0" y="453" width="20.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>NaClAppDtor (6,069,497 samples, 0.03%)</title><rect x="47.5" y="405" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="50.53" y="415.5" ></text>
</g>
<g >
<title>tcp_sendmsg (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="405" width="11.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1115.86" y="415.5" ></text>
</g>
<g >
<title>do_sched_yield (1,742,315,349 samples, 9.95%)</title><rect x="390.8" y="357" width="117.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="393.78" y="367.5" >do_sched_yield</text>
</g>
<g >
<title>_raw_spin_unlock (51,255,172 samples, 0.29%)</title><rect x="810.1" y="341" width="3.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="813.14" y="351.5" ></text>
</g>
<g >
<title>update_rq_clock (50,947,071 samples, 0.29%)</title><rect x="504.8" y="325" width="3.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="507.75" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,364,759,138 samples, 19.22%)</title><rect x="783.2" y="405" width="226.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="786.24" y="415.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>all (17,511,025,501 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>__schedule (2,086,211,631 samples, 11.91%)</title><rect x="820.6" y="325" width="140.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="823.57" y="335.5" >__schedule</text>
</g>
<g >
<title>do_execveat_common.isra.0 (245,133,232 samples, 1.40%)</title><rect x="30.7" y="389" width="16.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="33.67" y="399.5" ></text>
</g>
<g >
<title>release_pages (5,811,549 samples, 0.03%)</title><rect x="47.5" y="117" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="50.55" y="127.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (14,385,112,283 samples, 82.15%)</title><rect x="47.5" y="501" width="969.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="50.53" y="511.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2,499,544 samples, 0.01%)</title><rect x="1185.9" y="309" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1188.94" y="319.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (56,225,929 samples, 0.32%)</title><rect x="1185.9" y="389" width="3.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1188.93" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (245,133,232 samples, 1.40%)</title><rect x="30.7" y="437" width="16.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="33.67" y="447.5" ></text>
</g>
<g >
<title>event_function_call (5,043,247 samples, 0.03%)</title><rect x="47.2" y="309" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="50.19" y="319.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (171,927,158 samples, 0.98%)</title><rect x="511.6" y="373" width="11.6" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="514.64" y="383.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="325" width="11.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1115.86" y="335.5" ></text>
</g>
<g >
<title>NaClMprotect (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="485" width="5.9" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1019.89" y="495.5" ></text>
</g>
<g >
<title>exec_binprm (306,224,686 samples, 1.75%)</title><rect x="10.0" y="261" width="20.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>mas_preallocate (160,137,436 samples, 0.91%)</title><rect x="1029.7" y="213" width="10.8" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1032.73" y="223.5" ></text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (306,224,686 samples, 1.75%)</title><rect x="10.0" y="149" width="20.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>tcp_push (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="373" width="11.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1115.86" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_mprotect (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="421" width="5.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1019.89" y="431.5" ></text>
</g>
<g >
<title>[unknown] (245,133,232 samples, 1.40%)</title><rect x="30.7" y="517" width="16.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="33.67" y="527.5" ></text>
</g>
<g >
<title>smp_call_function_many_cond (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="325" width="5.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1019.89" y="335.5" ></text>
</g>
<g >
<title>alloc_pages (245,133,232 samples, 1.40%)</title><rect x="30.7" y="261" width="16.5" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="33.67" y="271.5" ></text>
</g>
<g >
<title>__calc_delta (153,738,761 samples, 0.88%)</title><rect x="907.5" y="261" width="10.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="910.55" y="271.5" ></text>
</g>
<g >
<title>sched_clock (120,277,824 samples, 0.69%)</title><rect x="953.1" y="277" width="8.1" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="956.05" y="287.5" ></text>
</g>
<g >
<title>inet_sendmsg (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="421" width="11.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1115.86" y="431.5" ></text>
</g>
<g >
<title>smp_call_function_single (5,043,247 samples, 0.03%)</title><rect x="47.2" y="293" width="0.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="50.19" y="303.5" ></text>
</g>
<g >
<title>ret_from_fork_asm (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="517" width="14.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1127.23" y="527.5" ></text>
</g>
<g >
<title>set_next_entity (151,327,085 samples, 0.86%)</title><rect x="1158.9" y="389" width="10.2" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1161.89" y="399.5" ></text>
</g>
<g >
<title>_perf_ioctl (5,043,247 samples, 0.03%)</title><rect x="47.2" y="357" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="50.19" y="367.5" ></text>
</g>
<g >
<title>__cmd_record (245,133,232 samples, 1.40%)</title><rect x="30.7" y="501" width="16.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="33.67" y="511.5" ></text>
</g>
<g >
<title>swapper (2,167,000,593 samples, 12.38%)</title><rect x="1044.0" y="533" width="146.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1046.97" y="543.5" >swapper</text>
</g>
<g >
<title>cpuacct_charge (51,289,951 samples, 0.29%)</title><rect x="463.3" y="261" width="3.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="466.27" y="271.5" ></text>
</g>
<g >
<title>unmap_page_range (5,940,523 samples, 0.03%)</title><rect x="47.5" y="213" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="50.54" y="223.5" ></text>
</g>
<g >
<title>_nohz_idle_balance.isra.0 (1,794,670 samples, 0.01%)</title><rect x="1189.7" y="373" width="0.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1192.74" y="383.5" ></text>
</g>
<g >
<title>pick_next_entity (154,438,504 samples, 0.88%)</title><rect x="855.3" y="293" width="10.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="858.26" y="303.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,499,544 samples, 0.01%)</title><rect x="1185.9" y="325" width="0.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1188.94" y="335.5" ></text>
</g>
<g >
<title>rcu_note_context_switch (51,325,601 samples, 0.29%)</title><rect x="968.1" y="325" width="3.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="971.07" y="335.5" ></text>
</g>
<g >
<title>shell_execve (306,224,686 samples, 1.75%)</title><rect x="10.0" y="389" width="20.6" height="15.0" fill="rgb(253,220,52)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>revert_creds (306,224,686 samples, 1.75%)</title><rect x="10.0" y="37" width="20.6" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="13.00" y="47.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::write_syscall (7,274,587,952 samples, 41.54%)</title><rect x="526.7" y="453" width="490.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="529.68" y="463.5" >rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposi..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (169,626,775 samples, 0.97%)</title><rect x="1112.8" y="517" width="11.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1115.80" y="527.5" ></text>
</g>
<g >
<title>update_curr (51,269,006 samples, 0.29%)</title><rect x="470.2" y="293" width="3.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="473.20" y="303.5" ></text>
</g>
<g >
<title>native_flush_tlb_one_user (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="293" width="5.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1019.89" y="303.5" ></text>
</g>
<g >
<title>tick_nohz_idle_stop_tick (104,141,756 samples, 0.59%)</title><rect x="1151.9" y="437" width="7.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1154.88" y="447.5" ></text>
</g>
<g >
<title>update_rq_clock (55,519,805 samples, 0.32%)</title><rect x="971.5" y="325" width="3.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="974.52" y="335.5" ></text>
</g>
<g >
<title>schedule (1,588,768,357 samples, 9.07%)</title><rect x="401.1" y="341" width="107.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="404.12" y="351.5" >schedule</text>
</g>
<g >
<title>perf_evsel__enable_cpu (5,043,247 samples, 0.03%)</title><rect x="47.2" y="469" width="0.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="50.19" y="479.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (5,811,549 samples, 0.03%)</title><rect x="47.5" y="165" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="50.55" y="175.5" ></text>
</g>
<g >
<title>update_load_avg (151,327,085 samples, 0.86%)</title><rect x="1158.9" y="373" width="10.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1161.89" y="383.5" ></text>
</g>
<g >
<title>pick_next_task_fair (151,327,085 samples, 0.86%)</title><rect x="1158.9" y="405" width="10.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1161.89" y="415.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (50,869,078 samples, 0.29%)</title><rect x="1006.6" y="341" width="3.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1009.55" y="351.5" ></text>
</g>
<g >
<title>pci_pme_list_scan (219,107,101 samples, 1.25%)</title><rect x="1124.2" y="437" width="14.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1127.23" y="447.5" ></text>
</g>
<g >
<title>ip_finish_output (168,516,315 samples, 0.96%)</title><rect x="1112.9" y="245" width="11.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1115.86" y="255.5" ></text>
</g>
<g >
<title>search_binary_handler (306,224,686 samples, 1.75%)</title><rect x="10.0" y="245" width="20.6" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1,578,091 samples, 0.01%)</title><rect x="1186.0" y="293" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1189.01" y="303.5" ></text>
</g>
<g >
<title>generic_permission (306,224,686 samples, 1.75%)</title><rect x="10.0" y="101" width="20.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>do_mprotect_pkey (88,186,727 samples, 0.50%)</title><rect x="1016.9" y="405" width="5.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1019.89" y="415.5" ></text>
</g>
<g >
<title>__cmd_record (5,043,247 samples, 0.03%)</title><rect x="47.2" y="501" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="50.19" y="511.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (51,285,601 samples, 0.29%)</title><rect x="523.2" y="389" width="3.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="526.23" y="399.5" ></text>
</g>
<g >
<title>tick_nohz_restart (249,900,223 samples, 1.43%)</title><rect x="1169.1" y="437" width="16.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1172.09" y="447.5" ></text>
</g>
</g>
</svg>
