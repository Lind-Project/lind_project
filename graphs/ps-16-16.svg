<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>sched_clock (256,343,453 samples, 1.47%)</title><rect x="968.0" y="165" width="17.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="971.02" y="175.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="357" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1088.52" y="367.5" ></text>
</g>
<g >
<title>wake_affine (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="197" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1088.52" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (243,727,558 samples, 1.39%)</title><rect x="21.1" y="357" width="16.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="24.05" y="367.5" ></text>
</g>
<g >
<title>ioctl (4,445,799 samples, 0.03%)</title><rect x="37.9" y="325" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="40.86" y="335.5" ></text>
</g>
<g >
<title>dispatcher (6,782,893 samples, 0.04%)</title><rect x="81.0" y="325" width="0.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="84.01" y="335.5" ></text>
</g>
<g >
<title>NaClValidateCode (535,649,574 samples, 3.06%)</title><rect x="44.8" y="325" width="36.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="47.84" y="335.5" >NaC..</text>
</g>
<g >
<title>sched_clock (50,683,548 samples, 0.29%)</title><rect x="509.6" y="181" width="3.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="512.59" y="191.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (102,546,073 samples, 0.59%)</title><rect x="513.0" y="149" width="6.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="516.01" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,722,246,763 samples, 15.58%)</title><rect x="599.2" y="309" width="183.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="602.23" y="319.5" >[libc.so.6]</text>
</g>
<g >
<title>__x64_sys_sched_setaffinity (5,300,226 samples, 0.03%)</title><rect x="37.5" y="277" width="0.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="40.51" y="287.5" ></text>
</g>
<g >
<title>get_arg_page (243,727,558 samples, 1.39%)</title><rect x="21.1" y="245" width="16.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="24.05" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (5,300,226 samples, 0.03%)</title><rect x="37.5" y="293" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="40.51" y="303.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::read_syscall (7,053,337,774 samples, 40.36%)</title><rect x="81.5" y="341" width="476.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="84.47" y="351.5" >rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safepo..</text>
</g>
<g >
<title>intel_idle (259,377,993 samples, 1.48%)</title><rect x="1154.5" y="277" width="17.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1157.48" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (58,532,740 samples, 0.33%)</title><rect x="1020.3" y="373" width="4.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1023.31" y="383.5" ></text>
</g>
<g >
<title>rest_init (6,568,020 samples, 0.04%)</title><rect x="1189.6" y="325" width="0.4" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1192.56" y="335.5" ></text>
</g>
<g >
<title>scheduler_tick (242,440,425 samples, 1.39%)</title><rect x="1109.4" y="149" width="16.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1112.44" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (204,555,815 samples, 1.17%)</title><rect x="416.5" y="293" width="13.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="419.54" y="303.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4,445,799 samples, 0.03%)</title><rect x="37.9" y="53" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="40.86" y="63.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="405" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1088.52" y="415.5" ></text>
</g>
<g >
<title>sched_setaffinity (5,300,226 samples, 0.03%)</title><rect x="37.5" y="261" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="40.51" y="271.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (667,135,584 samples, 3.82%)</title><rect x="1109.4" y="277" width="45.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1112.44" y="287.5" >asm_..</text>
</g>
<g >
<title>__x64_sys_rseq (58,532,740 samples, 0.33%)</title><rect x="1020.3" y="357" width="4.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1023.31" y="367.5" ></text>
</g>
<g >
<title>sync_regs (163,679,479 samples, 0.94%)</title><rect x="10.0" y="213" width="11.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (163,679,479 samples, 0.94%)</title><rect x="10.0" y="373" width="11.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (243,727,558 samples, 1.39%)</title><rect x="21.1" y="277" width="16.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="24.05" y="287.5" ></text>
</g>
<g >
<title>dequeue_task_fair (5,300,226 samples, 0.03%)</title><rect x="37.5" y="181" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="40.51" y="191.5" ></text>
</g>
<g >
<title>switch_fpu_return (90,301,420 samples, 0.52%)</title><rect x="1087.3" y="341" width="6.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1090.30" y="351.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (14,494,427,230 samples, 82.93%)</title><rect x="41.7" y="389" width="978.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="44.72" y="399.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>sched_clock (102,546,073 samples, 0.59%)</title><rect x="513.0" y="165" width="6.9" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="516.01" y="175.5" ></text>
</g>
<g >
<title>update_curr (5,300,226 samples, 0.03%)</title><rect x="37.5" y="149" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="40.51" y="159.5" ></text>
</g>
<g >
<title>ApplyDfaValidator_x86_64 (535,649,574 samples, 3.06%)</title><rect x="44.8" y="309" width="36.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="47.84" y="319.5" >App..</text>
</g>
<g >
<title>perf (11,115,988 samples, 0.06%)</title><rect x="37.5" y="421" width="0.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="40.51" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,786,724,554 samples, 10.22%)</title><rect x="430.3" y="293" width="120.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="433.35" y="303.5" >entry_SYSCALL_6..</text>
</g>
<g >
<title>irq_exit_rcu (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="373" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1088.52" y="383.5" ></text>
</g>
<g >
<title>perf_ioctl (4,445,799 samples, 0.03%)</title><rect x="37.9" y="261" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="40.86" y="271.5" ></text>
</g>
<g >
<title>_raw_spin_lock (204,902,127 samples, 1.17%)</title><rect x="448.7" y="197" width="13.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="451.67" y="207.5" ></text>
</g>
<g >
<title>__update_blocked_fair (240,327,788 samples, 1.38%)</title><rect x="1138.3" y="165" width="16.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1141.26" y="175.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (926,513,577 samples, 5.30%)</title><rect x="1109.4" y="293" width="62.6" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1112.44" y="303.5" >cpuidl..</text>
</g>
<g >
<title>call_cpuidle (1,164,241,879 samples, 6.66%)</title><rect x="1093.4" y="325" width="78.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1096.39" y="335.5" >call_cpui..</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (18,150,337 samples, 0.10%)</title><rect x="1086.1" y="309" width="1.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1089.05" y="319.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1,424,343,554 samples, 8.15%)</title><rect x="1093.4" y="373" width="96.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1096.39" y="383.5" >cpu_startup..</text>
</g>
<g >
<title>__cgroup_account_cputime (51,239,566 samples, 0.29%)</title><rect x="936.9" y="149" width="3.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="939.86" y="159.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (4,445,799 samples, 0.03%)</title><rect x="37.9" y="341" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="40.86" y="351.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (153,297,297 samples, 0.88%)</title><rect x="537.2" y="245" width="10.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="540.17" y="255.5" ></text>
</g>
<g >
<title>do_idle (1,164,241,879 samples, 6.66%)</title><rect x="1093.4" y="357" width="78.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1096.39" y="367.5" >do_idle</text>
</g>
<g >
<title>entry_SYSCALL_64_safe_stack (152,904,980 samples, 0.87%)</title><rect x="1027.7" y="405" width="10.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1030.72" y="415.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (311,406,861 samples, 1.78%)</title><rect x="992.4" y="261" width="21.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="995.36" y="271.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (18,150,337 samples, 0.10%)</title><rect x="1086.1" y="341" width="1.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1089.05" y="351.5" ></text>
</g>
<g >
<title>__cgroup_account_cputime (50,960,794 samples, 0.29%)</title><rect x="489.2" y="149" width="3.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="492.21" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (110,436,725 samples, 0.63%)</title><rect x="1085.9" y="405" width="7.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1088.94" y="415.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (5,766,505 samples, 0.03%)</title><rect x="1189.6" y="277" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1192.56" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_poll (18,150,337 samples, 0.10%)</title><rect x="1086.1" y="373" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1089.05" y="383.5" ></text>
</g>
<g >
<title>dequeue_entity (5,300,226 samples, 0.03%)</title><rect x="37.5" y="165" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="40.51" y="175.5" ></text>
</g>
<g >
<title>yield_task_fair (205,009,401 samples, 1.17%)</title><rect x="523.3" y="229" width="13.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="526.33" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_sched_yield (1,530,945,630 samples, 8.76%)</title><rect x="433.8" y="261" width="103.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="436.81" y="271.5" >__x64_sys_sc..</text>
</g>
<g >
<title>sched_setaffinity (5,300,226 samples, 0.03%)</title><rect x="37.5" y="325" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="40.51" y="335.5" ></text>
</g>
<g >
<title>sched_clock_cpu (152,775,144 samples, 0.87%)</title><rect x="513.0" y="181" width="10.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="516.01" y="191.5" ></text>
</g>
<g >
<title>native_sched_clock (102,546,073 samples, 0.59%)</title><rect x="513.0" y="133" width="6.9" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="516.01" y="143.5" ></text>
</g>
<g >
<title>__do_softirq (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="341" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1088.52" y="351.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,758,945 samples, 0.01%)</title><rect x="1189.6" y="213" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1192.57" y="223.5" ></text>
</g>
<g >
<title>update_min_vruntime (51,229,889 samples, 0.29%)</title><rect x="947.2" y="149" width="3.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="950.25" y="159.5" ></text>
</g>
<g >
<title>copy_string_kernel (243,727,558 samples, 1.39%)</title><rect x="21.1" y="261" width="16.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="24.05" y="271.5" ></text>
</g>
<g >
<title>update_process_times (242,440,425 samples, 1.39%)</title><rect x="1109.4" y="165" width="16.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1112.44" y="175.5" ></text>
</g>
<g >
<title>__cgroup_account_cputime (102,958,341 samples, 0.59%)</title><rect x="898.8" y="165" width="6.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="901.78" y="175.5" ></text>
</g>
<g >
<title>get_nohz_timer_target (18,150,337 samples, 0.10%)</title><rect x="1086.1" y="261" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1089.05" y="271.5" ></text>
</g>
<g >
<title>schedule (2,019,333,190 samples, 11.55%)</title><rect x="856.0" y="229" width="136.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="859.02" y="239.5" >schedule</text>
</g>
<g >
<title>NaClVmmapCheckAddrMapping (51,555,466 samples, 0.29%)</title><rect x="557.7" y="325" width="3.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="560.67" y="335.5" ></text>
</g>
<g >
<title>update_curr (51,250,102 samples, 0.29%)</title><rect x="502.3" y="181" width="3.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="505.34" y="191.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (424,695,159 samples, 2.43%)</title><rect x="1125.8" y="229" width="28.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1128.81" y="239.5" >__..</text>
</g>
<g >
<title>cgroup_rstat_updated (51,239,566 samples, 0.29%)</title><rect x="936.9" y="133" width="3.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="939.86" y="143.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (4,445,799 samples, 0.03%)</title><rect x="37.9" y="357" width="0.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="40.86" y="367.5" ></text>
</g>
<g >
<title>tick_sched_timer (242,440,425 samples, 1.39%)</title><rect x="1109.4" y="197" width="16.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1112.44" y="207.5" ></text>
</g>
<g >
<title>ValidateChunkAMD64 (535,649,574 samples, 3.06%)</title><rect x="44.8" y="293" width="36.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="47.84" y="303.5" >Val..</text>
</g>
<g >
<title>rcu_core_si (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="325" width="0.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1088.52" y="335.5" ></text>
</g>
<g >
<title>execute_command_internal (163,679,479 samples, 0.94%)</title><rect x="10.0" y="309" width="11.1" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>_raw_spin_lock (51,265,635 samples, 0.29%)</title><rect x="434.5" y="229" width="3.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="437.53" y="239.5" ></text>
</g>
<g >
<title>__calc_delta (101,242,509 samples, 0.58%)</title><rect x="482.4" y="149" width="6.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="485.38" y="159.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (240,751,131 samples, 1.38%)</title><rect x="1109.6" y="117" width="16.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1112.56" y="127.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (51,276,651 samples, 0.29%)</title><rect x="1013.4" y="277" width="3.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1016.38" y="287.5" ></text>
</g>
<g >
<title>cpuacct_charge (102,528,412 samples, 0.59%)</title><rect x="940.3" y="149" width="6.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="943.32" y="159.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (18,150,337 samples, 0.10%)</title><rect x="1086.1" y="293" width="1.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1089.05" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,735,481,816 samples, 9.93%)</title><rect x="430.3" y="277" width="117.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="433.35" y="287.5" >do_syscall_64</text>
</g>
<g >
<title>do_syscall_64 (2,591,950,189 samples, 14.83%)</title><rect x="838.4" y="277" width="175.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="841.39" y="287.5" >do_syscall_64</text>
</g>
<g >
<title>__cmd_record (11,115,988 samples, 0.06%)</title><rect x="37.5" y="389" width="0.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="40.51" y="399.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (50,960,794 samples, 0.29%)</title><rect x="489.2" y="133" width="3.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="492.21" y="143.5" ></text>
</g>
<g >
<title>pick_next_task (641,220,641 samples, 3.67%)</title><rect x="462.5" y="197" width="43.3" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="465.51" y="207.5" >pick..</text>
</g>
<g >
<title>exit_to_user_mode_prepare (90,301,420 samples, 0.52%)</title><rect x="1087.3" y="357" width="6.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1090.30" y="367.5" ></text>
</g>
<g >
<title>perf_event_task_tick (240,751,131 samples, 1.38%)</title><rect x="1109.6" y="133" width="16.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1112.56" y="143.5" ></text>
</g>
<g >
<title>rcu_note_context_switch (153,848,833 samples, 0.88%)</title><rect x="954.2" y="197" width="10.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="957.17" y="207.5" ></text>
</g>
<g >
<title>update_rq_clock (52,938,526 samples, 0.30%)</title><rect x="988.8" y="213" width="3.6" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="991.78" y="223.5" ></text>
</g>
<g >
<title>main (163,679,479 samples, 0.94%)</title><rect x="10.0" y="357" width="11.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (50,229,071 samples, 0.29%)</title><rect x="519.9" y="165" width="3.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="522.94" y="175.5" ></text>
</g>
<g >
<title>sel_ldr (14,808,456,947 samples, 84.73%)</title><rect x="38.3" y="421" width="999.7" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="41.26" y="431.5" >sel_ldr</text>
</g>
<g >
<title>__hrtimer_start_range_ns (18,150,337 samples, 0.10%)</title><rect x="1086.1" y="277" width="1.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1089.05" y="287.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreateDecoder (535,649,574 samples, 3.06%)</title><rect x="44.8" y="373" width="36.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="47.84" y="383.5" >NaC..</text>
</g>
<g >
<title>pick_next_task_fair (1,145,897,686 samples, 6.56%)</title><rect x="873.3" y="181" width="77.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="876.34" y="191.5" >pick_nex..</text>
</g>
<g >
<title>call_cpuidle (4,645,400 samples, 0.03%)</title><rect x="1189.6" y="261" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1192.56" y="271.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (1,164,241,879 samples, 6.66%)</title><rect x="1093.4" y="341" width="78.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1096.39" y="351.5" >cpuidle_i..</text>
</g>
<g >
<title>__x64_sys_ioctl (4,445,799 samples, 0.03%)</title><rect x="37.9" y="277" width="0.3" height="15.0" fill="rgb(249,204,49)" rx="2" ry="2" />
<text  x="40.86" y="287.5" ></text>
</g>
<g >
<title>NaClSysExit (6,782,893 samples, 0.04%)</title><rect x="81.0" y="357" width="0.5" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="84.01" y="367.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (18,150,337 samples, 0.10%)</title><rect x="1086.1" y="325" width="1.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1089.05" y="335.5" ></text>
</g>
<g >
<title>evlist_cpu_iterator__next (5,300,226 samples, 0.03%)</title><rect x="37.5" y="357" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="40.51" y="367.5" ></text>
</g>
<g >
<title>cpuacct_charge (51,213,477 samples, 0.29%)</title><rect x="492.7" y="149" width="3.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="495.66" y="159.5" ></text>
</g>
<g >
<title>swake_up_one (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="261" width="0.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1088.52" y="271.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (243,727,558 samples, 1.39%)</title><rect x="21.1" y="229" width="16.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="24.05" y="239.5" ></text>
</g>
<g >
<title>execve (243,727,558 samples, 1.39%)</title><rect x="21.1" y="341" width="16.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="24.05" y="351.5" ></text>
</g>
<g >
<title>CompareAndSwap (46,295,245 samples, 0.26%)</title><rect x="41.7" y="357" width="3.1" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="44.72" y="367.5" ></text>
</g>
<g >
<title>swapper (2,250,675,515 samples, 12.88%)</title><rect x="1038.0" y="421" width="152.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1041.05" y="431.5" >swapper</text>
</g>
<g >
<title>intel_idle (2,754,717 samples, 0.02%)</title><rect x="1189.7" y="213" width="0.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.69" y="223.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (6,568,020 samples, 0.04%)</title><rect x="1189.6" y="373" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1192.56" y="383.5" ></text>
</g>
<g >
<title>[sel_ldr] (14,545,702,593 samples, 83.22%)</title><rect x="38.3" y="405" width="982.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="41.26" y="415.5" >[sel_ldr]</text>
</g>
<g >
<title>__sched_yield (2,242,720,015 samples, 12.83%)</title><rect x="406.3" y="309" width="151.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="409.25" y="319.5" >__sched_yield</text>
</g>
<g >
<title>__evlist__enable (9,746,025 samples, 0.06%)</title><rect x="37.5" y="373" width="0.7" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="40.51" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4,445,799 samples, 0.03%)</title><rect x="37.9" y="309" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="40.86" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (51,316,634 samples, 0.29%)</title><rect x="1024.3" y="405" width="3.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1027.26" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (49,792,786 samples, 0.28%)</title><rect x="413.2" y="293" width="3.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="416.17" y="303.5" ></text>
</g>
<g >
<title>update_min_vruntime (92,200,973 samples, 0.53%)</title><rect x="496.1" y="165" width="6.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="499.11" y="175.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (6,749,511,150 samples, 38.62%)</title><rect x="564.6" y="325" width="455.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="567.61" y="335.5" >rustposix::interface::pipe::EmulatedPipe::write_to_pipe</text>
</g>
<g >
<title>start_kernel (6,568,020 samples, 0.04%)</title><rect x="1189.6" y="357" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1192.56" y="367.5" ></text>
</g>
<g >
<title>make_child (163,679,479 samples, 0.94%)</title><rect x="10.0" y="277" width="11.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (51,242,738 samples, 0.29%)</title><rect x="547.5" y="277" width="3.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="550.52" y="287.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4,445,799 samples, 0.03%)</title><rect x="37.9" y="69" width="0.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="40.86" y="79.5" ></text>
</g>
<g >
<title>NaClAppThreadSetSuspendState (46,295,245 samples, 0.26%)</title><rect x="41.7" y="373" width="3.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="44.72" y="383.5" ></text>
</g>
<g >
<title>smp_call_function_single (4,445,799 samples, 0.03%)</title><rect x="37.9" y="181" width="0.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="40.86" y="191.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (1,430,911,574 samples, 8.19%)</title><rect x="1093.4" y="405" width="96.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1096.39" y="415.5" >secondary_s..</text>
</g>
<g >
<title>do_sched_yield (1,530,945,630 samples, 8.76%)</title><rect x="433.8" y="245" width="103.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="436.81" y="255.5" >do_sched_yield</text>
</g>
<g >
<title>perf-exec (243,727,558 samples, 1.39%)</title><rect x="21.1" y="421" width="16.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="24.05" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (512,652,027 samples, 2.93%)</title><rect x="800.3" y="293" width="34.6" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="803.32" y="303.5" >en..</text>
</g>
<g >
<title>update_curr (254,630,647 samples, 1.46%)</title><rect x="478.9" y="165" width="17.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="481.92" y="175.5" ></text>
</g>
<g >
<title>remote_function (4,445,799 samples, 0.03%)</title><rect x="37.9" y="149" width="0.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="40.86" y="159.5" ></text>
</g>
<g >
<title>default_tty_job_signals (163,679,479 samples, 0.94%)</title><rect x="10.0" y="261" width="11.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>__sched_setaffinity (5,300,226 samples, 0.03%)</title><rect x="37.5" y="245" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="40.51" y="255.5" ></text>
</g>
<g >
<title>NaClTextDyncodeCreate (535,649,574 samples, 3.06%)</title><rect x="44.8" y="341" width="36.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="47.84" y="351.5" >NaC..</text>
</g>
<g >
<title>irq_exit_rcu (424,695,159 samples, 2.43%)</title><rect x="1125.8" y="245" width="28.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1128.81" y="255.5" >ir..</text>
</g>
<g >
<title>[unknown] (243,727,558 samples, 1.39%)</title><rect x="21.1" y="405" width="16.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="24.05" y="415.5" ></text>
</g>
<g >
<title>restore_fpregs_from_fpstate (90,301,420 samples, 0.52%)</title><rect x="1087.3" y="325" width="6.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1090.30" y="335.5" ></text>
</g>
<g >
<title>__schedule (1,259,148,614 samples, 7.20%)</title><rect x="438.3" y="213" width="85.0" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="441.32" y="223.5" >__schedule</text>
</g>
<g >
<title>__libc_start_main (163,679,479 samples, 0.94%)</title><rect x="10.0" y="389" width="11.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>reader_loop (163,679,479 samples, 0.94%)</title><rect x="10.0" y="341" width="11.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>NaClSysReadDecoder (7,053,337,774 samples, 40.36%)</title><rect x="81.5" y="373" width="476.2" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="84.47" y="383.5" >NaClSysReadDecoder</text>
</g>
<g >
<title>NaClSysRead (7,053,337,774 samples, 40.36%)</title><rect x="81.5" y="357" width="476.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="84.47" y="367.5" >NaClSysRead</text>
</g>
<g >
<title>wake_up_process (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="245" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1088.52" y="255.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (51,274,533 samples, 0.29%)</title><rect x="1016.8" y="293" width="3.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1019.84" y="303.5" ></text>
</g>
<g >
<title>execute_command (163,679,479 samples, 0.94%)</title><rect x="10.0" y="325" width="11.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>evlist__prepare_workload (243,727,558 samples, 1.39%)</title><rect x="21.1" y="373" width="16.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="24.05" y="383.5" ></text>
</g>
<g >
<title>__schedule (1,915,157,029 samples, 10.96%)</title><rect x="856.0" y="213" width="129.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="859.02" y="223.5" >__schedule</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (6,782,893 samples, 0.04%)</title><rect x="81.0" y="309" width="0.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="84.01" y="319.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="277" width="0.4" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1088.52" y="287.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,758,945 samples, 0.01%)</title><rect x="1189.6" y="197" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1192.57" y="207.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreate (535,649,574 samples, 3.06%)</title><rect x="44.8" y="357" width="36.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="47.84" y="367.5" >NaC..</text>
</g>
<g >
<title>cpuidle_enter (4,645,400 samples, 0.03%)</title><rect x="1189.6" y="245" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.56" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock (103,170,056 samples, 0.59%)</title><rect x="862.9" y="197" width="7.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="865.91" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (58,532,740 samples, 0.33%)</title><rect x="1020.3" y="389" width="4.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1023.31" y="399.5" ></text>
</g>
<g >
<title>try_to_wake_up (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="229" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1088.52" y="239.5" ></text>
</g>
<g >
<title>generic_exec_single (4,445,799 samples, 0.03%)</title><rect x="37.9" y="165" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="40.86" y="175.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (242,440,425 samples, 1.39%)</title><rect x="1109.4" y="213" width="16.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1112.44" y="223.5" ></text>
</g>
<g >
<title>NaClSysWriteDecoder (6,852,361,744 samples, 39.21%)</title><rect x="557.7" y="373" width="462.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="560.67" y="383.5" >NaClSysWriteDecoder</text>
</g>
<g >
<title>native_sched_clock (256,343,453 samples, 1.47%)</title><rect x="968.0" y="133" width="17.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="971.02" y="143.5" ></text>
</g>
<g >
<title>start_secondary (1,424,343,554 samples, 8.15%)</title><rect x="1093.4" y="389" width="96.2" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1096.39" y="399.5" >start_secon..</text>
</g>
<g >
<title>perf_ctx_enable (4,445,799 samples, 0.03%)</title><rect x="37.9" y="85" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="40.86" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_execve (243,727,558 samples, 1.39%)</title><rect x="21.1" y="293" width="16.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="24.05" y="303.5" ></text>
</g>
<g >
<title>__cmd_record (243,727,558 samples, 1.39%)</title><rect x="21.1" y="389" width="16.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="24.05" y="399.5" ></text>
</g>
<g >
<title>all (17,477,655,487 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>_start (163,679,479 samples, 0.94%)</title><rect x="10.0" y="405" width="11.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>update_curr (614,738,124 samples, 3.52%)</title><rect x="909.2" y="165" width="41.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="912.20" y="175.5" >upd..</text>
</g>
<g >
<title>sigemptyset (163,679,479 samples, 0.94%)</title><rect x="10.0" y="229" width="11.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>__set_cpus_allowed_ptr (5,300,226 samples, 0.03%)</title><rect x="37.5" y="229" width="0.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="40.51" y="239.5" ></text>
</g>
<g >
<title>NaClUserToSysAddrRangeProt (51,555,466 samples, 0.29%)</title><rect x="557.7" y="341" width="3.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="560.67" y="351.5" ></text>
</g>
<g >
<title>lind (163,679,479 samples, 0.94%)</title><rect x="10.0" y="421" width="11.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>NaClSysExitDecoder (6,782,893 samples, 0.04%)</title><rect x="81.0" y="373" width="0.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="84.01" y="383.5" ></text>
</g>
<g >
<title>available_idle_cpu (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="181" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1088.52" y="191.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (99,143,685 samples, 0.57%)</title><rect x="551.0" y="293" width="6.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="553.98" y="303.5" ></text>
</g>
<g >
<title>lind_exit (6,782,893 samples, 0.04%)</title><rect x="81.0" y="341" width="0.5" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="84.01" y="351.5" ></text>
</g>
<g >
<title>pick_next_entity (51,314,742 samples, 0.29%)</title><rect x="475.5" y="165" width="3.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="478.46" y="175.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (6,568,020 samples, 0.04%)</title><rect x="1189.6" y="389" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1192.56" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,694,475,903 samples, 15.42%)</title><rect x="834.9" y="293" width="181.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="837.93" y="303.5" >entry_SYSCALL_64_after_..</text>
</g>
<g >
<title>update_blocked_averages (240,327,788 samples, 1.38%)</title><rect x="1138.3" y="181" width="16.2" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="1141.26" y="191.5" ></text>
</g>
<g >
<title>rcu_accelerate_cbs_unlocked (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="293" width="0.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1088.52" y="303.5" ></text>
</g>
<g >
<title>sched_clock_cpu (256,343,453 samples, 1.47%)</title><rect x="968.0" y="181" width="17.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="971.02" y="191.5" ></text>
</g>
<g >
<title>rebalance_domains (184,367,371 samples, 1.05%)</title><rect x="1125.8" y="181" width="12.5" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="1128.81" y="191.5" ></text>
</g>
<g >
<title>select_task_rq_fair (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="213" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1088.52" y="223.5" ></text>
</g>
<g >
<title>__calc_delta (164,573,295 samples, 0.94%)</title><rect x="887.7" y="165" width="11.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="890.67" y="175.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper_inner (6,782,893 samples, 0.04%)</title><rect x="81.0" y="277" width="0.5" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="84.01" y="287.5" ></text>
</g>
<g >
<title>raw_spin_rq_lock_nested (51,313,725 samples, 0.29%)</title><rect x="950.7" y="197" width="3.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="953.70" y="207.5" ></text>
</g>
<g >
<title>cpuacct_charge (5,300,226 samples, 0.03%)</title><rect x="37.5" y="133" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="40.51" y="143.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (6,782,893 samples, 0.04%)</title><rect x="81.0" y="293" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="84.01" y="303.5" ></text>
</g>
<g >
<title>_raw_spin_lock (51,237,039 samples, 0.29%)</title><rect x="852.6" y="229" width="3.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="855.56" y="239.5" ></text>
</g>
<g >
<title>ctx_resched (4,445,799 samples, 0.03%)</title><rect x="37.9" y="101" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="40.86" y="111.5" ></text>
</g>
<g >
<title>pick_next_task_fair (398,146,362 samples, 2.28%)</title><rect x="475.5" y="181" width="26.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="478.46" y="191.5" >p..</text>
</g>
<g >
<title>do_idle (6,347,085 samples, 0.04%)</title><rect x="1189.6" y="293" width="0.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1192.56" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_sched_yield (2,229,256,484 samples, 12.75%)</title><rect x="841.9" y="261" width="150.5" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="844.85" y="271.5" >__x64_sys_sched_yield</text>
</g>
<g >
<title>cpuidle_enter (1,164,241,879 samples, 6.66%)</title><rect x="1093.4" y="309" width="78.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1096.39" y="319.5" >cpuidle_e..</text>
</g>
<g >
<title>do_syscall_64 (110,436,725 samples, 0.63%)</title><rect x="1085.9" y="389" width="7.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1088.94" y="399.5" ></text>
</g>
<g >
<title>schedule (1,259,148,614 samples, 7.20%)</title><rect x="438.3" y="229" width="85.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="441.32" y="239.5" >schedule</text>
</g>
<g >
<title>raw_spin_rq_unlock (4,860,208 samples, 0.03%)</title><rect x="438.0" y="229" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="440.99" y="239.5" ></text>
</g>
<g >
<title>load_balance (184,367,371 samples, 1.05%)</title><rect x="1125.8" y="165" width="12.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1128.81" y="175.5" ></text>
</g>
<g >
<title>__switch_to_asm (91,553,688 samples, 0.52%)</title><rect x="1079.3" y="405" width="6.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1082.34" y="415.5" ></text>
</g>
<g >
<title>NaClSysWrite (6,852,361,744 samples, 39.21%)</title><rect x="557.7" y="357" width="462.6" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="560.67" y="367.5" >NaClSysWrite</text>
</g>
<g >
<title>pick_next_task_fair (4,860,208 samples, 0.03%)</title><rect x="505.8" y="197" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="508.80" y="207.5" ></text>
</g>
<g >
<title>sched_clock_noinstr (256,343,453 samples, 1.47%)</title><rect x="968.0" y="149" width="17.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="971.02" y="159.5" ></text>
</g>
<g >
<title>arch_call_rest_init (6,568,020 samples, 0.04%)</title><rect x="1189.6" y="341" width="0.4" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1192.56" y="351.5" ></text>
</g>
<g >
<title>update_rq_clock (307,613,566 samples, 1.76%)</title><rect x="964.6" y="197" width="20.7" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="967.56" y="207.5" ></text>
</g>
<g >
<title>rcu_core (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="309" width="0.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1088.52" y="319.5" ></text>
</g>
<g >
<title>tick_sched_handle (242,440,425 samples, 1.39%)</title><rect x="1109.4" y="181" width="16.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1112.44" y="191.5" ></text>
</g>
<g >
<title>set_signal_handler (163,679,479 samples, 0.94%)</title><rect x="10.0" y="245" width="11.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>run_rebalance_domains (424,695,159 samples, 2.43%)</title><rect x="1125.8" y="197" width="28.7" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1128.81" y="207.5" >ru..</text>
</g>
<g >
<title>nohz_run_idle_balance (260,101,675 samples, 1.49%)</title><rect x="1172.0" y="357" width="17.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1175.00" y="367.5" ></text>
</g>
<g >
<title>__sched_yield (3,514,522,140 samples, 20.11%)</title><rect x="783.0" y="309" width="237.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="786.02" y="319.5" >__sched_yield</text>
</g>
<g >
<title>__perf_event_enable (4,445,799 samples, 0.03%)</title><rect x="37.9" y="117" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="40.86" y="127.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (259,960,696 samples, 1.49%)</title><rect x="992.4" y="245" width="17.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="995.36" y="255.5" ></text>
</g>
<g >
<title>__clone (58,532,740 samples, 0.33%)</title><rect x="1020.3" y="405" width="4.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1023.31" y="415.5" ></text>
</g>
<g >
<title>event_function_call (4,445,799 samples, 0.03%)</title><rect x="37.9" y="197" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="40.86" y="207.5" ></text>
</g>
<g >
<title>update_rq_clock (254,763,421 samples, 1.46%)</title><rect x="506.1" y="197" width="17.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="509.13" y="207.5" ></text>
</g>
<g >
<title>__do_set_cpus_allowed (5,300,226 samples, 0.03%)</title><rect x="37.5" y="197" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="40.51" y="207.5" ></text>
</g>
<g >
<title>NaClLog (51,275,363 samples, 0.29%)</title><rect x="38.3" y="389" width="3.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="41.26" y="399.5" ></text>
</g>
<g >
<title>cpu_startup_entry (6,347,085 samples, 0.04%)</title><rect x="1189.6" y="309" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.56" y="319.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (242,440,425 samples, 1.39%)</title><rect x="1109.4" y="245" width="16.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1112.44" y="255.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (153,297,297 samples, 0.88%)</title><rect x="537.2" y="261" width="10.3" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="540.17" y="271.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (90,301,420 samples, 0.52%)</title><rect x="1087.3" y="373" width="6.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1090.30" y="383.5" ></text>
</g>
<g >
<title>[unknown] (11,115,988 samples, 0.06%)</title><rect x="37.5" y="405" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="40.51" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (243,727,558 samples, 1.39%)</title><rect x="21.1" y="309" width="16.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="24.05" y="319.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (667,135,584 samples, 3.82%)</title><rect x="1109.4" y="261" width="45.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1112.44" y="271.5" >sysv..</text>
</g>
<g >
<title>pick_next_entity (51,338,177 samples, 0.29%)</title><rect x="905.7" y="165" width="3.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="908.73" y="175.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (7,053,337,774 samples, 40.36%)</title><rect x="81.5" y="325" width="476.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="84.47" y="335.5" >rustposix::interface::pipe::EmulatedPipe::read_from_pipe</text>
</g>
<g >
<title>do_sys_poll (18,150,337 samples, 0.10%)</title><rect x="1086.1" y="357" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1089.05" y="367.5" ></text>
</g>
<g >
<title>__calc_delta (307,672,547 samples, 1.76%)</title><rect x="916.1" y="149" width="20.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="919.09" y="159.5" ></text>
</g>
<g >
<title>_perf_ioctl (4,445,799 samples, 0.03%)</title><rect x="37.9" y="245" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="40.86" y="255.5" ></text>
</g>
<g >
<title>pick_next_task (1,197,241,224 samples, 6.85%)</title><rect x="869.9" y="197" width="80.8" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="872.87" y="207.5" >pick_next..</text>
</g>
<g >
<title>event_function (4,445,799 samples, 0.03%)</title><rect x="37.9" y="133" width="0.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="40.86" y="143.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (242,440,425 samples, 1.39%)</title><rect x="1109.4" y="229" width="16.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1112.44" y="239.5" ></text>
</g>
<g >
<title>raw_spin_rq_unlock (51,237,635 samples, 0.29%)</title><rect x="985.3" y="213" width="3.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="988.32" y="223.5" ></text>
</g>
<g >
<title>native_write_msr (4,445,799 samples, 0.03%)</title><rect x="37.9" y="37" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="40.86" y="47.5" ></text>
</g>
<g >
<title>_perf_event_enable (4,445,799 samples, 0.03%)</title><rect x="37.9" y="213" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="40.86" y="223.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (6,119,590 samples, 0.04%)</title><rect x="1085.5" y="389" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1088.52" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,300,226 samples, 0.03%)</title><rect x="37.5" y="309" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="40.51" y="319.5" ></text>
</g>
<g >
<title>pick_next_entity (140,575,843 samples, 0.80%)</title><rect x="466.0" y="181" width="9.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="468.97" y="191.5" ></text>
</g>
<g >
<title>[libc.so.6] (4,352,449,699 samples, 24.90%)</title><rect x="112.4" y="309" width="293.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="115.40" y="319.5" >[libc.so.6]</text>
</g>
<g >
<title>__set_cpus_allowed_ptr_locked (5,300,226 samples, 0.03%)</title><rect x="37.5" y="213" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="40.51" y="223.5" ></text>
</g>
<g >
<title>fpregs_assert_state_consistent (51,446,165 samples, 0.29%)</title><rect x="1009.9" y="245" width="3.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1012.91" y="255.5" ></text>
</g>
<g >
<title>check_cfs_rq_runtime (51,343,538 samples, 0.29%)</title><rect x="869.9" y="181" width="3.4" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="872.87" y="191.5" ></text>
</g>
<g >
<title>__do_softirq (424,695,159 samples, 2.43%)</title><rect x="1125.8" y="213" width="28.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1128.81" y="223.5" >__..</text>
</g>
<g >
<title>do_sched_yield (2,229,256,484 samples, 12.75%)</title><rect x="841.9" y="245" width="150.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="844.85" y="255.5" >do_sched_yield</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::write_syscall (6,800,806,278 samples, 38.91%)</title><rect x="561.2" y="341" width="459.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="564.15" y="351.5" >rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::saf..</text>
</g>
<g >
<title>[bash] (163,679,479 samples, 0.94%)</title><rect x="10.0" y="293" width="11.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (243,727,558 samples, 1.39%)</title><rect x="21.1" y="325" width="16.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="24.05" y="335.5" ></text>
</g>
<g >
<title>affinity__set (5,300,226 samples, 0.03%)</title><rect x="37.5" y="341" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="40.51" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (4,445,799 samples, 0.03%)</title><rect x="37.9" y="293" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="40.86" y="303.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (4,513,662 samples, 0.03%)</title><rect x="1189.6" y="229" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1192.57" y="239.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (4,445,799 samples, 0.03%)</title><rect x="37.9" y="229" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="40.86" y="239.5" ></text>
</g>
</g>
</svg>
