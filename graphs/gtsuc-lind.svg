<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="742.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="725" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="725" > </text>
<g id="frames">
<g >
<title>all (1,214 samples, 100%)</title><rect x="10.0" y="693" width="1180.0" height="15.0" fill="rgb(211,190,26)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>NaClDescIoDescDtor (1 samples, 0.08%)</title><rect x="956.7" y="581" width="1.0" height="15.0" fill="rgb(238,135,40)" rx="2" ry="2" />
<text  x="959.72" y="591.5" ></text>
</g>
<g >
<title>core::cmp::min (1 samples, 0.08%)</title><rect x="106.2" y="645" width="1.0" height="15.0" fill="rgb(238,42,38)" rx="2" ry="2" />
<text  x="109.23" y="655.5" ></text>
</g>
<g >
<title>NaClSysFork (2 samples, 0.16%)</title><rect x="160.7" y="613" width="1.9" height="15.0" fill="rgb(207,71,3)" rx="2" ry="2" />
<text  x="163.66" y="623.5" ></text>
</g>
<g >
<title>nohz_csd_func (1 samples, 0.08%)</title><rect x="1161.8" y="581" width="1.0" height="15.0" fill="rgb(243,67,50)" rx="2" ry="2" />
<text  x="1164.81" y="591.5" ></text>
</g>
<g >
<title>get_signal (1 samples, 0.08%)</title><rect x="1013.1" y="565" width="1.0" height="15.0" fill="rgb(251,112,33)" rx="2" ry="2" />
<text  x="1016.10" y="575.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (95 samples, 7.83%)</title><rect x="597.1" y="421" width="92.3" height="15.0" fill="rgb(205,144,25)" rx="2" ry="2" />
<text  x="600.08" y="431.5" >core::slice..</text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy::{{closure}} (27 samples, 2.22%)</title><rect x="740.0" y="437" width="26.2" height="15.0" fill="rgb(208,112,43)" rx="2" ry="2" />
<text  x="742.97" y="447.5" >r..</text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts_mut (8 samples, 0.66%)</title><rect x="116.9" y="645" width="7.8" height="15.0" fill="rgb(224,2,49)" rx="2" ry="2" />
<text  x="119.92" y="655.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::capacity (5 samples, 0.41%)</title><rect x="371.6" y="453" width="4.8" height="15.0" fill="rgb(218,47,39)" rx="2" ry="2" />
<text  x="374.58" y="463.5" ></text>
</g>
<g >
<title>NaClValidateCode (1 samples, 0.08%)</title><rect x="154.8" y="581" width="1.0" height="15.0" fill="rgb(212,57,17)" rx="2" ry="2" />
<text  x="157.83" y="591.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_ref (4 samples, 0.33%)</title><rect x="150.0" y="645" width="3.9" height="15.0" fill="rgb(250,107,4)" rx="2" ry="2" />
<text  x="152.97" y="655.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.08%)</title><rect x="1013.1" y="389" width="1.0" height="15.0" fill="rgb(232,14,33)" rx="2" ry="2" />
<text  x="1016.10" y="399.5" ></text>
</g>
<g >
<title>__run_hrtimer (1 samples, 0.08%)</title><rect x="1061.7" y="453" width="1.0" height="15.0" fill="rgb(218,58,29)" rx="2" ry="2" />
<text  x="1064.70" y="463.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.25%)</title><rect x="157.7" y="405" width="3.0" height="15.0" fill="rgb(233,189,7)" rx="2" ry="2" />
<text  x="160.74" y="415.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.49%)</title><rect x="274.4" y="469" width="5.8" height="15.0" fill="rgb(239,91,33)" rx="2" ry="2" />
<text  x="277.38" y="479.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.08%)</title><rect x="956.7" y="517" width="1.0" height="15.0" fill="rgb(249,102,19)" rx="2" ry="2" />
<text  x="959.72" y="527.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (100 samples, 8.24%)</title><rect x="1061.7" y="597" width="97.2" height="15.0" fill="rgb(244,29,45)" rx="2" ry="2" />
<text  x="1064.70" y="607.5" >cpuidle_idl..</text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="156.8" y="581" width="0.9" height="15.0" fill="rgb(226,193,29)" rx="2" ry="2" />
<text  x="159.77" y="591.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::len (4 samples, 0.33%)</title><rect x="146.1" y="645" width="3.9" height="15.0" fill="rgb(247,26,5)" rx="2" ry="2" />
<text  x="149.08" y="655.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1 samples, 0.08%)</title><rect x="1189.0" y="501" width="1.0" height="15.0" fill="rgb(249,17,34)" rx="2" ry="2" />
<text  x="1192.03" y="511.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.08%)</title><rect x="1013.1" y="453" width="1.0" height="15.0" fill="rgb(208,215,19)" rx="2" ry="2" />
<text  x="1016.10" y="463.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (10 samples, 0.82%)</title><rect x="163.6" y="261" width="9.7" height="15.0" fill="rgb(231,0,31)" rx="2" ry="2" />
<text  x="166.57" y="271.5" ></text>
</g>
<g >
<title>perf (66 samples, 5.44%)</title><rect x="10.0" y="677" width="64.2" height="15.0" fill="rgb(206,68,6)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >perf</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="1009.2" y="517" width="2.9" height="15.0" fill="rgb(247,18,7)" rx="2" ry="2" />
<text  x="1012.21" y="527.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="957.7" y="405" width="1.0" height="15.0" fill="rgb(208,70,43)" rx="2" ry="2" />
<text  x="960.69" y="415.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (3 samples, 0.25%)</title><rect x="157.7" y="549" width="3.0" height="15.0" fill="rgb(228,99,14)" rx="2" ry="2" />
<text  x="160.74" y="559.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="1010.2" y="149" width="1.0" height="15.0" fill="rgb(229,88,46)" rx="2" ry="2" />
<text  x="1013.18" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.16%)</title><rect x="694.3" y="421" width="1.9" height="15.0" fill="rgb(241,121,50)" rx="2" ry="2" />
<text  x="697.28" y="431.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.08%)</title><rect x="160.7" y="485" width="0.9" height="15.0" fill="rgb(252,168,6)" rx="2" ry="2" />
<text  x="163.66" y="495.5" ></text>
</g>
<g >
<title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.08%)</title><rect x="528.1" y="373" width="0.9" height="15.0" fill="rgb(232,33,1)" rx="2" ry="2" />
<text  x="531.07" y="383.5" ></text>
</g>
<g >
<title>NaClCreateThread (1 samples, 0.08%)</title><rect x="161.6" y="597" width="1.0" height="15.0" fill="rgb(227,15,53)" rx="2" ry="2" />
<text  x="164.63" y="607.5" ></text>
</g>
<g >
<title>security_file_permission (1 samples, 0.08%)</title><rect x="73.2" y="405" width="1.0" height="15.0" fill="rgb(214,31,22)" rx="2" ry="2" />
<text  x="76.18" y="415.5" ></text>
</g>
<g >
<title>NaClTextDyncodeCreate (2 samples, 0.16%)</title><rect x="153.9" y="597" width="1.9" height="15.0" fill="rgb(210,97,54)" rx="2" ry="2" />
<text  x="156.86" y="607.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="160.7" y="69" width="0.9" height="15.0" fill="rgb(220,27,53)" rx="2" ry="2" />
<text  x="163.66" y="79.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="993.7" y="229" width="1.9" height="15.0" fill="rgb(219,104,44)" rx="2" ry="2" />
<text  x="996.66" y="239.5" ></text>
</g>
<g >
<title>perf_ioctl (64 samples, 5.27%)</title><rect x="11.0" y="501" width="62.2" height="15.0" fill="rgb(242,48,42)" rx="2" ry="2" />
<text  x="13.97" y="511.5" >perf_i..</text>
</g>
<g >
<title>record__write (1 samples, 0.08%)</title><rect x="73.2" y="549" width="1.0" height="15.0" fill="rgb(234,18,20)" rx="2" ry="2" />
<text  x="76.18" y="559.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (2 samples, 0.16%)</title><rect x="993.7" y="437" width="1.9" height="15.0" fill="rgb(205,93,15)" rx="2" ry="2" />
<text  x="996.66" y="447.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.08%)</title><rect x="374.5" y="437" width="1.0" height="15.0" fill="rgb(213,5,19)" rx="2" ry="2" />
<text  x="377.50" y="447.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="957.7" y="357" width="1.0" height="15.0" fill="rgb(227,7,48)" rx="2" ry="2" />
<text  x="960.69" y="367.5" ></text>
</g>
<g >
<title>ret_from_fork (2 samples, 0.16%)</title><rect x="1058.8" y="661" width="1.9" height="15.0" fill="rgb(224,180,2)" rx="2" ry="2" />
<text  x="1061.78" y="671.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::inner (20 samples, 1.65%)</title><rect x="473.6" y="421" width="19.5" height="15.0" fill="rgb(233,188,11)" rx="2" ry="2" />
<text  x="476.64" y="431.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str_contents (1 samples, 0.08%)</title><rect x="956.7" y="117" width="1.0" height="15.0" fill="rgb(219,44,34)" rx="2" ry="2" />
<text  x="959.72" y="127.5" ></text>
</g>
<g >
<title>&lt;u32 as itoa::Integer&gt;::write (1 samples, 0.08%)</title><rect x="1011.2" y="133" width="0.9" height="15.0" fill="rgb(247,145,21)" rx="2" ry="2" />
<text  x="1014.15" y="143.5" ></text>
</g>
<g >
<title>poll_idle (19 samples, 1.57%)</title><rect x="1136.5" y="549" width="18.5" height="15.0" fill="rgb(211,195,37)" rx="2" ry="2" />
<text  x="1139.54" y="559.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (76 samples, 6.26%)</title><rect x="1062.7" y="549" width="73.8" height="15.0" fill="rgb(230,139,45)" rx="2" ry="2" />
<text  x="1065.67" y="559.5" >mwait_id..</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (2 samples, 0.16%)</title><rect x="993.7" y="581" width="1.9" height="15.0" fill="rgb(253,122,29)" rx="2" ry="2" />
<text  x="996.66" y="591.5" ></text>
</g>
<g >
<title>lind_close (1 samples, 0.08%)</title><rect x="956.7" y="549" width="1.0" height="15.0" fill="rgb(210,51,53)" rx="2" ry="2" />
<text  x="959.72" y="559.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (1 samples, 0.08%)</title><rect x="957.7" y="645" width="1.0" height="15.0" fill="rgb(230,1,11)" rx="2" ry="2" />
<text  x="960.69" y="655.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (202 samples, 16.64%)</title><rect x="493.1" y="437" width="196.3" height="15.0" fill="rgb(249,124,29)" rx="2" ry="2" />
<text  x="496.08" y="447.5" >&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="958.7" y="629" width="0.9" height="15.0" fill="rgb(244,43,40)" rx="2" ry="2" />
<text  x="961.67" y="639.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.08%)</title><rect x="1185.1" y="581" width="1.0" height="15.0" fill="rgb(240,153,35)" rx="2" ry="2" />
<text  x="1188.14" y="591.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (35 samples, 2.88%)</title><rect x="337.6" y="437" width="34.0" height="15.0" fill="rgb(244,79,0)" rx="2" ry="2" />
<text  x="340.56" y="447.5" >co..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (3 samples, 0.25%)</title><rect x="157.7" y="533" width="3.0" height="15.0" fill="rgb(252,141,51)" rx="2" ry="2" />
<text  x="160.74" y="543.5" ></text>
</g>
<g >
<title>[librustposix.so] (1 samples, 0.08%)</title><rect x="156.8" y="597" width="0.9" height="15.0" fill="rgb(254,167,12)" rx="2" ry="2" />
<text  x="159.77" y="607.5" ></text>
</g>
<g >
<title>exit_mm (1 samples, 0.08%)</title><rect x="1013.1" y="517" width="1.0" height="15.0" fill="rgb(235,134,31)" rx="2" ry="2" />
<text  x="1016.10" y="527.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::begin_object_value (1 samples, 0.08%)</title><rect x="159.7" y="373" width="1.0" height="15.0" fill="rgb(229,41,25)" rx="2" ry="2" />
<text  x="162.69" y="383.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (64 samples, 5.27%)</title><rect x="11.0" y="597" width="62.2" height="15.0" fill="rgb(205,188,5)" rx="2" ry="2" />
<text  x="13.97" y="607.5" >perf_e..</text>
</g>
<g >
<title>__libc_write (1 samples, 0.08%)</title><rect x="73.2" y="517" width="1.0" height="15.0" fill="rgb(237,115,37)" rx="2" ry="2" />
<text  x="76.18" y="527.5" ></text>
</g>
<g >
<title>NaClAppLoadFileFromFilename (1 samples, 0.08%)</title><rect x="956.7" y="629" width="1.0" height="15.0" fill="rgb(234,73,15)" rx="2" ry="2" />
<text  x="959.72" y="639.5" ></text>
</g>
<g >
<title>NaClHostDescClose (1 samples, 0.08%)</title><rect x="160.7" y="517" width="0.9" height="15.0" fill="rgb(211,172,7)" rx="2" ry="2" />
<text  x="163.66" y="527.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1 samples, 0.08%)</title><rect x="1189.0" y="565" width="1.0" height="15.0" fill="rgb(231,71,29)" rx="2" ry="2" />
<text  x="1192.03" y="575.5" ></text>
</g>
<g >
<title>ttwu_do_wakeup (1 samples, 0.08%)</title><rect x="1061.7" y="389" width="1.0" height="15.0" fill="rgb(239,79,39)" rx="2" ry="2" />
<text  x="1064.70" y="399.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.08%)</title><rect x="957.7" y="229" width="1.0" height="15.0" fill="rgb(208,191,19)" rx="2" ry="2" />
<text  x="960.69" y="239.5" ></text>
</g>
<g >
<title>copy_page_to_iter (7 samples, 0.58%)</title><rect x="165.5" y="213" width="6.8" height="15.0" fill="rgb(217,96,0)" rx="2" ry="2" />
<text  x="168.52" y="223.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.08%)</title><rect x="1013.1" y="373" width="1.0" height="15.0" fill="rgb(218,5,54)" rx="2" ry="2" />
<text  x="1016.10" y="383.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.08%)</title><rect x="1059.8" y="629" width="0.9" height="15.0" fill="rgb(212,204,21)" rx="2" ry="2" />
<text  x="1062.75" y="639.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.08%)</title><rect x="161.6" y="517" width="1.0" height="15.0" fill="rgb(218,102,47)" rx="2" ry="2" />
<text  x="164.63" y="527.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1011.2" y="213" width="0.9" height="15.0" fill="rgb(242,106,7)" rx="2" ry="2" />
<text  x="1014.15" y="223.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="956.7" y="165" width="1.0" height="15.0" fill="rgb(230,177,39)" rx="2" ry="2" />
<text  x="959.72" y="175.5" ></text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.08%)</title><rect x="968.4" y="645" width="1.0" height="15.0" fill="rgb(217,41,37)" rx="2" ry="2" />
<text  x="971.39" y="655.5" ></text>
</g>
<g >
<title>schedule_idle (22 samples, 1.81%)</title><rect x="1163.8" y="597" width="21.3" height="15.0" fill="rgb(219,93,18)" rx="2" ry="2" />
<text  x="1166.76" y="607.5" >s..</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.08%)</title><rect x="994.6" y="85" width="1.0" height="15.0" fill="rgb(220,46,26)" rx="2" ry="2" />
<text  x="997.63" y="95.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (3 samples, 0.25%)</title><rect x="157.7" y="501" width="3.0" height="15.0" fill="rgb(225,221,44)" rx="2" ry="2" />
<text  x="160.74" y="511.5" ></text>
</g>
<g >
<title>hrtimer_get_next_event (2 samples, 0.16%)</title><rect x="1157.0" y="501" width="1.9" height="15.0" fill="rgb(212,26,16)" rx="2" ry="2" />
<text  x="1159.95" y="511.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="1009.2" y="485" width="2.9" height="15.0" fill="rgb(254,63,20)" rx="2" ry="2" />
<text  x="1012.21" y="495.5" ></text>
</g>
<g >
<title>dispatcher (629 samples, 51.81%)</title><rect x="163.6" y="549" width="611.4" height="15.0" fill="rgb(237,134,32)" rx="2" ry="2" />
<text  x="166.57" y="559.5" >dispatcher</text>
</g>
<g >
<title>do_fault (1 samples, 0.08%)</title><rect x="155.8" y="485" width="1.0" height="15.0" fill="rgb(212,87,49)" rx="2" ry="2" />
<text  x="158.80" y="495.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.08%)</title><rect x="1013.1" y="501" width="1.0" height="15.0" fill="rgb(239,94,37)" rx="2" ry="2" />
<text  x="1016.10" y="511.5" ></text>
</g>
<g >
<title>ctx_resched (64 samples, 5.27%)</title><rect x="11.0" y="341" width="62.2" height="15.0" fill="rgb(217,110,8)" rx="2" ry="2" />
<text  x="13.97" y="351.5" >ctx_re..</text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.08%)</title><rect x="161.6" y="421" width="1.0" height="15.0" fill="rgb(210,111,25)" rx="2" ry="2" />
<text  x="164.63" y="431.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.08%)</title><rect x="1013.1" y="613" width="1.0" height="15.0" fill="rgb(218,145,45)" rx="2" ry="2" />
<text  x="1016.10" y="623.5" ></text>
</g>
<g >
<title>__schedule (21 samples, 1.73%)</title><rect x="1164.7" y="581" width="20.4" height="15.0" fill="rgb(236,197,14)" rx="2" ry="2" />
<text  x="1167.73" y="591.5" ></text>
</g>
<g >
<title>[unknown]  (177 samples, 14.58%)</title><rect x="775.0" y="661" width="172.0" height="15.0" fill="rgb(245,90,53)" rx="2" ry="2" />
<text  x="777.96" y="671.5" >[unknown] </text>
</g>
<g >
<title>core::ptr::metadata::from_raw_parts_mut (4 samples, 0.33%)</title><rect x="593.2" y="373" width="3.9" height="15.0" fill="rgb(243,199,43)" rx="2" ry="2" />
<text  x="596.20" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.08%)</title><rect x="161.6" y="533" width="1.0" height="15.0" fill="rgb(222,90,13)" rx="2" ry="2" />
<text  x="164.63" y="543.5" ></text>
</g>
<g >
<title>nohz_newidle_balance (16 samples, 1.32%)</title><rect x="1169.6" y="533" width="15.5" height="15.0" fill="rgb(232,75,47)" rx="2" ry="2" />
<text  x="1172.59" y="543.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="957.7" y="277" width="1.0" height="15.0" fill="rgb(252,74,27)" rx="2" ry="2" />
<text  x="960.69" y="287.5" ></text>
</g>
<g >
<title>_perf_event_enable (64 samples, 5.27%)</title><rect x="11.0" y="453" width="62.2" height="15.0" fill="rgb(208,56,52)" rx="2" ry="2" />
<text  x="13.97" y="463.5" >_perf_..</text>
</g>
<g >
<title>lind_exit (3 samples, 0.25%)</title><rect x="157.7" y="597" width="3.0" height="15.0" fill="rgb(228,149,51)" rx="2" ry="2" />
<text  x="160.74" y="607.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (3 samples, 0.25%)</title><rect x="1009.2" y="405" width="2.9" height="15.0" fill="rgb(235,114,27)" rx="2" ry="2" />
<text  x="1012.21" y="415.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreate (3 samples, 0.25%)</title><rect x="153.9" y="613" width="2.9" height="15.0" fill="rgb(231,23,15)" rx="2" ry="2" />
<text  x="156.86" y="623.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.33%)</title><rect x="237.4" y="421" width="3.9" height="15.0" fill="rgb(240,116,30)" rx="2" ry="2" />
<text  x="240.45" y="431.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.08%)</title><rect x="160.7" y="245" width="0.9" height="15.0" fill="rgb(220,99,0)" rx="2" ry="2" />
<text  x="163.66" y="255.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.08%)</title><rect x="103.3" y="645" width="1.0" height="15.0" fill="rgb(235,87,36)" rx="2" ry="2" />
<text  x="106.31" y="655.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (3 samples, 0.25%)</title><rect x="1009.2" y="261" width="2.9" height="15.0" fill="rgb(208,186,6)" rx="2" ry="2" />
<text  x="1012.21" y="271.5" ></text>
</g>
<g >
<title>tick_nohz_get_sleep_length (2 samples, 0.16%)</title><rect x="1157.0" y="549" width="1.9" height="15.0" fill="rgb(224,166,25)" rx="2" ry="2" />
<text  x="1159.95" y="559.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.16%)</title><rect x="993.7" y="165" width="1.9" height="15.0" fill="rgb(210,64,43)" rx="2" ry="2" />
<text  x="996.66" y="175.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::len (1 samples, 0.08%)</title><rect x="139.3" y="645" width="0.9" height="15.0" fill="rgb(245,112,20)" rx="2" ry="2" />
<text  x="142.28" y="655.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (2 samples, 0.16%)</title><rect x="993.7" y="629" width="1.9" height="15.0" fill="rgb(254,107,7)" rx="2" ry="2" />
<text  x="996.66" y="639.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::begin_object_value (1 samples, 0.08%)</title><rect x="158.7" y="245" width="1.0" height="15.0" fill="rgb(248,49,34)" rx="2" ry="2" />
<text  x="161.71" y="255.5" ></text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.08%)</title><rect x="1013.1" y="341" width="1.0" height="15.0" fill="rgb(224,68,50)" rx="2" ry="2" />
<text  x="1016.10" y="351.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.08%)</title><rect x="956.7" y="389" width="1.0" height="15.0" fill="rgb(210,67,38)" rx="2" ry="2" />
<text  x="959.72" y="399.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (3 samples, 0.25%)</title><rect x="1009.2" y="549" width="2.9" height="15.0" fill="rgb(209,182,49)" rx="2" ry="2" />
<text  x="1012.21" y="559.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::close_syscall (1 samples, 0.08%)</title><rect x="956.7" y="501" width="1.0" height="15.0" fill="rgb(237,156,4)" rx="2" ry="2" />
<text  x="959.72" y="511.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.08%)</title><rect x="279.2" y="437" width="1.0" height="15.0" fill="rgb(242,136,7)" rx="2" ry="2" />
<text  x="282.24" y="447.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.08%)</title><rect x="994.6" y="117" width="1.0" height="15.0" fill="rgb(252,121,11)" rx="2" ry="2" />
<text  x="997.63" y="127.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::as_ptr (1 samples, 0.08%)</title><rect x="765.2" y="421" width="1.0" height="15.0" fill="rgb(227,8,45)" rx="2" ry="2" />
<text  x="768.24" y="431.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::inner (6 samples, 0.49%)</title><rect x="97.5" y="645" width="5.8" height="15.0" fill="rgb(212,107,4)" rx="2" ry="2" />
<text  x="100.48" y="655.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (2 samples, 0.16%)</title><rect x="993.7" y="357" width="1.9" height="15.0" fill="rgb(252,57,36)" rx="2" ry="2" />
<text  x="996.66" y="367.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (2 samples, 0.16%)</title><rect x="993.7" y="405" width="1.9" height="15.0" fill="rgb(241,85,20)" rx="2" ry="2" />
<text  x="996.66" y="415.5" ></text>
</g>
<g >
<title>menu_select (2 samples, 0.16%)</title><rect x="1157.0" y="565" width="1.9" height="15.0" fill="rgb(240,50,49)" rx="2" ry="2" />
<text  x="1159.95" y="575.5" ></text>
</g>
<g >
<title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (3 samples, 0.25%)</title><rect x="983.0" y="645" width="2.9" height="15.0" fill="rgb(218,159,13)" rx="2" ry="2" />
<text  x="985.97" y="655.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (10 samples, 0.82%)</title><rect x="163.6" y="277" width="9.7" height="15.0" fill="rgb(225,135,47)" rx="2" ry="2" />
<text  x="166.57" y="287.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (133 samples, 10.96%)</title><rect x="1060.7" y="661" width="129.3" height="15.0" fill="rgb(237,207,34)" rx="2" ry="2" />
<text  x="1063.72" y="671.5" >secondary_startu..</text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.08%)</title><rect x="160.7" y="373" width="0.9" height="15.0" fill="rgb(238,218,53)" rx="2" ry="2" />
<text  x="163.66" y="383.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::len (111 samples, 9.14%)</title><rect x="268.6" y="485" width="107.8" height="15.0" fill="rgb(253,208,26)" rx="2" ry="2" />
<text  x="271.55" y="495.5" >ringbuf::cons..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.08%)</title><rect x="160.7" y="229" width="0.9" height="15.0" fill="rgb(241,186,43)" rx="2" ry="2" />
<text  x="163.66" y="239.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicBool::load (16 samples, 1.32%)</title><rect x="253.0" y="485" width="15.6" height="15.0" fill="rgb(215,85,43)" rx="2" ry="2" />
<text  x="256.00" y="495.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="993.7" y="325" width="1.9" height="15.0" fill="rgb(251,26,19)" rx="2" ry="2" />
<text  x="996.66" y="335.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.08%)</title><rect x="1013.1" y="437" width="1.0" height="15.0" fill="rgb(251,171,39)" rx="2" ry="2" />
<text  x="1016.10" y="447.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_mut (5 samples, 0.41%)</title><rect x="766.2" y="437" width="4.9" height="15.0" fill="rgb(220,166,31)" rx="2" ry="2" />
<text  x="769.21" y="447.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.16%)</title><rect x="763.3" y="405" width="1.9" height="15.0" fill="rgb(253,117,33)" rx="2" ry="2" />
<text  x="766.29" y="415.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.08%)</title><rect x="1156.0" y="549" width="1.0" height="15.0" fill="rgb(252,89,40)" rx="2" ry="2" />
<text  x="1158.98" y="559.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.16%)</title><rect x="993.7" y="181" width="1.9" height="15.0" fill="rgb(245,152,49)" rx="2" ry="2" />
<text  x="996.66" y="191.5" ></text>
</g>
<g >
<title>__switch_to_asm (1 samples, 0.08%)</title><rect x="10.0" y="565" width="1.0" height="15.0" fill="rgb(238,182,10)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (26 samples, 2.14%)</title><rect x="227.7" y="453" width="25.3" height="15.0" fill="rgb(223,103,2)" rx="2" ry="2" />
<text  x="230.73" y="463.5" >&lt;..</text>
</g>
<g >
<title>_start (3 samples, 0.25%)</title><rect x="1009.2" y="661" width="2.9" height="15.0" fill="rgb(233,54,42)" rx="2" ry="2" />
<text  x="1012.21" y="671.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (639 samples, 52.64%)</title><rect x="153.9" y="645" width="621.1" height="15.0" fill="rgb(239,58,34)" rx="2" ry="2" />
<text  x="156.86" y="655.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="957.7" y="165" width="1.0" height="15.0" fill="rgb(241,92,23)" rx="2" ry="2" />
<text  x="960.69" y="175.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="1009.2" y="245" width="2.9" height="15.0" fill="rgb(248,213,8)" rx="2" ry="2" />
<text  x="1012.21" y="255.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 0.08%)</title><rect x="159.7" y="277" width="1.0" height="15.0" fill="rgb(246,98,5)" rx="2" ry="2" />
<text  x="162.69" y="287.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.08%)</title><rect x="1061.7" y="501" width="1.0" height="15.0" fill="rgb(247,123,52)" rx="2" ry="2" />
<text  x="1064.70" y="511.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_ref (1 samples, 0.08%)</title><rect x="375.5" y="437" width="0.9" height="15.0" fill="rgb(229,36,18)" rx="2" ry="2" />
<text  x="378.47" y="447.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (10 samples, 0.82%)</title><rect x="163.6" y="229" width="9.7" height="15.0" fill="rgb(222,172,52)" rx="2" ry="2" />
<text  x="166.57" y="239.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (2 samples, 0.16%)</title><rect x="993.7" y="261" width="1.9" height="15.0" fill="rgb(238,186,38)" rx="2" ry="2" />
<text  x="996.66" y="271.5" ></text>
</g>
<g >
<title>copy_page_to_iter_iovec (7 samples, 0.58%)</title><rect x="165.5" y="197" width="6.8" height="15.0" fill="rgb(206,43,24)" rx="2" ry="2" />
<text  x="168.52" y="207.5" ></text>
</g>
<g >
<title>NaClSelLdrMain (3 samples, 0.25%)</title><rect x="1009.2" y="613" width="2.9" height="15.0" fill="rgb(241,164,51)" rx="2" ry="2" />
<text  x="1012.21" y="623.5" ></text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.25%)</title><rect x="691.4" y="421" width="2.9" height="15.0" fill="rgb(237,170,53)" rx="2" ry="2" />
<text  x="694.37" y="431.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.08%)</title><rect x="1010.2" y="133" width="1.0" height="15.0" fill="rgb(222,5,11)" rx="2" ry="2" />
<text  x="1013.18" y="143.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="956.7" y="357" width="1.0" height="15.0" fill="rgb(252,201,37)" rx="2" ry="2" />
<text  x="959.72" y="367.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.33%)</title><rect x="959.6" y="645" width="3.9" height="15.0" fill="rgb(229,210,27)" rx="2" ry="2" />
<text  x="962.64" y="655.5" ></text>
</g>
<g >
<title>cmd_record (66 samples, 5.44%)</title><rect x="10.0" y="645" width="64.2" height="15.0" fill="rgb(222,183,41)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >cmd_rec..</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.08%)</title><rect x="957.7" y="373" width="1.0" height="15.0" fill="rgb(249,204,50)" rx="2" ry="2" />
<text  x="960.69" y="383.5" ></text>
</g>
<g >
<title>arch_cpu_idle_enter (1 samples, 0.08%)</title><rect x="1060.7" y="597" width="1.0" height="15.0" fill="rgb(234,205,11)" rx="2" ry="2" />
<text  x="1063.72" y="607.5" ></text>
</g>
<g >
<title>rest_init (1 samples, 0.08%)</title><rect x="1189.0" y="581" width="1.0" height="15.0" fill="rgb(243,139,32)" rx="2" ry="2" />
<text  x="1192.03" y="591.5" ></text>
</g>
<g >
<title>dispatcher (3 samples, 0.25%)</title><rect x="157.7" y="581" width="3.0" height="15.0" fill="rgb(234,197,38)" rx="2" ry="2" />
<text  x="160.74" y="591.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (51 samples, 4.20%)</title><rect x="529.0" y="389" width="49.6" height="15.0" fill="rgb(212,98,25)" rx="2" ry="2" />
<text  x="532.04" y="399.5" >core:..</text>
</g>
<g >
<title>intel_pmu_enable_all (64 samples, 5.27%)</title><rect x="11.0" y="309" width="62.2" height="15.0" fill="rgb(221,153,53)" rx="2" ry="2" />
<text  x="13.97" y="319.5" >intel_..</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (2 samples, 0.16%)</title><rect x="1009.2" y="213" width="2.0" height="15.0" fill="rgb(219,221,14)" rx="2" ry="2" />
<text  x="1012.21" y="223.5" ></text>
</g>
<g >
<title>vfs_read (10 samples, 0.82%)</title><rect x="163.6" y="357" width="9.7" height="15.0" fill="rgb(253,198,44)" rx="2" ry="2" />
<text  x="166.57" y="367.5" ></text>
</g>
<g >
<title>lind_exit (1 samples, 0.08%)</title><rect x="957.7" y="597" width="1.0" height="15.0" fill="rgb(226,9,51)" rx="2" ry="2" />
<text  x="960.69" y="607.5" ></text>
</g>
<g >
<title>[anon] (82 samples, 6.75%)</title><rect x="74.2" y="661" width="79.7" height="15.0" fill="rgb(205,221,10)" rx="2" ry="2" />
<text  x="77.15" y="671.5" >[anon]</text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.08%)</title><rect x="956.7" y="437" width="1.0" height="15.0" fill="rgb(209,88,43)" rx="2" ry="2" />
<text  x="959.72" y="447.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (80 samples, 6.59%)</title><rect x="611.7" y="405" width="77.7" height="15.0" fill="rgb(233,26,46)" rx="2" ry="2" />
<text  x="614.66" y="415.5" >&lt;core::o..</text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 1.07%)</title><rect x="74.2" y="645" width="12.6" height="15.0" fill="rgb(206,110,41)" rx="2" ry="2" />
<text  x="77.15" y="655.5" ></text>
</g>
<g >
<title>lind_close (1 samples, 0.08%)</title><rect x="160.7" y="501" width="0.9" height="15.0" fill="rgb(213,7,11)" rx="2" ry="2" />
<text  x="163.66" y="511.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (619 samples, 50.99%)</title><rect x="173.3" y="501" width="601.7" height="15.0" fill="rgb(212,116,30)" rx="2" ry="2" />
<text  x="176.29" y="511.5" >rustposix::interface::pipe::EmulatedPipe::read_from_pipe</text>
</g>
<g >
<title>cpuidle_select (2 samples, 0.16%)</title><rect x="1157.0" y="581" width="1.9" height="15.0" fill="rgb(206,126,26)" rx="2" ry="2" />
<text  x="1159.95" y="591.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.08%)</title><rect x="1156.0" y="533" width="1.0" height="15.0" fill="rgb(213,101,0)" rx="2" ry="2" />
<text  x="1158.98" y="543.5" ></text>
</g>
<g >
<title>rw_verify_area (1 samples, 0.08%)</title><rect x="73.2" y="421" width="1.0" height="15.0" fill="rgb(226,164,13)" rx="2" ry="2" />
<text  x="76.18" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (64 samples, 5.27%)</title><rect x="11.0" y="517" width="62.2" height="15.0" fill="rgb(213,69,33)" rx="2" ry="2" />
<text  x="13.97" y="527.5" >__x64_..</text>
</g>
<g >
<title>zap_pte_range (1 samples, 0.08%)</title><rect x="1013.1" y="405" width="1.0" height="15.0" fill="rgb(236,140,15)" rx="2" ry="2" />
<text  x="1016.10" y="415.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_access (6 samples, 0.49%)</title><rect x="995.6" y="645" width="5.8" height="15.0" fill="rgb(246,10,47)" rx="2" ry="2" />
<text  x="998.60" y="655.5" ></text>
</g>
<g >
<title>record__pushfn (1 samples, 0.08%)</title><rect x="73.2" y="565" width="1.0" height="15.0" fill="rgb(239,98,7)" rx="2" ry="2" />
<text  x="76.18" y="575.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (1 samples, 0.08%)</title><rect x="1189.0" y="533" width="1.0" height="15.0" fill="rgb(239,49,35)" rx="2" ry="2" />
<text  x="1192.03" y="543.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="1012.1" y="661" width="1.0" height="15.0" fill="rgb(242,136,12)" rx="2" ry="2" />
<text  x="1015.13" y="671.5" ></text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.25%)</title><rect x="704.0" y="437" width="2.9" height="15.0" fill="rgb(248,34,17)" rx="2" ry="2" />
<text  x="707.00" y="447.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="157.7" y="389" width="3.0" height="15.0" fill="rgb(209,148,20)" rx="2" ry="2" />
<text  x="160.74" y="399.5" ></text>
</g>
<g >
<title>NaClSelLdrMain (1 samples, 0.08%)</title><rect x="956.7" y="645" width="1.0" height="15.0" fill="rgb(251,148,30)" rx="2" ry="2" />
<text  x="959.72" y="655.5" ></text>
</g>
<g >
<title>do_idle (129 samples, 10.63%)</title><rect x="1060.7" y="613" width="125.4" height="15.0" fill="rgb(232,125,35)" rx="2" ry="2" />
<text  x="1063.72" y="623.5" >do_idle</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="160.7" y="213" width="0.9" height="15.0" fill="rgb(222,164,34)" rx="2" ry="2" />
<text  x="163.66" y="223.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="157.7" y="181" width="1.0" height="15.0" fill="rgb(236,174,2)" rx="2" ry="2" />
<text  x="160.74" y="191.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.08%)</title><rect x="957.7" y="485" width="1.0" height="15.0" fill="rgb(246,210,23)" rx="2" ry="2" />
<text  x="960.69" y="495.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="956.7" y="149" width="1.0" height="15.0" fill="rgb(217,166,53)" rx="2" ry="2" />
<text  x="959.72" y="159.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.08%)</title><rect x="1013.1" y="549" width="1.0" height="15.0" fill="rgb(211,61,7)" rx="2" ry="2" />
<text  x="1016.10" y="559.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="160.7" y="261" width="0.9" height="15.0" fill="rgb(214,167,7)" rx="2" ry="2" />
<text  x="163.66" y="271.5" ></text>
</g>
<g >
<title>NaClRefCountUnref (1 samples, 0.08%)</title><rect x="160.7" y="549" width="0.9" height="15.0" fill="rgb(242,108,2)" rx="2" ry="2" />
<text  x="163.66" y="559.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.33%)</title><rect x="985.9" y="645" width="3.9" height="15.0" fill="rgb(250,35,14)" rx="2" ry="2" />
<text  x="988.88" y="655.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (1 samples, 0.08%)</title><rect x="1189.0" y="485" width="1.0" height="15.0" fill="rgb(254,228,13)" rx="2" ry="2" />
<text  x="1192.03" y="495.5" ></text>
</g>
<g >
<title>vfs_iter_read (10 samples, 0.82%)</title><rect x="163.6" y="309" width="9.7" height="15.0" fill="rgb(245,159,42)" rx="2" ry="2" />
<text  x="166.57" y="319.5" ></text>
</g>
<g >
<title>NaClSysExit (4 samples, 0.33%)</title><rect x="156.8" y="613" width="3.9" height="15.0" fill="rgb(236,44,42)" rx="2" ry="2" />
<text  x="159.77" y="623.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (58 samples, 4.78%)</title><rect x="633.0" y="389" width="56.4" height="15.0" fill="rgb(225,176,25)" rx="2" ry="2" />
<text  x="636.05" y="399.5" >&lt;core..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.08%)</title><rect x="1013.1" y="661" width="1.0" height="15.0" fill="rgb(252,128,44)" rx="2" ry="2" />
<text  x="1016.10" y="671.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="957.7" y="309" width="1.0" height="15.0" fill="rgb(251,83,46)" rx="2" ry="2" />
<text  x="960.69" y="319.5" ></text>
</g>
<g >
<title>NaClCopyInFromUserAndDropLock (1 samples, 0.08%)</title><rect x="162.6" y="613" width="1.0" height="15.0" fill="rgb(216,179,40)" rx="2" ry="2" />
<text  x="165.60" y="623.5" ></text>
</g>
<g >
<title>_perf_ioctl (64 samples, 5.27%)</title><rect x="11.0" y="485" width="62.2" height="15.0" fill="rgb(241,50,45)" rx="2" ry="2" />
<text  x="13.97" y="495.5" >_perf_..</text>
</g>
<g >
<title>NaClDescIoDescDtor (1 samples, 0.08%)</title><rect x="160.7" y="533" width="0.9" height="15.0" fill="rgb(221,100,43)" rx="2" ry="2" />
<text  x="163.66" y="543.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (1 samples, 0.08%)</title><rect x="73.2" y="597" width="1.0" height="15.0" fill="rgb(252,175,51)" rx="2" ry="2" />
<text  x="76.18" y="607.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (3 samples, 0.25%)</title><rect x="157.7" y="517" width="3.0" height="15.0" fill="rgb(217,181,48)" rx="2" ry="2" />
<text  x="160.74" y="527.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.08%)</title><rect x="956.7" y="325" width="1.0" height="15.0" fill="rgb(217,168,53)" rx="2" ry="2" />
<text  x="959.72" y="335.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.25%)</title><rect x="277.3" y="453" width="2.9" height="15.0" fill="rgb(217,162,14)" rx="2" ry="2" />
<text  x="280.30" y="463.5" ></text>
</g>
<g >
<title>smp_call_function_single_async (5 samples, 0.41%)</title><rect x="1180.3" y="501" width="4.8" height="15.0" fill="rgb(222,107,9)" rx="2" ry="2" />
<text  x="1183.28" y="511.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.08%)</title><rect x="160.7" y="437" width="0.9" height="15.0" fill="rgb(210,146,17)" rx="2" ry="2" />
<text  x="163.66" y="447.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="956.7" y="229" width="1.0" height="15.0" fill="rgb(222,89,3)" rx="2" ry="2" />
<text  x="959.72" y="239.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.08%)</title><rect x="956.7" y="181" width="1.0" height="15.0" fill="rgb(249,204,24)" rx="2" ry="2" />
<text  x="959.72" y="191.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (3 samples, 0.25%)</title><rect x="1009.2" y="501" width="2.9" height="15.0" fill="rgb(216,224,1)" rx="2" ry="2" />
<text  x="1012.21" y="511.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.33%)</title><rect x="952.8" y="645" width="3.9" height="15.0" fill="rgb(208,25,23)" rx="2" ry="2" />
<text  x="955.83" y="655.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (67 samples, 5.52%)</title><rect x="513.5" y="405" width="65.1" height="15.0" fill="rgb(237,152,20)" rx="2" ry="2" />
<text  x="516.49" y="415.5" >alloc::..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.08%)</title><rect x="963.5" y="645" width="1.0" height="15.0" fill="rgb(231,141,43)" rx="2" ry="2" />
<text  x="966.53" y="655.5" ></text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="948.0" y="645" width="0.9" height="15.0" fill="rgb(216,90,3)" rx="2" ry="2" />
<text  x="950.97" y="655.5" ></text>
</g>
<g >
<title>CopyCodeSafelyInitial (1 samples, 0.08%)</title><rect x="153.9" y="581" width="0.9" height="15.0" fill="rgb(213,40,11)" rx="2" ry="2" />
<text  x="156.86" y="591.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (3 samples, 0.25%)</title><rect x="157.7" y="469" width="3.0" height="15.0" fill="rgb(225,207,11)" rx="2" ry="2" />
<text  x="160.74" y="479.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="160.7" y="309" width="0.9" height="15.0" fill="rgb(254,123,54)" rx="2" ry="2" />
<text  x="163.66" y="319.5" ></text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts_mut (29 samples, 2.39%)</title><rect x="661.2" y="373" width="28.2" height="15.0" fill="rgb(244,56,10)" rx="2" ry="2" />
<text  x="664.24" y="383.5" >c..</text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.16%)</title><rect x="689.4" y="437" width="2.0" height="15.0" fill="rgb(226,183,53)" rx="2" ry="2" />
<text  x="692.42" y="447.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (3 samples, 0.25%)</title><rect x="157.7" y="485" width="3.0" height="15.0" fill="rgb(215,77,48)" rx="2" ry="2" />
<text  x="160.74" y="495.5" ></text>
</g>
<g >
<title>_find_next_bit.constprop.0 (1 samples, 0.08%)</title><rect x="1179.3" y="485" width="1.0" height="15.0" fill="rgb(210,28,44)" rx="2" ry="2" />
<text  x="1182.31" y="495.5" ></text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="92.6" y="645" width="1.0" height="15.0" fill="rgb(223,31,51)" rx="2" ry="2" />
<text  x="95.62" y="655.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::end_object_value (1 samples, 0.08%)</title><rect x="160.7" y="37" width="0.9" height="15.0" fill="rgb(215,58,23)" rx="2" ry="2" />
<text  x="163.66" y="47.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::close_syscall (1 samples, 0.08%)</title><rect x="160.7" y="453" width="0.9" height="15.0" fill="rgb(229,186,14)" rx="2" ry="2" />
<text  x="163.66" y="463.5" ></text>
</g>
<g >
<title>llist_reverse_order (1 samples, 0.08%)</title><rect x="1160.8" y="581" width="1.0" height="15.0" fill="rgb(230,158,41)" rx="2" ry="2" />
<text  x="1163.84" y="591.5" ></text>
</g>
<g >
<title>main (3 samples, 0.25%)</title><rect x="1009.2" y="629" width="2.9" height="15.0" fill="rgb(213,51,9)" rx="2" ry="2" />
<text  x="1012.21" y="639.5" ></text>
</g>
<g >
<title>__libc_read (10 samples, 0.82%)</title><rect x="163.6" y="437" width="9.7" height="15.0" fill="rgb(244,123,43)" rx="2" ry="2" />
<text  x="166.57" y="447.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (1 samples, 0.08%)</title><rect x="160.7" y="101" width="0.9" height="15.0" fill="rgb(247,103,52)" rx="2" ry="2" />
<text  x="163.66" y="111.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.08%)</title><rect x="1013.1" y="629" width="1.0" height="15.0" fill="rgb(236,60,20)" rx="2" ry="2" />
<text  x="1016.10" y="639.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_mut (1 samples, 0.08%)</title><rect x="1005.3" y="645" width="1.0" height="15.0" fill="rgb(253,173,25)" rx="2" ry="2" />
<text  x="1008.32" y="655.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (2 samples, 0.16%)</title><rect x="157.7" y="309" width="2.0" height="15.0" fill="rgb(245,186,22)" rx="2" ry="2" />
<text  x="160.74" y="319.5" ></text>
</g>
<g >
<title>lindrustfinalize (3 samples, 0.25%)</title><rect x="1009.2" y="597" width="2.9" height="15.0" fill="rgb(240,208,16)" rx="2" ry="2" />
<text  x="1012.21" y="607.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::len (99 samples, 8.15%)</title><rect x="280.2" y="469" width="96.2" height="15.0" fill="rgb(243,31,25)" rx="2" ry="2" />
<text  x="283.21" y="479.5" >ringbuf::ri..</text>
</g>
<g >
<title>rustposix::interface::file::EmulatedFile::readat (10 samples, 0.82%)</title><rect x="163.6" y="501" width="9.7" height="15.0" fill="rgb(233,179,33)" rx="2" ry="2" />
<text  x="166.57" y="511.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.08%)</title><rect x="1013.1" y="485" width="1.0" height="15.0" fill="rgb(224,193,2)" rx="2" ry="2" />
<text  x="1016.10" y="495.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.08%)</title><rect x="957.7" y="581" width="1.0" height="15.0" fill="rgb(217,31,42)" rx="2" ry="2" />
<text  x="960.69" y="591.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.16%)</title><rect x="763.3" y="421" width="1.9" height="15.0" fill="rgb(211,143,3)" rx="2" ry="2" />
<text  x="766.29" y="431.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (3 samples, 0.25%)</title><rect x="1009.2" y="437" width="2.9" height="15.0" fill="rgb(252,186,17)" rx="2" ry="2" />
<text  x="1012.21" y="447.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="956.7" y="261" width="1.0" height="15.0" fill="rgb(236,165,2)" rx="2" ry="2" />
<text  x="959.72" y="271.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.08%)</title><rect x="956.7" y="453" width="1.0" height="15.0" fill="rgb(213,149,9)" rx="2" ry="2" />
<text  x="959.72" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (64 samples, 5.27%)</title><rect x="11.0" y="533" width="62.2" height="15.0" fill="rgb(231,139,6)" rx="2" ry="2" />
<text  x="13.97" y="543.5" >do_sys..</text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.33%)</title><rect x="237.4" y="437" width="3.9" height="15.0" fill="rgb(221,34,0)" rx="2" ry="2" />
<text  x="240.45" y="447.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.08%)</title><rect x="160.7" y="469" width="0.9" height="15.0" fill="rgb(239,201,41)" rx="2" ry="2" />
<text  x="163.66" y="479.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.25%)</title><rect x="1009.2" y="469" width="2.9" height="15.0" fill="rgb(213,177,8)" rx="2" ry="2" />
<text  x="1012.21" y="479.5" ></text>
</g>
<g >
<title>generic_file_buffered_read_get_pages (1 samples, 0.08%)</title><rect x="172.3" y="213" width="1.0" height="15.0" fill="rgb(234,105,15)" rx="2" ry="2" />
<text  x="175.32" y="223.5" ></text>
</g>
<g >
<title>kthread (2 samples, 0.16%)</title><rect x="1058.8" y="645" width="1.9" height="15.0" fill="rgb(234,93,32)" rx="2" ry="2" />
<text  x="1061.78" y="655.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="957.7" y="181" width="1.0" height="15.0" fill="rgb(220,38,3)" rx="2" ry="2" />
<text  x="960.69" y="191.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (41 samples, 3.38%)</title><rect x="453.2" y="437" width="39.9" height="15.0" fill="rgb(232,77,29)" rx="2" ry="2" />
<text  x="456.23" y="447.5" >&lt;al..</text>
</g>
<g >
<title>core::cmp::Ord::min (18 samples, 1.48%)</title><rect x="201.5" y="469" width="17.5" height="15.0" fill="rgb(210,50,31)" rx="2" ry="2" />
<text  x="204.48" y="479.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="159.7" y="325" width="1.0" height="15.0" fill="rgb(235,58,34)" rx="2" ry="2" />
<text  x="162.69" y="335.5" ></text>
</g>
<g >
<title>start_kernel (1 samples, 0.08%)</title><rect x="1189.0" y="613" width="1.0" height="15.0" fill="rgb(248,149,14)" rx="2" ry="2" />
<text  x="1192.03" y="623.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="160.7" y="357" width="0.9" height="15.0" fill="rgb(242,202,8)" rx="2" ry="2" />
<text  x="163.66" y="367.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.08%)</title><rect x="957.7" y="533" width="1.0" height="15.0" fill="rgb(225,18,26)" rx="2" ry="2" />
<text  x="960.69" y="543.5" ></text>
</g>
<g >
<title>[librustposix.so] (1 samples, 0.08%)</title><rect x="958.7" y="645" width="0.9" height="15.0" fill="rgb(246,80,23)" rx="2" ry="2" />
<text  x="961.67" y="655.5" ></text>
</g>
<g >
<title>cpu_startup_entry (132 samples, 10.87%)</title><rect x="1060.7" y="629" width="128.3" height="15.0" fill="rgb(254,76,31)" rx="2" ry="2" />
<text  x="1063.72" y="639.5" >cpu_startup_entry</text>
</g>
<g >
<title>NaClDescUnref (1 samples, 0.08%)</title><rect x="956.7" y="613" width="1.0" height="15.0" fill="rgb(252,69,32)" rx="2" ry="2" />
<text  x="959.72" y="623.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.08%)</title><rect x="1061.7" y="469" width="1.0" height="15.0" fill="rgb(227,216,17)" rx="2" ry="2" />
<text  x="1064.70" y="479.5" ></text>
</g>
<g >
<title>remote_function (64 samples, 5.27%)</title><rect x="11.0" y="389" width="62.2" height="15.0" fill="rgb(248,195,10)" rx="2" ry="2" />
<text  x="13.97" y="399.5" >remote..</text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (5 samples, 0.41%)</title><rect x="488.2" y="389" width="4.9" height="15.0" fill="rgb(232,89,34)" rx="2" ry="2" />
<text  x="491.22" y="399.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.08%)</title><rect x="161.6" y="389" width="1.0" height="15.0" fill="rgb(248,216,38)" rx="2" ry="2" />
<text  x="164.63" y="399.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.08%)</title><rect x="956.7" y="293" width="1.0" height="15.0" fill="rgb(223,175,22)" rx="2" ry="2" />
<text  x="959.72" y="303.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.08%)</title><rect x="161.6" y="485" width="1.0" height="15.0" fill="rgb(220,215,37)" rx="2" ry="2" />
<text  x="164.63" y="495.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (2 samples, 0.16%)</title><rect x="157.7" y="341" width="2.0" height="15.0" fill="rgb(216,63,34)" rx="2" ry="2" />
<text  x="160.74" y="351.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="957.7" y="261" width="1.0" height="15.0" fill="rgb(243,180,45)" rx="2" ry="2" />
<text  x="960.69" y="271.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="957.7" y="149" width="1.0" height="15.0" fill="rgb(227,196,6)" rx="2" ry="2" />
<text  x="960.69" y="159.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="157.7" y="197" width="1.0" height="15.0" fill="rgb(220,206,1)" rx="2" ry="2" />
<text  x="160.74" y="207.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.08%)</title><rect x="161.6" y="501" width="1.0" height="15.0" fill="rgb(247,216,29)" rx="2" ry="2" />
<text  x="164.63" y="511.5" ></text>
</g>
<g >
<title>core::cmp::min (19 samples, 1.57%)</title><rect x="200.5" y="485" width="18.5" height="15.0" fill="rgb(233,43,52)" rx="2" ry="2" />
<text  x="203.51" y="495.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (3 samples, 0.25%)</title><rect x="1009.2" y="277" width="2.9" height="15.0" fill="rgb(244,92,4)" rx="2" ry="2" />
<text  x="1012.21" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.08%)</title><rect x="1061.7" y="549" width="1.0" height="15.0" fill="rgb(205,24,19)" rx="2" ry="2" />
<text  x="1064.70" y="559.5" ></text>
</g>
<g >
<title>__GI___sched_setaffinity_new (1 samples, 0.08%)</title><rect x="10.0" y="581" width="1.0" height="15.0" fill="rgb(216,123,35)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (629 samples, 51.81%)</title><rect x="163.6" y="533" width="611.4" height="15.0" fill="rgb(250,62,35)" rx="2" ry="2" />
<text  x="166.57" y="543.5" >rustposix::safeposix::dispatcher::dispatcher::{{closure}}</text>
</g>
<g >
<title>find_get_pages_contig (1 samples, 0.08%)</title><rect x="172.3" y="197" width="1.0" height="15.0" fill="rgb(232,134,1)" rx="2" ry="2" />
<text  x="175.32" y="207.5" ></text>
</g>
<g >
<title>NaClHostDescClose (1 samples, 0.08%)</title><rect x="956.7" y="565" width="1.0" height="15.0" fill="rgb(205,163,43)" rx="2" ry="2" />
<text  x="959.72" y="575.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (3 samples, 0.25%)</title><rect x="1009.2" y="565" width="2.9" height="15.0" fill="rgb(220,134,37)" rx="2" ry="2" />
<text  x="1012.21" y="575.5" ></text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (10 samples, 0.82%)</title><rect x="163.6" y="485" width="9.7" height="15.0" fill="rgb(226,92,17)" rx="2" ry="2" />
<text  x="166.57" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.08%)</title><rect x="73.2" y="469" width="1.0" height="15.0" fill="rgb(250,142,38)" rx="2" ry="2" />
<text  x="76.18" y="479.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (64 samples, 5.27%)</title><rect x="11.0" y="469" width="62.2" height="15.0" fill="rgb(229,177,54)" rx="2" ry="2" />
<text  x="13.97" y="479.5" >perf_e..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.08%)</title><rect x="155.8" y="517" width="1.0" height="15.0" fill="rgb(238,32,33)" rx="2" ry="2" />
<text  x="158.80" y="527.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="107.2" y="645" width="1.9" height="15.0" fill="rgb(217,135,44)" rx="2" ry="2" />
<text  x="110.20" y="655.5" ></text>
</g>
<g >
<title>ValidateChunkAMD64 (1 samples, 0.08%)</title><rect x="154.8" y="549" width="1.0" height="15.0" fill="rgb(250,114,11)" rx="2" ry="2" />
<text  x="157.83" y="559.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.08%)</title><rect x="994.6" y="101" width="1.0" height="15.0" fill="rgb(235,108,16)" rx="2" ry="2" />
<text  x="997.63" y="111.5" ></text>
</g>
<g >
<title>PageHuge (1 samples, 0.08%)</title><rect x="155.8" y="453" width="1.0" height="15.0" fill="rgb(212,125,23)" rx="2" ry="2" />
<text  x="158.80" y="463.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.16%)</title><rect x="993.7" y="389" width="1.9" height="15.0" fill="rgb(223,118,46)" rx="2" ry="2" />
<text  x="996.66" y="399.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="160.7" y="165" width="0.9" height="15.0" fill="rgb(222,58,26)" rx="2" ry="2" />
<text  x="163.66" y="175.5" ></text>
</g>
<g >
<title>_nohz_idle_balance (3 samples, 0.25%)</title><rect x="1174.4" y="517" width="3.0" height="15.0" fill="rgb(245,124,50)" rx="2" ry="2" />
<text  x="1177.45" y="527.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (6 samples, 0.49%)</title><rect x="166.5" y="181" width="5.8" height="15.0" fill="rgb(246,60,0)" rx="2" ry="2" />
<text  x="169.49" y="191.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.08%)</title><rect x="160.7" y="421" width="0.9" height="15.0" fill="rgb(224,218,2)" rx="2" ry="2" />
<text  x="163.66" y="431.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.08%)</title><rect x="956.7" y="421" width="1.0" height="15.0" fill="rgb(211,54,37)" rx="2" ry="2" />
<text  x="959.72" y="431.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy::{{closure}} (2 samples, 0.16%)</title><rect x="1001.4" y="645" width="2.0" height="15.0" fill="rgb(250,4,16)" rx="2" ry="2" />
<text  x="1004.43" y="655.5" ></text>
</g>
<g >
<title>NaClChildNapCtor (1 samples, 0.08%)</title><rect x="160.7" y="597" width="0.9" height="15.0" fill="rgb(228,225,28)" rx="2" ry="2" />
<text  x="163.66" y="607.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="956.7" y="309" width="1.0" height="15.0" fill="rgb(248,108,42)" rx="2" ry="2" />
<text  x="959.72" y="319.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (2 samples, 0.16%)</title><rect x="157.7" y="373" width="2.0" height="15.0" fill="rgb(212,27,20)" rx="2" ry="2" />
<text  x="160.74" y="383.5" ></text>
</g>
<g >
<title>NaClHostDescRead (629 samples, 51.81%)</title><rect x="163.6" y="581" width="611.4" height="15.0" fill="rgb(219,85,30)" rx="2" ry="2" />
<text  x="166.57" y="591.5" >NaClHostDescRead</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="957.7" y="213" width="1.0" height="15.0" fill="rgb(207,171,13)" rx="2" ry="2" />
<text  x="960.69" y="223.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.08%)</title><rect x="159.7" y="357" width="1.0" height="15.0" fill="rgb(222,66,39)" rx="2" ry="2" />
<text  x="162.69" y="367.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.08%)</title><rect x="1157.9" y="485" width="1.0" height="15.0" fill="rgb(242,207,4)" rx="2" ry="2" />
<text  x="1160.92" y="495.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="957.7" y="453" width="1.0" height="15.0" fill="rgb(250,22,11)" rx="2" ry="2" />
<text  x="960.69" y="463.5" ></text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts_mut (12 samples, 0.99%)</title><rect x="241.3" y="437" width="11.7" height="15.0" fill="rgb(235,25,18)" rx="2" ry="2" />
<text  x="244.33" y="447.5" ></text>
</g>
<g >
<title>cpuidle_enter (98 samples, 8.07%)</title><rect x="1061.7" y="581" width="95.3" height="15.0" fill="rgb(212,98,37)" rx="2" ry="2" />
<text  x="1064.70" y="591.5" >cpuidle_enter</text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (8 samples, 0.66%)</title><rect x="485.3" y="405" width="7.8" height="15.0" fill="rgb(248,149,19)" rx="2" ry="2" />
<text  x="488.30" y="415.5" ></text>
</g>
<g >
<title>apparmor_file_permission (1 samples, 0.08%)</title><rect x="73.2" y="389" width="1.0" height="15.0" fill="rgb(247,73,44)" rx="2" ry="2" />
<text  x="76.18" y="399.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="160.7" y="325" width="0.9" height="15.0" fill="rgb(224,73,54)" rx="2" ry="2" />
<text  x="163.66" y="335.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="1009.2" y="325" width="2.9" height="15.0" fill="rgb(222,202,40)" rx="2" ry="2" />
<text  x="1012.21" y="335.5" ></text>
</g>
<g >
<title>hrtimer_wakeup (1 samples, 0.08%)</title><rect x="1061.7" y="437" width="1.0" height="15.0" fill="rgb(240,117,46)" rx="2" ry="2" />
<text  x="1064.70" y="447.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (1 samples, 0.08%)</title><rect x="989.8" y="645" width="0.9" height="15.0" fill="rgb(211,151,4)" rx="2" ry="2" />
<text  x="992.77" y="655.5" ></text>
</g>
<g >
<title>[librustposix.so] (2 samples, 0.16%)</title><rect x="757.5" y="405" width="1.9" height="15.0" fill="rgb(242,115,33)" rx="2" ry="2" />
<text  x="760.46" y="415.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="160.7" y="53" width="0.9" height="15.0" fill="rgb(239,108,23)" rx="2" ry="2" />
<text  x="163.66" y="63.5" ></text>
</g>
<g >
<title>do_idle (1 samples, 0.08%)</title><rect x="1189.0" y="549" width="1.0" height="15.0" fill="rgb(210,76,9)" rx="2" ry="2" />
<text  x="1192.03" y="559.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.08%)</title><rect x="957.7" y="293" width="1.0" height="15.0" fill="rgb(220,208,32)" rx="2" ry="2" />
<text  x="960.69" y="303.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="956.7" y="133" width="1.0" height="15.0" fill="rgb(212,70,44)" rx="2" ry="2" />
<text  x="959.72" y="143.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (10 samples, 0.82%)</title><rect x="163.6" y="453" width="9.7" height="15.0" fill="rgb(211,218,39)" rx="2" ry="2" />
<text  x="166.57" y="463.5" ></text>
</g>
<g >
<title>NaClCopyExecutionContext (1 samples, 0.08%)</title><rect x="161.6" y="549" width="1.0" height="15.0" fill="rgb(208,132,50)" rx="2" ry="2" />
<text  x="164.63" y="559.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.08%)</title><rect x="159.7" y="341" width="1.0" height="15.0" fill="rgb(230,78,27)" rx="2" ry="2" />
<text  x="162.69" y="351.5" ></text>
</g>
<g >
<title>llist_add_batch (3 samples, 0.25%)</title><rect x="1182.2" y="485" width="2.9" height="15.0" fill="rgb(237,83,11)" rx="2" ry="2" />
<text  x="1185.22" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.16%)</title><rect x="93.6" y="645" width="1.9" height="15.0" fill="rgb(246,118,30)" rx="2" ry="2" />
<text  x="96.59" y="655.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (3 samples, 0.25%)</title><rect x="1009.2" y="421" width="2.9" height="15.0" fill="rgb(209,20,18)" rx="2" ry="2" />
<text  x="1012.21" y="431.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="160.7" y="181" width="0.9" height="15.0" fill="rgb(252,136,35)" rx="2" ry="2" />
<text  x="163.66" y="191.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="1009.2" y="181" width="1.0" height="15.0" fill="rgb(205,221,6)" rx="2" ry="2" />
<text  x="1012.21" y="191.5" ></text>
</g>
<g >
<title>event_function (64 samples, 5.27%)</title><rect x="11.0" y="373" width="62.2" height="15.0" fill="rgb(237,101,5)" rx="2" ry="2" />
<text  x="13.97" y="383.5" >event_..</text>
</g>
<g >
<title>clear_page_erms (1 samples, 0.08%)</title><rect x="161.6" y="357" width="1.0" height="15.0" fill="rgb(238,109,3)" rx="2" ry="2" />
<text  x="164.63" y="367.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::begin_object_key (1 samples, 0.08%)</title><rect x="1010.2" y="197" width="1.0" height="15.0" fill="rgb(236,190,42)" rx="2" ry="2" />
<text  x="1013.18" y="207.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.08%)</title><rect x="160.7" y="133" width="0.9" height="15.0" fill="rgb(227,20,18)" rx="2" ry="2" />
<text  x="163.66" y="143.5" ></text>
</g>
<g >
<title>[unknown] (66 samples, 5.44%)</title><rect x="10.0" y="661" width="64.2" height="15.0" fill="rgb(251,184,8)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >[unknown]</text>
</g>
<g >
<title>wake_up_process (1 samples, 0.08%)</title><rect x="1061.7" y="421" width="1.0" height="15.0" fill="rgb(221,109,3)" rx="2" ry="2" />
<text  x="1064.70" y="431.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (10 samples, 0.82%)</title><rect x="753.6" y="421" width="9.7" height="15.0" fill="rgb(253,80,22)" rx="2" ry="2" />
<text  x="756.57" y="431.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="1010.2" y="117" width="1.0" height="15.0" fill="rgb(240,143,38)" rx="2" ry="2" />
<text  x="1013.18" y="127.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="993.7" y="469" width="1.9" height="15.0" fill="rgb(251,102,14)" rx="2" ry="2" />
<text  x="996.66" y="479.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (2 samples, 0.16%)</title><rect x="993.7" y="293" width="1.9" height="15.0" fill="rgb(224,191,54)" rx="2" ry="2" />
<text  x="996.66" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.08%)</title><rect x="155.8" y="533" width="1.0" height="15.0" fill="rgb(246,121,39)" rx="2" ry="2" />
<text  x="158.80" y="543.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.25%)</title><rect x="86.8" y="645" width="2.9" height="15.0" fill="rgb(214,223,23)" rx="2" ry="2" />
<text  x="89.79" y="655.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (98 samples, 8.07%)</title><rect x="1061.7" y="565" width="95.3" height="15.0" fill="rgb(216,118,4)" rx="2" ry="2" />
<text  x="1064.70" y="575.5" >cpuidle_ent..</text>
</g>
<g >
<title>NaClForkThreadContextSetup (1 samples, 0.08%)</title><rect x="161.6" y="565" width="1.0" height="15.0" fill="rgb(235,41,23)" rx="2" ry="2" />
<text  x="164.63" y="575.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::capacity (2 samples, 0.16%)</title><rect x="1003.4" y="645" width="1.9" height="15.0" fill="rgb(249,93,49)" rx="2" ry="2" />
<text  x="1006.38" y="655.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.08%)</title><rect x="73.2" y="453" width="1.0" height="15.0" fill="rgb(223,54,11)" rx="2" ry="2" />
<text  x="76.18" y="463.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="159.7" y="309" width="1.0" height="15.0" fill="rgb(234,228,9)" rx="2" ry="2" />
<text  x="162.69" y="319.5" ></text>
</g>
<g >
<title>arch_call_rest_init (1 samples, 0.08%)</title><rect x="1189.0" y="597" width="1.0" height="15.0" fill="rgb(215,87,42)" rx="2" ry="2" />
<text  x="1192.03" y="607.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.08%)</title><rect x="1013.1" y="469" width="1.0" height="15.0" fill="rgb(253,171,21)" rx="2" ry="2" />
<text  x="1016.10" y="479.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="956.7" y="341" width="1.0" height="15.0" fill="rgb(215,57,28)" rx="2" ry="2" />
<text  x="959.72" y="351.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.08%)</title><rect x="1061.7" y="533" width="1.0" height="15.0" fill="rgb(230,135,10)" rx="2" ry="2" />
<text  x="1064.70" y="543.5" ></text>
</g>
<g >
<title>core::slice::raw::from_raw_parts_mut (19 samples, 1.57%)</title><rect x="578.6" y="405" width="18.5" height="15.0" fill="rgb(214,129,17)" rx="2" ry="2" />
<text  x="581.62" y="415.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (4 samples, 0.33%)</title><rect x="948.9" y="645" width="3.9" height="15.0" fill="rgb(244,10,51)" rx="2" ry="2" />
<text  x="951.95" y="655.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.08%)</title><rect x="1011.2" y="197" width="0.9" height="15.0" fill="rgb(213,124,38)" rx="2" ry="2" />
<text  x="1014.15" y="207.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (3 samples, 0.25%)</title><rect x="1009.2" y="357" width="2.9" height="15.0" fill="rgb(242,198,40)" rx="2" ry="2" />
<text  x="1012.21" y="367.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="993.7" y="421" width="1.9" height="15.0" fill="rgb(225,210,14)" rx="2" ry="2" />
<text  x="996.66" y="431.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.08%)</title><rect x="1013.1" y="357" width="1.0" height="15.0" fill="rgb(219,99,27)" rx="2" ry="2" />
<text  x="1016.10" y="367.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="993.7" y="309" width="1.9" height="15.0" fill="rgb(254,122,45)" rx="2" ry="2" />
<text  x="996.66" y="319.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (2 samples, 0.16%)</title><rect x="993.7" y="213" width="1.9" height="15.0" fill="rgb(209,105,38)" rx="2" ry="2" />
<text  x="996.66" y="223.5" ></text>
</g>
<g >
<title>dispatcher (2 samples, 0.16%)</title><rect x="993.7" y="645" width="1.9" height="15.0" fill="rgb(208,221,43)" rx="2" ry="2" />
<text  x="996.66" y="655.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::capacity (5 samples, 0.41%)</title><rect x="141.2" y="645" width="4.9" height="15.0" fill="rgb(254,119,45)" rx="2" ry="2" />
<text  x="144.22" y="655.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="994.6" y="37" width="1.0" height="15.0" fill="rgb(226,165,12)" rx="2" ry="2" />
<text  x="997.63" y="47.5" ></text>
</g>
<g >
<title>new_sync_read (10 samples, 0.82%)</title><rect x="163.6" y="341" width="9.7" height="15.0" fill="rgb(211,224,26)" rx="2" ry="2" />
<text  x="166.57" y="351.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.08%)</title><rect x="1013.1" y="597" width="1.0" height="15.0" fill="rgb(237,115,25)" rx="2" ry="2" />
<text  x="1016.10" y="607.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.08%)</title><rect x="1013.1" y="533" width="1.0" height="15.0" fill="rgb(228,145,48)" rx="2" ry="2" />
<text  x="1016.10" y="543.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.08%)</title><rect x="1059.8" y="613" width="0.9" height="15.0" fill="rgb(245,130,1)" rx="2" ry="2" />
<text  x="1062.75" y="623.5" ></text>
</g>
<g >
<title>ksys_read (10 samples, 0.82%)</title><rect x="163.6" y="373" width="9.7" height="15.0" fill="rgb(241,192,48)" rx="2" ry="2" />
<text  x="166.57" y="383.5" ></text>
</g>
<g >
<title>kick_ilb (8 samples, 0.66%)</title><rect x="1177.4" y="517" width="7.7" height="15.0" fill="rgb(224,50,9)" rx="2" ry="2" />
<text  x="1180.36" y="527.5" ></text>
</g>
<g >
<title>native_write_msr (64 samples, 5.27%)</title><rect x="11.0" y="293" width="62.2" height="15.0" fill="rgb(244,33,47)" rx="2" ry="2" />
<text  x="13.97" y="303.5" >native..</text>
</g>
<g >
<title>core::sync::atomic::atomic_load (3 samples, 0.25%)</title><rect x="990.7" y="645" width="3.0" height="15.0" fill="rgb(212,217,45)" rx="2" ry="2" />
<text  x="993.74" y="655.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (2 samples, 0.16%)</title><rect x="993.7" y="565" width="1.9" height="15.0" fill="rgb(250,149,10)" rx="2" ry="2" />
<text  x="996.66" y="575.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="157.7" y="213" width="1.0" height="15.0" fill="rgb(236,154,30)" rx="2" ry="2" />
<text  x="160.74" y="223.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.08%)</title><rect x="161.6" y="453" width="1.0" height="15.0" fill="rgb(229,161,46)" rx="2" ry="2" />
<text  x="164.63" y="463.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="157.7" y="421" width="3.0" height="15.0" fill="rgb(219,52,33)" rx="2" ry="2" />
<text  x="160.74" y="431.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str_contents (1 samples, 0.08%)</title><rect x="1009.2" y="133" width="1.0" height="15.0" fill="rgb(238,211,1)" rx="2" ry="2" />
<text  x="1012.21" y="143.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.25%)</title><rect x="1009.2" y="341" width="2.9" height="15.0" fill="rgb(243,64,21)" rx="2" ry="2" />
<text  x="1012.21" y="351.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (2 samples, 0.16%)</title><rect x="993.7" y="597" width="1.9" height="15.0" fill="rgb(212,21,36)" rx="2" ry="2" />
<text  x="996.66" y="607.5" ></text>
</g>
<g >
<title>__evlist__enable (65 samples, 5.35%)</title><rect x="10.0" y="613" width="63.2" height="15.0" fill="rgb(221,145,39)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >__evli..</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="160.7" y="117" width="0.9" height="15.0" fill="rgb(249,116,17)" rx="2" ry="2" />
<text  x="163.66" y="127.5" ></text>
</g>
<g >
<title>NaClSysExit (1 samples, 0.08%)</title><rect x="957.7" y="613" width="1.0" height="15.0" fill="rgb(227,99,22)" rx="2" ry="2" />
<text  x="960.69" y="623.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (2 samples, 0.16%)</title><rect x="993.7" y="613" width="1.9" height="15.0" fill="rgb(218,133,33)" rx="2" ry="2" />
<text  x="996.66" y="623.5" ></text>
</g>
<g >
<title>flush_smp_call_function_from_idle (3 samples, 0.25%)</title><rect x="1186.1" y="613" width="2.9" height="15.0" fill="rgb(220,120,4)" rx="2" ry="2" />
<text  x="1189.11" y="623.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (410 samples, 33.77%)</title><rect x="376.4" y="485" width="398.6" height="15.0" fill="rgb(239,89,29)" rx="2" ry="2" />
<text  x="379.44" y="495.5" >ringbuf::consumer::Consumer&lt;T&gt;::pop_slice</text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (6 samples, 0.49%)</title><rect x="111.1" y="645" width="5.8" height="15.0" fill="rgb(214,194,19)" rx="2" ry="2" />
<text  x="114.09" y="655.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::as_mut_ptr (3 samples, 0.25%)</title><rect x="124.7" y="645" width="2.9" height="15.0" fill="rgb(235,108,1)" rx="2" ry="2" />
<text  x="127.70" y="655.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (5 samples, 0.41%)</title><rect x="134.4" y="645" width="4.9" height="15.0" fill="rgb(223,192,35)" rx="2" ry="2" />
<text  x="137.42" y="655.5" ></text>
</g>
<g >
<title>core::str::converts::from_utf8_unchecked (1 samples, 0.08%)</title><rect x="1011.2" y="117" width="0.9" height="15.0" fill="rgb(218,44,23)" rx="2" ry="2" />
<text  x="1014.15" y="127.5" ></text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.08%)</title><rect x="161.6" y="437" width="1.0" height="15.0" fill="rgb(242,186,48)" rx="2" ry="2" />
<text  x="164.63" y="447.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="957.7" y="421" width="1.0" height="15.0" fill="rgb(206,185,8)" rx="2" ry="2" />
<text  x="960.69" y="431.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="947.0" y="645" width="1.0" height="15.0" fill="rgb(211,32,4)" rx="2" ry="2" />
<text  x="950.00" y="655.5" ></text>
</g>
<g >
<title>sel_ldr (967 samples, 79.65%)</title><rect x="74.2" y="677" width="939.9" height="15.0" fill="rgb(218,170,39)" rx="2" ry="2" />
<text  x="77.15" y="687.5" >sel_ldr</text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.49%)</title><rect x="655.4" y="373" width="5.8" height="15.0" fill="rgb(237,3,34)" rx="2" ry="2" />
<text  x="658.40" y="383.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (2 samples, 0.16%)</title><rect x="1007.3" y="645" width="1.9" height="15.0" fill="rgb(211,224,45)" rx="2" ry="2" />
<text  x="1010.27" y="655.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (30 samples, 2.47%)</title><rect x="223.8" y="469" width="29.2" height="15.0" fill="rgb(235,132,36)" rx="2" ry="2" />
<text  x="226.84" y="479.5" >&lt;c..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.08%)</title><rect x="957.7" y="325" width="1.0" height="15.0" fill="rgb(252,101,40)" rx="2" ry="2" />
<text  x="960.69" y="335.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (35 samples, 2.88%)</title><rect x="219.0" y="485" width="34.0" height="15.0" fill="rgb(237,65,30)" rx="2" ry="2" />
<text  x="221.98" y="495.5" >co..</text>
</g>
<g >
<title>x86_64_start_kernel (1 samples, 0.08%)</title><rect x="1189.0" y="645" width="1.0" height="15.0" fill="rgb(240,0,42)" rx="2" ry="2" />
<text  x="1192.03" y="655.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (2 samples, 0.16%)</title><rect x="1158.9" y="581" width="1.9" height="15.0" fill="rgb(248,15,26)" rx="2" ry="2" />
<text  x="1161.90" y="591.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.08%)</title><rect x="994.6" y="53" width="1.0" height="15.0" fill="rgb(249,0,49)" rx="2" ry="2" />
<text  x="997.63" y="63.5" ></text>
</g>
<g >
<title>cpumask_next_and (1 samples, 0.08%)</title><rect x="1179.3" y="501" width="1.0" height="15.0" fill="rgb(228,75,10)" rx="2" ry="2" />
<text  x="1182.31" y="511.5" ></text>
</g>
<g >
<title>core::cmp::min_by (18 samples, 1.48%)</title><rect x="201.5" y="453" width="17.5" height="15.0" fill="rgb(220,163,50)" rx="2" ry="2" />
<text  x="204.48" y="463.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="993.7" y="341" width="1.9" height="15.0" fill="rgb(236,77,5)" rx="2" ry="2" />
<text  x="996.66" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.08%)</title><rect x="73.2" y="501" width="1.0" height="15.0" fill="rgb(213,198,23)" rx="2" ry="2" />
<text  x="76.18" y="511.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreateDecoder (3 samples, 0.25%)</title><rect x="153.9" y="629" width="2.9" height="15.0" fill="rgb(225,164,20)" rx="2" ry="2" />
<text  x="156.86" y="639.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.08%)</title><rect x="155.8" y="549" width="1.0" height="15.0" fill="rgb(215,76,11)" rx="2" ry="2" />
<text  x="158.80" y="559.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="160.7" y="293" width="0.9" height="15.0" fill="rgb(230,71,6)" rx="2" ry="2" />
<text  x="163.66" y="303.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (1 samples, 0.08%)</title><rect x="957.7" y="197" width="1.0" height="15.0" fill="rgb(245,162,21)" rx="2" ry="2" />
<text  x="960.69" y="207.5" ></text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts_mut (15 samples, 1.24%)</title><rect x="582.5" y="389" width="14.6" height="15.0" fill="rgb(238,224,1)" rx="2" ry="2" />
<text  x="585.50" y="399.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (2 samples, 0.16%)</title><rect x="993.7" y="197" width="1.9" height="15.0" fill="rgb(242,126,50)" rx="2" ry="2" />
<text  x="996.66" y="207.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.08%)</title><rect x="160.7" y="341" width="0.9" height="15.0" fill="rgb(208,79,49)" rx="2" ry="2" />
<text  x="163.66" y="351.5" ></text>
</g>
<g >
<title>rcu_eqs_exit.constprop.0 (1 samples, 0.08%)</title><rect x="1155.0" y="533" width="1.0" height="15.0" fill="rgb(233,228,39)" rx="2" ry="2" />
<text  x="1158.01" y="543.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="993.7" y="245" width="1.9" height="15.0" fill="rgb(222,112,10)" rx="2" ry="2" />
<text  x="996.66" y="255.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="957.7" y="389" width="1.0" height="15.0" fill="rgb(219,181,51)" rx="2" ry="2" />
<text  x="960.69" y="399.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (1 samples, 0.08%)</title><rect x="1013.1" y="421" width="1.0" height="15.0" fill="rgb(249,180,35)" rx="2" ry="2" />
<text  x="1016.10" y="431.5" ></text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.08%)</title><rect x="982.0" y="645" width="1.0" height="15.0" fill="rgb(223,85,51)" rx="2" ry="2" />
<text  x="984.99" y="655.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (1 samples, 0.08%)</title><rect x="957.7" y="549" width="1.0" height="15.0" fill="rgb(233,220,9)" rx="2" ry="2" />
<text  x="960.69" y="559.5" ></text>
</g>
<g >
<title>swapper (181 samples, 14.91%)</title><rect x="1014.1" y="677" width="175.9" height="15.0" fill="rgb(235,1,54)" rx="2" ry="2" />
<text  x="1017.07" y="687.5" >swapper</text>
</g>
<g >
<title>serde_json::ser::to_writer (2 samples, 0.16%)</title><rect x="993.7" y="533" width="1.9" height="15.0" fill="rgb(248,161,0)" rx="2" ry="2" />
<text  x="996.66" y="543.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.08%)</title><rect x="956.7" y="485" width="1.0" height="15.0" fill="rgb(223,178,44)" rx="2" ry="2" />
<text  x="959.72" y="495.5" ></text>
</g>
<g >
<title>ApplyDfaValidator_x86_64 (1 samples, 0.08%)</title><rect x="154.8" y="565" width="1.0" height="15.0" fill="rgb(212,64,2)" rx="2" ry="2" />
<text  x="157.83" y="575.5" ></text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="329.8" y="453" width="1.0" height="15.0" fill="rgb(219,182,18)" rx="2" ry="2" />
<text  x="332.79" y="463.5" ></text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.25%)</title><rect x="197.6" y="485" width="2.9" height="15.0" fill="rgb(237,222,47)" rx="2" ry="2" />
<text  x="200.59" y="495.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (2 samples, 0.16%)</title><rect x="993.7" y="501" width="1.9" height="15.0" fill="rgb(206,20,17)" rx="2" ry="2" />
<text  x="996.66" y="511.5" ></text>
</g>
<g >
<title>[librustposix.so] (5 samples, 0.41%)</title><rect x="691.4" y="437" width="4.8" height="15.0" fill="rgb(205,169,1)" rx="2" ry="2" />
<text  x="694.37" y="447.5" ></text>
</g>
<g >
<title>cpuidle_enter (1 samples, 0.08%)</title><rect x="1189.0" y="517" width="1.0" height="15.0" fill="rgb(225,99,40)" rx="2" ry="2" />
<text  x="1192.03" y="527.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 0.08%)</title><rect x="159.7" y="293" width="1.0" height="15.0" fill="rgb(251,113,33)" rx="2" ry="2" />
<text  x="162.69" y="303.5" ></text>
</g>
<g >
<title>NaClDescIoDescRead (629 samples, 51.81%)</title><rect x="163.6" y="597" width="611.4" height="15.0" fill="rgb(250,60,41)" rx="2" ry="2" />
<text  x="166.57" y="607.5" >NaClDescIoDescRead</text>
</g>
<g >
<title>NaClUserToSysAddrRange (1 samples, 0.08%)</title><rect x="162.6" y="597" width="1.0" height="15.0" fill="rgb(224,74,48)" rx="2" ry="2" />
<text  x="165.60" y="607.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (3 samples, 0.25%)</title><rect x="972.3" y="645" width="2.9" height="15.0" fill="rgb(215,101,7)" rx="2" ry="2" />
<text  x="975.27" y="655.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_ref (1 samples, 0.08%)</title><rect x="1006.3" y="645" width="1.0" height="15.0" fill="rgb(216,142,15)" rx="2" ry="2" />
<text  x="1009.29" y="655.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.08%)</title><rect x="161.6" y="405" width="1.0" height="15.0" fill="rgb(212,216,49)" rx="2" ry="2" />
<text  x="164.63" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.82%)</title><rect x="163.6" y="421" width="9.7" height="15.0" fill="rgb(225,64,4)" rx="2" ry="2" />
<text  x="166.57" y="431.5" ></text>
</g>
<g >
<title>tsc_verify_tsc_adjust (1 samples, 0.08%)</title><rect x="1060.7" y="581" width="1.0" height="15.0" fill="rgb(221,76,21)" rx="2" ry="2" />
<text  x="1063.72" y="591.5" ></text>
</g>
<g >
<title>newidle_balance (18 samples, 1.48%)</title><rect x="1167.6" y="549" width="17.5" height="15.0" fill="rgb(223,164,3)" rx="2" ry="2" />
<text  x="1170.64" y="559.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (1 samples, 0.08%)</title><rect x="1059.8" y="581" width="0.9" height="15.0" fill="rgb(250,188,4)" rx="2" ry="2" />
<text  x="1062.75" y="591.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.08%)</title><rect x="155.8" y="581" width="1.0" height="15.0" fill="rgb(249,84,19)" rx="2" ry="2" />
<text  x="158.80" y="591.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.08%)</title><rect x="1010.2" y="181" width="1.0" height="15.0" fill="rgb(217,101,9)" rx="2" ry="2" />
<text  x="1013.18" y="191.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::as_ptr (2 samples, 0.16%)</title><rect x="127.6" y="645" width="2.0" height="15.0" fill="rgb(244,143,19)" rx="2" ry="2" />
<text  x="130.61" y="655.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="993.7" y="517" width="1.9" height="15.0" fill="rgb(205,14,14)" rx="2" ry="2" />
<text  x="996.66" y="527.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.25%)</title><rect x="1009.2" y="229" width="2.9" height="15.0" fill="rgb(214,181,44)" rx="2" ry="2" />
<text  x="1012.21" y="239.5" ></text>
</g>
<g >
<title>ion (1 samples, 0.08%)</title><rect x="73.2" y="533" width="1.0" height="15.0" fill="rgb(227,95,28)" rx="2" ry="2" />
<text  x="76.18" y="543.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.08%)</title><rect x="155.8" y="565" width="1.0" height="15.0" fill="rgb(244,151,22)" rx="2" ry="2" />
<text  x="158.80" y="575.5" ></text>
</g>
<g >
<title>perf_mmap__push (1 samples, 0.08%)</title><rect x="73.2" y="581" width="1.0" height="15.0" fill="rgb(215,94,29)" rx="2" ry="2" />
<text  x="76.18" y="591.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::read_syscall (629 samples, 51.81%)</title><rect x="163.6" y="517" width="611.4" height="15.0" fill="rgb(249,56,29)" rx="2" ry="2" />
<text  x="166.57" y="527.5" >rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::r..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.41%)</title><rect x="524.2" y="389" width="4.8" height="15.0" fill="rgb(224,162,14)" rx="2" ry="2" />
<text  x="527.18" y="399.5" ></text>
</g>
<g >
<title>generic_exec_single (2 samples, 0.16%)</title><rect x="1180.3" y="485" width="1.9" height="15.0" fill="rgb(242,117,5)" rx="2" ry="2" />
<text  x="1183.28" y="495.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.08%)</title><rect x="73.2" y="437" width="1.0" height="15.0" fill="rgb(244,182,42)" rx="2" ry="2" />
<text  x="76.18" y="447.5" ></text>
</g>
<g >
<title>NaClSysReadDecoder (630 samples, 51.89%)</title><rect x="162.6" y="629" width="612.4" height="15.0" fill="rgb(238,225,3)" rx="2" ry="2" />
<text  x="165.60" y="639.5" >NaClSysReadDecoder</text>
</g>
<g >
<title>flush_smp_call_function_from_idle (4 samples, 0.33%)</title><rect x="1158.9" y="597" width="3.9" height="15.0" fill="rgb(211,56,10)" rx="2" ry="2" />
<text  x="1161.90" y="607.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (64 samples, 5.27%)</title><rect x="11.0" y="581" width="62.2" height="15.0" fill="rgb(232,3,36)" rx="2" ry="2" />
<text  x="13.97" y="591.5" >perf_e..</text>
</g>
<g >
<title>lind_read (629 samples, 51.81%)</title><rect x="163.6" y="565" width="611.4" height="15.0" fill="rgb(205,148,34)" rx="2" ry="2" />
<text  x="166.57" y="575.5" >lind_read</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.16%)</title><rect x="104.3" y="645" width="1.9" height="15.0" fill="rgb(227,168,13)" rx="2" ry="2" />
<text  x="107.28" y="655.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.08%)</title><rect x="160.7" y="405" width="0.9" height="15.0" fill="rgb(212,159,10)" rx="2" ry="2" />
<text  x="163.66" y="415.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (4 samples, 0.33%)</title><rect x="759.4" y="405" width="3.9" height="15.0" fill="rgb(219,199,32)" rx="2" ry="2" />
<text  x="762.41" y="415.5" ></text>
</g>
<g >
<title>NaClAppThreadSpawn (1 samples, 0.08%)</title><rect x="161.6" y="581" width="1.0" height="15.0" fill="rgb(220,91,24)" rx="2" ry="2" />
<text  x="164.63" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.08%)</title><rect x="1013.1" y="645" width="1.0" height="15.0" fill="rgb(224,172,0)" rx="2" ry="2" />
<text  x="1016.10" y="655.5" ></text>
</g>
<g >
<title>generic_file_read_iter (10 samples, 0.82%)</title><rect x="163.6" y="245" width="9.7" height="15.0" fill="rgb(236,107,9)" rx="2" ry="2" />
<text  x="166.57" y="255.5" ></text>
</g>
<g >
<title>rcu_idle_exit (1 samples, 0.08%)</title><rect x="1155.0" y="549" width="1.0" height="15.0" fill="rgb(247,201,6)" rx="2" ry="2" />
<text  x="1158.01" y="559.5" ></text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.08%)</title><rect x="155.8" y="501" width="1.0" height="15.0" fill="rgb(235,63,50)" rx="2" ry="2" />
<text  x="158.80" y="511.5" ></text>
</g>
<g >
<title>pick_next_task_fair (19 samples, 1.57%)</title><rect x="1166.7" y="565" width="18.4" height="15.0" fill="rgb(235,159,29)" rx="2" ry="2" />
<text  x="1169.67" y="575.5" ></text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (5 samples, 0.41%)</title><rect x="214.1" y="421" width="4.9" height="15.0" fill="rgb(213,113,27)" rx="2" ry="2" />
<text  x="217.12" y="431.5" ></text>
</g>
<g >
<title>core::slice::raw::from_raw_parts_mut (5 samples, 0.41%)</title><rect x="129.6" y="645" width="4.8" height="15.0" fill="rgb(227,93,46)" rx="2" ry="2" />
<text  x="132.56" y="655.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.08%)</title><rect x="956.7" y="469" width="1.0" height="15.0" fill="rgb(215,224,46)" rx="2" ry="2" />
<text  x="959.72" y="479.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.08%)</title><rect x="981.0" y="645" width="1.0" height="15.0" fill="rgb(232,23,20)" rx="2" ry="2" />
<text  x="984.02" y="655.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_ref (4 samples, 0.33%)</title><rect x="771.1" y="437" width="3.9" height="15.0" fill="rgb(247,192,19)" rx="2" ry="2" />
<text  x="774.07" y="447.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.08%)</title><rect x="110.1" y="645" width="1.0" height="15.0" fill="rgb(213,46,11)" rx="2" ry="2" />
<text  x="113.12" y="655.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.08%)</title><rect x="160.7" y="389" width="0.9" height="15.0" fill="rgb(245,160,45)" rx="2" ry="2" />
<text  x="163.66" y="399.5" ></text>
</g>
<g >
<title>generic_exec_single (64 samples, 5.27%)</title><rect x="11.0" y="405" width="62.2" height="15.0" fill="rgb(238,127,4)" rx="2" ry="2" />
<text  x="13.97" y="415.5" >generi..</text>
</g>
<g >
<title>NaClSysRead (629 samples, 51.81%)</title><rect x="163.6" y="613" width="611.4" height="15.0" fill="rgb(226,18,33)" rx="2" ry="2" />
<text  x="166.57" y="623.5" >NaClSysRead</text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.08%)</title><rect x="1061.7" y="517" width="1.0" height="15.0" fill="rgb(207,2,32)" rx="2" ry="2" />
<text  x="1064.70" y="527.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.08%)</title><rect x="957.7" y="517" width="1.0" height="15.0" fill="rgb(240,208,31)" rx="2" ry="2" />
<text  x="960.69" y="527.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="957.7" y="245" width="1.0" height="15.0" fill="rgb(240,109,50)" rx="2" ry="2" />
<text  x="960.69" y="255.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (3 samples, 0.25%)</title><rect x="1009.2" y="533" width="2.9" height="15.0" fill="rgb(222,164,20)" rx="2" ry="2" />
<text  x="1012.21" y="543.5" ></text>
</g>
<g >
<title>cpu_stop_should_run (1 samples, 0.08%)</title><rect x="1058.8" y="629" width="1.0" height="15.0" fill="rgb(226,61,16)" rx="2" ry="2" />
<text  x="1061.78" y="639.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="993.7" y="149" width="1.9" height="15.0" fill="rgb(212,138,25)" rx="2" ry="2" />
<text  x="996.66" y="159.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (2 samples, 0.16%)</title><rect x="993.7" y="373" width="1.9" height="15.0" fill="rgb(233,221,28)" rx="2" ry="2" />
<text  x="996.66" y="383.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_access (405 samples, 33.36%)</title><rect x="381.3" y="453" width="393.7" height="15.0" fill="rgb(226,45,9)" rx="2" ry="2" />
<text  x="384.30" y="463.5" >ringbuf::consumer::Consumer&lt;T&gt;::pop_access</text>
</g>
<g >
<title>serde_json::ser::to_vec (2 samples, 0.16%)</title><rect x="993.7" y="549" width="1.9" height="15.0" fill="rgb(206,102,36)" rx="2" ry="2" />
<text  x="996.66" y="559.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.08%)</title><rect x="956.7" y="277" width="1.0" height="15.0" fill="rgb(222,17,43)" rx="2" ry="2" />
<text  x="959.72" y="287.5" ></text>
</g>
<g >
<title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="957.7" y="133" width="1.0" height="15.0" fill="rgb(247,41,27)" rx="2" ry="2" />
<text  x="960.69" y="143.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy::{{closure}} (1 samples, 0.08%)</title><rect x="140.2" y="645" width="1.0" height="15.0" fill="rgb(209,14,48)" rx="2" ry="2" />
<text  x="143.25" y="655.5" ></text>
</g>
<g >
<title>start_secondary (132 samples, 10.87%)</title><rect x="1060.7" y="645" width="128.3" height="15.0" fill="rgb(242,196,34)" rx="2" ry="2" />
<text  x="1063.72" y="655.5" >start_secondary</text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.08%)</title><rect x="161.6" y="373" width="1.0" height="15.0" fill="rgb(245,116,42)" rx="2" ry="2" />
<text  x="164.63" y="383.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1009.2" y="149" width="1.0" height="15.0" fill="rgb(218,221,42)" rx="2" ry="2" />
<text  x="1012.21" y="159.5" ></text>
</g>
<g >
<title>tick_nohz_idle_exit (1 samples, 0.08%)</title><rect x="1185.1" y="597" width="1.0" height="15.0" fill="rgb(244,221,21)" rx="2" ry="2" />
<text  x="1188.14" y="607.5" ></text>
</g>
<g >
<title>[unknown] (64 samples, 5.27%)</title><rect x="947.0" y="661" width="62.2" height="15.0" fill="rgb(228,23,18)" rx="2" ry="2" />
<text  x="950.00" y="671.5" >[unkno..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (3 samples, 0.25%)</title><rect x="1009.2" y="373" width="2.9" height="15.0" fill="rgb(223,125,27)" rx="2" ry="2" />
<text  x="1012.21" y="383.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (42 samples, 3.46%)</title><rect x="330.8" y="453" width="40.8" height="15.0" fill="rgb(233,86,8)" rx="2" ry="2" />
<text  x="333.76" y="463.5" >cor..</text>
</g>
<g >
<title>do_iter_read (10 samples, 0.82%)</title><rect x="163.6" y="293" width="9.7" height="15.0" fill="rgb(213,153,25)" rx="2" ry="2" />
<text  x="166.57" y="303.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.08%)</title><rect x="957.7" y="469" width="1.0" height="15.0" fill="rgb(224,213,46)" rx="2" ry="2" />
<text  x="960.69" y="479.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (2 samples, 0.16%)</title><rect x="157.7" y="293" width="2.0" height="15.0" fill="rgb(222,61,28)" rx="2" ry="2" />
<text  x="160.74" y="303.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="1009.2" y="165" width="1.0" height="15.0" fill="rgb(238,60,4)" rx="2" ry="2" />
<text  x="1012.21" y="175.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.08%)</title><rect x="1061.7" y="485" width="1.0" height="15.0" fill="rgb(236,137,23)" rx="2" ry="2" />
<text  x="1064.70" y="495.5" ></text>
</g>
<g >
<title>NaClSysForkDecoder (2 samples, 0.16%)</title><rect x="160.7" y="629" width="1.9" height="15.0" fill="rgb(224,83,21)" rx="2" ry="2" />
<text  x="163.66" y="639.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="160.7" y="149" width="0.9" height="15.0" fill="rgb(215,196,27)" rx="2" ry="2" />
<text  x="163.66" y="159.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="993.7" y="485" width="1.9" height="15.0" fill="rgb(208,4,4)" rx="2" ry="2" />
<text  x="996.66" y="495.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (6 samples, 0.49%)</title><rect x="975.2" y="645" width="5.8" height="15.0" fill="rgb(235,171,51)" rx="2" ry="2" />
<text  x="978.19" y="655.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="1009.2" y="309" width="2.9" height="15.0" fill="rgb(217,163,0)" rx="2" ry="2" />
<text  x="1012.21" y="319.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.25%)</title><rect x="89.7" y="645" width="2.9" height="15.0" fill="rgb(236,175,18)" rx="2" ry="2" />
<text  x="92.70" y="655.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (34 samples, 2.80%)</title><rect x="706.9" y="437" width="33.1" height="15.0" fill="rgb(228,33,45)" rx="2" ry="2" />
<text  x="709.92" y="447.5" >co..</text>
</g>
<g >
<title>NaClSysExitDecoder (1 samples, 0.08%)</title><rect x="957.7" y="629" width="1.0" height="15.0" fill="rgb(242,69,32)" rx="2" ry="2" />
<text  x="960.69" y="639.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="1010.2" y="101" width="1.0" height="15.0" fill="rgb(228,178,38)" rx="2" ry="2" />
<text  x="1013.18" y="111.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.08%)</title><rect x="956.7" y="533" width="1.0" height="15.0" fill="rgb(252,50,41)" rx="2" ry="2" />
<text  x="959.72" y="543.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="956.7" y="213" width="1.0" height="15.0" fill="rgb(216,58,14)" rx="2" ry="2" />
<text  x="959.72" y="223.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (2 samples, 0.16%)</title><rect x="993.7" y="277" width="1.9" height="15.0" fill="rgb(226,35,45)" rx="2" ry="2" />
<text  x="996.66" y="287.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_u32 (1 samples, 0.08%)</title><rect x="1011.2" y="165" width="0.9" height="15.0" fill="rgb(220,199,39)" rx="2" ry="2" />
<text  x="1014.15" y="175.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (1 samples, 0.08%)</title><rect x="1189.0" y="629" width="1.0" height="15.0" fill="rgb(219,37,18)" rx="2" ry="2" />
<text  x="1192.03" y="639.5" ></text>
</g>
<g >
<title>get_next_timer_interrupt (2 samples, 0.16%)</title><rect x="1157.0" y="517" width="1.9" height="15.0" fill="rgb(243,26,26)" rx="2" ry="2" />
<text  x="1159.95" y="527.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.08%)</title><rect x="160.7" y="277" width="0.9" height="15.0" fill="rgb(246,228,16)" rx="2" ry="2" />
<text  x="163.66" y="287.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.16%)</title><rect x="157.7" y="325" width="2.0" height="15.0" fill="rgb(230,84,24)" rx="2" ry="2" />
<text  x="160.74" y="335.5" ></text>
</g>
<g >
<title>tick_nohz_next_event (2 samples, 0.16%)</title><rect x="1157.0" y="533" width="1.9" height="15.0" fill="rgb(215,64,34)" rx="2" ry="2" />
<text  x="1159.95" y="543.5" ></text>
</g>
<g >
<title>ovl_read_iter (10 samples, 0.82%)</title><rect x="163.6" y="325" width="9.7" height="15.0" fill="rgb(246,71,33)" rx="2" ry="2" />
<text  x="166.57" y="335.5" ></text>
</g>
<g >
<title>NaClSysExitDecoder (4 samples, 0.33%)</title><rect x="156.8" y="629" width="3.9" height="15.0" fill="rgb(212,197,0)" rx="2" ry="2" />
<text  x="159.77" y="639.5" ></text>
</g>
<g >
<title>NaClRefCountUnref (1 samples, 0.08%)</title><rect x="956.7" y="597" width="1.0" height="15.0" fill="rgb(205,170,47)" rx="2" ry="2" />
<text  x="959.72" y="607.5" ></text>
</g>
<g >
<title>smp_call_function_single (64 samples, 5.27%)</title><rect x="11.0" y="421" width="62.2" height="15.0" fill="rgb(253,215,35)" rx="2" ry="2" />
<text  x="13.97" y="431.5" >smp_ca..</text>
</g>
<g >
<title>core::sync::atomic::atomic_load (14 samples, 1.15%)</title><rect x="254.9" y="469" width="13.7" height="15.0" fill="rgb(209,214,23)" rx="2" ry="2" />
<text  x="257.94" y="479.5" ></text>
</g>
<g >
<title>[sel_ldr] (639 samples, 52.64%)</title><rect x="153.9" y="661" width="621.1" height="15.0" fill="rgb(238,72,1)" rx="2" ry="2" />
<text  x="156.86" y="671.5" >[sel_ldr]</text>
</g>
<g >
<title>do_fault_around (1 samples, 0.08%)</title><rect x="155.8" y="469" width="1.0" height="15.0" fill="rgb(217,6,39)" rx="2" ry="2" />
<text  x="158.80" y="479.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="157.7" y="261" width="2.0" height="15.0" fill="rgb(205,136,14)" rx="2" ry="2" />
<text  x="160.74" y="271.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="956.7" y="197" width="1.0" height="15.0" fill="rgb(231,98,22)" rx="2" ry="2" />
<text  x="959.72" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (3 samples, 0.25%)</title><rect x="1009.2" y="645" width="2.9" height="15.0" fill="rgb(234,159,0)" rx="2" ry="2" />
<text  x="1012.21" y="655.5" ></text>
</g>
<g >
<title>NaClDescUnref (1 samples, 0.08%)</title><rect x="160.7" y="565" width="0.9" height="15.0" fill="rgb(233,75,54)" rx="2" ry="2" />
<text  x="163.66" y="575.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (7 samples, 0.58%)</title><rect x="212.2" y="437" width="6.8" height="15.0" fill="rgb(221,129,40)" rx="2" ry="2" />
<text  x="215.17" y="447.5" ></text>
</g>
<g >
<title>arch_do_signal_or_restart (1 samples, 0.08%)</title><rect x="1013.1" y="581" width="1.0" height="15.0" fill="rgb(248,144,10)" rx="2" ry="2" />
<text  x="1016.10" y="591.5" ></text>
</g>
<g >
<title>sched_clock_idle_sleep_event (1 samples, 0.08%)</title><rect x="1162.8" y="597" width="1.0" height="15.0" fill="rgb(218,66,15)" rx="2" ry="2" />
<text  x="1165.78" y="607.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (21 samples, 1.73%)</title><rect x="719.6" y="421" width="20.4" height="15.0" fill="rgb(252,2,19)" rx="2" ry="2" />
<text  x="722.56" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.08%)</title><rect x="73.2" y="485" width="1.0" height="15.0" fill="rgb(253,66,31)" rx="2" ry="2" />
<text  x="76.18" y="495.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.08%)</title><rect x="155.8" y="597" width="1.0" height="15.0" fill="rgb(209,53,54)" rx="2" ry="2" />
<text  x="158.80" y="607.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy (407 samples, 33.53%)</title><rect x="379.4" y="469" width="395.6" height="15.0" fill="rgb(218,228,4)" rx="2" ry="2" />
<text  x="382.36" y="479.5" >ringbuf::consumer::Consumer&lt;T&gt;::pop_copy</text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.08%)</title><rect x="160.7" y="197" width="0.9" height="15.0" fill="rgb(240,176,25)" rx="2" ry="2" />
<text  x="163.66" y="207.5" ></text>
</g>
<g >
<title>affinity__set (1 samples, 0.08%)</title><rect x="10.0" y="597" width="1.0" height="15.0" fill="rgb(213,108,14)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>__ioctl (64 samples, 5.27%)</title><rect x="11.0" y="565" width="62.2" height="15.0" fill="rgb(232,223,23)" rx="2" ry="2" />
<text  x="13.97" y="575.5" >__ioctl</text>
</g>
<g >
<title>__switch_to_asm (1 samples, 0.08%)</title><rect x="1057.8" y="661" width="1.0" height="15.0" fill="rgb(246,179,19)" rx="2" ry="2" />
<text  x="1060.81" y="671.5" ></text>
</g>
<g >
<title>CopyBundleTails (1 samples, 0.08%)</title><rect x="153.9" y="565" width="0.9" height="15.0" fill="rgb(251,211,42)" rx="2" ry="2" />
<text  x="156.86" y="575.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.08%)</title><rect x="1011.2" y="181" width="0.9" height="15.0" fill="rgb(239,117,44)" rx="2" ry="2" />
<text  x="1014.15" y="191.5" ></text>
</g>
<g >
<title>event_function_call (64 samples, 5.27%)</title><rect x="11.0" y="437" width="62.2" height="15.0" fill="rgb(227,7,21)" rx="2" ry="2" />
<text  x="13.97" y="447.5" >event_..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.08%)</title><rect x="161.6" y="469" width="1.0" height="15.0" fill="rgb(217,69,44)" rx="2" ry="2" />
<text  x="164.63" y="479.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (29 samples, 2.39%)</title><rect x="550.4" y="373" width="28.2" height="15.0" fill="rgb(217,190,23)" rx="2" ry="2" />
<text  x="553.43" y="383.5" >c..</text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="157.7" y="357" width="2.0" height="15.0" fill="rgb(248,39,20)" rx="2" ry="2" />
<text  x="160.74" y="367.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.66%)</title><rect x="696.2" y="437" width="7.8" height="15.0" fill="rgb(207,98,50)" rx="2" ry="2" />
<text  x="699.23" y="447.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="994.6" y="69" width="1.0" height="15.0" fill="rgb(226,26,15)" rx="2" ry="2" />
<text  x="997.63" y="79.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.08%)</title><rect x="957.7" y="437" width="1.0" height="15.0" fill="rgb(236,203,2)" rx="2" ry="2" />
<text  x="960.69" y="447.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1 samples, 0.08%)</title><rect x="1009.2" y="197" width="1.0" height="15.0" fill="rgb(214,17,22)" rx="2" ry="2" />
<text  x="1012.21" y="207.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str_contents (2 samples, 0.16%)</title><rect x="993.7" y="133" width="1.9" height="15.0" fill="rgb(231,171,30)" rx="2" ry="2" />
<text  x="996.66" y="143.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.08%)</title><rect x="957.7" y="341" width="1.0" height="15.0" fill="rgb(232,13,42)" rx="2" ry="2" />
<text  x="960.69" y="351.5" ></text>
</g>
<g >
<title>send_call_function_single_ipi (2 samples, 0.16%)</title><rect x="1180.3" y="469" width="1.9" height="15.0" fill="rgb(220,208,0)" rx="2" ry="2" />
<text  x="1183.28" y="479.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="160.7" y="85" width="0.9" height="15.0" fill="rgb(244,178,30)" rx="2" ry="2" />
<text  x="163.66" y="95.5" ></text>
</g>
<g >
<title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.08%)</title><rect x="109.1" y="645" width="1.0" height="15.0" fill="rgb(253,196,4)" rx="2" ry="2" />
<text  x="112.14" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (10 samples, 0.82%)</title><rect x="163.6" y="405" width="9.7" height="15.0" fill="rgb(218,61,34)" rx="2" ry="2" />
<text  x="166.57" y="415.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (94 samples, 7.74%)</title><rect x="505.7" y="421" width="91.4" height="15.0" fill="rgb(212,161,29)" rx="2" ry="2" />
<text  x="508.72" y="431.5" >&lt;alloc::ve..</text>
</g>
<g >
<title>itoa::Buffer::format (1 samples, 0.08%)</title><rect x="1011.2" y="149" width="0.9" height="15.0" fill="rgb(226,198,2)" rx="2" ry="2" />
<text  x="1014.15" y="159.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="956.7" y="405" width="1.0" height="15.0" fill="rgb(232,162,23)" rx="2" ry="2" />
<text  x="959.72" y="415.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (3 samples, 0.25%)</title><rect x="157.7" y="437" width="3.0" height="15.0" fill="rgb(206,217,8)" rx="2" ry="2" />
<text  x="160.74" y="447.5" ></text>
</g>
<g >
<title>x86_pmu_enable (64 samples, 5.27%)</title><rect x="11.0" y="325" width="62.2" height="15.0" fill="rgb(212,173,44)" rx="2" ry="2" />
<text  x="13.97" y="335.5" >x86_pm..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.25%)</title><rect x="1009.2" y="389" width="2.9" height="15.0" fill="rgb(232,52,40)" rx="2" ry="2" />
<text  x="1012.21" y="399.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.08%)</title><rect x="1157.0" y="485" width="0.9" height="15.0" fill="rgb(226,36,16)" rx="2" ry="2" />
<text  x="1159.95" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (64 samples, 5.27%)</title><rect x="11.0" y="549" width="62.2" height="15.0" fill="rgb(252,55,50)" rx="2" ry="2" />
<text  x="13.97" y="559.5" >entry_..</text>
</g>
<g >
<title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.08%)</title><rect x="971.3" y="645" width="1.0" height="15.0" fill="rgb(236,16,34)" rx="2" ry="2" />
<text  x="974.30" y="655.5" ></text>
</g>
<g >
<title>record__mmap_read_all (1 samples, 0.08%)</title><rect x="73.2" y="613" width="1.0" height="15.0" fill="rgb(250,177,48)" rx="2" ry="2" />
<text  x="76.18" y="623.5" ></text>
</g>
<g >
<title>__cmd_record (66 samples, 5.44%)</title><rect x="10.0" y="629" width="64.2" height="15.0" fill="rgb(219,64,40)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >__cmd_r..</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="956.7" y="373" width="1.0" height="15.0" fill="rgb(217,138,37)" rx="2" ry="2" />
<text  x="959.72" y="383.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (3 samples, 0.25%)</title><rect x="157.7" y="565" width="3.0" height="15.0" fill="rgb(220,7,40)" rx="2" ry="2" />
<text  x="160.74" y="575.5" ></text>
</g>
<g >
<title>core::ptr::metadata::from_raw_parts_mut (13 samples, 1.07%)</title><rect x="676.8" y="357" width="12.6" height="15.0" fill="rgb(237,129,6)" rx="2" ry="2" />
<text  x="679.79" y="367.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.08%)</title><rect x="157.7" y="229" width="1.0" height="15.0" fill="rgb(230,197,47)" rx="2" ry="2" />
<text  x="160.74" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.16%)</title><rect x="95.5" y="645" width="2.0" height="15.0" fill="rgb(212,150,13)" rx="2" ry="2" />
<text  x="98.54" y="655.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="157.7" y="277" width="2.0" height="15.0" fill="rgb(214,227,52)" rx="2" ry="2" />
<text  x="160.74" y="287.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.08%)</title><rect x="1059.8" y="597" width="0.9" height="15.0" fill="rgb(226,211,17)" rx="2" ry="2" />
<text  x="1062.75" y="607.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.08%)</title><rect x="1061.7" y="405" width="1.0" height="15.0" fill="rgb(242,21,29)" rx="2" ry="2" />
<text  x="1064.70" y="415.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (3 samples, 0.25%)</title><rect x="1009.2" y="293" width="2.9" height="15.0" fill="rgb(238,31,16)" rx="2" ry="2" />
<text  x="1012.21" y="303.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="157.7" y="453" width="3.0" height="15.0" fill="rgb(243,94,45)" rx="2" ry="2" />
<text  x="160.74" y="463.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="1009.2" y="453" width="2.9" height="15.0" fill="rgb(254,56,7)" rx="2" ry="2" />
<text  x="1012.21" y="463.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (2 samples, 0.16%)</title><rect x="969.4" y="645" width="1.9" height="15.0" fill="rgb(230,202,23)" rx="2" ry="2" />
<text  x="972.36" y="655.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.08%)</title><rect x="1010.2" y="165" width="1.0" height="15.0" fill="rgb(251,200,6)" rx="2" ry="2" />
<text  x="1013.18" y="175.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.08%)</title><rect x="956.7" y="245" width="1.0" height="15.0" fill="rgb(223,171,47)" rx="2" ry="2" />
<text  x="959.72" y="255.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.08%)</title><rect x="957.7" y="501" width="1.0" height="15.0" fill="rgb(224,180,24)" rx="2" ry="2" />
<text  x="960.69" y="511.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="993.7" y="453" width="1.9" height="15.0" fill="rgb(212,220,43)" rx="2" ry="2" />
<text  x="996.66" y="463.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="157.7" y="245" width="1.0" height="15.0" fill="rgb(213,83,18)" rx="2" ry="2" />
<text  x="160.74" y="255.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::read (10 samples, 0.82%)</title><rect x="163.6" y="469" width="9.7" height="15.0" fill="rgb(218,216,10)" rx="2" ry="2" />
<text  x="166.57" y="479.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (4 samples, 0.33%)</title><rect x="964.5" y="645" width="3.9" height="15.0" fill="rgb(207,64,5)" rx="2" ry="2" />
<text  x="967.50" y="655.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (3 samples, 0.25%)</title><rect x="1009.2" y="581" width="2.9" height="15.0" fill="rgb(221,18,31)" rx="2" ry="2" />
<text  x="1012.21" y="591.5" ></text>
</g>
<g >
<title>NaClAppLoadFileFromFilename (1 samples, 0.08%)</title><rect x="160.7" y="581" width="0.9" height="15.0" fill="rgb(237,143,41)" rx="2" ry="2" />
<text  x="163.66" y="591.5" ></text>
</g>
<g >
<title>core::ptr::metadata::from_raw_parts_mut (5 samples, 0.41%)</title><rect x="248.1" y="421" width="4.9" height="15.0" fill="rgb(227,196,14)" rx="2" ry="2" />
<text  x="251.14" y="431.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.49%)</title><rect x="655.4" y="357" width="5.8" height="15.0" fill="rgb(251,113,23)" rx="2" ry="2" />
<text  x="658.40" y="367.5" ></text>
</g>
<g >
<title>__perf_event_enable (64 samples, 5.27%)</title><rect x="11.0" y="357" width="62.2" height="15.0" fill="rgb(224,183,36)" rx="2" ry="2" />
<text  x="13.97" y="367.5" >__perf..</text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.08%)</title><rect x="957.7" y="565" width="1.0" height="15.0" fill="rgb(221,87,2)" rx="2" ry="2" />
<text  x="960.69" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_read (10 samples, 0.82%)</title><rect x="163.6" y="389" width="9.7" height="15.0" fill="rgb(217,166,25)" rx="2" ry="2" />
<text  x="166.57" y="399.5" ></text>
</g>
</g>
</svg>
