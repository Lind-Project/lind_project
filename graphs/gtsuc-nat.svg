<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>cpuidle_enter (1 samples, 0.62%)</title><rect x="1182.6" y="261" width="7.4" height="15.0" fill="rgb(226,71,11)" rx="2" ry="2" />
<text  x="1185.62" y="271.5" ></text>
</g>
<g >
<title>_cond_resched (2 samples, 1.25%)</title><rect x="496.8" y="181" width="14.7" height="15.0" fill="rgb(214,146,32)" rx="2" ry="2" />
<text  x="499.75" y="191.5" ></text>
</g>
<g >
<title>vfs_read (8 samples, 5.00%)</title><rect x="437.8" y="229" width="59.0" height="15.0" fill="rgb(230,80,50)" rx="2" ry="2" />
<text  x="440.75" y="239.5" >vfs_read</text>
</g>
<g >
<title>cpuidle_enter (16 samples, 10.00%)</title><rect x="1064.6" y="325" width="118.0" height="15.0" fill="rgb(234,126,3)" rx="2" ry="2" />
<text  x="1067.62" y="335.5" >cpuidle_enter</text>
</g>
<g >
<title>[grep] (54 samples, 33.75%)</title><rect x="39.5" y="309" width="398.3" height="15.0" fill="rgb(212,171,6)" rx="2" ry="2" />
<text  x="42.50" y="319.5" >[grep]</text>
</g>
<g >
<title>cpu_startup_entry (1 samples, 0.62%)</title><rect x="1182.6" y="309" width="7.4" height="15.0" fill="rgb(221,112,12)" rx="2" ry="2" />
<text  x="1185.62" y="319.5" ></text>
</g>
<g >
<title>__evlist__enable (66 samples, 41.25%)</title><rect x="496.8" y="357" width="486.7" height="15.0" fill="rgb(217,57,18)" rx="2" ry="2" />
<text  x="499.75" y="367.5" >__evlist__enable</text>
</g>
<g >
<title>[bash] (3 samples, 1.88%)</title><rect x="10.0" y="309" width="22.1" height="15.0" fill="rgb(228,91,25)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >[..</text>
</g>
<g >
<title>__set_cpus_allowed_ptr (2 samples, 1.25%)</title><rect x="496.8" y="245" width="14.7" height="15.0" fill="rgb(228,30,12)" rx="2" ry="2" />
<text  x="499.75" y="255.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.62%)</title><rect x="496.8" y="165" width="7.3" height="15.0" fill="rgb(233,100,29)" rx="2" ry="2" />
<text  x="499.75" y="175.5" ></text>
</g>
<g >
<title>__wait_for_common (2 samples, 1.25%)</title><rect x="496.8" y="197" width="14.7" height="15.0" fill="rgb(207,26,50)" rx="2" ry="2" />
<text  x="499.75" y="207.5" ></text>
</g>
<g >
<title>exc_page_fault (2 samples, 1.25%)</title><rect x="17.4" y="213" width="14.7" height="15.0" fill="rgb(233,96,10)" rx="2" ry="2" />
<text  x="20.38" y="223.5" ></text>
</g>
<g >
<title>napi_poll (1 samples, 0.62%)</title><rect x="1064.6" y="181" width="7.4" height="15.0" fill="rgb(219,150,45)" rx="2" ry="2" />
<text  x="1067.62" y="191.5" ></text>
</g>
<g >
<title>_perf_event_enable (64 samples, 40.00%)</title><rect x="511.5" y="197" width="472.0" height="15.0" fill="rgb(217,60,38)" rx="2" ry="2" />
<text  x="514.50" y="207.5" >_perf_event_enable</text>
</g>
<g >
<title>__x64_sys_sched_setaffinity (2 samples, 1.25%)</title><rect x="496.8" y="277" width="14.7" height="15.0" fill="rgb(210,133,7)" rx="2" ry="2" />
<text  x="499.75" y="287.5" ></text>
</g>
<g >
<title>make_child (3 samples, 1.88%)</title><rect x="10.0" y="261" width="22.1" height="15.0" fill="rgb(224,33,33)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >m..</text>
</g>
<g >
<title>vfs_write (1 samples, 0.62%)</title><rect x="983.5" y="181" width="7.4" height="15.0" fill="rgb(244,74,36)" rx="2" ry="2" />
<text  x="986.50" y="191.5" ></text>
</g>
<g >
<title>cpu_startup_entry (16 samples, 10.00%)</title><rect x="1064.6" y="373" width="118.0" height="15.0" fill="rgb(221,12,45)" rx="2" ry="2" />
<text  x="1067.62" y="383.5" >cpu_startup_en..</text>
</g>
<g >
<title>copy_page_to_iter (6 samples, 3.75%)</title><rect x="452.5" y="85" width="44.3" height="15.0" fill="rgb(237,37,17)" rx="2" ry="2" />
<text  x="455.50" y="95.5" >copy..</text>
</g>
<g >
<title>x86_pmu_enable (64 samples, 40.00%)</title><rect x="511.5" y="69" width="472.0" height="15.0" fill="rgb(228,209,49)" rx="2" ry="2" />
<text  x="514.50" y="79.5" >x86_pmu_enable</text>
</g>
<g >
<title>generic_file_read_iter (8 samples, 5.00%)</title><rect x="437.8" y="117" width="59.0" height="15.0" fill="rgb(219,138,26)" rx="2" ry="2" />
<text  x="440.75" y="127.5" >generi..</text>
</g>
<g >
<title>smp_call_function_single (64 samples, 40.00%)</title><rect x="511.5" y="165" width="472.0" height="15.0" fill="rgb(253,177,7)" rx="2" ry="2" />
<text  x="514.50" y="175.5" >smp_call_function_single</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.62%)</title><rect x="1064.6" y="213" width="7.4" height="15.0" fill="rgb(210,134,23)" rx="2" ry="2" />
<text  x="1067.62" y="223.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (1 samples, 0.62%)</title><rect x="983.5" y="341" width="7.4" height="15.0" fill="rgb(221,3,5)" rx="2" ry="2" />
<text  x="986.50" y="351.5" ></text>
</g>
<g >
<title>__ioctl (64 samples, 40.00%)</title><rect x="511.5" y="309" width="472.0" height="15.0" fill="rgb(238,210,23)" rx="2" ry="2" />
<text  x="514.50" y="319.5" >__ioctl</text>
</g>
<g >
<title>poll_idle (1 samples, 0.62%)</title><rect x="1182.6" y="229" width="7.4" height="15.0" fill="rgb(215,33,7)" rx="2" ry="2" />
<text  x="1185.62" y="239.5" ></text>
</g>
<g >
<title>psi_task_switch (1 samples, 0.62%)</title><rect x="496.8" y="149" width="7.3" height="15.0" fill="rgb(211,66,6)" rx="2" ry="2" />
<text  x="499.75" y="159.5" ></text>
</g>
<g >
<title>_perf_ioctl (64 samples, 40.00%)</title><rect x="511.5" y="229" width="472.0" height="15.0" fill="rgb(236,225,51)" rx="2" ry="2" />
<text  x="514.50" y="239.5" >_perf_ioctl</text>
</g>
<g >
<title>vfs_iter_read (8 samples, 5.00%)</title><rect x="437.8" y="181" width="59.0" height="15.0" fill="rgb(237,4,9)" rx="2" ry="2" />
<text  x="440.75" y="191.5" >vfs_it..</text>
</g>
<g >
<title>affinity__set (2 samples, 1.25%)</title><rect x="496.8" y="341" width="14.7" height="15.0" fill="rgb(249,150,50)" rx="2" ry="2" />
<text  x="499.75" y="351.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (1 samples, 0.62%)</title><rect x="1182.6" y="389" width="7.4" height="15.0" fill="rgb(232,125,32)" rx="2" ry="2" />
<text  x="1185.62" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (64 samples, 40.00%)</title><rect x="511.5" y="293" width="472.0" height="15.0" fill="rgb(225,104,12)" rx="2" ry="2" />
<text  x="514.50" y="303.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>do_iter_read (8 samples, 5.00%)</title><rect x="437.8" y="165" width="59.0" height="15.0" fill="rgb(254,108,7)" rx="2" ry="2" />
<text  x="440.75" y="175.5" >do_ite..</text>
</g>
<g >
<title>start_secondary (16 samples, 10.00%)</title><rect x="1064.6" y="389" width="118.0" height="15.0" fill="rgb(228,116,48)" rx="2" ry="2" />
<text  x="1067.62" y="399.5" >start_secondary</text>
</g>
<g >
<title>record__pushfn (1 samples, 0.62%)</title><rect x="983.5" y="309" width="7.4" height="15.0" fill="rgb(229,30,48)" rx="2" ry="2" />
<text  x="986.50" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.62%)</title><rect x="983.5" y="245" width="7.4" height="15.0" fill="rgb(207,144,39)" rx="2" ry="2" />
<text  x="986.50" y="255.5" ></text>
</g>
<g >
<title>unset_bash_input (2 samples, 1.25%)</title><rect x="17.4" y="245" width="14.7" height="15.0" fill="rgb(223,53,15)" rx="2" ry="2" />
<text  x="20.38" y="255.5" ></text>
</g>
<g >
<title>cmd_record (67 samples, 41.88%)</title><rect x="496.8" y="389" width="494.1" height="15.0" fill="rgb(237,161,41)" rx="2" ry="2" />
<text  x="499.75" y="399.5" >cmd_record</text>
</g>
<g >
<title>perf (67 samples, 41.88%)</title><rect x="496.8" y="421" width="494.1" height="15.0" fill="rgb(251,191,46)" rx="2" ry="2" />
<text  x="499.75" y="431.5" >perf</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.62%)</title><rect x="983.5" y="229" width="7.4" height="15.0" fill="rgb(227,227,4)" rx="2" ry="2" />
<text  x="986.50" y="239.5" ></text>
</g>
<g >
<title>record__mmap_read_all (1 samples, 0.62%)</title><rect x="983.5" y="357" width="7.4" height="15.0" fill="rgb(210,80,13)" rx="2" ry="2" />
<text  x="986.50" y="367.5" ></text>
</g>
<g >
<title>generic_exec_single (64 samples, 40.00%)</title><rect x="511.5" y="149" width="472.0" height="15.0" fill="rgb(209,49,28)" rx="2" ry="2" />
<text  x="514.50" y="159.5" >generic_exec_single</text>
</g>
<g >
<title>alx_mask_msix (1 samples, 0.62%)</title><rect x="1064.6" y="149" width="7.4" height="15.0" fill="rgb(238,4,50)" rx="2" ry="2" />
<text  x="1067.62" y="159.5" ></text>
</g>
<g >
<title>handle_mm_fault (2 samples, 1.25%)</title><rect x="17.4" y="181" width="14.7" height="15.0" fill="rgb(220,10,41)" rx="2" ry="2" />
<text  x="20.38" y="191.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 38.75%)</title><rect x="39.5" y="373" width="457.3" height="15.0" fill="rgb(207,96,5)" rx="2" ry="2" />
<text  x="42.50" y="383.5" >[grep]</text>
</g>
<g >
<title>perf_mmap__push (1 samples, 0.62%)</title><rect x="983.5" y="325" width="7.4" height="15.0" fill="rgb(253,178,25)" rx="2" ry="2" />
<text  x="986.50" y="335.5" ></text>
</g>
<g >
<title>execute_command_internal (3 samples, 1.88%)</title><rect x="10.0" y="277" width="22.1" height="15.0" fill="rgb(226,114,30)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >e..</text>
</g>
<g >
<title>cpuidle_idle_call (16 samples, 10.00%)</title><rect x="1064.6" y="341" width="118.0" height="15.0" fill="rgb(223,178,45)" rx="2" ry="2" />
<text  x="1067.62" y="351.5" >cpuidle_idle_c..</text>
</g>
<g >
<title>new_sync_read (8 samples, 5.00%)</title><rect x="437.8" y="213" width="59.0" height="15.0" fill="rgb(229,200,40)" rx="2" ry="2" />
<text  x="440.75" y="223.5" >new_sy..</text>
</g>
<g >
<title>do_fault (2 samples, 1.25%)</title><rect x="17.4" y="133" width="14.7" height="15.0" fill="rgb(224,118,50)" rx="2" ry="2" />
<text  x="20.38" y="143.5" ></text>
</g>
<g >
<title>grep (62 samples, 38.75%)</title><rect x="39.5" y="421" width="457.3" height="15.0" fill="rgb(223,179,5)" rx="2" ry="2" />
<text  x="42.50" y="431.5" >grep</text>
</g>
<g >
<title>generic_file_buffered_read (8 samples, 5.00%)</title><rect x="437.8" y="101" width="59.0" height="15.0" fill="rgb(236,20,21)" rx="2" ry="2" />
<text  x="440.75" y="111.5" >generi..</text>
</g>
<g >
<title>start_kernel (1 samples, 0.62%)</title><rect x="1182.6" y="357" width="7.4" height="15.0" fill="rgb(207,26,21)" rx="2" ry="2" />
<text  x="1185.62" y="367.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (64 samples, 40.00%)</title><rect x="511.5" y="341" width="472.0" height="15.0" fill="rgb(242,117,47)" rx="2" ry="2" />
<text  x="514.50" y="351.5" >perf_evsel__enable_cpu</text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.62%)</title><rect x="983.5" y="37" width="7.4" height="15.0" fill="rgb(244,168,30)" rx="2" ry="2" />
<text  x="986.50" y="47.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 5.00%)</title><rect x="437.8" y="277" width="59.0" height="15.0" fill="rgb(240,69,24)" rx="2" ry="2" />
<text  x="440.75" y="287.5" >do_sys..</text>
</g>
<g >
<title>net_rx_action (1 samples, 0.62%)</title><rect x="1064.6" y="197" width="7.4" height="15.0" fill="rgb(232,15,18)" rx="2" ry="2" />
<text  x="1067.62" y="207.5" ></text>
</g>
<g >
<title>do_user_addr_fault (2 samples, 1.25%)</title><rect x="17.4" y="197" width="14.7" height="15.0" fill="rgb(228,51,6)" rx="2" ry="2" />
<text  x="20.38" y="207.5" ></text>
</g>
<g >
<title>ion (1 samples, 0.62%)</title><rect x="983.5" y="277" width="7.4" height="15.0" fill="rgb(224,184,51)" rx="2" ry="2" />
<text  x="986.50" y="287.5" ></text>
</g>
<g >
<title>event_function_call (64 samples, 40.00%)</title><rect x="511.5" y="181" width="472.0" height="15.0" fill="rgb(214,113,17)" rx="2" ry="2" />
<text  x="514.50" y="191.5" >event_function_call</text>
</g>
<g >
<title>ext4_buffered_write_iter (1 samples, 0.62%)</title><rect x="983.5" y="69" width="7.4" height="15.0" fill="rgb(244,187,41)" rx="2" ry="2" />
<text  x="986.50" y="79.5" ></text>
</g>
<g >
<title>main (3 samples, 1.88%)</title><rect x="10.0" y="373" width="22.1" height="15.0" fill="rgb(245,112,19)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >m..</text>
</g>
<g >
<title>handle_pte_fault (2 samples, 1.25%)</title><rect x="17.4" y="149" width="14.7" height="15.0" fill="rgb(213,214,11)" rx="2" ry="2" />
<text  x="20.38" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_read (8 samples, 5.00%)</title><rect x="437.8" y="261" width="59.0" height="15.0" fill="rgb(217,44,37)" rx="2" ry="2" />
<text  x="440.75" y="271.5" >__x64_..</text>
</g>
<g >
<title>ksys_write (1 samples, 0.62%)</title><rect x="983.5" y="197" width="7.4" height="15.0" fill="rgb(241,101,15)" rx="2" ry="2" />
<text  x="986.50" y="207.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.62%)</title><rect x="1064.6" y="277" width="7.4" height="15.0" fill="rgb(220,105,48)" rx="2" ry="2" />
<text  x="1067.62" y="287.5" ></text>
</g>
<g >
<title>alx_poll (1 samples, 0.62%)</title><rect x="1064.6" y="165" width="7.4" height="15.0" fill="rgb(235,210,45)" rx="2" ry="2" />
<text  x="1067.62" y="175.5" ></text>
</g>
<g >
<title>ovl_read_iter (8 samples, 5.00%)</title><rect x="437.8" y="197" width="59.0" height="15.0" fill="rgb(221,137,46)" rx="2" ry="2" />
<text  x="440.75" y="207.5" >ovl_re..</text>
</g>
<g >
<title>rest_init (1 samples, 0.62%)</title><rect x="1182.6" y="325" width="7.4" height="15.0" fill="rgb(227,121,23)" rx="2" ry="2" />
<text  x="1185.62" y="335.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (8 samples, 5.00%)</title><rect x="437.8" y="149" width="59.0" height="15.0" fill="rgb(205,69,46)" rx="2" ry="2" />
<text  x="440.75" y="159.5" >do_ite..</text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.62%)</title><rect x="1064.6" y="293" width="7.4" height="15.0" fill="rgb(242,227,9)" rx="2" ry="2" />
<text  x="1067.62" y="303.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (2 samples, 1.25%)</title><rect x="17.4" y="229" width="14.7" height="15.0" fill="rgb(219,140,16)" rx="2" ry="2" />
<text  x="20.38" y="239.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (1 samples, 0.62%)</title><rect x="1182.6" y="277" width="7.4" height="15.0" fill="rgb(224,40,18)" rx="2" ry="2" />
<text  x="1185.62" y="287.5" ></text>
</g>
<g >
<title>all (160 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(244,54,30)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 38.75%)</title><rect x="39.5" y="405" width="457.3" height="15.0" fill="rgb(206,140,14)" rx="2" ry="2" />
<text  x="42.50" y="415.5" >[grep]</text>
</g>
<g >
<title>do_iter_readv_writev (1 samples, 0.62%)</title><rect x="983.5" y="101" width="7.4" height="15.0" fill="rgb(247,18,6)" rx="2" ry="2" />
<text  x="986.50" y="111.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (64 samples, 40.00%)</title><rect x="511.5" y="53" width="472.0" height="15.0" fill="rgb(222,39,45)" rx="2" ry="2" />
<text  x="514.50" y="63.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>swapper (27 samples, 16.88%)</title><rect x="990.9" y="421" width="199.1" height="15.0" fill="rgb(217,167,15)" rx="2" ry="2" />
<text  x="993.88" y="431.5" >swapper</text>
</g>
<g >
<title>ovl_write_iter (1 samples, 0.62%)</title><rect x="983.5" y="149" width="7.4" height="15.0" fill="rgb(228,112,41)" rx="2" ry="2" />
<text  x="986.50" y="159.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.62%)</title><rect x="32.1" y="405" width="7.4" height="15.0" fill="rgb(216,134,12)" rx="2" ry="2" />
<text  x="35.12" y="415.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.62%)</title><rect x="1064.6" y="261" width="7.4" height="15.0" fill="rgb(233,118,31)" rx="2" ry="2" />
<text  x="1067.62" y="271.5" ></text>
</g>
<g >
<title>[grep] (62 samples, 38.75%)</title><rect x="39.5" y="325" width="457.3" height="15.0" fill="rgb(244,183,31)" rx="2" ry="2" />
<text  x="42.50" y="335.5" >[grep]</text>
</g>
<g >
<title>__x64_sys_ioctl (64 samples, 40.00%)</title><rect x="511.5" y="261" width="472.0" height="15.0" fill="rgb(247,86,39)" rx="2" ry="2" />
<text  x="514.50" y="271.5" >__x64_sys_ioctl</text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.62%)</title><rect x="983.5" y="213" width="7.4" height="15.0" fill="rgb(251,88,8)" rx="2" ry="2" />
<text  x="986.50" y="223.5" ></text>
</g>
<g >
<title>copy_page_to_iter_iovec (6 samples, 3.75%)</title><rect x="452.5" y="69" width="44.3" height="15.0" fill="rgb(206,82,21)" rx="2" ry="2" />
<text  x="455.50" y="79.5" >copy..</text>
</g>
<g >
<title>do_syscall_64 (64 samples, 40.00%)</title><rect x="511.5" y="277" width="472.0" height="15.0" fill="rgb(217,104,11)" rx="2" ry="2" />
<text  x="514.50" y="287.5" >do_syscall_64</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 5.00%)</title><rect x="437.8" y="293" width="59.0" height="15.0" fill="rgb(233,81,31)" rx="2" ry="2" />
<text  x="440.75" y="303.5" >entry_..</text>
</g>
<g >
<title>perf_ioctl (64 samples, 40.00%)</title><rect x="511.5" y="245" width="472.0" height="15.0" fill="rgb(218,158,48)" rx="2" ry="2" />
<text  x="514.50" y="255.5" >perf_ioctl</text>
</g>
<g >
<title>reader_loop (3 samples, 1.88%)</title><rect x="10.0" y="357" width="22.1" height="15.0" fill="rgb(242,102,12)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >r..</text>
</g>
<g >
<title>ext4_file_read_iter (8 samples, 5.00%)</title><rect x="437.8" y="133" width="59.0" height="15.0" fill="rgb(218,80,36)" rx="2" ry="2" />
<text  x="440.75" y="143.5" >ext4_f..</text>
</g>
<g >
<title>event_function (64 samples, 40.00%)</title><rect x="511.5" y="117" width="472.0" height="15.0" fill="rgb(228,162,16)" rx="2" ry="2" />
<text  x="514.50" y="127.5" >event_function</text>
</g>
<g >
<title>[grep] (62 samples, 38.75%)</title><rect x="39.5" y="341" width="457.3" height="15.0" fill="rgb(206,215,49)" rx="2" ry="2" />
<text  x="42.50" y="351.5" >[grep]</text>
</g>
<g >
<title>_start (3 samples, 1.88%)</title><rect x="10.0" y="405" width="22.1" height="15.0" fill="rgb(235,145,39)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >_..</text>
</g>
<g >
<title>sched_setaffinity (2 samples, 1.25%)</title><rect x="496.8" y="261" width="14.7" height="15.0" fill="rgb(244,119,48)" rx="2" ry="2" />
<text  x="499.75" y="271.5" ></text>
</g>
<g >
<title>ctx_resched (64 samples, 40.00%)</title><rect x="511.5" y="85" width="472.0" height="15.0" fill="rgb(209,104,5)" rx="2" ry="2" />
<text  x="514.50" y="95.5" >ctx_resched</text>
</g>
<g >
<title>execute_command (3 samples, 1.88%)</title><rect x="10.0" y="341" width="22.1" height="15.0" fill="rgb(235,8,19)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >e..</text>
</g>
<g >
<title>alloc_set_pte (1 samples, 0.62%)</title><rect x="24.8" y="85" width="7.3" height="15.0" fill="rgb(242,131,11)" rx="2" ry="2" />
<text  x="27.75" y="95.5" ></text>
</g>
<g >
<title>poll_idle (1 samples, 0.62%)</title><rect x="1175.2" y="293" width="7.4" height="15.0" fill="rgb(253,124,47)" rx="2" ry="2" />
<text  x="1178.25" y="303.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (64 samples, 40.00%)</title><rect x="511.5" y="213" width="472.0" height="15.0" fill="rgb(233,171,38)" rx="2" ry="2" />
<text  x="514.50" y="223.5" >perf_event_for_each_child</text>
</g>
<g >
<title>[bash] (3 samples, 1.88%)</title><rect x="10.0" y="293" width="22.1" height="15.0" fill="rgb(253,228,2)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >[..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 1.25%)</title><rect x="496.8" y="293" width="14.7" height="15.0" fill="rgb(248,81,19)" rx="2" ry="2" />
<text  x="499.75" y="303.5" ></text>
</g>
<g >
<title>__GI___fork (1 samples, 0.62%)</title><rect x="10.0" y="245" width="7.4" height="15.0" fill="rgb(231,37,6)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>__libc_start_main (62 samples, 38.75%)</title><rect x="39.5" y="389" width="457.3" height="15.0" fill="rgb(233,115,13)" rx="2" ry="2" />
<text  x="42.50" y="399.5" >__libc_start_main</text>
</g>
<g >
<title>_IO_new_file_xsputn (1 samples, 0.62%)</title><rect x="430.4" y="277" width="7.4" height="15.0" fill="rgb(229,98,3)" rx="2" ry="2" />
<text  x="433.38" y="287.5" ></text>
</g>
<g >
<title>native_write_msr (64 samples, 40.00%)</title><rect x="511.5" y="37" width="472.0" height="15.0" fill="rgb(247,186,37)" rx="2" ry="2" />
<text  x="514.50" y="47.5" >native_write_msr</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (6 samples, 3.75%)</title><rect x="452.5" y="53" width="44.3" height="15.0" fill="rgb(210,216,19)" rx="2" ry="2" />
<text  x="455.50" y="63.5" >copy..</text>
</g>
<g >
<title>[grep] (62 samples, 38.75%)</title><rect x="39.5" y="357" width="457.3" height="15.0" fill="rgb(226,7,6)" rx="2" ry="2" />
<text  x="42.50" y="367.5" >[grep]</text>
</g>
<g >
<title>new_sync_write (1 samples, 0.62%)</title><rect x="983.5" y="165" width="7.4" height="15.0" fill="rgb(219,68,1)" rx="2" ry="2" />
<text  x="986.50" y="175.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (17 samples, 10.62%)</title><rect x="1064.6" y="405" width="125.4" height="15.0" fill="rgb(207,58,0)" rx="2" ry="2" />
<text  x="1067.62" y="415.5" >secondary_start..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 1.25%)</title><rect x="496.8" y="309" width="14.7" height="15.0" fill="rgb(248,172,47)" rx="2" ry="2" />
<text  x="499.75" y="319.5" ></text>
</g>
<g >
<title>ksys_read (8 samples, 5.00%)</title><rect x="437.8" y="245" width="59.0" height="15.0" fill="rgb(237,97,7)" rx="2" ry="2" />
<text  x="440.75" y="255.5" >ksys_r..</text>
</g>
<g >
<title>__cmd_record (67 samples, 41.88%)</title><rect x="496.8" y="373" width="494.1" height="15.0" fill="rgb(250,127,44)" rx="2" ry="2" />
<text  x="499.75" y="383.5" >__cmd_record</text>
</g>
<g >
<title>__GI___sched_setaffinity_new (2 samples, 1.25%)</title><rect x="496.8" y="325" width="14.7" height="15.0" fill="rgb(225,197,26)" rx="2" ry="2" />
<text  x="499.75" y="335.5" ></text>
</g>
<g >
<title>bash (4 samples, 2.50%)</title><rect x="10.0" y="421" width="29.5" height="15.0" fill="rgb(242,127,10)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >bash</text>
</g>
<g >
<title>record__write (1 samples, 0.62%)</title><rect x="983.5" y="293" width="7.4" height="15.0" fill="rgb(215,49,5)" rx="2" ry="2" />
<text  x="986.50" y="303.5" ></text>
</g>
<g >
<title>arch_call_rest_init (1 samples, 0.62%)</title><rect x="1182.6" y="341" width="7.4" height="15.0" fill="rgb(234,203,15)" rx="2" ry="2" />
<text  x="1185.62" y="351.5" ></text>
</g>
<g >
<title>vfs_iter_write (1 samples, 0.62%)</title><rect x="983.5" y="133" width="7.4" height="15.0" fill="rgb(238,89,18)" rx="2" ry="2" />
<text  x="986.50" y="143.5" ></text>
</g>
<g >
<title>do_idle (16 samples, 10.00%)</title><rect x="1064.6" y="357" width="118.0" height="15.0" fill="rgb(236,214,49)" rx="2" ry="2" />
<text  x="1067.62" y="367.5" >do_idle</text>
</g>
<g >
<title>__perf_event_enable (64 samples, 40.00%)</title><rect x="511.5" y="101" width="472.0" height="15.0" fill="rgb(228,60,9)" rx="2" ry="2" />
<text  x="514.50" y="111.5" >__perf_event_enable</text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (14 samples, 8.75%)</title><rect x="1072.0" y="293" width="103.2" height="15.0" fill="rgb(250,201,18)" rx="2" ry="2" />
<text  x="1075.00" y="303.5" >mwait_idle_w..</text>
</g>
<g >
<title>do_iter_write (1 samples, 0.62%)</title><rect x="983.5" y="117" width="7.4" height="15.0" fill="rgb(247,124,35)" rx="2" ry="2" />
<text  x="986.50" y="127.5" ></text>
</g>
<g >
<title>psi_group_change (1 samples, 0.62%)</title><rect x="496.8" y="133" width="7.3" height="15.0" fill="rgb(210,139,53)" rx="2" ry="2" />
<text  x="499.75" y="143.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1 samples, 0.62%)</title><rect x="1182.6" y="245" width="7.4" height="15.0" fill="rgb(213,37,44)" rx="2" ry="2" />
<text  x="1185.62" y="255.5" ></text>
</g>
<g >
<title>__GI___read (8 samples, 5.00%)</title><rect x="437.8" y="309" width="59.0" height="15.0" fill="rgb(206,126,37)" rx="2" ry="2" />
<text  x="440.75" y="319.5" >__GI__..</text>
</g>
<g >
<title>__GI_fwrite_unlocked (1 samples, 0.62%)</title><rect x="430.4" y="293" width="7.4" height="15.0" fill="rgb(207,99,9)" rx="2" ry="2" />
<text  x="433.38" y="303.5" ></text>
</g>
<g >
<title>filemap_map_pages (2 samples, 1.25%)</title><rect x="17.4" y="101" width="14.7" height="15.0" fill="rgb(208,150,4)" rx="2" ry="2" />
<text  x="20.38" y="111.5" ></text>
</g>
<g >
<title>__libc_start_main (3 samples, 1.88%)</title><rect x="10.0" y="389" width="22.1" height="15.0" fill="rgb(213,68,38)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >_..</text>
</g>
<g >
<title>generic_perform_write (1 samples, 0.62%)</title><rect x="983.5" y="53" width="7.4" height="15.0" fill="rgb(220,123,12)" rx="2" ry="2" />
<text  x="986.50" y="63.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (16 samples, 10.00%)</title><rect x="1064.6" y="309" width="118.0" height="15.0" fill="rgb(231,176,52)" rx="2" ry="2" />
<text  x="1067.62" y="319.5" >cpuidle_enter_..</text>
</g>
<g >
<title>[unknown] (67 samples, 41.88%)</title><rect x="496.8" y="405" width="494.1" height="15.0" fill="rgb(245,190,48)" rx="2" ry="2" />
<text  x="499.75" y="415.5" >[unknown]</text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 1.25%)</title><rect x="17.4" y="165" width="14.7" height="15.0" fill="rgb(239,17,36)" rx="2" ry="2" />
<text  x="20.38" y="175.5" ></text>
</g>
<g >
<title>execute_command_internal (3 samples, 1.88%)</title><rect x="10.0" y="325" width="22.1" height="15.0" fill="rgb(212,97,0)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >e..</text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.62%)</title><rect x="1064.6" y="245" width="7.4" height="15.0" fill="rgb(237,86,40)" rx="2" ry="2" />
<text  x="1067.62" y="255.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (1 samples, 0.62%)</title><rect x="1182.6" y="373" width="7.4" height="15.0" fill="rgb(250,11,41)" rx="2" ry="2" />
<text  x="1185.62" y="383.5" ></text>
</g>
<g >
<title>do_idle (1 samples, 0.62%)</title><rect x="1182.6" y="293" width="7.4" height="15.0" fill="rgb(223,0,31)" rx="2" ry="2" />
<text  x="1185.62" y="303.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1 samples, 0.62%)</title><rect x="983.5" y="85" width="7.4" height="15.0" fill="rgb(240,208,13)" rx="2" ry="2" />
<text  x="986.50" y="95.5" ></text>
</g>
<g >
<title>wait_for_completion (2 samples, 1.25%)</title><rect x="496.8" y="213" width="14.7" height="15.0" fill="rgb(253,149,11)" rx="2" ry="2" />
<text  x="499.75" y="223.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.62%)</title><rect x="983.5" y="261" width="7.4" height="15.0" fill="rgb(239,175,21)" rx="2" ry="2" />
<text  x="986.50" y="271.5" ></text>
</g>
<g >
<title>do_fault_around (2 samples, 1.25%)</title><rect x="17.4" y="117" width="14.7" height="15.0" fill="rgb(229,180,37)" rx="2" ry="2" />
<text  x="20.38" y="127.5" ></text>
</g>
<g >
<title>affine_move_task (2 samples, 1.25%)</title><rect x="496.8" y="229" width="14.7" height="15.0" fill="rgb(230,171,48)" rx="2" ry="2" />
<text  x="499.75" y="239.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.62%)</title><rect x="1064.6" y="229" width="7.4" height="15.0" fill="rgb(252,82,1)" rx="2" ry="2" />
<text  x="1067.62" y="239.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (64 samples, 40.00%)</title><rect x="511.5" y="325" width="472.0" height="15.0" fill="rgb(242,22,49)" rx="2" ry="2" />
<text  x="514.50" y="335.5" >perf_evsel__run_ioctl</text>
</g>
<g >
<title>remote_function (64 samples, 40.00%)</title><rect x="511.5" y="133" width="472.0" height="15.0" fill="rgb(246,5,25)" rx="2" ry="2" />
<text  x="514.50" y="143.5" >remote_function</text>
</g>
<g >
<title>enter_lazy_tlb (1 samples, 0.62%)</title><rect x="504.1" y="165" width="7.4" height="15.0" fill="rgb(254,219,29)" rx="2" ry="2" />
<text  x="507.12" y="175.5" ></text>
</g>
</g>
</svg>
