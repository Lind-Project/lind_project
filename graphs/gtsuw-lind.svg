<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="854.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="837" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="837" > </text>
<g id="frames">
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.08%)</title><rect x="974.7" y="181" width="0.9" height="15.0" fill="rgb(230,56,7)" rx="2" ry="2" />
<text  x="977.66" y="191.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (2 samples, 0.16%)</title><rect x="1149.4" y="533" width="2.0" height="15.0" fill="rgb(241,198,9)" rx="2" ry="2" />
<text  x="1152.44" y="543.5" ></text>
</g>
<g >
<title>shmem_undo_range (1 samples, 0.08%)</title><rect x="1031.6" y="437" width="1.0" height="15.0" fill="rgb(222,17,54)" rx="2" ry="2" />
<text  x="1034.64" y="447.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (4 samples, 0.33%)</title><rect x="110.4" y="757" width="3.9" height="15.0" fill="rgb(250,147,40)" rx="2" ry="2" />
<text  x="113.43" y="767.5" ></text>
</g>
<g >
<title>NaClSysExecve (1 samples, 0.08%)</title><rect x="974.7" y="757" width="0.9" height="15.0" fill="rgb(219,207,21)" rx="2" ry="2" />
<text  x="977.66" y="767.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="1028.7" y="565" width="1.0" height="15.0" fill="rgb(205,64,35)" rx="2" ry="2" />
<text  x="1031.74" y="575.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (36 samples, 2.95%)</title><rect x="333.5" y="565" width="34.7" height="15.0" fill="rgb(215,56,42)" rx="2" ry="2" />
<text  x="336.49" y="575.5" >co..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="1027.8" y="533" width="0.9" height="15.0" fill="rgb(229,64,52)" rx="2" ry="2" />
<text  x="1030.77" y="543.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (9 samples, 0.74%)</title><rect x="1004.6" y="373" width="8.7" height="15.0" fill="rgb(218,107,39)" rx="2" ry="2" />
<text  x="1007.60" y="383.5" ></text>
</g>
<g >
<title>ext4_finish_bio (1 samples, 0.08%)</title><rect x="1059.6" y="661" width="1.0" height="15.0" fill="rgb(223,161,40)" rx="2" ry="2" />
<text  x="1062.64" y="671.5" ></text>
</g>
<g >
<title>ext4_do_flush_completed_IO.isra.0 (1 samples, 0.08%)</title><rect x="1059.6" y="693" width="1.0" height="15.0" fill="rgb(236,149,37)" rx="2" ry="2" />
<text  x="1062.64" y="703.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.08%)</title><rect x="974.7" y="533" width="0.9" height="15.0" fill="rgb(235,73,28)" rx="2" ry="2" />
<text  x="977.66" y="543.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="155.8" y="565" width="1.0" height="15.0" fill="rgb(231,76,48)" rx="2" ry="2" />
<text  x="158.81" y="575.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.08%)</title><rect x="1148.5" y="549" width="0.9" height="15.0" fill="rgb(208,216,26)" rx="2" ry="2" />
<text  x="1151.48" y="559.5" ></text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.08%)</title><rect x="1029.7" y="517" width="1.0" height="15.0" fill="rgb(252,9,25)" rx="2" ry="2" />
<text  x="1032.71" y="527.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (9 samples, 0.74%)</title><rect x="1004.6" y="613" width="8.7" height="15.0" fill="rgb(233,26,4)" rx="2" ry="2" />
<text  x="1007.60" y="623.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.74%)</title><rect x="1004.6" y="565" width="8.7" height="15.0" fill="rgb(245,45,27)" rx="2" ry="2" />
<text  x="1007.60" y="575.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.16%)</title><rect x="987.2" y="757" width="1.9" height="15.0" fill="rgb(207,196,25)" rx="2" ry="2" />
<text  x="990.22" y="767.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (1 samples, 0.08%)</title><rect x="985.3" y="757" width="1.0" height="15.0" fill="rgb(206,219,15)" rx="2" ry="2" />
<text  x="988.29" y="767.5" ></text>
</g>
<g >
<title>arch_do_signal_or_restart (3 samples, 0.25%)</title><rect x="1029.7" y="693" width="2.9" height="15.0" fill="rgb(240,61,43)" rx="2" ry="2" />
<text  x="1032.71" y="703.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.08%)</title><rect x="1063.5" y="645" width="1.0" height="15.0" fill="rgb(223,34,22)" rx="2" ry="2" />
<text  x="1066.50" y="655.5" ></text>
</g>
<g >
<title>pick_next_task_fair (2 samples, 0.16%)</title><rect x="1184.2" y="613" width="1.9" height="15.0" fill="rgb(234,12,6)" rx="2" ry="2" />
<text  x="1187.21" y="623.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.08%)</title><rect x="1028.7" y="37" width="1.0" height="15.0" fill="rgb(238,222,36)" rx="2" ry="2" />
<text  x="1031.74" y="47.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::capacity (5 samples, 0.41%)</title><rect x="142.3" y="757" width="4.8" height="15.0" fill="rgb(236,61,21)" rx="2" ry="2" />
<text  x="145.29" y="767.5" ></text>
</g>
<g >
<title>ValidateChunkAMD64 (2 samples, 0.16%)</title><rect x="153.9" y="661" width="1.9" height="15.0" fill="rgb(205,199,15)" rx="2" ry="2" />
<text  x="156.88" y="671.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.08%)</title><rect x="1027.8" y="453" width="0.9" height="15.0" fill="rgb(215,57,14)" rx="2" ry="2" />
<text  x="1030.77" y="463.5" ></text>
</g>
<g >
<title>mpage_map_and_submit_extent (1 samples, 0.08%)</title><rect x="1061.6" y="565" width="0.9" height="15.0" fill="rgb(243,104,32)" rx="2" ry="2" />
<text  x="1064.57" y="575.5" ></text>
</g>
<g >
<title>schedule_idle (3 samples, 0.25%)</title><rect x="1184.2" y="645" width="2.9" height="15.0" fill="rgb(221,73,15)" rx="2" ry="2" />
<text  x="1187.21" y="655.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.08%)</title><rect x="155.8" y="629" width="1.0" height="15.0" fill="rgb(238,26,45)" rx="2" ry="2" />
<text  x="158.81" y="639.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1028.7" y="485" width="1.0" height="15.0" fill="rgb(223,92,45)" rx="2" ry="2" />
<text  x="1031.74" y="495.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.25%)</title><rect x="116.2" y="757" width="2.9" height="15.0" fill="rgb(218,134,46)" rx="2" ry="2" />
<text  x="119.22" y="767.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.08%)</title><rect x="1028.7" y="341" width="1.0" height="15.0" fill="rgb(231,17,31)" rx="2" ry="2" />
<text  x="1031.74" y="351.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.08%)</title><rect x="1028.7" y="293" width="1.0" height="15.0" fill="rgb(216,31,6)" rx="2" ry="2" />
<text  x="1031.74" y="303.5" ></text>
</g>
<g >
<title>NaClSysReadDecoder (647 samples, 52.95%)</title><rect x="157.7" y="741" width="624.8" height="15.0" fill="rgb(210,185,30)" rx="2" ry="2" />
<text  x="160.74" y="751.5" >NaClSysReadDecoder</text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts_mut (17 samples, 1.39%)</title><rect x="238.9" y="549" width="16.4" height="15.0" fill="rgb(243,165,37)" rx="2" ry="2" />
<text  x="241.85" y="559.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicBool::load (1 samples, 0.08%)</title><rect x="1002.7" y="757" width="0.9" height="15.0" fill="rgb(225,100,52)" rx="2" ry="2" />
<text  x="1005.67" y="767.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.08%)</title><rect x="1028.7" y="549" width="1.0" height="15.0" fill="rgb(218,30,42)" rx="2" ry="2" />
<text  x="1031.74" y="559.5" ></text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.16%)</title><rect x="197.3" y="597" width="2.0" height="15.0" fill="rgb(209,90,43)" rx="2" ry="2" />
<text  x="200.33" y="607.5" ></text>
</g>
<g >
<title>do_idle (43 samples, 3.52%)</title><rect x="1147.5" y="661" width="41.5" height="15.0" fill="rgb(234,173,45)" rx="2" ry="2" />
<text  x="1150.51" y="671.5" >do_..</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (5 samples, 0.41%)</title><rect x="162.6" y="293" width="4.8" height="15.0" fill="rgb(207,121,47)" rx="2" ry="2" />
<text  x="165.57" y="303.5" ></text>
</g>
<g >
<title>poll_idle (14 samples, 1.15%)</title><rect x="1166.8" y="597" width="13.5" height="15.0" fill="rgb(216,9,3)" rx="2" ry="2" />
<text  x="1169.82" y="607.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="1027.8" y="293" width="0.9" height="15.0" fill="rgb(228,139,0)" rx="2" ry="2" />
<text  x="1030.77" y="303.5" ></text>
</g>
<g >
<title>schedule_idle (1 samples, 0.08%)</title><rect x="1146.5" y="709" width="1.0" height="15.0" fill="rgb(229,207,33)" rx="2" ry="2" />
<text  x="1149.55" y="719.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 0.08%)</title><rect x="1011.4" y="149" width="0.9" height="15.0" fill="rgb(244,143,23)" rx="2" ry="2" />
<text  x="1014.36" y="159.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.08%)</title><rect x="155.8" y="645" width="1.0" height="15.0" fill="rgb(240,143,27)" rx="2" ry="2" />
<text  x="158.81" y="655.5" ></text>
</g>
<g >
<title>mark_page_accessed (2 samples, 0.16%)</title><rect x="169.3" y="325" width="2.0" height="15.0" fill="rgb(252,120,47)" rx="2" ry="2" />
<text  x="172.33" y="335.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.08%)</title><rect x="1063.5" y="581" width="1.0" height="15.0" fill="rgb(215,81,6)" rx="2" ry="2" />
<text  x="1066.50" y="591.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="974.7" y="357" width="0.9" height="15.0" fill="rgb(254,30,49)" rx="2" ry="2" />
<text  x="977.66" y="367.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.08%)</title><rect x="974.7" y="117" width="0.9" height="15.0" fill="rgb(246,14,48)" rx="2" ry="2" />
<text  x="977.66" y="127.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (11 samples, 0.90%)</title><rect x="160.6" y="341" width="10.7" height="15.0" fill="rgb(223,183,15)" rx="2" ry="2" />
<text  x="163.64" y="351.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="1028.7" y="517" width="1.0" height="15.0" fill="rgb(236,51,30)" rx="2" ry="2" />
<text  x="1031.74" y="527.5" ></text>
</g>
<g >
<title>menu_select (3 samples, 0.25%)</title><rect x="1180.3" y="613" width="2.9" height="15.0" fill="rgb(207,39,3)" rx="2" ry="2" />
<text  x="1183.34" y="623.5" ></text>
</g>
<g >
<title>NaClDescIoDescRead (647 samples, 52.95%)</title><rect x="157.7" y="709" width="624.8" height="15.0" fill="rgb(206,101,51)" rx="2" ry="2" />
<text  x="160.74" y="719.5" >NaClDescIoDescRead</text>
</g>
<g >
<title>worker_thread (4 samples, 0.33%)</title><rect x="1059.6" y="741" width="3.9" height="15.0" fill="rgb(233,141,16)" rx="2" ry="2" />
<text  x="1062.64" y="751.5" ></text>
</g>
<g >
<title>do_idle (87 samples, 7.12%)</title><rect x="1063.5" y="725" width="84.0" height="15.0" fill="rgb(248,218,16)" rx="2" ry="2" />
<text  x="1066.50" y="735.5" >do_idle</text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (8 samples, 0.65%)</title><rect x="1004.6" y="261" width="7.7" height="15.0" fill="rgb(213,201,7)" rx="2" ry="2" />
<text  x="1007.60" y="271.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.08%)</title><rect x="961.1" y="757" width="1.0" height="15.0" fill="rgb(215,184,42)" rx="2" ry="2" />
<text  x="964.15" y="767.5" ></text>
</g>
<g >
<title>&lt;u32 as itoa::Integer&gt;::write (1 samples, 0.08%)</title><rect x="1012.3" y="245" width="1.0" height="15.0" fill="rgb(242,10,12)" rx="2" ry="2" />
<text  x="1015.32" y="255.5" ></text>
</g>
<g >
<title>__run_hrtimer (1 samples, 0.08%)</title><rect x="1148.5" y="501" width="0.9" height="15.0" fill="rgb(220,157,39)" rx="2" ry="2" />
<text  x="1151.48" y="511.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (2 samples, 0.16%)</title><rect x="1149.4" y="549" width="2.0" height="15.0" fill="rgb(211,158,20)" rx="2" ry="2" />
<text  x="1152.44" y="559.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.08%)</title><rect x="278.4" y="533" width="1.0" height="15.0" fill="rgb(249,201,2)" rx="2" ry="2" />
<text  x="281.45" y="543.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (1 samples, 0.08%)</title><rect x="973.7" y="581" width="1.0" height="15.0" fill="rgb(229,121,14)" rx="2" ry="2" />
<text  x="976.70" y="591.5" ></text>
</g>
<g >
<title>lind_close (1 samples, 0.08%)</title><rect x="974.7" y="645" width="0.9" height="15.0" fill="rgb(237,219,6)" rx="2" ry="2" />
<text  x="977.66" y="655.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (9 samples, 0.74%)</title><rect x="1004.6" y="389" width="8.7" height="15.0" fill="rgb(232,68,22)" rx="2" ry="2" />
<text  x="1007.60" y="399.5" ></text>
</g>
<g >
<title>iput (1 samples, 0.08%)</title><rect x="1031.6" y="517" width="1.0" height="15.0" fill="rgb(246,146,5)" rx="2" ry="2" />
<text  x="1034.64" y="527.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (52 samples, 4.26%)</title><rect x="534.3" y="501" width="50.2" height="15.0" fill="rgb(212,68,47)" rx="2" ry="2" />
<text  x="537.34" y="511.5" >core:..</text>
</g>
<g >
<title>core::sync::atomic::atomic_load (12 samples, 0.98%)</title><rect x="258.2" y="581" width="11.6" height="15.0" fill="rgb(207,137,46)" rx="2" ry="2" />
<text  x="261.17" y="591.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.08%)</title><rect x="961.1" y="725" width="1.0" height="15.0" fill="rgb(226,131,38)" rx="2" ry="2" />
<text  x="964.15" y="735.5" ></text>
</g>
<g >
<title>writeback_sb_inodes (2 samples, 0.16%)</title><rect x="1061.6" y="629" width="1.9" height="15.0" fill="rgb(238,138,5)" rx="2" ry="2" />
<text  x="1064.57" y="639.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.08%)</title><rect x="1028.7" y="53" width="1.0" height="15.0" fill="rgb(211,166,37)" rx="2" ry="2" />
<text  x="1031.74" y="63.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (9 samples, 0.74%)</title><rect x="1004.6" y="405" width="8.7" height="15.0" fill="rgb(206,26,16)" rx="2" ry="2" />
<text  x="1007.60" y="415.5" ></text>
</g>
<g >
<title>swapper (163 samples, 13.34%)</title><rect x="1032.6" y="789" width="157.4" height="15.0" fill="rgb(209,48,51)" rx="2" ry="2" />
<text  x="1035.60" y="799.5" >swapper</text>
</g>
<g >
<title>__writeback_inodes_wb (2 samples, 0.16%)</title><rect x="1061.6" y="645" width="1.9" height="15.0" fill="rgb(238,187,9)" rx="2" ry="2" />
<text  x="1064.57" y="655.5" ></text>
</g>
<g >
<title>start_secondary (87 samples, 7.12%)</title><rect x="1063.5" y="757" width="84.0" height="15.0" fill="rgb(237,90,27)" rx="2" ry="2" />
<text  x="1066.50" y="767.5" >start_sec..</text>
</g>
<g >
<title>core::cmp::Ord::min (1 samples, 0.08%)</title><rect x="108.5" y="757" width="1.0" height="15.0" fill="rgb(235,109,9)" rx="2" ry="2" />
<text  x="111.49" y="767.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (64 samples, 5.24%)</title><rect x="638.6" y="501" width="61.8" height="15.0" fill="rgb(211,125,26)" rx="2" ry="2" />
<text  x="641.63" y="511.5" >&lt;core:..</text>
</g>
<g >
<title>[unknown]  (186 samples, 15.22%)</title><rect x="782.5" y="773" width="179.6" height="15.0" fill="rgb(241,115,26)" rx="2" ry="2" />
<text  x="785.50" y="783.5" >[unknown] </text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (9 samples, 0.74%)</title><rect x="1004.6" y="549" width="8.7" height="15.0" fill="rgb(227,3,38)" rx="2" ry="2" />
<text  x="1007.60" y="559.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (9 samples, 0.74%)</title><rect x="1004.6" y="533" width="8.7" height="15.0" fill="rgb(253,198,46)" rx="2" ry="2" />
<text  x="1007.60" y="543.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (216 samples, 17.68%)</title><rect x="491.8" y="549" width="208.6" height="15.0" fill="rgb(246,63,1)" rx="2" ry="2" />
<text  x="494.85" y="559.5" >&lt;alloc::vec::Vec&lt;T,A&gt; as co..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.25%)</title><rect x="81.5" y="757" width="2.9" height="15.0" fill="rgb(207,180,39)" rx="2" ry="2" />
<text  x="84.46" y="767.5" ></text>
</g>
<g >
<title>core::ptr::metadata::from_raw_parts_mut (13 samples, 1.06%)</title><rect x="687.9" y="469" width="12.5" height="15.0" fill="rgb(232,97,49)" rx="2" ry="2" />
<text  x="690.87" y="479.5" ></text>
</g>
<g >
<title>lind_exit (1 samples, 0.08%)</title><rect x="155.8" y="709" width="1.0" height="15.0" fill="rgb(209,229,36)" rx="2" ry="2" />
<text  x="158.81" y="719.5" ></text>
</g>
<g >
<title>NaClSyscallCSegHook (651 samples, 53.27%)</title><rect x="153.9" y="757" width="628.6" height="15.0" fill="rgb(212,195,21)" rx="2" ry="2" />
<text  x="156.88" y="767.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy::{{closure}} (24 samples, 1.96%)</title><rect x="743.9" y="549" width="23.2" height="15.0" fill="rgb(254,193,41)" rx="2" ry="2" />
<text  x="746.88" y="559.5" >r..</text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.08%)</title><rect x="155.8" y="581" width="1.0" height="15.0" fill="rgb(236,180,2)" rx="2" ry="2" />
<text  x="158.81" y="591.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1027.8" y="261" width="0.9" height="15.0" fill="rgb(250,20,46)" rx="2" ry="2" />
<text  x="1030.77" y="271.5" ></text>
</g>
<g >
<title>copy_page_to_iter (6 samples, 0.49%)</title><rect x="161.6" y="325" width="5.8" height="15.0" fill="rgb(209,225,7)" rx="2" ry="2" />
<text  x="164.60" y="335.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.08%)</title><rect x="1027.8" y="357" width="0.9" height="15.0" fill="rgb(238,172,35)" rx="2" ry="2" />
<text  x="1030.77" y="367.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::begin_string (1 samples, 0.08%)</title><rect x="1006.5" y="245" width="1.0" height="15.0" fill="rgb(230,121,37)" rx="2" ry="2" />
<text  x="1009.53" y="255.5" ></text>
</g>
<g >
<title>start_kernel (44 samples, 3.60%)</title><rect x="1147.5" y="725" width="42.5" height="15.0" fill="rgb(243,162,18)" rx="2" ry="2" />
<text  x="1150.51" y="735.5" >star..</text>
</g>
<g >
<title>psi_task_switch (1 samples, 0.08%)</title><rect x="1146.5" y="677" width="1.0" height="15.0" fill="rgb(211,57,37)" rx="2" ry="2" />
<text  x="1149.55" y="687.5" ></text>
</g>
<g >
<title>BitmapSetBit (1 samples, 0.08%)</title><rect x="154.8" y="629" width="1.0" height="15.0" fill="rgb(207,211,3)" rx="2" ry="2" />
<text  x="157.84" y="639.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.08%)</title><rect x="766.1" y="533" width="1.0" height="15.0" fill="rgb(208,224,8)" rx="2" ry="2" />
<text  x="769.09" y="543.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (9 samples, 0.74%)</title><rect x="483.2" y="501" width="8.6" height="15.0" fill="rgb(238,217,54)" rx="2" ry="2" />
<text  x="486.16" y="511.5" ></text>
</g>
<g >
<title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.08%)</title><rect x="986.3" y="757" width="0.9" height="15.0" fill="rgb(221,210,36)" rx="2" ry="2" />
<text  x="989.25" y="767.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.25%)</title><rect x="1184.2" y="629" width="2.9" height="15.0" fill="rgb(230,103,10)" rx="2" ry="2" />
<text  x="1187.21" y="639.5" ></text>
</g>
<g >
<title>_perf_ioctl (64 samples, 5.24%)</title><rect x="10.0" y="597" width="61.8" height="15.0" fill="rgb(238,85,44)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >_perf_..</text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.08%)</title><rect x="1006.5" y="133" width="1.0" height="15.0" fill="rgb(209,67,37)" rx="2" ry="2" />
<text  x="1009.53" y="143.5" ></text>
</g>
<g >
<title>check_cpu_stall (1 samples, 0.08%)</title><rect x="1148.5" y="405" width="0.9" height="15.0" fill="rgb(231,156,0)" rx="2" ry="2" />
<text  x="1151.48" y="415.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.08%)</title><rect x="974.7" y="389" width="0.9" height="15.0" fill="rgb(248,83,18)" rx="2" ry="2" />
<text  x="977.66" y="399.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (9 samples, 0.74%)</title><rect x="1004.6" y="485" width="8.7" height="15.0" fill="rgb(249,110,50)" rx="2" ry="2" />
<text  x="1007.60" y="495.5" ></text>
</g>
<g >
<title>file_update_time (1 samples, 0.08%)</title><rect x="71.8" y="581" width="1.0" height="15.0" fill="rgb(230,198,9)" rx="2" ry="2" />
<text  x="74.80" y="591.5" ></text>
</g>
<g >
<title>[unknown] (65 samples, 5.32%)</title><rect x="10.0" y="773" width="62.8" height="15.0" fill="rgb(230,41,14)" rx="2" ry="2" />
<text  x="13.00" y="783.5" >[unkno..</text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.16%)</title><rect x="199.3" y="597" width="1.9" height="15.0" fill="rgb(216,182,21)" rx="2" ry="2" />
<text  x="202.26" y="607.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.08%)</title><rect x="1006.5" y="149" width="1.0" height="15.0" fill="rgb(233,156,46)" rx="2" ry="2" />
<text  x="1009.53" y="159.5" ></text>
</g>
<g >
<title>NaClTextDyncodeCreate (2 samples, 0.16%)</title><rect x="153.9" y="709" width="1.9" height="15.0" fill="rgb(249,226,3)" rx="2" ry="2" />
<text  x="156.88" y="719.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (9 samples, 0.74%)</title><rect x="1004.6" y="341" width="8.7" height="15.0" fill="rgb(254,149,39)" rx="2" ry="2" />
<text  x="1007.60" y="351.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="974.7" y="309" width="0.9" height="15.0" fill="rgb(218,17,33)" rx="2" ry="2" />
<text  x="977.66" y="319.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.08%)</title><rect x="1028.7" y="261" width="1.0" height="15.0" fill="rgb(239,130,4)" rx="2" ry="2" />
<text  x="1031.74" y="271.5" ></text>
</g>
<g >
<title>sel_ldr (994 samples, 81.34%)</title><rect x="72.8" y="789" width="959.8" height="15.0" fill="rgb(216,25,18)" rx="2" ry="2" />
<text  x="75.77" y="799.5" >sel_ldr</text>
</g>
<g >
<title>process_vm_rw (1 samples, 0.08%)</title><rect x="973.7" y="661" width="1.0" height="15.0" fill="rgb(234,206,30)" rx="2" ry="2" />
<text  x="976.70" y="671.5" ></text>
</g>
<g >
<title>__libc_read (11 samples, 0.90%)</title><rect x="160.6" y="549" width="10.7" height="15.0" fill="rgb(245,44,15)" rx="2" ry="2" />
<text  x="163.64" y="559.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (1 samples, 0.08%)</title><rect x="1028.7" y="757" width="1.0" height="15.0" fill="rgb(244,173,5)" rx="2" ry="2" />
<text  x="1031.74" y="767.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::inner (6 samples, 0.49%)</title><rect x="97.9" y="757" width="5.8" height="15.0" fill="rgb(236,218,10)" rx="2" ry="2" />
<text  x="100.87" y="767.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.08%)</title><rect x="107.5" y="757" width="1.0" height="15.0" fill="rgb(237,195,11)" rx="2" ry="2" />
<text  x="110.53" y="767.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.08%)</title><rect x="155.8" y="485" width="1.0" height="15.0" fill="rgb(222,138,12)" rx="2" ry="2" />
<text  x="158.81" y="495.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::read_syscall (644 samples, 52.70%)</title><rect x="160.6" y="629" width="621.9" height="15.0" fill="rgb(206,137,51)" rx="2" ry="2" />
<text  x="163.64" y="639.5" >rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::re..</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.74%)</title><rect x="1004.6" y="597" width="8.7" height="15.0" fill="rgb(248,190,28)" rx="2" ry="2" />
<text  x="1007.60" y="607.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.08%)</title><rect x="974.7" y="517" width="0.9" height="15.0" fill="rgb(209,83,20)" rx="2" ry="2" />
<text  x="977.66" y="527.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.08%)</title><rect x="1027.8" y="309" width="0.9" height="15.0" fill="rgb(249,194,4)" rx="2" ry="2" />
<text  x="1030.77" y="319.5" ></text>
</g>
<g >
<title>vfs_iter_read (11 samples, 0.90%)</title><rect x="160.6" y="421" width="10.7" height="15.0" fill="rgb(234,75,34)" rx="2" ry="2" />
<text  x="163.64" y="431.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="962.1" y="757" width="1.0" height="15.0" fill="rgb(226,5,51)" rx="2" ry="2" />
<text  x="965.11" y="767.5" ></text>
</g>
<g >
<title>find_get_pages_contig (1 samples, 0.08%)</title><rect x="168.4" y="309" width="0.9" height="15.0" fill="rgb(245,92,25)" rx="2" ry="2" />
<text  x="171.36" y="319.5" ></text>
</g>
<g >
<title>&lt;std::fs::File as std::io::Read&gt;::read (11 samples, 0.90%)</title><rect x="160.6" y="597" width="10.7" height="15.0" fill="rgb(241,195,12)" rx="2" ry="2" />
<text  x="163.64" y="607.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.08%)</title><rect x="1006.5" y="213" width="1.0" height="15.0" fill="rgb(207,128,22)" rx="2" ry="2" />
<text  x="1009.53" y="223.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.08%)</title><rect x="1027.8" y="517" width="0.9" height="15.0" fill="rgb(238,70,32)" rx="2" ry="2" />
<text  x="1030.77" y="527.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.08%)</title><rect x="974.7" y="373" width="0.9" height="15.0" fill="rgb(234,52,15)" rx="2" ry="2" />
<text  x="977.66" y="383.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (9 samples, 0.74%)</title><rect x="1004.6" y="693" width="8.7" height="15.0" fill="rgb(236,135,38)" rx="2" ry="2" />
<text  x="1007.60" y="703.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.08%)</title><rect x="278.4" y="549" width="1.0" height="15.0" fill="rgb(223,193,42)" rx="2" ry="2" />
<text  x="281.45" y="559.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="974.7" y="165" width="0.9" height="15.0" fill="rgb(211,119,18)" rx="2" ry="2" />
<text  x="977.66" y="175.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="1028.7" y="85" width="1.0" height="15.0" fill="rgb(241,48,41)" rx="2" ry="2" />
<text  x="1031.74" y="95.5" ></text>
</g>
<g >
<title>scsi_io_completion (1 samples, 0.08%)</title><rect x="1063.5" y="517" width="1.0" height="15.0" fill="rgb(227,34,1)" rx="2" ry="2" />
<text  x="1066.50" y="527.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.08%)</title><rect x="974.7" y="485" width="0.9" height="15.0" fill="rgb(228,115,22)" rx="2" ry="2" />
<text  x="977.66" y="495.5" ></text>
</g>
<g >
<title>flush_smp_call_function_queue (1 samples, 0.08%)</title><rect x="1183.2" y="629" width="1.0" height="15.0" fill="rgb(252,28,47)" rx="2" ry="2" />
<text  x="1186.24" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_read (11 samples, 0.90%)</title><rect x="160.6" y="501" width="10.7" height="15.0" fill="rgb(210,78,33)" rx="2" ry="2" />
<text  x="163.64" y="511.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.49%)</title><rect x="675.3" y="469" width="5.8" height="15.0" fill="rgb(213,209,35)" rx="2" ry="2" />
<text  x="678.32" y="479.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u64 (1 samples, 0.08%)</title><rect x="1028.7" y="181" width="1.0" height="15.0" fill="rgb(247,189,12)" rx="2" ry="2" />
<text  x="1031.74" y="191.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.08%)</title><rect x="155.8" y="341" width="1.0" height="15.0" fill="rgb(218,33,34)" rx="2" ry="2" />
<text  x="158.81" y="351.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.08%)</title><rect x="1028.7" y="437" width="1.0" height="15.0" fill="rgb(216,119,40)" rx="2" ry="2" />
<text  x="1031.74" y="447.5" ></text>
</g>
<g >
<title>can_stop_idle_tick (1 samples, 0.08%)</title><rect x="1181.3" y="597" width="1.0" height="15.0" fill="rgb(237,124,46)" rx="2" ry="2" />
<text  x="1184.31" y="607.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::as_slice (1 samples, 0.08%)</title><rect x="1007.5" y="165" width="1.0" height="15.0" fill="rgb(240,158,50)" rx="2" ry="2" />
<text  x="1010.50" y="175.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="1027.8" y="581" width="0.9" height="15.0" fill="rgb(215,59,21)" rx="2" ry="2" />
<text  x="1030.77" y="591.5" ></text>
</g>
<g >
<title>read_tsc (1 samples, 0.08%)</title><rect x="961.1" y="693" width="1.0" height="15.0" fill="rgb(213,91,14)" rx="2" ry="2" />
<text  x="964.15" y="703.5" ></text>
</g>
<g >
<title>__writeback_single_inode (2 samples, 0.16%)</title><rect x="1061.6" y="613" width="1.9" height="15.0" fill="rgb(226,130,28)" rx="2" ry="2" />
<text  x="1064.57" y="623.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.08%)</title><rect x="1148.5" y="453" width="0.9" height="15.0" fill="rgb(215,214,29)" rx="2" ry="2" />
<text  x="1151.48" y="463.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (1 samples, 0.08%)</title><rect x="1029.7" y="581" width="1.0" height="15.0" fill="rgb(205,110,13)" rx="2" ry="2" />
<text  x="1032.71" y="591.5" ></text>
</g>
<g >
<title>new_sync_read (11 samples, 0.90%)</title><rect x="160.6" y="453" width="10.7" height="15.0" fill="rgb(240,109,46)" rx="2" ry="2" />
<text  x="163.64" y="463.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (64 samples, 5.24%)</title><rect x="10.0" y="709" width="61.8" height="15.0" fill="rgb(242,95,9)" rx="2" ry="2" />
<text  x="13.00" y="719.5" >perf_e..</text>
</g>
<g >
<title>mmput (2 samples, 0.16%)</title><rect x="1029.7" y="613" width="1.9" height="15.0" fill="rgb(254,208,40)" rx="2" ry="2" />
<text  x="1032.71" y="623.5" ></text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.16%)</title><rect x="90.1" y="757" width="2.0" height="15.0" fill="rgb(206,45,47)" rx="2" ry="2" />
<text  x="93.15" y="767.5" ></text>
</g>
<g >
<title>ret_from_fork (4 samples, 0.33%)</title><rect x="1059.6" y="773" width="3.9" height="15.0" fill="rgb(218,126,45)" rx="2" ry="2" />
<text  x="1062.64" y="783.5" ></text>
</g>
<g >
<title>____fput (1 samples, 0.08%)</title><rect x="1031.6" y="613" width="1.0" height="15.0" fill="rgb(217,115,36)" rx="2" ry="2" />
<text  x="1034.64" y="623.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.08%)</title><rect x="1029.7" y="533" width="1.0" height="15.0" fill="rgb(205,26,4)" rx="2" ry="2" />
<text  x="1032.71" y="543.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.08%)</title><rect x="71.8" y="629" width="1.0" height="15.0" fill="rgb(238,158,49)" rx="2" ry="2" />
<text  x="74.80" y="639.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (95 samples, 7.77%)</title><rect x="509.2" y="533" width="91.8" height="15.0" fill="rgb(248,227,28)" rx="2" ry="2" />
<text  x="512.23" y="543.5" >&lt;alloc::ve..</text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (3 samples, 0.25%)</title><rect x="989.1" y="757" width="2.9" height="15.0" fill="rgb(220,6,6)" rx="2" ry="2" />
<text  x="992.15" y="767.5" ></text>
</g>
<g >
<title>do_writepages (2 samples, 0.16%)</title><rect x="1061.6" y="597" width="1.9" height="15.0" fill="rgb(252,50,19)" rx="2" ry="2" />
<text  x="1064.57" y="607.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="974.7" y="501" width="0.9" height="15.0" fill="rgb(242,138,44)" rx="2" ry="2" />
<text  x="977.66" y="511.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="155.8" y="389" width="1.0" height="15.0" fill="rgb(209,54,32)" rx="2" ry="2" />
<text  x="158.81" y="399.5" ></text>
</g>
<g >
<title>copy_page_from_iter (1 samples, 0.08%)</title><rect x="973.7" y="613" width="1.0" height="15.0" fill="rgb(241,44,32)" rx="2" ry="2" />
<text  x="976.70" y="623.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="155.8" y="501" width="1.0" height="15.0" fill="rgb(206,69,31)" rx="2" ry="2" />
<text  x="158.81" y="511.5" ></text>
</g>
<g >
<title>__ioctl (64 samples, 5.24%)</title><rect x="10.0" y="677" width="61.8" height="15.0" fill="rgb(230,90,36)" rx="2" ry="2" />
<text  x="13.00" y="687.5" >__ioctl</text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.08%)</title><rect x="1027.8" y="133" width="0.9" height="15.0" fill="rgb(237,75,50)" rx="2" ry="2" />
<text  x="1030.77" y="143.5" ></text>
</g>
<g >
<title>memchr_inv (1 samples, 0.08%)</title><rect x="1060.6" y="693" width="1.0" height="15.0" fill="rgb(215,57,13)" rx="2" ry="2" />
<text  x="1063.61" y="703.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (1 samples, 0.08%)</title><rect x="974.7" y="85" width="0.9" height="15.0" fill="rgb(214,101,54)" rx="2" ry="2" />
<text  x="977.66" y="95.5" ></text>
</g>
<g >
<title>vmstat_shepherd (1 samples, 0.08%)</title><rect x="1060.6" y="709" width="1.0" height="15.0" fill="rgb(219,163,49)" rx="2" ry="2" />
<text  x="1063.61" y="719.5" ></text>
</g>
<g >
<title>rustposix::interface::file::EmulatedFile::readat (11 samples, 0.90%)</title><rect x="160.6" y="613" width="10.7" height="15.0" fill="rgb(244,57,52)" rx="2" ry="2" />
<text  x="163.64" y="623.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (9 samples, 0.74%)</title><rect x="1004.6" y="517" width="8.7" height="15.0" fill="rgb(244,45,15)" rx="2" ry="2" />
<text  x="1007.60" y="527.5" ></text>
</g>
<g >
<title>do_exit (3 samples, 0.25%)</title><rect x="1029.7" y="645" width="2.9" height="15.0" fill="rgb(213,31,54)" rx="2" ry="2" />
<text  x="1032.71" y="655.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.33%)</title><rect x="103.7" y="757" width="3.8" height="15.0" fill="rgb(214,223,48)" rx="2" ry="2" />
<text  x="106.67" y="767.5" ></text>
</g>
<g >
<title>core::slice::raw::from_raw_parts_mut (5 samples, 0.41%)</title><rect x="123.9" y="757" width="4.9" height="15.0" fill="rgb(205,45,29)" rx="2" ry="2" />
<text  x="126.94" y="767.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.25%)</title><rect x="968.9" y="757" width="2.9" height="15.0" fill="rgb(242,105,44)" rx="2" ry="2" />
<text  x="971.87" y="767.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="1028.7" y="453" width="1.0" height="15.0" fill="rgb(249,109,7)" rx="2" ry="2" />
<text  x="1031.74" y="463.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1027.8" y="501" width="0.9" height="15.0" fill="rgb(229,68,22)" rx="2" ry="2" />
<text  x="1030.77" y="511.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.16%)</title><rect x="114.3" y="757" width="1.9" height="15.0" fill="rgb(251,190,2)" rx="2" ry="2" />
<text  x="117.29" y="767.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="974.7" y="405" width="0.9" height="15.0" fill="rgb(216,117,35)" rx="2" ry="2" />
<text  x="977.66" y="415.5" ></text>
</g>
<g >
<title>lind_read (645 samples, 52.78%)</title><rect x="159.7" y="677" width="622.8" height="15.0" fill="rgb(226,116,7)" rx="2" ry="2" />
<text  x="162.67" y="687.5" >lind_read</text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.08%)</title><rect x="155.8" y="677" width="1.0" height="15.0" fill="rgb(252,132,53)" rx="2" ry="2" />
<text  x="158.81" y="687.5" ></text>
</g>
<g >
<title>evlist__start_workload (1 samples, 0.08%)</title><rect x="71.8" y="725" width="1.0" height="15.0" fill="rgb(212,209,29)" rx="2" ry="2" />
<text  x="74.80" y="735.5" ></text>
</g>
<g >
<title>__count_memcg_events (1 samples, 0.08%)</title><rect x="170.3" y="261" width="1.0" height="15.0" fill="rgb(234,2,23)" rx="2" ry="2" />
<text  x="173.29" y="271.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="1028.7" y="661" width="1.0" height="15.0" fill="rgb(239,204,41)" rx="2" ry="2" />
<text  x="1031.74" y="671.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.08%)</title><rect x="96.9" y="757" width="1.0" height="15.0" fill="rgb(209,115,49)" rx="2" ry="2" />
<text  x="99.91" y="767.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (9 samples, 0.74%)</title><rect x="1004.6" y="677" width="8.7" height="15.0" fill="rgb(223,4,13)" rx="2" ry="2" />
<text  x="1007.60" y="687.5" ></text>
</g>
<g >
<title>copy_page_from_iter_iovec (1 samples, 0.08%)</title><rect x="973.7" y="597" width="1.0" height="15.0" fill="rgb(236,116,40)" rx="2" ry="2" />
<text  x="976.70" y="607.5" ></text>
</g>
<g >
<title>do_syscall_64 (64 samples, 5.24%)</title><rect x="10.0" y="645" width="61.8" height="15.0" fill="rgb(221,172,4)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >do_sys..</text>
</g>
<g >
<title>__libc_write (1 samples, 0.08%)</title><rect x="71.8" y="709" width="1.0" height="15.0" fill="rgb(241,126,2)" rx="2" ry="2" />
<text  x="74.80" y="719.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::end_string (1 samples, 0.08%)</title><rect x="974.7" y="213" width="0.9" height="15.0" fill="rgb(232,40,23)" rx="2" ry="2" />
<text  x="977.66" y="223.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="1028.7" y="629" width="1.0" height="15.0" fill="rgb(233,140,42)" rx="2" ry="2" />
<text  x="1031.74" y="639.5" ></text>
</g>
<g >
<title>core::slice::raw::from_raw_parts_mut (1 samples, 0.08%)</title><rect x="1001.7" y="757" width="1.0" height="15.0" fill="rgb(236,56,41)" rx="2" ry="2" />
<text  x="1004.70" y="767.5" ></text>
</g>
<g >
<title>__evlist__enable (64 samples, 5.24%)</title><rect x="10.0" y="725" width="61.8" height="15.0" fill="rgb(206,112,43)" rx="2" ry="2" />
<text  x="13.00" y="735.5" >__evli..</text>
</g>
<g >
<title>core::cmp::min (13 samples, 1.06%)</title><rect x="201.2" y="597" width="12.5" height="15.0" fill="rgb(209,3,14)" rx="2" ry="2" />
<text  x="204.19" y="607.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.08%)</title><rect x="766.1" y="517" width="1.0" height="15.0" fill="rgb(213,89,31)" rx="2" ry="2" />
<text  x="769.09" y="527.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.08%)</title><rect x="156.8" y="549" width="0.9" height="15.0" fill="rgb(250,0,8)" rx="2" ry="2" />
<text  x="159.78" y="559.5" ></text>
</g>
<g >
<title>NaClSysRead (647 samples, 52.95%)</title><rect x="157.7" y="725" width="624.8" height="15.0" fill="rgb(218,178,44)" rx="2" ry="2" />
<text  x="160.74" y="735.5" >NaClSysRead</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="155.8" y="325" width="1.0" height="15.0" fill="rgb(206,149,13)" rx="2" ry="2" />
<text  x="158.81" y="335.5" ></text>
</g>
<g >
<title>NaClAppLoadFileFromFilename (1 samples, 0.08%)</title><rect x="974.7" y="725" width="0.9" height="15.0" fill="rgb(239,187,4)" rx="2" ry="2" />
<text  x="977.66" y="735.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.41%)</title><rect x="996.9" y="757" width="4.8" height="15.0" fill="rgb(211,3,20)" rx="2" ry="2" />
<text  x="999.87" y="767.5" ></text>
</g>
<g >
<title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1008.5" y="229" width="0.9" height="15.0" fill="rgb(240,49,41)" rx="2" ry="2" />
<text  x="1011.46" y="239.5" ></text>
</g>
<g >
<title>scsi_softirq_done (1 samples, 0.08%)</title><rect x="1063.5" y="549" width="1.0" height="15.0" fill="rgb(207,60,20)" rx="2" ry="2" />
<text  x="1066.50" y="559.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.08%)</title><rect x="1011.4" y="117" width="0.9" height="15.0" fill="rgb(224,178,5)" rx="2" ry="2" />
<text  x="1014.36" y="127.5" ></text>
</g>
<g >
<title>generic_update_time (1 samples, 0.08%)</title><rect x="71.8" y="565" width="1.0" height="15.0" fill="rgb(251,79,52)" rx="2" ry="2" />
<text  x="74.80" y="575.5" ></text>
</g>
<g >
<title>ksys_read (11 samples, 0.90%)</title><rect x="160.6" y="485" width="10.7" height="15.0" fill="rgb(217,219,37)" rx="2" ry="2" />
<text  x="163.64" y="495.5" ></text>
</g>
<g >
<title>itoa::Buffer::format (1 samples, 0.08%)</title><rect x="1012.3" y="261" width="1.0" height="15.0" fill="rgb(254,211,3)" rx="2" ry="2" />
<text  x="1015.32" y="271.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.08%)</title><rect x="1027.8" y="725" width="0.9" height="15.0" fill="rgb(218,73,52)" rx="2" ry="2" />
<text  x="1030.77" y="735.5" ></text>
</g>
<g >
<title>evict (1 samples, 0.08%)</title><rect x="1031.6" y="469" width="1.0" height="15.0" fill="rgb(234,45,6)" rx="2" ry="2" />
<text  x="1034.64" y="479.5" ></text>
</g>
<g >
<title>process_vm_rw_core.constprop.0 (1 samples, 0.08%)</title><rect x="973.7" y="645" width="1.0" height="15.0" fill="rgb(211,52,15)" rx="2" ry="2" />
<text  x="976.70" y="655.5" ></text>
</g>
<g >
<title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (3 samples, 0.25%)</title><rect x="994.0" y="757" width="2.9" height="15.0" fill="rgb(219,87,24)" rx="2" ry="2" />
<text  x="996.98" y="767.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.08%)</title><rect x="156.8" y="693" width="0.9" height="15.0" fill="rgb(247,142,10)" rx="2" ry="2" />
<text  x="159.78" y="703.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1027.8" y="165" width="0.9" height="15.0" fill="rgb(220,67,45)" rx="2" ry="2" />
<text  x="1030.77" y="175.5" ></text>
</g>
<g >
<title>event_function (64 samples, 5.24%)</title><rect x="10.0" y="485" width="61.8" height="15.0" fill="rgb(237,119,40)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >event_..</text>
</g>
<g >
<title>__x64_sys_process_vm_writev (1 samples, 0.08%)</title><rect x="973.7" y="677" width="1.0" height="15.0" fill="rgb(218,220,34)" rx="2" ry="2" />
<text  x="976.70" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.08%)</title><rect x="71.8" y="693" width="1.0" height="15.0" fill="rgb(251,2,23)" rx="2" ry="2" />
<text  x="74.80" y="703.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.08%)</title><rect x="1028.7" y="581" width="1.0" height="15.0" fill="rgb(214,97,6)" rx="2" ry="2" />
<text  x="1031.74" y="591.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (64 samples, 5.24%)</title><rect x="10.0" y="421" width="61.8" height="15.0" fill="rgb(212,168,54)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >intel_..</text>
</g>
<g >
<title>pagevec_lookup_range_tag (1 samples, 0.08%)</title><rect x="1062.5" y="549" width="1.0" height="15.0" fill="rgb(247,149,3)" rx="2" ry="2" />
<text  x="1065.54" y="559.5" ></text>
</g>
<g >
<title>ctx_resched (64 samples, 5.24%)</title><rect x="10.0" y="453" width="61.8" height="15.0" fill="rgb(240,180,25)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >ctx_re..</text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.08%)</title><rect x="1030.7" y="581" width="0.9" height="15.0" fill="rgb(251,98,1)" rx="2" ry="2" />
<text  x="1033.67" y="591.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_u32 (1 samples, 0.08%)</title><rect x="1012.3" y="277" width="1.0" height="15.0" fill="rgb(231,47,53)" rx="2" ry="2" />
<text  x="1015.32" y="287.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (1 samples, 0.08%)</title><rect x="1027.8" y="85" width="0.9" height="15.0" fill="rgb(254,73,47)" rx="2" ry="2" />
<text  x="1030.77" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="1028.7" y="117" width="1.0" height="15.0" fill="rgb(236,124,13)" rx="2" ry="2" />
<text  x="1031.74" y="127.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.08%)</title><rect x="1148.5" y="485" width="0.9" height="15.0" fill="rgb(221,165,27)" rx="2" ry="2" />
<text  x="1151.48" y="495.5" ></text>
</g>
<g >
<title>rebalance_domains (2 samples, 0.16%)</title><rect x="1149.4" y="485" width="2.0" height="15.0" fill="rgb(228,147,44)" rx="2" ry="2" />
<text  x="1152.44" y="495.5" ></text>
</g>
<g >
<title>NaClDescIoDescDtor (1 samples, 0.08%)</title><rect x="974.7" y="677" width="0.9" height="15.0" fill="rgb(229,165,16)" rx="2" ry="2" />
<text  x="977.66" y="687.5" ></text>
</g>
<g >
<title>exit_mmap (2 samples, 0.16%)</title><rect x="1029.7" y="597" width="1.9" height="15.0" fill="rgb(215,137,24)" rx="2" ry="2" />
<text  x="1032.71" y="607.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::len (98 samples, 8.02%)</title><rect x="279.4" y="581" width="94.6" height="15.0" fill="rgb(207,29,26)" rx="2" ry="2" />
<text  x="282.41" y="591.5" >ringbuf::ri..</text>
</g>
<g >
<title>process_one_work (4 samples, 0.33%)</title><rect x="1059.6" y="725" width="3.9" height="15.0" fill="rgb(244,41,21)" rx="2" ry="2" />
<text  x="1062.64" y="735.5" ></text>
</g>
<g >
<title>[librustposix.so] (1 samples, 0.08%)</title><rect x="764.2" y="517" width="0.9" height="15.0" fill="rgb(223,76,48)" rx="2" ry="2" />
<text  x="767.16" y="527.5" ></text>
</g>
<g >
<title>[anon] (84 samples, 6.87%)</title><rect x="72.8" y="773" width="81.1" height="15.0" fill="rgb(214,16,42)" rx="2" ry="2" />
<text  x="75.77" y="783.5" >[anon]</text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_ref (1 samples, 0.08%)</title><rect x="1022.9" y="757" width="1.0" height="15.0" fill="rgb(225,193,40)" rx="2" ry="2" />
<text  x="1025.95" y="767.5" ></text>
</g>
<g >
<title>__activate_page (1 samples, 0.08%)</title><rect x="170.3" y="277" width="1.0" height="15.0" fill="rgb(222,144,19)" rx="2" ry="2" />
<text  x="173.29" y="287.5" ></text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts_mut (20 samples, 1.64%)</title><rect x="681.1" y="485" width="19.3" height="15.0" fill="rgb(209,161,46)" rx="2" ry="2" />
<text  x="684.11" y="495.5" ></text>
</g>
<g >
<title>NaClHostDescRead (647 samples, 52.95%)</title><rect x="157.7" y="693" width="624.8" height="15.0" fill="rgb(223,52,54)" rx="2" ry="2" />
<text  x="160.74" y="703.5" >NaClHostDescRead</text>
</g>
<g >
<title>do_softirq_own_stack (1 samples, 0.08%)</title><rect x="1063.5" y="613" width="1.0" height="15.0" fill="rgb(217,189,40)" rx="2" ry="2" />
<text  x="1066.50" y="623.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (64 samples, 5.24%)</title><rect x="10.0" y="629" width="61.8" height="15.0" fill="rgb(216,153,45)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >__x64_..</text>
</g>
<g >
<title>serde_json::ser::Formatter::write_u64 (1 samples, 0.08%)</title><rect x="1028.7" y="165" width="1.0" height="15.0" fill="rgb(224,108,6)" rx="2" ry="2" />
<text  x="1031.74" y="175.5" ></text>
</g>
<g >
<title>get_signal (3 samples, 0.25%)</title><rect x="1029.7" y="677" width="2.9" height="15.0" fill="rgb(219,217,0)" rx="2" ry="2" />
<text  x="1032.71" y="687.5" ></text>
</g>
<g >
<title>ext4_end_io_rsv_work (1 samples, 0.08%)</title><rect x="1059.6" y="709" width="1.0" height="15.0" fill="rgb(241,208,38)" rx="2" ry="2" />
<text  x="1062.64" y="719.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_mut (1 samples, 0.08%)</title><rect x="151.0" y="757" width="0.9" height="15.0" fill="rgb(219,135,30)" rx="2" ry="2" />
<text  x="153.98" y="767.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (72 samples, 5.89%)</title><rect x="515.0" y="517" width="69.5" height="15.0" fill="rgb(224,76,46)" rx="2" ry="2" />
<text  x="518.02" y="527.5" >alloc::..</text>
</g>
<g >
<title>x86_64_start_kernel (44 samples, 3.60%)</title><rect x="1147.5" y="757" width="42.5" height="15.0" fill="rgb(244,81,51)" rx="2" ry="2" />
<text  x="1150.51" y="767.5" >x86_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.25%)</title><rect x="1029.7" y="773" width="2.9" height="15.0" fill="rgb(205,96,30)" rx="2" ry="2" />
<text  x="1032.71" y="783.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.08%)</title><rect x="1027.8" y="549" width="0.9" height="15.0" fill="rgb(219,203,28)" rx="2" ry="2" />
<text  x="1030.77" y="559.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="974.7" y="437" width="0.9" height="15.0" fill="rgb(207,193,27)" rx="2" ry="2" />
<text  x="977.66" y="447.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.08%)</title><rect x="1187.1" y="629" width="1.0" height="15.0" fill="rgb(212,97,30)" rx="2" ry="2" />
<text  x="1190.10" y="639.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::DirectoryInode&gt;::serialize (1 samples, 0.08%)</title><rect x="1028.7" y="405" width="1.0" height="15.0" fill="rgb(215,172,36)" rx="2" ry="2" />
<text  x="1031.74" y="415.5" ></text>
</g>
<g >
<title>wb_writeback (2 samples, 0.16%)</title><rect x="1061.6" y="661" width="1.9" height="15.0" fill="rgb(207,53,18)" rx="2" ry="2" />
<text  x="1064.57" y="671.5" ></text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.16%)</title><rect x="703.3" y="533" width="2.0" height="15.0" fill="rgb(227,227,47)" rx="2" ry="2" />
<text  x="706.32" y="543.5" ></text>
</g>
<g >
<title>blk_done_softirq (1 samples, 0.08%)</title><rect x="1063.5" y="565" width="1.0" height="15.0" fill="rgb(243,61,20)" rx="2" ry="2" />
<text  x="1066.50" y="575.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (47 samples, 3.85%)</title><rect x="446.5" y="549" width="45.3" height="15.0" fill="rgb(251,79,4)" rx="2" ry="2" />
<text  x="449.46" y="559.5" >&lt;all..</text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.08%)</title><rect x="974.7" y="341" width="0.9" height="15.0" fill="rgb(219,37,9)" rx="2" ry="2" />
<text  x="977.66" y="351.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="974.7" y="469" width="0.9" height="15.0" fill="rgb(221,67,20)" rx="2" ry="2" />
<text  x="977.66" y="479.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (131 samples, 10.72%)</title><rect x="1063.5" y="773" width="126.5" height="15.0" fill="rgb(244,40,24)" rx="2" ry="2" />
<text  x="1066.50" y="783.5" >secondary_start..</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.08%)</title><rect x="1028.7" y="725" width="1.0" height="15.0" fill="rgb(209,132,39)" rx="2" ry="2" />
<text  x="1031.74" y="735.5" ></text>
</g>
<g >
<title>cpu_startup_entry (87 samples, 7.12%)</title><rect x="1063.5" y="741" width="84.0" height="15.0" fill="rgb(252,178,42)" rx="2" ry="2" />
<text  x="1066.50" y="751.5" >cpu_start..</text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::len (1 samples, 0.08%)</title><rect x="136.5" y="757" width="1.0" height="15.0" fill="rgb(227,180,23)" rx="2" ry="2" />
<text  x="139.50" y="767.5" ></text>
</g>
<g >
<title>ext4_bio_write_page (1 samples, 0.08%)</title><rect x="1061.6" y="517" width="0.9" height="15.0" fill="rgb(242,193,5)" rx="2" ry="2" />
<text  x="1064.57" y="527.5" ></text>
</g>
<g >
<title>dispatcher (645 samples, 52.78%)</title><rect x="159.7" y="661" width="622.8" height="15.0" fill="rgb(240,216,17)" rx="2" ry="2" />
<text  x="162.67" y="671.5" >dispatcher</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.08%)</title><rect x="974.7" y="197" width="0.9" height="15.0" fill="rgb(251,183,24)" rx="2" ry="2" />
<text  x="977.66" y="207.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::close_syscall (1 samples, 0.08%)</title><rect x="974.7" y="597" width="0.9" height="15.0" fill="rgb(248,3,17)" rx="2" ry="2" />
<text  x="977.66" y="607.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str_contents (4 samples, 0.33%)</title><rect x="1008.5" y="245" width="3.8" height="15.0" fill="rgb(211,225,28)" rx="2" ry="2" />
<text  x="1011.46" y="255.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (30 samples, 2.45%)</title><rect x="226.3" y="565" width="29.0" height="15.0" fill="rgb(222,73,36)" rx="2" ry="2" />
<text  x="229.30" y="575.5" >&lt;c..</text>
</g>
<g >
<title>wb_workfn (2 samples, 0.16%)</title><rect x="1061.6" y="709" width="1.9" height="15.0" fill="rgb(206,224,39)" rx="2" ry="2" />
<text  x="1064.57" y="719.5" ></text>
</g>
<g >
<title>update_rq_clock (1 samples, 0.08%)</title><rect x="1186.1" y="613" width="1.0" height="15.0" fill="rgb(216,132,13)" rx="2" ry="2" />
<text  x="1189.14" y="623.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.74%)</title><rect x="72.8" y="757" width="8.7" height="15.0" fill="rgb(206,190,38)" rx="2" ry="2" />
<text  x="75.77" y="767.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (4 samples, 0.33%)</title><rect x="1023.9" y="757" width="3.9" height="15.0" fill="rgb(231,9,52)" rx="2" ry="2" />
<text  x="1026.91" y="767.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.08%)</title><rect x="1027.8" y="741" width="0.9" height="15.0" fill="rgb(213,76,23)" rx="2" ry="2" />
<text  x="1030.77" y="751.5" ></text>
</g>
<g >
<title>exit_mm (2 samples, 0.16%)</title><rect x="1029.7" y="629" width="1.9" height="15.0" fill="rgb(224,197,47)" rx="2" ry="2" />
<text  x="1032.71" y="639.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::read (11 samples, 0.90%)</title><rect x="160.6" y="565" width="10.7" height="15.0" fill="rgb(215,32,21)" rx="2" ry="2" />
<text  x="163.64" y="575.5" ></text>
</g>
<g >
<title>generic_file_read_iter (11 samples, 0.90%)</title><rect x="160.6" y="357" width="10.7" height="15.0" fill="rgb(235,100,8)" rx="2" ry="2" />
<text  x="163.64" y="367.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (1 samples, 0.08%)</title><rect x="1003.6" y="757" width="1.0" height="15.0" fill="rgb(231,208,41)" rx="2" ry="2" />
<text  x="1006.63" y="767.5" ></text>
</g>
<g >
<title>newidle_balance (2 samples, 0.16%)</title><rect x="1184.2" y="597" width="1.9" height="15.0" fill="rgb(222,194,0)" rx="2" ry="2" />
<text  x="1187.21" y="607.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_string_fragment (3 samples, 0.25%)</title><rect x="1009.4" y="229" width="2.9" height="15.0" fill="rgb(222,147,26)" rx="2" ry="2" />
<text  x="1012.43" y="239.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="974.7" y="245" width="0.9" height="15.0" fill="rgb(221,218,38)" rx="2" ry="2" />
<text  x="977.66" y="255.5" ></text>
</g>
<g >
<title>blk_mq_free_request (1 samples, 0.08%)</title><rect x="1063.5" y="469" width="1.0" height="15.0" fill="rgb(250,100,52)" rx="2" ry="2" />
<text  x="1066.50" y="479.5" ></text>
</g>
<g >
<title>shmem_evict_inode (1 samples, 0.08%)</title><rect x="1031.6" y="453" width="1.0" height="15.0" fill="rgb(205,150,24)" rx="2" ry="2" />
<text  x="1034.64" y="463.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (9 samples, 0.74%)</title><rect x="1004.6" y="453" width="8.7" height="15.0" fill="rgb(221,72,29)" rx="2" ry="2" />
<text  x="1007.60" y="463.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1027.8" y="389" width="0.9" height="15.0" fill="rgb(205,220,39)" rx="2" ry="2" />
<text  x="1030.77" y="399.5" ></text>
</g>
<g >
<title>NaClChildNapCtor (1 samples, 0.08%)</title><rect x="974.7" y="741" width="0.9" height="15.0" fill="rgb(227,42,3)" rx="2" ry="2" />
<text  x="977.66" y="751.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.08%)</title><rect x="1027.8" y="325" width="0.9" height="15.0" fill="rgb(237,180,53)" rx="2" ry="2" />
<text  x="1030.77" y="335.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for u32&gt;::serialize (1 samples, 0.08%)</title><rect x="1012.3" y="309" width="1.0" height="15.0" fill="rgb(217,80,38)" rx="2" ry="2" />
<text  x="1015.32" y="319.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.08%)</title><rect x="155.8" y="693" width="1.0" height="15.0" fill="rgb(242,80,50)" rx="2" ry="2" />
<text  x="158.81" y="703.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (6 samples, 0.49%)</title><rect x="84.4" y="757" width="5.7" height="15.0" fill="rgb(226,158,6)" rx="2" ry="2" />
<text  x="87.35" y="767.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.08%)</title><rect x="1028.7" y="133" width="1.0" height="15.0" fill="rgb(252,182,11)" rx="2" ry="2" />
<text  x="1031.74" y="143.5" ></text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="332.5" y="565" width="1.0" height="15.0" fill="rgb(238,209,11)" rx="2" ry="2" />
<text  x="335.52" y="575.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="1007.5" y="197" width="1.0" height="15.0" fill="rgb(225,217,40)" rx="2" ry="2" />
<text  x="1010.50" y="207.5" ></text>
</g>
<g >
<title>pipe_write (1 samples, 0.08%)</title><rect x="71.8" y="597" width="1.0" height="15.0" fill="rgb(205,85,1)" rx="2" ry="2" />
<text  x="74.80" y="607.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::resize_with (1 samples, 0.08%)</title><rect x="156.8" y="597" width="0.9" height="15.0" fill="rgb(231,177,30)" rx="2" ry="2" />
<text  x="159.78" y="607.5" ></text>
</g>
<g >
<title>NaClSysExit (1 samples, 0.08%)</title><rect x="155.8" y="725" width="1.0" height="15.0" fill="rgb(226,129,50)" rx="2" ry="2" />
<text  x="158.81" y="735.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for usize&gt;::serialize (1 samples, 0.08%)</title><rect x="1028.7" y="197" width="1.0" height="15.0" fill="rgb(241,66,15)" rx="2" ry="2" />
<text  x="1031.74" y="207.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (29 samples, 2.37%)</title><rect x="340.2" y="549" width="28.0" height="15.0" fill="rgb(227,15,49)" rx="2" ry="2" />
<text  x="343.25" y="559.5" >c..</text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1028.7" y="373" width="1.0" height="15.0" fill="rgb(238,21,13)" rx="2" ry="2" />
<text  x="1031.74" y="383.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1027.8" y="629" width="0.9" height="15.0" fill="rgb(206,185,54)" rx="2" ry="2" />
<text  x="1030.77" y="639.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="155.8" y="517" width="1.0" height="15.0" fill="rgb(208,18,35)" rx="2" ry="2" />
<text  x="158.81" y="527.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.16%)</title><rect x="992.0" y="757" width="2.0" height="15.0" fill="rgb(236,107,5)" rx="2" ry="2" />
<text  x="995.05" y="767.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.74%)</title><rect x="1004.6" y="357" width="8.7" height="15.0" fill="rgb(246,71,23)" rx="2" ry="2" />
<text  x="1007.60" y="367.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str_contents (1 samples, 0.08%)</title><rect x="1027.8" y="149" width="0.9" height="15.0" fill="rgb(227,29,2)" rx="2" ry="2" />
<text  x="1030.77" y="159.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (7 samples, 0.57%)</title><rect x="759.3" y="533" width="6.8" height="15.0" fill="rgb(210,185,29)" rx="2" ry="2" />
<text  x="762.33" y="543.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (16 samples, 1.31%)</title><rect x="1151.4" y="597" width="15.4" height="15.0" fill="rgb(248,197,7)" rx="2" ry="2" />
<text  x="1154.37" y="607.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="1027.8" y="117" width="0.9" height="15.0" fill="rgb(228,148,49)" rx="2" ry="2" />
<text  x="1030.77" y="127.5" ></text>
</g>
<g >
<title>nohz_newidle_balance (1 samples, 0.08%)</title><rect x="1185.2" y="581" width="0.9" height="15.0" fill="rgb(250,43,33)" rx="2" ry="2" />
<text  x="1188.17" y="591.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.08%)</title><rect x="961.1" y="709" width="1.0" height="15.0" fill="rgb(242,85,4)" rx="2" ry="2" />
<text  x="964.15" y="719.5" ></text>
</g>
<g >
<title>__dentry_kill (1 samples, 0.08%)</title><rect x="1031.6" y="549" width="1.0" height="15.0" fill="rgb(247,118,54)" rx="2" ry="2" />
<text  x="1034.64" y="559.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.08%)</title><rect x="974.7" y="629" width="0.9" height="15.0" fill="rgb(236,49,11)" rx="2" ry="2" />
<text  x="977.66" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.08%)</title><rect x="973.7" y="693" width="1.0" height="15.0" fill="rgb(236,176,35)" rx="2" ry="2" />
<text  x="976.70" y="703.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="974.7" y="293" width="0.9" height="15.0" fill="rgb(224,150,30)" rx="2" ry="2" />
<text  x="977.66" y="303.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (633 samples, 51.80%)</title><rect x="171.3" y="613" width="611.2" height="15.0" fill="rgb(211,65,33)" rx="2" ry="2" />
<text  x="174.26" y="623.5" >rustposix::interface::pipe::EmulatedPipe::read_from_pipe</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="1028.7" y="389" width="1.0" height="15.0" fill="rgb(222,197,17)" rx="2" ry="2" />
<text  x="1031.74" y="399.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreate (2 samples, 0.16%)</title><rect x="153.9" y="725" width="1.9" height="15.0" fill="rgb(218,37,33)" rx="2" ry="2" />
<text  x="156.88" y="735.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.08%)</title><rect x="1063.5" y="661" width="1.0" height="15.0" fill="rgb(214,178,19)" rx="2" ry="2" />
<text  x="1066.50" y="671.5" ></text>
</g>
<g >
<title>core::slice::raw::from_raw_parts_mut (17 samples, 1.39%)</title><rect x="584.5" y="517" width="16.5" height="15.0" fill="rgb(221,75,51)" rx="2" ry="2" />
<text  x="587.55" y="527.5" ></text>
</g>
<g >
<title>NaClSysExitDecoder (1 samples, 0.08%)</title><rect x="155.8" y="741" width="1.0" height="15.0" fill="rgb(241,72,28)" rx="2" ry="2" />
<text  x="158.81" y="751.5" ></text>
</g>
<g >
<title>NaClSysPipe (1 samples, 0.08%)</title><rect x="156.8" y="725" width="0.9" height="15.0" fill="rgb(205,114,54)" rx="2" ry="2" />
<text  x="159.78" y="735.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="1028.7" y="421" width="1.0" height="15.0" fill="rgb(224,27,23)" rx="2" ry="2" />
<text  x="1031.74" y="431.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="1027.8" y="469" width="0.9" height="15.0" fill="rgb(213,208,49)" rx="2" ry="2" />
<text  x="1030.77" y="479.5" ></text>
</g>
<g >
<title>[unknown] (70 samples, 5.73%)</title><rect x="962.1" y="773" width="67.6" height="15.0" fill="rgb(212,27,33)" rx="2" ry="2" />
<text  x="965.11" y="783.5" >[unknown]</text>
</g>
<g >
<title>core::sync::atomic::AtomicBool::load (15 samples, 1.23%)</title><rect x="255.3" y="597" width="14.5" height="15.0" fill="rgb(211,85,38)" rx="2" ry="2" />
<text  x="258.27" y="607.5" ></text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (1 samples, 0.08%)</title><rect x="981.4" y="757" width="1.0" height="15.0" fill="rgb(229,27,25)" rx="2" ry="2" />
<text  x="984.42" y="767.5" ></text>
</g>
<g >
<title>x86_pmu_enable (64 samples, 5.24%)</title><rect x="10.0" y="437" width="61.8" height="15.0" fill="rgb(244,115,50)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >x86_pm..</text>
</g>
<g >
<title>cpuidle_enter_state (86 samples, 7.04%)</title><rect x="1063.5" y="677" width="83.0" height="15.0" fill="rgb(237,82,26)" rx="2" ry="2" />
<text  x="1066.50" y="687.5" >cpuidle_e..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.08%)</title><rect x="1028.7" y="309" width="1.0" height="15.0" fill="rgb(224,93,34)" rx="2" ry="2" />
<text  x="1031.74" y="319.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1028.7" y="245" width="1.0" height="15.0" fill="rgb(208,4,36)" rx="2" ry="2" />
<text  x="1031.74" y="255.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="1006.5" y="181" width="1.0" height="15.0" fill="rgb(253,81,6)" rx="2" ry="2" />
<text  x="1009.53" y="191.5" ></text>
</g>
<g >
<title>cpuidle_governor_latency_req (1 samples, 0.08%)</title><rect x="1182.3" y="597" width="0.9" height="15.0" fill="rgb(220,194,46)" rx="2" ry="2" />
<text  x="1185.27" y="607.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (3 samples, 0.25%)</title><rect x="1009.4" y="197" width="2.9" height="15.0" fill="rgb(244,30,21)" rx="2" ry="2" />
<text  x="1012.43" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.25%)</title><rect x="1029.7" y="757" width="2.9" height="15.0" fill="rgb(208,121,1)" rx="2" ry="2" />
<text  x="1032.71" y="767.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.08%)</title><rect x="961.1" y="741" width="1.0" height="15.0" fill="rgb(229,159,21)" rx="2" ry="2" />
<text  x="964.15" y="751.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (1 samples, 0.08%)</title><rect x="135.5" y="757" width="1.0" height="15.0" fill="rgb(235,8,14)" rx="2" ry="2" />
<text  x="138.53" y="767.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (31 samples, 2.54%)</title><rect x="713.9" y="549" width="30.0" height="15.0" fill="rgb(208,99,25)" rx="2" ry="2" />
<text  x="716.94" y="559.5" >co..</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="155.8" y="357" width="1.0" height="15.0" fill="rgb(244,172,33)" rx="2" ry="2" />
<text  x="158.81" y="367.5" ></text>
</g>
<g >
<title>remote_function (64 samples, 5.24%)</title><rect x="10.0" y="501" width="61.8" height="15.0" fill="rgb(233,190,32)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >remote..</text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="1027.8" y="197" width="0.9" height="15.0" fill="rgb(210,122,39)" rx="2" ry="2" />
<text  x="1030.77" y="207.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.08%)</title><rect x="71.8" y="645" width="1.0" height="15.0" fill="rgb(226,146,39)" rx="2" ry="2" />
<text  x="74.80" y="655.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_mut (1 samples, 0.08%)</title><rect x="1022.0" y="757" width="0.9" height="15.0" fill="rgb(246,96,5)" rx="2" ry="2" />
<text  x="1024.98" y="767.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.25%)</title><rect x="976.6" y="757" width="2.9" height="15.0" fill="rgb(224,68,47)" rx="2" ry="2" />
<text  x="979.60" y="767.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.08%)</title><rect x="1007.5" y="229" width="1.0" height="15.0" fill="rgb(245,7,32)" rx="2" ry="2" />
<text  x="1010.50" y="239.5" ></text>
</g>
<g >
<title>core::cmp::min (1 samples, 0.08%)</title><rect x="109.5" y="757" width="0.9" height="15.0" fill="rgb(207,214,22)" rx="2" ry="2" />
<text  x="112.46" y="767.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.08%)</title><rect x="1148.5" y="517" width="0.9" height="15.0" fill="rgb(227,101,23)" rx="2" ry="2" />
<text  x="1151.48" y="527.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.25%)</title><rect x="236.0" y="533" width="2.9" height="15.0" fill="rgb(215,214,50)" rx="2" ry="2" />
<text  x="238.96" y="543.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.65%)</title><rect x="526.6" y="501" width="7.7" height="15.0" fill="rgb(249,92,18)" rx="2" ry="2" />
<text  x="529.61" y="511.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::as_mut_ptr (4 samples, 0.33%)</title><rect x="119.1" y="757" width="3.9" height="15.0" fill="rgb(218,88,42)" rx="2" ry="2" />
<text  x="122.12" y="767.5" ></text>
</g>
<g >
<title>vfs_read (11 samples, 0.90%)</title><rect x="160.6" y="469" width="10.7" height="15.0" fill="rgb(228,47,38)" rx="2" ry="2" />
<text  x="163.64" y="479.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="1006.5" y="165" width="1.0" height="15.0" fill="rgb(208,105,42)" rx="2" ry="2" />
<text  x="1009.53" y="175.5" ></text>
</g>
<g >
<title>irq_exit_rcu (2 samples, 0.16%)</title><rect x="1149.4" y="565" width="2.0" height="15.0" fill="rgb(229,228,41)" rx="2" ry="2" />
<text  x="1152.44" y="575.5" ></text>
</g>
<g >
<title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.08%)</title><rect x="532.4" y="469" width="1.0" height="15.0" fill="rgb(251,98,39)" rx="2" ry="2" />
<text  x="535.41" y="479.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (8 samples, 0.65%)</title><rect x="1004.6" y="309" width="7.7" height="15.0" fill="rgb(223,75,44)" rx="2" ry="2" />
<text  x="1007.60" y="319.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="155.8" y="533" width="1.0" height="15.0" fill="rgb(220,122,54)" rx="2" ry="2" />
<text  x="158.81" y="543.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1027.8" y="613" width="0.9" height="15.0" fill="rgb(217,212,12)" rx="2" ry="2" />
<text  x="1030.77" y="623.5" ></text>
</g>
<g >
<title>dentry_kill (1 samples, 0.08%)</title><rect x="1031.6" y="565" width="1.0" height="15.0" fill="rgb(237,151,5)" rx="2" ry="2" />
<text  x="1034.64" y="575.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (44 samples, 3.60%)</title><rect x="1147.5" y="741" width="42.5" height="15.0" fill="rgb(231,171,27)" rx="2" ry="2" />
<text  x="1150.51" y="751.5" >x86_..</text>
</g>
<g >
<title>serde_json::ser::to_writer (9 samples, 0.74%)</title><rect x="1004.6" y="645" width="8.7" height="15.0" fill="rgb(230,75,37)" rx="2" ry="2" />
<text  x="1007.60" y="655.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.08%)</title><rect x="1028.7" y="501" width="1.0" height="15.0" fill="rgb(218,4,43)" rx="2" ry="2" />
<text  x="1031.74" y="511.5" ></text>
</g>
<g >
<title>ext4_release_io_end (1 samples, 0.08%)</title><rect x="1059.6" y="677" width="1.0" height="15.0" fill="rgb(226,112,35)" rx="2" ry="2" />
<text  x="1062.64" y="687.5" ></text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.08%)</title><rect x="972.7" y="757" width="1.0" height="15.0" fill="rgb(216,174,30)" rx="2" ry="2" />
<text  x="975.73" y="767.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::guaranteed_eq (25 samples, 2.05%)</title><rect x="560.4" y="485" width="24.1" height="15.0" fill="rgb(205,47,32)" rx="2" ry="2" />
<text  x="563.41" y="495.5" >c..</text>
</g>
<g >
<title>__cancel_dirty_page (1 samples, 0.08%)</title><rect x="1031.6" y="389" width="1.0" height="15.0" fill="rgb(226,214,52)" rx="2" ry="2" />
<text  x="1034.64" y="399.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.74%)</title><rect x="1004.6" y="421" width="8.7" height="15.0" fill="rgb(229,177,20)" rx="2" ry="2" />
<text  x="1007.60" y="431.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.08%)</title><rect x="1148.5" y="469" width="0.9" height="15.0" fill="rgb(224,209,31)" rx="2" ry="2" />
<text  x="1151.48" y="479.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="1028.7" y="213" width="1.0" height="15.0" fill="rgb(216,66,5)" rx="2" ry="2" />
<text  x="1031.74" y="223.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.49%)</title><rect x="675.3" y="485" width="5.8" height="15.0" fill="rgb(230,207,47)" rx="2" ry="2" />
<text  x="678.32" y="495.5" ></text>
</g>
<g >
<title>__test_set_page_writeback (1 samples, 0.08%)</title><rect x="1061.6" y="501" width="0.9" height="15.0" fill="rgb(224,138,50)" rx="2" ry="2" />
<text  x="1064.57" y="511.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (36 samples, 2.95%)</title><rect x="1148.5" y="645" width="34.7" height="15.0" fill="rgb(217,124,39)" rx="2" ry="2" />
<text  x="1151.48" y="655.5" >cp..</text>
</g>
<g >
<title>__perf_event_enable (64 samples, 5.24%)</title><rect x="10.0" y="469" width="61.8" height="15.0" fill="rgb(240,214,44)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >__perf..</text>
</g>
<g >
<title>ext4_writepages (2 samples, 0.16%)</title><rect x="1061.6" y="581" width="1.9" height="15.0" fill="rgb(222,150,42)" rx="2" ry="2" />
<text  x="1064.57" y="591.5" ></text>
</g>
<g >
<title>core::cmp::min (1 samples, 0.08%)</title><rect x="980.5" y="757" width="0.9" height="15.0" fill="rgb(241,194,49)" rx="2" ry="2" />
<text  x="983.46" y="767.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.08%)</title><rect x="1027.8" y="277" width="0.9" height="15.0" fill="rgb(241,180,21)" rx="2" ry="2" />
<text  x="1030.77" y="287.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.08%)</title><rect x="155.8" y="405" width="1.0" height="15.0" fill="rgb(241,182,33)" rx="2" ry="2" />
<text  x="158.81" y="415.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 0.08%)</title><rect x="1007.5" y="149" width="1.0" height="15.0" fill="rgb(235,164,16)" rx="2" ry="2" />
<text  x="1010.50" y="159.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy (421 samples, 34.45%)</title><rect x="376.0" y="581" width="406.5" height="15.0" fill="rgb(249,25,45)" rx="2" ry="2" />
<text  x="378.97" y="591.5" >ringbuf::consumer::Consumer&lt;T&gt;::pop_copy</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.08%)</title><rect x="974.7" y="421" width="0.9" height="15.0" fill="rgb(217,197,41)" rx="2" ry="2" />
<text  x="977.66" y="431.5" ></text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.33%)</title><rect x="965.0" y="757" width="3.9" height="15.0" fill="rgb(252,142,20)" rx="2" ry="2" />
<text  x="968.01" y="767.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_ref (2 samples, 0.16%)</title><rect x="151.9" y="757" width="2.0" height="15.0" fill="rgb(211,219,27)" rx="2" ry="2" />
<text  x="154.95" y="767.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1027.8" y="485" width="0.9" height="15.0" fill="rgb(235,122,42)" rx="2" ry="2" />
<text  x="1030.77" y="495.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::DirectoryInode&gt;::serialize (1 samples, 0.08%)</title><rect x="1027.8" y="421" width="0.9" height="15.0" fill="rgb(224,103,37)" rx="2" ry="2" />
<text  x="1030.77" y="431.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (3 samples, 0.25%)</title><rect x="1148.5" y="597" width="2.9" height="15.0" fill="rgb(209,43,20)" rx="2" ry="2" />
<text  x="1151.48" y="607.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.08%)</title><rect x="1027.8" y="661" width="0.9" height="15.0" fill="rgb(238,176,46)" rx="2" ry="2" />
<text  x="1030.77" y="671.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::len (108 samples, 8.84%)</title><rect x="269.8" y="597" width="104.2" height="15.0" fill="rgb(237,103,8)" rx="2" ry="2" />
<text  x="272.75" y="607.5" >ringbuf::con..</text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.08%)</title><rect x="156.8" y="677" width="0.9" height="15.0" fill="rgb(217,71,33)" rx="2" ry="2" />
<text  x="159.78" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (64 samples, 5.24%)</title><rect x="10.0" y="661" width="61.8" height="15.0" fill="rgb(251,209,28)" rx="2" ry="2" />
<text  x="13.00" y="671.5" >entry_..</text>
</g>
<g >
<title>scsi_finish_command (1 samples, 0.08%)</title><rect x="1063.5" y="533" width="1.0" height="15.0" fill="rgb(206,99,54)" rx="2" ry="2" />
<text  x="1066.50" y="543.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="1027.8" y="229" width="0.9" height="15.0" fill="rgb(224,35,31)" rx="2" ry="2" />
<text  x="1030.77" y="239.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_access (7 samples, 0.57%)</title><rect x="1013.3" y="757" width="6.7" height="15.0" fill="rgb(237,158,44)" rx="2" ry="2" />
<text  x="1016.29" y="767.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.08%)</title><rect x="975.6" y="757" width="1.0" height="15.0" fill="rgb(224,166,50)" rx="2" ry="2" />
<text  x="978.63" y="767.5" ></text>
</g>
<g >
<title>do_group_exit (3 samples, 0.25%)</title><rect x="1029.7" y="661" width="2.9" height="15.0" fill="rgb(225,194,4)" rx="2" ry="2" />
<text  x="1032.71" y="671.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (33 samples, 2.70%)</title><rect x="1148.5" y="613" width="31.8" height="15.0" fill="rgb(241,150,54)" rx="2" ry="2" />
<text  x="1151.48" y="623.5" >cp..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.16%)</title><rect x="95.0" y="757" width="1.9" height="15.0" fill="rgb(248,127,47)" rx="2" ry="2" />
<text  x="97.98" y="767.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::end_string (1 samples, 0.08%)</title><rect x="1007.5" y="245" width="1.0" height="15.0" fill="rgb(237,155,46)" rx="2" ry="2" />
<text  x="1010.50" y="255.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.08%)</title><rect x="1063.5" y="629" width="1.0" height="15.0" fill="rgb(240,161,30)" rx="2" ry="2" />
<text  x="1066.50" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.90%)</title><rect x="160.6" y="517" width="10.7" height="15.0" fill="rgb(241,27,19)" rx="2" ry="2" />
<text  x="163.64" y="527.5" ></text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.16%)</title><rect x="211.8" y="533" width="1.9" height="15.0" fill="rgb(232,112,13)" rx="2" ry="2" />
<text  x="214.82" y="543.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="974.7" y="325" width="0.9" height="15.0" fill="rgb(247,155,28)" rx="2" ry="2" />
<text  x="977.66" y="335.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.08%)</title><rect x="1028.7" y="149" width="1.0" height="15.0" fill="rgb(245,211,52)" rx="2" ry="2" />
<text  x="1031.74" y="159.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (3 samples, 0.25%)</title><rect x="210.9" y="549" width="2.8" height="15.0" fill="rgb(221,170,3)" rx="2" ry="2" />
<text  x="213.85" y="559.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.57%)</title><rect x="272.7" y="581" width="6.7" height="15.0" fill="rgb(221,90,32)" rx="2" ry="2" />
<text  x="275.65" y="591.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1 samples, 0.08%)</title><rect x="71.8" y="549" width="1.0" height="15.0" fill="rgb(217,88,44)" rx="2" ry="2" />
<text  x="74.80" y="559.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="155.8" y="469" width="1.0" height="15.0" fill="rgb(241,24,4)" rx="2" ry="2" />
<text  x="158.81" y="479.5" ></text>
</g>
<g >
<title>core::slice::&lt;impl [T]&gt;::as_ptr (1 samples, 0.08%)</title><rect x="123.0" y="757" width="0.9" height="15.0" fill="rgb(211,211,50)" rx="2" ry="2" />
<text  x="125.98" y="767.5" ></text>
</g>
<g >
<title>NaClDescUnref (1 samples, 0.08%)</title><rect x="974.7" y="709" width="0.9" height="15.0" fill="rgb(244,214,8)" rx="2" ry="2" />
<text  x="977.66" y="719.5" ></text>
</g>
<g >
<title>iput_final (1 samples, 0.08%)</title><rect x="1031.6" y="485" width="1.0" height="15.0" fill="rgb(205,53,26)" rx="2" ry="2" />
<text  x="1034.64" y="495.5" ></text>
</g>
<g >
<title>flush_smp_call_function_from_idle (1 samples, 0.08%)</title><rect x="1189.0" y="661" width="1.0" height="15.0" fill="rgb(224,229,39)" rx="2" ry="2" />
<text  x="1192.03" y="671.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_access (413 samples, 33.80%)</title><rect x="383.7" y="565" width="398.8" height="15.0" fill="rgb(220,140,20)" rx="2" ry="2" />
<text  x="386.70" y="575.5" >ringbuf::consumer::Consumer&lt;T&gt;::pop_access</text>
</g>
<g >
<title>cpuidle_idle_call (86 samples, 7.04%)</title><rect x="1063.5" y="709" width="83.0" height="15.0" fill="rgb(222,60,39)" rx="2" ry="2" />
<text  x="1066.50" y="719.5" >cpuidle_i..</text>
</g>
<g >
<title>do_iter_readv_writev (11 samples, 0.90%)</title><rect x="160.6" y="389" width="10.7" height="15.0" fill="rgb(208,117,14)" rx="2" ry="2" />
<text  x="163.64" y="399.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.08%)</title><rect x="1006.5" y="229" width="1.0" height="15.0" fill="rgb(217,159,8)" rx="2" ry="2" />
<text  x="1009.53" y="239.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="1027.8" y="677" width="0.9" height="15.0" fill="rgb(238,156,6)" rx="2" ry="2" />
<text  x="1030.77" y="687.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.08%)</title><rect x="1028.7" y="645" width="1.0" height="15.0" fill="rgb(208,153,47)" rx="2" ry="2" />
<text  x="1031.74" y="655.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.25%)</title><rect x="236.0" y="549" width="2.9" height="15.0" fill="rgb(208,114,10)" rx="2" ry="2" />
<text  x="238.96" y="559.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1028.7" y="597" width="1.0" height="15.0" fill="rgb(214,183,37)" rx="2" ry="2" />
<text  x="1031.74" y="607.5" ></text>
</g>
<g >
<title>wb_do_writeback (2 samples, 0.16%)</title><rect x="1061.6" y="693" width="1.9" height="15.0" fill="rgb(227,84,54)" rx="2" ry="2" />
<text  x="1064.57" y="703.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.08%)</title><rect x="92.1" y="757" width="0.9" height="15.0" fill="rgb(246,172,15)" rx="2" ry="2" />
<text  x="95.08" y="767.5" ></text>
</g>
<g >
<title>__fput (1 samples, 0.08%)</title><rect x="1031.6" y="597" width="1.0" height="15.0" fill="rgb(208,151,35)" rx="2" ry="2" />
<text  x="1034.64" y="607.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.33%)</title><rect x="705.3" y="549" width="3.8" height="15.0" fill="rgb(233,150,52)" rx="2" ry="2" />
<text  x="708.25" y="559.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.08%)</title><rect x="1027.8" y="565" width="0.9" height="15.0" fill="rgb(240,76,28)" rx="2" ry="2" />
<text  x="1030.77" y="575.5" ></text>
</g>
<g >
<title>arch_call_rest_init (44 samples, 3.60%)</title><rect x="1147.5" y="709" width="42.5" height="15.0" fill="rgb(246,22,3)" rx="2" ry="2" />
<text  x="1150.51" y="719.5" >arch..</text>
</g>
<g >
<title>ktime_get (1 samples, 0.08%)</title><rect x="1188.1" y="629" width="0.9" height="15.0" fill="rgb(252,129,24)" rx="2" ry="2" />
<text  x="1191.07" y="639.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (23 samples, 1.88%)</title><rect x="721.7" y="533" width="22.2" height="15.0" fill="rgb(207,8,6)" rx="2" ry="2" />
<text  x="724.67" y="543.5" >c..</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.08%)</title><rect x="974.7" y="565" width="0.9" height="15.0" fill="rgb(213,60,21)" rx="2" ry="2" />
<text  x="977.66" y="575.5" ></text>
</g>
<g >
<title>rcu_sched_clock_irq (1 samples, 0.08%)</title><rect x="1148.5" y="437" width="0.9" height="15.0" fill="rgb(218,217,28)" rx="2" ry="2" />
<text  x="1151.48" y="447.5" ></text>
</g>
<g >
<title>core::ptr::metadata::from_raw_parts_mut (10 samples, 0.82%)</title><rect x="245.6" y="533" width="9.7" height="15.0" fill="rgb(225,53,38)" rx="2" ry="2" />
<text  x="248.61" y="543.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreateDecoder (2 samples, 0.16%)</title><rect x="153.9" y="741" width="1.9" height="15.0" fill="rgb(213,200,16)" rx="2" ry="2" />
<text  x="156.88" y="751.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.08%)</title><rect x="1028.7" y="709" width="1.0" height="15.0" fill="rgb(218,103,42)" rx="2" ry="2" />
<text  x="1031.74" y="719.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (9 samples, 0.74%)</title><rect x="1004.6" y="709" width="8.7" height="15.0" fill="rgb(214,56,44)" rx="2" ry="2" />
<text  x="1007.60" y="719.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1028.7" y="229" width="1.0" height="15.0" fill="rgb(213,64,21)" rx="2" ry="2" />
<text  x="1031.74" y="239.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="1027.8" y="645" width="0.9" height="15.0" fill="rgb(250,197,4)" rx="2" ry="2" />
<text  x="1030.77" y="655.5" ></text>
</g>
<g >
<title>cpuidle_enter (86 samples, 7.04%)</title><rect x="1063.5" y="693" width="83.0" height="15.0" fill="rgb(238,57,53)" rx="2" ry="2" />
<text  x="1066.50" y="703.5" >cpuidle_e..</text>
</g>
<g >
<title>tick_nohz_idle_exit (1 samples, 0.08%)</title><rect x="1188.1" y="645" width="0.9" height="15.0" fill="rgb(224,67,8)" rx="2" ry="2" />
<text  x="1191.07" y="655.5" ></text>
</g>
<g >
<title>[librustposix.so] (2 samples, 0.16%)</title><rect x="157.7" y="677" width="2.0" height="15.0" fill="rgb(249,177,4)" rx="2" ry="2" />
<text  x="160.74" y="687.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.08%)</title><rect x="1007.5" y="213" width="1.0" height="15.0" fill="rgb(213,45,17)" rx="2" ry="2" />
<text  x="1010.50" y="223.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.08%)</title><rect x="1029.7" y="565" width="1.0" height="15.0" fill="rgb(238,79,45)" rx="2" ry="2" />
<text  x="1032.71" y="575.5" ></text>
</g>
<g >
<title>new_sync_write (1 samples, 0.08%)</title><rect x="71.8" y="613" width="1.0" height="15.0" fill="rgb(247,70,47)" rx="2" ry="2" />
<text  x="74.80" y="623.5" ></text>
</g>
<g >
<title>NaClRefCountUnref (1 samples, 0.08%)</title><rect x="974.7" y="693" width="0.9" height="15.0" fill="rgb(233,212,16)" rx="2" ry="2" />
<text  x="977.66" y="703.5" ></text>
</g>
<g >
<title>dentry_unlink_inode (1 samples, 0.08%)</title><rect x="1031.6" y="533" width="1.0" height="15.0" fill="rgb(239,182,28)" rx="2" ry="2" />
<text  x="1034.64" y="543.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.08%)</title><rect x="1027.8" y="245" width="0.9" height="15.0" fill="rgb(228,204,16)" rx="2" ry="2" />
<text  x="1030.77" y="255.5" ></text>
</g>
<g >
<title>dispatcher (9 samples, 0.74%)</title><rect x="1004.6" y="757" width="8.7" height="15.0" fill="rgb(206,27,54)" rx="2" ry="2" />
<text  x="1007.60" y="767.5" ></text>
</g>
<g >
<title>MarkValidJumpTarget (1 samples, 0.08%)</title><rect x="154.8" y="645" width="1.0" height="15.0" fill="rgb(223,48,44)" rx="2" ry="2" />
<text  x="157.84" y="655.5" ></text>
</g>
<g >
<title>process_vm_writev (1 samples, 0.08%)</title><rect x="973.7" y="725" width="1.0" height="15.0" fill="rgb(217,52,6)" rx="2" ry="2" />
<text  x="976.70" y="735.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::inner (31 samples, 2.54%)</title><rect x="461.9" y="533" width="29.9" height="15.0" fill="rgb(252,111,50)" rx="2" ry="2" />
<text  x="464.91" y="543.5" >al..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (1 samples, 0.08%)</title><rect x="155.8" y="661" width="1.0" height="15.0" fill="rgb(254,6,32)" rx="2" ry="2" />
<text  x="158.81" y="671.5" ></text>
</g>
<g >
<title>core::ptr::slice_from_raw_parts_mut (12 samples, 0.98%)</title><rect x="589.4" y="501" width="11.6" height="15.0" fill="rgb(236,120,31)" rx="2" ry="2" />
<text  x="592.38" y="511.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.08%)</title><rect x="155.8" y="453" width="1.0" height="15.0" fill="rgb(247,210,23)" rx="2" ry="2" />
<text  x="158.81" y="463.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::capacity (6 samples, 0.49%)</title><rect x="368.2" y="565" width="5.8" height="15.0" fill="rgb(209,123,29)" rx="2" ry="2" />
<text  x="371.25" y="575.5" ></text>
</g>
<g >
<title>wb_check_old_data_flush (2 samples, 0.16%)</title><rect x="1061.6" y="677" width="1.9" height="15.0" fill="rgb(212,197,24)" rx="2" ry="2" />
<text  x="1064.57" y="687.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="974.7" y="133" width="0.9" height="15.0" fill="rgb(224,138,28)" rx="2" ry="2" />
<text  x="977.66" y="143.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.08%)</title><rect x="974.7" y="581" width="0.9" height="15.0" fill="rgb(228,6,39)" rx="2" ry="2" />
<text  x="977.66" y="591.5" ></text>
</g>
<g >
<title>native_write_msr (64 samples, 5.24%)</title><rect x="10.0" y="405" width="61.8" height="15.0" fill="rgb(226,46,3)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >native..</text>
</g>
<g >
<title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.08%)</title><rect x="533.4" y="485" width="0.9" height="15.0" fill="rgb(239,40,26)" rx="2" ry="2" />
<text  x="536.37" y="495.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (1 samples, 0.08%)</title><rect x="170.3" y="293" width="1.0" height="15.0" fill="rgb(237,29,49)" rx="2" ry="2" />
<text  x="173.29" y="303.5" ></text>
</g>
<g >
<title>cmd_record (65 samples, 5.32%)</title><rect x="10.0" y="757" width="62.8" height="15.0" fill="rgb(218,121,30)" rx="2" ry="2" />
<text  x="13.00" y="767.5" >cmd_re..</text>
</g>
<g >
<title>flush_smp_call_function_from_idle (1 samples, 0.08%)</title><rect x="1183.2" y="645" width="1.0" height="15.0" fill="rgb(208,206,17)" rx="2" ry="2" />
<text  x="1186.24" y="655.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (39 samples, 3.19%)</title><rect x="217.6" y="581" width="37.7" height="15.0" fill="rgb(206,193,28)" rx="2" ry="2" />
<text  x="220.61" y="591.5" >&lt;co..</text>
</g>
<g >
<title>all (1,222 samples, 100%)</title><rect x="10.0" y="805" width="1180.0" height="15.0" fill="rgb(234,180,19)" rx="2" ry="2" />
<text  x="13.00" y="815.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (64 samples, 5.24%)</title><rect x="10.0" y="693" width="61.8" height="15.0" fill="rgb(231,10,14)" rx="2" ry="2" />
<text  x="13.00" y="703.5" >perf_e..</text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy::{{closure}} (1 samples, 0.08%)</title><rect x="1020.0" y="757" width="1.0" height="15.0" fill="rgb(218,139,40)" rx="2" ry="2" />
<text  x="1023.05" y="767.5" ></text>
</g>
<g >
<title>core::cmp::min_by (12 samples, 0.98%)</title><rect x="202.2" y="565" width="11.5" height="15.0" fill="rgb(226,156,36)" rx="2" ry="2" />
<text  x="205.16" y="575.5" ></text>
</g>
<g >
<title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="155.8" y="309" width="1.0" height="15.0" fill="rgb(226,184,47)" rx="2" ry="2" />
<text  x="158.81" y="319.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (1 samples, 0.08%)</title><rect x="1021.0" y="757" width="1.0" height="15.0" fill="rgb(220,153,12)" rx="2" ry="2" />
<text  x="1024.01" y="767.5" ></text>
</g>
<g >
<title>cpuidle_enter (33 samples, 2.70%)</title><rect x="1148.5" y="629" width="31.8" height="15.0" fill="rgb(217,168,48)" rx="2" ry="2" />
<text  x="1151.48" y="639.5" >cp..</text>
</g>
<g >
<title>rest_init (44 samples, 3.60%)</title><rect x="1147.5" y="693" width="42.5" height="15.0" fill="rgb(224,117,14)" rx="2" ry="2" />
<text  x="1150.51" y="703.5" >rest..</text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="1027.8" y="437" width="0.9" height="15.0" fill="rgb(246,199,16)" rx="2" ry="2" />
<text  x="1030.77" y="447.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (2 samples, 0.16%)</title><rect x="1149.4" y="437" width="2.0" height="15.0" fill="rgb(211,206,18)" rx="2" ry="2" />
<text  x="1152.44" y="447.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (3 samples, 0.25%)</title><rect x="1029.7" y="725" width="2.9" height="15.0" fill="rgb(212,227,21)" rx="2" ry="2" />
<text  x="1032.71" y="735.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (9 samples, 0.74%)</title><rect x="1004.6" y="725" width="8.7" height="15.0" fill="rgb(246,116,28)" rx="2" ry="2" />
<text  x="1007.60" y="735.5" ></text>
</g>
<g >
<title>&lt;cache_padded::CachePadded&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.25%)</title><rect x="700.4" y="549" width="2.9" height="15.0" fill="rgb(224,135,26)" rx="2" ry="2" />
<text  x="703.43" y="559.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1028.7" y="469" width="1.0" height="15.0" fill="rgb(226,0,44)" rx="2" ry="2" />
<text  x="1031.74" y="479.5" ></text>
</g>
<g >
<title>ApplyDfaValidator_x86_64 (2 samples, 0.16%)</title><rect x="153.9" y="677" width="1.9" height="15.0" fill="rgb(211,23,25)" rx="2" ry="2" />
<text  x="156.88" y="687.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="1006.5" y="197" width="1.0" height="15.0" fill="rgb(215,209,0)" rx="2" ry="2" />
<text  x="1009.53" y="207.5" ></text>
</g>
<g >
<title>lind_pipe (1 samples, 0.08%)</title><rect x="156.8" y="709" width="0.9" height="15.0" fill="rgb(214,30,45)" rx="2" ry="2" />
<text  x="159.78" y="719.5" ></text>
</g>
<g >
<title>__mod_node_page_state (1 samples, 0.08%)</title><rect x="1061.6" y="469" width="0.9" height="15.0" fill="rgb(246,25,7)" rx="2" ry="2" />
<text  x="1064.57" y="479.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (103 samples, 8.43%)</title><rect x="601.0" y="533" width="99.4" height="15.0" fill="rgb(229,90,42)" rx="2" ry="2" />
<text  x="603.97" y="543.5" >core::slice:..</text>
</g>
<g >
<title>rustposix::interface::pipe::new_pipe (1 samples, 0.08%)</title><rect x="156.8" y="645" width="0.9" height="15.0" fill="rgb(226,142,13)" rx="2" ry="2" />
<text  x="159.78" y="655.5" ></text>
</g>
<g >
<title>kick_ilb (1 samples, 0.08%)</title><rect x="1185.2" y="565" width="0.9" height="15.0" fill="rgb(239,35,32)" rx="2" ry="2" />
<text  x="1188.17" y="575.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="974.7" y="453" width="0.9" height="15.0" fill="rgb(253,88,3)" rx="2" ry="2" />
<text  x="977.66" y="463.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1027.8" y="373" width="0.9" height="15.0" fill="rgb(216,117,33)" rx="2" ry="2" />
<text  x="1030.77" y="383.5" ></text>
</g>
<g >
<title>__cmd_record (65 samples, 5.32%)</title><rect x="10.0" y="741" width="62.8" height="15.0" fill="rgb(251,127,44)" rx="2" ry="2" />
<text  x="13.00" y="751.5" >__cmd_..</text>
</g>
<g >
<title>task_work_run (1 samples, 0.08%)</title><rect x="1031.6" y="629" width="1.0" height="15.0" fill="rgb(249,81,13)" rx="2" ry="2" />
<text  x="1034.64" y="639.5" ></text>
</g>
<g >
<title>kthread (4 samples, 0.33%)</title><rect x="1059.6" y="757" width="3.9" height="15.0" fill="rgb(220,19,51)" rx="2" ry="2" />
<text  x="1062.64" y="767.5" ></text>
</g>
<g >
<title>do_iter_read (11 samples, 0.90%)</title><rect x="160.6" y="405" width="10.7" height="15.0" fill="rgb(226,164,52)" rx="2" ry="2" />
<text  x="163.64" y="415.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.08%)</title><rect x="155.8" y="597" width="1.0" height="15.0" fill="rgb(253,24,25)" rx="2" ry="2" />
<text  x="158.81" y="607.5" ></text>
</g>
<g >
<title>load_balance (2 samples, 0.16%)</title><rect x="1149.4" y="469" width="2.0" height="15.0" fill="rgb(219,42,30)" rx="2" ry="2" />
<text  x="1152.44" y="479.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (85 samples, 6.96%)</title><rect x="1064.5" y="661" width="82.0" height="15.0" fill="rgb(242,72,27)" rx="2" ry="2" />
<text  x="1067.47" y="671.5" >mwait_idl..</text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.08%)</title><rect x="1030.7" y="565" width="0.9" height="15.0" fill="rgb(225,137,51)" rx="2" ry="2" />
<text  x="1033.67" y="575.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="974.7" y="261" width="0.9" height="15.0" fill="rgb(237,193,15)" rx="2" ry="2" />
<text  x="977.66" y="271.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (9 samples, 0.74%)</title><rect x="1004.6" y="581" width="8.7" height="15.0" fill="rgb(247,53,4)" rx="2" ry="2" />
<text  x="1007.60" y="591.5" ></text>
</g>
<g >
<title>perf (65 samples, 5.32%)</title><rect x="10.0" y="789" width="62.8" height="15.0" fill="rgb(206,136,44)" rx="2" ry="2" />
<text  x="13.00" y="799.5" >perf</text>
</g>
<g >
<title>event_function_call (64 samples, 5.24%)</title><rect x="10.0" y="549" width="61.8" height="15.0" fill="rgb(244,146,31)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >event_..</text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::new_with_capacity (1 samples, 0.08%)</title><rect x="156.8" y="629" width="0.9" height="15.0" fill="rgb(251,38,15)" rx="2" ry="2" />
<text  x="159.78" y="639.5" ></text>
</g>
<g >
<title>__rq_qos_done (1 samples, 0.08%)</title><rect x="1063.5" y="453" width="1.0" height="15.0" fill="rgb(228,223,50)" rx="2" ry="2" />
<text  x="1066.50" y="463.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="1027.8" y="405" width="0.9" height="15.0" fill="rgb(221,209,9)" rx="2" ry="2" />
<text  x="1030.77" y="415.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="1010.4" y="149" width="1.0" height="15.0" fill="rgb(215,62,35)" rx="2" ry="2" />
<text  x="1013.39" y="159.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (645 samples, 52.78%)</title><rect x="159.7" y="645" width="622.8" height="15.0" fill="rgb(253,189,23)" rx="2" ry="2" />
<text  x="162.67" y="655.5" >rustposix::safeposix::dispatcher::dispatcher::{{closure}}</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.08%)</title><rect x="1027.8" y="757" width="0.9" height="15.0" fill="rgb(225,208,2)" rx="2" ry="2" />
<text  x="1030.77" y="767.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.08%)</title><rect x="71.8" y="677" width="1.0" height="15.0" fill="rgb(239,8,26)" rx="2" ry="2" />
<text  x="74.80" y="687.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_ref (10 samples, 0.82%)</title><rect x="772.8" y="549" width="9.7" height="15.0" fill="rgb(218,207,50)" rx="2" ry="2" />
<text  x="775.85" y="559.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.08%)</title><rect x="974.7" y="549" width="0.9" height="15.0" fill="rgb(253,89,28)" rx="2" ry="2" />
<text  x="977.66" y="559.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.08%)</title><rect x="1148.5" y="565" width="0.9" height="15.0" fill="rgb(209,7,5)" rx="2" ry="2" />
<text  x="1151.48" y="575.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.08%)</title><rect x="974.7" y="101" width="0.9" height="15.0" fill="rgb(207,158,4)" rx="2" ry="2" />
<text  x="977.66" y="111.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (1 samples, 0.08%)</title><rect x="1027.8" y="213" width="0.9" height="15.0" fill="rgb(215,201,4)" rx="2" ry="2" />
<text  x="1030.77" y="223.5" ></text>
</g>
<g >
<title>wbt_rqw_done (1 samples, 0.08%)</title><rect x="1063.5" y="421" width="1.0" height="15.0" fill="rgb(252,43,12)" rx="2" ry="2" />
<text  x="1066.50" y="431.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (13 samples, 1.06%)</title><rect x="201.2" y="581" width="12.5" height="15.0" fill="rgb(249,36,33)" rx="2" ry="2" />
<text  x="204.19" y="591.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="1028.7" y="277" width="1.0" height="15.0" fill="rgb(233,97,46)" rx="2" ry="2" />
<text  x="1031.74" y="287.5" ></text>
</g>
<g >
<title>scsi_end_request (1 samples, 0.08%)</title><rect x="1063.5" y="501" width="1.0" height="15.0" fill="rgb(219,132,19)" rx="2" ry="2" />
<text  x="1066.50" y="511.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.08%)</title><rect x="1028.7" y="533" width="1.0" height="15.0" fill="rgb(222,142,1)" rx="2" ry="2" />
<text  x="1031.74" y="543.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.08%)</title><rect x="1027.8" y="181" width="0.9" height="15.0" fill="rgb(219,198,31)" rx="2" ry="2" />
<text  x="1030.77" y="191.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.74%)</title><rect x="1004.6" y="437" width="8.7" height="15.0" fill="rgb(229,100,25)" rx="2" ry="2" />
<text  x="1007.60" y="447.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.08%)</title><rect x="1027.8" y="709" width="0.9" height="15.0" fill="rgb(227,186,38)" rx="2" ry="2" />
<text  x="1030.77" y="719.5" ></text>
</g>
<g >
<title>iput.part.0 (1 samples, 0.08%)</title><rect x="1031.6" y="501" width="1.0" height="15.0" fill="rgb(248,35,49)" rx="2" ry="2" />
<text  x="1034.64" y="511.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="155.8" y="421" width="1.0" height="15.0" fill="rgb(231,32,25)" rx="2" ry="2" />
<text  x="158.81" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.08%)</title><rect x="765.1" y="517" width="1.0" height="15.0" fill="rgb(248,125,10)" rx="2" ry="2" />
<text  x="768.12" y="527.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.08%)</title><rect x="974.7" y="277" width="0.9" height="15.0" fill="rgb(215,177,30)" rx="2" ry="2" />
<text  x="977.66" y="287.5" ></text>
</g>
<g >
<title>activate_page (1 samples, 0.08%)</title><rect x="170.3" y="309" width="1.0" height="15.0" fill="rgb(207,163,30)" rx="2" ry="2" />
<text  x="173.29" y="319.5" ></text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.16%)</title><rect x="93.0" y="757" width="2.0" height="15.0" fill="rgb(220,42,48)" rx="2" ry="2" />
<text  x="96.04" y="767.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.08%)</title><rect x="1184.2" y="581" width="1.0" height="15.0" fill="rgb(210,210,38)" rx="2" ry="2" />
<text  x="1187.21" y="591.5" ></text>
</g>
<g >
<title>dput (1 samples, 0.08%)</title><rect x="1031.6" y="581" width="1.0" height="15.0" fill="rgb(245,24,4)" rx="2" ry="2" />
<text  x="1034.64" y="591.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1028.7" y="357" width="1.0" height="15.0" fill="rgb(215,93,45)" rx="2" ry="2" />
<text  x="1031.74" y="367.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (8 samples, 0.65%)</title><rect x="1004.6" y="277" width="7.7" height="15.0" fill="rgb(220,32,43)" rx="2" ry="2" />
<text  x="1007.60" y="287.5" ></text>
</g>
<g >
<title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (5 samples, 0.41%)</title><rect x="709.1" y="549" width="4.8" height="15.0" fill="rgb(222,81,30)" rx="2" ry="2" />
<text  x="712.12" y="559.5" ></text>
</g>
<g >
<title>process_vm_rw_single_vec.constprop.0 (1 samples, 0.08%)</title><rect x="973.7" y="629" width="1.0" height="15.0" fill="rgb(211,195,45)" rx="2" ry="2" />
<text  x="976.70" y="639.5" ></text>
</g>
<g >
<title>truncate_cleanup_page (1 samples, 0.08%)</title><rect x="1031.6" y="405" width="1.0" height="15.0" fill="rgb(245,85,4)" rx="2" ry="2" />
<text  x="1034.64" y="415.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (423 samples, 34.62%)</title><rect x="374.0" y="597" width="408.5" height="15.0" fill="rgb(247,80,2)" rx="2" ry="2" />
<text  x="377.04" y="607.5" >ringbuf::consumer::Consumer&lt;T&gt;::pop_slice</text>
</g>
<g >
<title>__blk_mq_end_request (1 samples, 0.08%)</title><rect x="1063.5" y="485" width="1.0" height="15.0" fill="rgb(252,179,16)" rx="2" ry="2" />
<text  x="1066.50" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.08%)</title><rect x="71.8" y="661" width="1.0" height="15.0" fill="rgb(251,129,13)" rx="2" ry="2" />
<text  x="74.80" y="671.5" ></text>
</g>
<g >
<title>alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.25%)</title><rect x="276.5" y="565" width="2.9" height="15.0" fill="rgb(225,13,23)" rx="2" ry="2" />
<text  x="279.51" y="575.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.08%)</title><rect x="155.8" y="437" width="1.0" height="15.0" fill="rgb(228,187,33)" rx="2" ry="2" />
<text  x="158.81" y="447.5" ></text>
</g>
<g >
<title>perf_ioctl (64 samples, 5.24%)</title><rect x="10.0" y="613" width="61.8" height="15.0" fill="rgb(208,169,0)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >perf_i..</text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (8 samples, 0.65%)</title><rect x="1004.6" y="293" width="7.7" height="15.0" fill="rgb(220,84,46)" rx="2" ry="2" />
<text  x="1007.60" y="303.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.08%)</title><rect x="1027.8" y="597" width="0.9" height="15.0" fill="rgb(231,138,41)" rx="2" ry="2" />
<text  x="1030.77" y="607.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.08%)</title><rect x="1027.8" y="693" width="0.9" height="15.0" fill="rgb(245,175,17)" rx="2" ry="2" />
<text  x="1030.77" y="703.5" ></text>
</g>
<g >
<title>find_get_pages_range_tag (1 samples, 0.08%)</title><rect x="1062.5" y="533" width="1.0" height="15.0" fill="rgb(223,46,17)" rx="2" ry="2" />
<text  x="1065.54" y="543.5" ></text>
</g>
<g >
<title>generic_exec_single (64 samples, 5.24%)</title><rect x="10.0" y="517" width="61.8" height="15.0" fill="rgb(252,195,2)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >generi..</text>
</g>
<g >
<title>generic_file_buffered_read_get_pages (2 samples, 0.16%)</title><rect x="167.4" y="325" width="1.9" height="15.0" fill="rgb(251,56,3)" rx="2" ry="2" />
<text  x="170.40" y="335.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.08%)</title><rect x="1028.7" y="677" width="1.0" height="15.0" fill="rgb(233,37,31)" rx="2" ry="2" />
<text  x="1031.74" y="687.5" ></text>
</g>
<g >
<title>[librustposix.so] (1 samples, 0.08%)</title><rect x="532.4" y="485" width="1.0" height="15.0" fill="rgb(248,2,49)" rx="2" ry="2" />
<text  x="535.41" y="495.5" ></text>
</g>
<g >
<title>asm_call_sysvec_on_stack (1 samples, 0.08%)</title><rect x="1063.5" y="597" width="1.0" height="15.0" fill="rgb(219,226,6)" rx="2" ry="2" />
<text  x="1066.50" y="607.5" ></text>
</g>
<g >
<title>wbt_done (1 samples, 0.08%)</title><rect x="1063.5" y="437" width="1.0" height="15.0" fill="rgb(249,77,33)" rx="2" ry="2" />
<text  x="1066.50" y="447.5" ></text>
</g>
<g >
<title>std::sys::unix::fs::File::read (11 samples, 0.90%)</title><rect x="160.6" y="581" width="10.7" height="15.0" fill="rgb(252,74,17)" rx="2" ry="2" />
<text  x="163.64" y="591.5" ></text>
</g>
<g >
<title>smp_call_function_single (64 samples, 5.24%)</title><rect x="10.0" y="533" width="61.8" height="15.0" fill="rgb(253,18,36)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >smp_ca..</text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="974.7" y="229" width="0.9" height="15.0" fill="rgb(249,73,13)" rx="2" ry="2" />
<text  x="977.66" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.08%)</title><rect x="1028.7" y="69" width="1.0" height="15.0" fill="rgb(225,17,9)" rx="2" ry="2" />
<text  x="1031.74" y="79.5" ></text>
</g>
<g >
<title>rcu_pending (1 samples, 0.08%)</title><rect x="1148.5" y="421" width="0.9" height="15.0" fill="rgb(249,76,54)" rx="2" ry="2" />
<text  x="1151.48" y="431.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="1007.5" y="181" width="1.0" height="15.0" fill="rgb(215,96,52)" rx="2" ry="2" />
<text  x="1010.50" y="191.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="156.8" y="613" width="0.9" height="15.0" fill="rgb(233,64,20)" rx="2" ry="2" />
<text  x="159.78" y="623.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.08%)</title><rect x="1029.7" y="501" width="1.0" height="15.0" fill="rgb(215,61,24)" rx="2" ry="2" />
<text  x="1032.71" y="511.5" ></text>
</g>
<g >
<title>mpage_submit_page (1 samples, 0.08%)</title><rect x="1061.6" y="533" width="0.9" height="15.0" fill="rgb(206,27,24)" rx="2" ry="2" />
<text  x="1064.57" y="543.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (1 samples, 0.08%)</title><rect x="979.5" y="757" width="1.0" height="15.0" fill="rgb(227,114,22)" rx="2" ry="2" />
<text  x="982.49" y="767.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (9 samples, 0.74%)</title><rect x="1004.6" y="741" width="8.7" height="15.0" fill="rgb(235,122,12)" rx="2" ry="2" />
<text  x="1007.60" y="751.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="974.7" y="149" width="0.9" height="15.0" fill="rgb(209,92,10)" rx="2" ry="2" />
<text  x="977.66" y="159.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (3 samples, 0.25%)</title><rect x="982.4" y="757" width="2.9" height="15.0" fill="rgb(244,226,1)" rx="2" ry="2" />
<text  x="985.39" y="767.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.90%)</title><rect x="160.6" y="533" width="10.7" height="15.0" fill="rgb(253,162,30)" rx="2" ry="2" />
<text  x="163.64" y="543.5" ></text>
</g>
<g >
<title>copy_page_to_iter_iovec (6 samples, 0.49%)</title><rect x="161.6" y="309" width="5.8" height="15.0" fill="rgb(208,183,5)" rx="2" ry="2" />
<text  x="164.60" y="319.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (1 samples, 0.08%)</title><rect x="1061.6" y="485" width="0.9" height="15.0" fill="rgb(207,53,52)" rx="2" ry="2" />
<text  x="1064.57" y="495.5" ></text>
</g>
<g >
<title>truncate_inode_page (1 samples, 0.08%)</title><rect x="1031.6" y="421" width="1.0" height="15.0" fill="rgb(233,147,28)" rx="2" ry="2" />
<text  x="1034.64" y="431.5" ></text>
</g>
<g >
<title>NaClCopyDynamicRegion (1 samples, 0.08%)</title><rect x="973.7" y="741" width="1.0" height="15.0" fill="rgb(223,26,6)" rx="2" ry="2" />
<text  x="976.70" y="751.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="1012.3" y="325" width="1.0" height="15.0" fill="rgb(209,95,47)" rx="2" ry="2" />
<text  x="1015.32" y="335.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="1010.4" y="165" width="1.9" height="15.0" fill="rgb(234,70,0)" rx="2" ry="2" />
<text  x="1013.39" y="175.5" ></text>
</g>
<g >
<title>NaClHostDescClose (1 samples, 0.08%)</title><rect x="974.7" y="661" width="0.9" height="15.0" fill="rgb(225,204,43)" rx="2" ry="2" />
<text  x="977.66" y="671.5" ></text>
</g>
<g >
<title>ovl_read_iter (11 samples, 0.90%)</title><rect x="160.6" y="437" width="10.7" height="15.0" fill="rgb(252,117,26)" rx="2" ry="2" />
<text  x="163.64" y="447.5" ></text>
</g>
<g >
<title>release_pages (1 samples, 0.08%)</title><rect x="1029.7" y="549" width="1.0" height="15.0" fill="rgb(247,187,25)" rx="2" ry="2" />
<text  x="1032.71" y="559.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.08%)</title><rect x="156.8" y="581" width="0.9" height="15.0" fill="rgb(220,21,5)" rx="2" ry="2" />
<text  x="159.78" y="591.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.08%)</title><rect x="1179.4" y="565" width="0.9" height="15.0" fill="rgb(223,220,54)" rx="2" ry="2" />
<text  x="1182.38" y="575.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.08%)</title><rect x="1186.1" y="597" width="1.0" height="15.0" fill="rgb(223,159,43)" rx="2" ry="2" />
<text  x="1189.14" y="607.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.08%)</title><rect x="971.8" y="757" width="0.9" height="15.0" fill="rgb(207,100,7)" rx="2" ry="2" />
<text  x="974.77" y="767.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (7 samples, 0.57%)</title><rect x="128.8" y="757" width="6.7" height="15.0" fill="rgb(229,213,42)" rx="2" ry="2" />
<text  x="131.77" y="767.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.25%)</title><rect x="1009.4" y="213" width="2.9" height="15.0" fill="rgb(236,200,1)" rx="2" ry="2" />
<text  x="1012.43" y="223.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (9 samples, 0.74%)</title><rect x="1004.6" y="501" width="8.7" height="15.0" fill="rgb(209,172,39)" rx="2" ry="2" />
<text  x="1007.60" y="511.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (3 samples, 0.25%)</title><rect x="1029.7" y="741" width="2.9" height="15.0" fill="rgb(207,28,41)" rx="2" ry="2" />
<text  x="1032.71" y="751.5" ></text>
</g>
<g >
<title>cpu_startup_entry (44 samples, 3.60%)</title><rect x="1147.5" y="677" width="42.5" height="15.0" fill="rgb(251,121,18)" rx="2" ry="2" />
<text  x="1150.51" y="687.5" >cpu_..</text>
</g>
<g >
<title>_perf_event_enable (64 samples, 5.24%)</title><rect x="10.0" y="565" width="61.8" height="15.0" fill="rgb(236,69,39)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >_perf_..</text>
</g>
<g >
<title>NaClCopyDynamicTextAndVmmap (1 samples, 0.08%)</title><rect x="973.7" y="757" width="1.0" height="15.0" fill="rgb(209,164,38)" rx="2" ry="2" />
<text  x="976.70" y="767.5" ></text>
</g>
<g >
<title>tick_nohz_idle_enter (1 samples, 0.08%)</title><rect x="1187.1" y="645" width="1.0" height="15.0" fill="rgb(236,172,53)" rx="2" ry="2" />
<text  x="1190.10" y="655.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="1027.8" y="341" width="0.9" height="15.0" fill="rgb(224,4,12)" rx="2" ry="2" />
<text  x="1030.77" y="351.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (9 samples, 0.74%)</title><rect x="1004.6" y="661" width="8.7" height="15.0" fill="rgb(243,32,53)" rx="2" ry="2" />
<text  x="1007.60" y="671.5" ></text>
</g>
<g >
<title>mpage_prepare_extent_to_map (1 samples, 0.08%)</title><rect x="1062.5" y="565" width="1.0" height="15.0" fill="rgb(232,128,9)" rx="2" ry="2" />
<text  x="1065.54" y="575.5" ></text>
</g>
<g >
<title>run_rebalance_domains (2 samples, 0.16%)</title><rect x="1149.4" y="501" width="2.0" height="15.0" fill="rgb(220,170,33)" rx="2" ry="2" />
<text  x="1152.44" y="511.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::SharedVec&lt;T&gt;::get_mut (6 samples, 0.49%)</title><rect x="767.1" y="549" width="5.7" height="15.0" fill="rgb(238,7,5)" rx="2" ry="2" />
<text  x="770.05" y="559.5" ></text>
</g>
<g >
<title>update_sg_lb_stats (2 samples, 0.16%)</title><rect x="1149.4" y="421" width="2.0" height="15.0" fill="rgb(252,123,23)" rx="2" ry="2" />
<text  x="1152.44" y="431.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::pipe_syscall (1 samples, 0.08%)</title><rect x="156.8" y="661" width="0.9" height="15.0" fill="rgb(249,35,0)" rx="2" ry="2" />
<text  x="159.78" y="671.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.08%)</title><rect x="155.8" y="613" width="1.0" height="15.0" fill="rgb(205,20,16)" rx="2" ry="2" />
<text  x="158.81" y="623.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (3 samples, 0.25%)</title><rect x="1029.7" y="709" width="2.9" height="15.0" fill="rgb(241,126,37)" rx="2" ry="2" />
<text  x="1032.71" y="719.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.08%)</title><rect x="1028.7" y="693" width="1.0" height="15.0" fill="rgb(242,107,49)" rx="2" ry="2" />
<text  x="1031.74" y="703.5" ></text>
</g>
<g >
<title>mpage_map_and_submit_buffers (1 samples, 0.08%)</title><rect x="1061.6" y="549" width="0.9" height="15.0" fill="rgb(226,112,32)" rx="2" ry="2" />
<text  x="1064.57" y="559.5" ></text>
</g>
<g >
<title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (17 samples, 1.39%)</title><rect x="475.4" y="517" width="16.4" height="15.0" fill="rgb(212,155,21)" rx="2" ry="2" />
<text  x="478.43" y="527.5" ></text>
</g>
<g >
<title>[sel_ldr] (651 samples, 53.27%)</title><rect x="153.9" y="773" width="628.6" height="15.0" fill="rgb(248,8,50)" rx="2" ry="2" />
<text  x="156.88" y="783.5" >[sel_ldr]</text>
</g>
<g >
<title>perf_event_for_each_child (64 samples, 5.24%)</title><rect x="10.0" y="581" width="61.8" height="15.0" fill="rgb(251,7,42)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >perf_e..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.08%)</title><rect x="973.7" y="709" width="1.0" height="15.0" fill="rgb(242,218,7)" rx="2" ry="2" />
<text  x="976.70" y="719.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.08%)</title><rect x="1179.4" y="581" width="0.9" height="15.0" fill="rgb(224,27,5)" rx="2" ry="2" />
<text  x="1182.38" y="591.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.08%)</title><rect x="155.8" y="549" width="1.0" height="15.0" fill="rgb(240,106,11)" rx="2" ry="2" />
<text  x="158.81" y="559.5" ></text>
</g>
<g >
<title>[librustposix.so] (2 samples, 0.16%)</title><rect x="703.3" y="549" width="2.0" height="15.0" fill="rgb(252,103,45)" rx="2" ry="2" />
<text  x="706.32" y="559.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.16%)</title><rect x="963.1" y="757" width="1.9" height="15.0" fill="rgb(213,150,14)" rx="2" ry="2" />
<text  x="966.08" y="767.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (3 samples, 0.25%)</title><rect x="1148.5" y="581" width="2.9" height="15.0" fill="rgb(214,227,40)" rx="2" ry="2" />
<text  x="1151.48" y="591.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.08%)</title><rect x="974.7" y="613" width="0.9" height="15.0" fill="rgb(229,6,13)" rx="2" ry="2" />
<text  x="977.66" y="623.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.08%)</title><rect x="1146.5" y="693" width="1.0" height="15.0" fill="rgb(239,86,36)" rx="2" ry="2" />
<text  x="1149.55" y="703.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.16%)</title><rect x="1149.4" y="517" width="2.0" height="15.0" fill="rgb(234,124,10)" rx="2" ry="2" />
<text  x="1152.44" y="527.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (91 samples, 7.45%)</title><rect x="612.6" y="517" width="87.8" height="15.0" fill="rgb(226,70,36)" rx="2" ry="2" />
<text  x="615.55" y="527.5" >&lt;core::ops..</text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.08%)</title><rect x="1148.5" y="533" width="0.9" height="15.0" fill="rgb(239,12,48)" rx="2" ry="2" />
<text  x="1151.48" y="543.5" ></text>
</g>
<g >
<title>cpuidle_select (3 samples, 0.25%)</title><rect x="1180.3" y="629" width="2.9" height="15.0" fill="rgb(250,119,37)" rx="2" ry="2" />
<text  x="1183.34" y="639.5" ></text>
</g>
<g >
<title>core::slice::iter::Iter&lt;T&gt;::make_slice (1 samples, 0.08%)</title><rect x="1011.4" y="133" width="0.9" height="15.0" fill="rgb(231,106,28)" rx="2" ry="2" />
<text  x="1014.36" y="143.5" ></text>
</g>
<g >
<title>find_busiest_group (2 samples, 0.16%)</title><rect x="1149.4" y="453" width="2.0" height="15.0" fill="rgb(214,226,39)" rx="2" ry="2" />
<text  x="1152.44" y="463.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="1028.7" y="101" width="1.0" height="15.0" fill="rgb(240,127,24)" rx="2" ry="2" />
<text  x="1031.74" y="111.5" ></text>
</g>
<g >
<title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (2 samples, 0.16%)</title><rect x="157.7" y="661" width="2.0" height="15.0" fill="rgb(219,70,13)" rx="2" ry="2" />
<text  x="160.74" y="671.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (9 samples, 0.74%)</title><rect x="1004.6" y="469" width="8.7" height="15.0" fill="rgb(207,5,20)" rx="2" ry="2" />
<text  x="1007.60" y="479.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (43 samples, 3.52%)</title><rect x="213.7" y="597" width="41.6" height="15.0" fill="rgb(237,177,14)" rx="2" ry="2" />
<text  x="216.75" y="607.5" >cor..</text>
</g>
<g >
<title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.08%)</title><rect x="1027.8" y="101" width="0.9" height="15.0" fill="rgb(211,42,11)" rx="2" ry="2" />
<text  x="1030.77" y="111.5" ></text>
</g>
<g >
<title>NaClSysPipeDecoder (1 samples, 0.08%)</title><rect x="156.8" y="741" width="0.9" height="15.0" fill="rgb(250,18,11)" rx="2" ry="2" />
<text  x="159.78" y="751.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="155.8" y="373" width="1.0" height="15.0" fill="rgb(220,44,38)" rx="2" ry="2" />
<text  x="158.81" y="383.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.08%)</title><rect x="1028.7" y="741" width="1.0" height="15.0" fill="rgb(212,209,10)" rx="2" ry="2" />
<text  x="1031.74" y="751.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="1028.7" y="325" width="1.0" height="15.0" fill="rgb(241,220,50)" rx="2" ry="2" />
<text  x="1031.74" y="335.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (8 samples, 0.65%)</title><rect x="1004.6" y="325" width="7.7" height="15.0" fill="rgb(241,35,30)" rx="2" ry="2" />
<text  x="1007.60" y="335.5" ></text>
</g>
<g >
<title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.08%)</title><rect x="156.8" y="565" width="0.9" height="15.0" fill="rgb(216,199,24)" rx="2" ry="2" />
<text  x="159.78" y="575.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="1010.4" y="181" width="1.9" height="15.0" fill="rgb(215,54,40)" rx="2" ry="2" />
<text  x="1013.39" y="191.5" ></text>
</g>
<g >
<title>NaClValidateCode (2 samples, 0.16%)</title><rect x="153.9" y="693" width="1.9" height="15.0" fill="rgb(221,48,25)" rx="2" ry="2" />
<text  x="156.88" y="703.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u32 (1 samples, 0.08%)</title><rect x="1012.3" y="293" width="1.0" height="15.0" fill="rgb(213,100,28)" rx="2" ry="2" />
<text  x="1015.32" y="303.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::len (4 samples, 0.33%)</title><rect x="147.1" y="757" width="3.9" height="15.0" fill="rgb(221,55,30)" rx="2" ry="2" />
<text  x="150.12" y="767.5" ></text>
</g>
<g >
<title>&lt;u32 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (1 samples, 0.08%)</title><rect x="1012.3" y="229" width="1.0" height="15.0" fill="rgb(251,156,14)" rx="2" ry="2" />
<text  x="1015.32" y="239.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy::{{closure}} (3 samples, 0.25%)</title><rect x="137.5" y="757" width="2.9" height="15.0" fill="rgb(235,0,37)" rx="2" ry="2" />
<text  x="140.46" y="767.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (2 samples, 0.16%)</title><rect x="140.4" y="757" width="1.9" height="15.0" fill="rgb(245,6,22)" rx="2" ry="2" />
<text  x="143.36" y="767.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1028.7" y="613" width="1.0" height="15.0" fill="rgb(240,29,36)" rx="2" ry="2" />
<text  x="1031.74" y="623.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (11 samples, 0.90%)</title><rect x="160.6" y="373" width="10.7" height="15.0" fill="rgb(225,36,41)" rx="2" ry="2" />
<text  x="163.64" y="383.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.74%)</title><rect x="1004.6" y="629" width="8.7" height="15.0" fill="rgb(206,113,51)" rx="2" ry="2" />
<text  x="1007.60" y="639.5" ></text>
</g>
<g >
<title>core::ptr::metadata::from_raw_parts_mut (5 samples, 0.41%)</title><rect x="596.1" y="485" width="4.9" height="15.0" fill="rgb(248,214,24)" rx="2" ry="2" />
<text  x="599.14" y="495.5" ></text>
</g>
</g>
</svg>
