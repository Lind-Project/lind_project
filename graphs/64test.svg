<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>wrapped_function (namespace.py:1266) (154 samples, 1.32%)</title><rect x="0.5931%" y="84" width="1.3237%" height="15" fill="rgb(227,0,7)"/><text x="0.8431%" y="94.50"></text></g><g><title>acquire (emulmisc.py:277) (154 samples, 1.32%)</title><rect x="0.5931%" y="100" width="1.3237%" height="15" fill="rgb(217,0,24)"/><text x="0.8431%" y="110.50"></text></g><g><title>__do_func_call (namespace.py:1003) (409 samples, 3.52%)</title><rect x="0.0860%" y="68" width="3.5156%" height="15" fill="rgb(221,193,54)"/><text x="0.3360%" y="78.50">__d..</text></g><g><title>wrapped_function (namespace.py:1268) (196 samples, 1.68%)</title><rect x="1.9168%" y="84" width="1.6847%" height="15" fill="rgb(248,212,6)"/><text x="2.1668%" y="94.50"></text></g><g><title>_process_retval (namespace.py:1188) (196 samples, 1.68%)</title><rect x="1.9168%" y="100" width="1.6847%" height="15" fill="rgb(208,68,35)"/><text x="2.1668%" y="110.50"></text></g><g><title>LindSyscall (lind_server.py:9839) (421 samples, 3.62%)</title><rect x="0.0774%" y="52" width="3.6187%" height="15" fill="rgb(232,128,0)"/><text x="0.3274%" y="62.50">Lind..</text></g><g><title>_read_from_pipe (lind_server.py:3534) (662 samples, 5.69%)</title><rect x="5.3894%" y="116" width="5.6902%" height="15" fill="rgb(207,160,47)"/><text x="5.6394%" y="126.50">_read_f..</text></g><g><title>_read_from_pipe (lind_server.py:3536) (669 samples, 5.75%)</title><rect x="11.0796%" y="116" width="5.7504%" height="15" fill="rgb(228,23,34)"/><text x="11.3296%" y="126.50">_read_f..</text></g><g><title>_read_from_pipe (lind_server.py:3542) (352 samples, 3.03%)</title><rect x="17.7583%" y="116" width="3.0256%" height="15" fill="rgb(218,30,26)"/><text x="18.0083%" y="126.50">_re..</text></g><g><title>_read_from_pipe (lind_server.py:3545) (5,328 samples, 45.80%)</title><rect x="20.7839%" y="116" width="45.7968%" height="15" fill="rgb(220,122,19)"/><text x="21.0339%" y="126.50">_read_from_pipe (lind_server.py:3545)</text></g><g><title>_read_from_pipe (lind_server.py:3546) (223 samples, 1.92%)</title><rect x="66.5807%" y="116" width="1.9168%" height="15" fill="rgb(250,228,42)"/><text x="66.8307%" y="126.50">_..</text></g><g><title>read_syscall (lind_server.py:3589) (7,515 samples, 64.60%)</title><rect x="3.9367%" y="100" width="64.5952%" height="15" fill="rgb(240,193,28)"/><text x="4.1867%" y="110.50">read_syscall (lind_server.py:3589)</text></g><g><title>lind_fs_read (lind_server.py:6783) (7,534 samples, 64.76%)</title><rect x="3.7820%" y="84" width="64.7585%" height="15" fill="rgb(216,20,37)"/><text x="4.0320%" y="94.50">lind_fs_read (lind_server.py:6783)</text></g><g><title>wrapped_function (namespace.py:1266) (263 samples, 2.26%)</title><rect x="71.6349%" y="132" width="2.2606%" height="15" fill="rgb(206,188,39)"/><text x="71.8849%" y="142.50">w..</text></g><g><title>acquire (emulmisc.py:277) (263 samples, 2.26%)</title><rect x="71.6349%" y="148" width="2.2606%" height="15" fill="rgb(217,207,13)"/><text x="71.8849%" y="158.50">a..</text></g><g><title>__do_func_call (namespace.py:1003) (937 samples, 8.05%)</title><rect x="71.0160%" y="116" width="8.0540%" height="15" fill="rgb(231,73,38)"/><text x="71.2660%" y="126.50">__do_func_c..</text></g><g><title>wrapped_function (namespace.py:1268) (602 samples, 5.17%)</title><rect x="73.8955%" y="132" width="5.1745%" height="15" fill="rgb(225,20,46)"/><text x="74.1455%" y="142.50">wrappe..</text></g><g><title>_process_retval (namespace.py:1188) (602 samples, 5.17%)</title><rect x="73.8955%" y="148" width="5.1745%" height="15" fill="rgb(210,31,41)"/><text x="74.1455%" y="158.50">_proce..</text></g><g><title>_process_retval_helper (namespace.py:1158) (600 samples, 5.16%)</title><rect x="73.9127%" y="164" width="5.1573%" height="15" fill="rgb(221,200,47)"/><text x="74.1627%" y="174.50">_proce..</text></g><g><title>copy (namespace.py:273) (600 samples, 5.16%)</title><rect x="73.9127%" y="180" width="5.1573%" height="15" fill="rgb(226,26,5)"/><text x="74.1627%" y="190.50">copy (..</text></g><g><title>_copy (namespace.py:860) (558 samples, 4.80%)</title><rect x="74.2737%" y="196" width="4.7963%" height="15" fill="rgb(249,33,26)"/><text x="74.5237%" y="206.50">_copy ..</text></g><g><title>write_syscall (lind_server.py:3666) (960 samples, 8.25%)</title><rect x="70.9902%" y="100" width="8.2517%" height="15" fill="rgb(235,183,28)"/><text x="71.2402%" y="110.50">write_sysca..</text></g><g><title>wrapped_function (namespace.py:1266) (409 samples, 3.52%)</title><rect x="79.6373%" y="132" width="3.5156%" height="15" fill="rgb(221,5,38)"/><text x="79.8873%" y="142.50">wra..</text></g><g><title>acquire (emulmisc.py:277) (409 samples, 3.52%)</title><rect x="79.6373%" y="148" width="3.5156%" height="15" fill="rgb(247,18,42)"/><text x="79.8873%" y="158.50">acq..</text></g><g><title>__do_func_call (namespace.py:1003) (900 samples, 7.74%)</title><rect x="79.2505%" y="116" width="7.7359%" height="15" fill="rgb(241,131,45)"/><text x="79.5005%" y="126.50">__do_func_c..</text></g><g><title>wrapped_function (namespace.py:1268) (446 samples, 3.83%)</title><rect x="83.1528%" y="132" width="3.8336%" height="15" fill="rgb(249,31,29)"/><text x="83.4028%" y="142.50">wrap..</text></g><g><title>_process_retval (namespace.py:1188) (446 samples, 3.83%)</title><rect x="83.1528%" y="148" width="3.8336%" height="15" fill="rgb(225,111,53)"/><text x="83.4028%" y="158.50">_pro..</text></g><g><title>_process_retval_helper (namespace.py:1158) (444 samples, 3.82%)</title><rect x="83.1700%" y="164" width="3.8164%" height="15" fill="rgb(238,160,17)"/><text x="83.4200%" y="174.50">_pro..</text></g><g><title>copy (namespace.py:273) (444 samples, 3.82%)</title><rect x="83.1700%" y="180" width="3.8164%" height="15" fill="rgb(214,148,48)"/><text x="83.4200%" y="190.50">copy..</text></g><g><title>_copy (namespace.py:860) (417 samples, 3.58%)</title><rect x="83.4021%" y="196" width="3.5843%" height="15" fill="rgb(232,36,49)"/><text x="83.6521%" y="206.50">_cop..</text></g><g><title>write_syscall (lind_server.py:3667) (909 samples, 7.81%)</title><rect x="79.2419%" y="100" width="7.8133%" height="15" fill="rgb(209,103,24)"/><text x="79.4919%" y="110.50">write_sysca..</text></g><g><title>wrapped_function (namespace.py:1266) (634 samples, 5.45%)</title><rect x="87.7944%" y="148" width="5.4495%" height="15" fill="rgb(229,88,8)"/><text x="88.0444%" y="158.50">wrapped..</text></g><g><title>acquire (emulmisc.py:277) (633 samples, 5.44%)</title><rect x="87.8030%" y="164" width="5.4409%" height="15" fill="rgb(213,181,19)"/><text x="88.0530%" y="174.50">acquire..</text></g><g><title>_copy (namespace.py:858) (276 samples, 2.37%)</title><rect x="93.2611%" y="212" width="2.3724%" height="15" fill="rgb(254,191,54)"/><text x="93.5111%" y="222.50">_c..</text></g><g><title>_process_retval_helper (namespace.py:1158) (420 samples, 3.61%)</title><rect x="93.2525%" y="180" width="3.6101%" height="15" fill="rgb(241,83,37)"/><text x="93.5025%" y="190.50">_pro..</text></g><g><title>copy (namespace.py:273) (420 samples, 3.61%)</title><rect x="93.2525%" y="196" width="3.6101%" height="15" fill="rgb(233,36,39)"/><text x="93.5025%" y="206.50">copy..</text></g><g><title>_write_to_pipe (lind_server.py:3624) (1,173 samples, 10.08%)</title><rect x="87.1841%" y="116" width="10.0825%" height="15" fill="rgb(226,3,54)"/><text x="87.4341%" y="126.50">_write_to_pipe ..</text></g><g><title>__do_func_call (namespace.py:1003) (1,170 samples, 10.06%)</title><rect x="87.2099%" y="132" width="10.0567%" height="15" fill="rgb(245,192,40)"/><text x="87.4599%" y="142.50">__do_func_call ..</text></g><g><title>wrapped_function (namespace.py:1268) (468 samples, 4.02%)</title><rect x="93.2439%" y="148" width="4.0227%" height="15" fill="rgb(238,167,29)"/><text x="93.4939%" y="158.50">wrap..</text></g><g><title>_process_retval (namespace.py:1188) (468 samples, 4.02%)</title><rect x="93.2439%" y="164" width="4.0227%" height="15" fill="rgb(232,182,51)"/><text x="93.4939%" y="174.50">_pro..</text></g><g><title>_write_to_pipe (lind_server.py:3627) (226 samples, 1.94%)</title><rect x="97.2666%" y="116" width="1.9426%" height="15" fill="rgb(231,60,39)"/><text x="97.5166%" y="126.50">_..</text></g><g><title>write_syscall (lind_server.py:3674) (1,438 samples, 12.36%)</title><rect x="87.1841%" y="100" width="12.3603%" height="15" fill="rgb(208,69,12)"/><text x="87.4341%" y="110.50">write_syscall (lin..</text></g><g><title>lind_fs_write (lind_server.py:6557) (3,636 samples, 31.25%)</title><rect x="68.5663%" y="84" width="31.2532%" height="15" fill="rgb(235,93,37)"/><text x="68.8163%" y="94.50">lind_fs_write (lind_server.py:6557)</text></g><g><title>LindSyscall (lind_server.py:9843) (11,182 samples, 96.11%)</title><rect x="3.7476%" y="52" width="96.1148%" height="15" fill="rgb(213,116,39)"/><text x="3.9976%" y="62.50">LindSyscall (lind_server.py:9843)</text></g><g><title>dispatch_syscall (lind_server.py:9787) (11,182 samples, 96.11%)</title><rect x="3.7476%" y="68" width="96.1148%" height="15" fill="rgb(222,207,29)"/><text x="3.9976%" y="78.50">dispatch_syscall (lind_server.py:9787)</text></g><g><title>all (11,634 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(206,96,30)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>