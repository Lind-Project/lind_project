<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="822.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="805" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="805" > </text>
<g id="frames">
<g >
<title>menu_select (3 samples, 0.31%)</title><rect x="1155.4" y="645" width="3.7" height="15.0" fill="rgb(245,83,3)" rx="2" ry="2" />
<text  x="1158.37" y="655.5" ></text>
</g>
<g >
<title>alloc_pages_vma (46 samples, 4.82%)</title><rect x="848.6" y="613" width="56.9" height="15.0" fill="rgb(218,6,22)" rx="2" ry="2" />
<text  x="851.62" y="623.5" >alloc_..</text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::remaining (137 samples, 14.36%)</title><rect x="557.9" y="565" width="169.5" height="15.0" fill="rgb(240,194,33)" rx="2" ry="2" />
<text  x="560.95" y="575.5" >ringbuf::producer::Pr..</text>
</g>
<g >
<title>do_idle (64 samples, 6.71%)</title><rect x="1084.9" y="693" width="79.1" height="15.0" fill="rgb(233,25,52)" rx="2" ry="2" />
<text  x="1087.86" y="703.5" >do_idle</text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="217.8" y="245" width="1.2" height="15.0" fill="rgb(225,87,28)" rx="2" ry="2" />
<text  x="220.80" y="255.5" ></text>
</g>
<g >
<title>sel_ldr (782 samples, 81.97%)</title><rect x="113.9" y="757" width="967.3" height="15.0" fill="rgb(221,219,51)" rx="2" ry="2" />
<text  x="116.90" y="767.5" >sel_ldr</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.10%)</title><rect x="217.8" y="69" width="1.2" height="15.0" fill="rgb(239,106,34)" rx="2" ry="2" />
<text  x="220.80" y="79.5" ></text>
</g>
<g >
<title>pick_next_task_fair (2 samples, 0.21%)</title><rect x="1161.6" y="645" width="2.4" height="15.0" fill="rgb(243,167,14)" rx="2" ry="2" />
<text  x="1164.55" y="655.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.10%)</title><rect x="993.3" y="117" width="1.3" height="15.0" fill="rgb(254,6,13)" rx="2" ry="2" />
<text  x="996.33" y="127.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (84 samples, 8.81%)</title><rect x="256.1" y="501" width="103.9" height="15.0" fill="rgb(219,42,4)" rx="2" ry="2" />
<text  x="259.14" y="511.5" >core::intrin..</text>
</g>
<g >
<title>std::fs::remove_file (1 samples, 0.10%)</title><rect x="214.1" y="453" width="1.2" height="15.0" fill="rgb(241,10,18)" rx="2" ry="2" />
<text  x="217.09" y="463.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (8 samples, 0.84%)</title><rect x="425.6" y="501" width="9.9" height="15.0" fill="rgb(213,63,22)" rx="2" ry="2" />
<text  x="428.60" y="511.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.10%)</title><rect x="222.7" y="629" width="1.3" height="15.0" fill="rgb(229,219,38)" rx="2" ry="2" />
<text  x="225.75" y="639.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.10%)</title><rect x="214.1" y="549" width="1.2" height="15.0" fill="rgb(230,119,31)" rx="2" ry="2" />
<text  x="217.09" y="559.5" ></text>
</g>
<g >
<title>poll_idle (9 samples, 0.94%)</title><rect x="1144.2" y="629" width="11.2" height="15.0" fill="rgb(220,172,40)" rx="2" ry="2" />
<text  x="1147.23" y="639.5" ></text>
</g>
<g >
<title>page_mapping (1 samples, 0.10%)</title><rect x="978.5" y="549" width="1.2" height="15.0" fill="rgb(218,210,19)" rx="2" ry="2" />
<text  x="981.49" y="559.5" ></text>
</g>
<g >
<title>search_binary_handler (1 samples, 0.10%)</title><rect x="11.2" y="629" width="1.3" height="15.0" fill="rgb(215,81,8)" rx="2" ry="2" />
<text  x="14.24" y="639.5" ></text>
</g>
<g >
<title>file_remove_privs (1 samples, 0.10%)</title><rect x="215.3" y="389" width="1.3" height="15.0" fill="rgb(249,48,14)" rx="2" ry="2" />
<text  x="218.32" y="399.5" ></text>
</g>
<g >
<title>event_function_call (76 samples, 7.97%)</title><rect x="16.2" y="517" width="94.0" height="15.0" fill="rgb(222,218,20)" rx="2" ry="2" />
<text  x="19.18" y="527.5" >event_funct..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::mmap_syscall (1 samples, 0.10%)</title><rect x="222.7" y="613" width="1.3" height="15.0" fill="rgb(239,127,10)" rx="2" ry="2" />
<text  x="225.75" y="623.5" ></text>
</g>
<g >
<title>move_queued_task (1 samples, 0.10%)</title><rect x="1083.6" y="661" width="1.3" height="15.0" fill="rgb(242,101,12)" rx="2" ry="2" />
<text  x="1086.63" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.10%)</title><rect x="994.6" y="549" width="1.2" height="15.0" fill="rgb(229,107,19)" rx="2" ry="2" />
<text  x="997.57" y="559.5" ></text>
</g>
<g >
<title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.10%)</title><rect x="362.5" y="581" width="1.3" height="15.0" fill="rgb(239,164,49)" rx="2" ry="2" />
<text  x="365.52" y="591.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (2 samples, 0.21%)</title><rect x="937.7" y="581" width="2.4" height="15.0" fill="rgb(214,177,21)" rx="2" ry="2" />
<text  x="940.67" y="591.5" ></text>
</g>
<g >
<title>do_fault (2 samples, 0.21%)</title><rect x="976.0" y="485" width="2.5" height="15.0" fill="rgb(209,219,21)" rx="2" ry="2" />
<text  x="979.02" y="495.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (2 samples, 0.21%)</title><rect x="217.8" y="309" width="2.5" height="15.0" fill="rgb(218,24,13)" rx="2" ry="2" />
<text  x="220.80" y="319.5" ></text>
</g>
<g >
<title>cmd_record (80 samples, 8.39%)</title><rect x="12.5" y="725" width="98.9" height="15.0" fill="rgb(237,96,20)" rx="2" ry="2" />
<text  x="15.47" y="735.5" >cmd_record</text>
</g>
<g >
<title>truncate_inode_page (1 samples, 0.10%)</title><rect x="1079.9" y="453" width="1.3" height="15.0" fill="rgb(209,166,19)" rx="2" ry="2" />
<text  x="1082.92" y="463.5" ></text>
</g>
<g >
<title>NaClFillMemoryRegionWithHalt (1 samples, 0.10%)</title><rect x="194.3" y="613" width="1.2" height="15.0" fill="rgb(216,172,53)" rx="2" ry="2" />
<text  x="197.30" y="623.5" ></text>
</g>
<g >
<title>arch_call_rest_init (19 samples, 1.99%)</title><rect x="1166.5" y="677" width="23.5" height="15.0" fill="rgb(243,174,3)" rx="2" ry="2" />
<text  x="1169.50" y="687.5" >a..</text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1 samples, 0.10%)</title><rect x="217.8" y="213" width="1.2" height="15.0" fill="rgb(214,10,38)" rx="2" ry="2" />
<text  x="220.80" y="223.5" ></text>
</g>
<g >
<title>do_group_exit (31 samples, 3.25%)</title><rect x="1042.8" y="693" width="38.4" height="15.0" fill="rgb(215,72,1)" rx="2" ry="2" />
<text  x="1045.81" y="703.5" >do_..</text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::remaining (137 samples, 14.36%)</title><rect x="557.9" y="549" width="169.5" height="15.0" fill="rgb(236,220,36)" rx="2" ry="2" />
<text  x="560.95" y="559.5" >ringbuf::ring_buffer:..</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.10%)</title><rect x="993.3" y="565" width="1.3" height="15.0" fill="rgb(254,58,22)" rx="2" ry="2" />
<text  x="996.33" y="575.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (19 samples, 1.99%)</title><rect x="1166.5" y="725" width="23.5" height="15.0" fill="rgb(246,64,37)" rx="2" ry="2" />
<text  x="1169.50" y="735.5" >x..</text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.10%)</title><rect x="216.6" y="245" width="1.2" height="15.0" fill="rgb(235,228,20)" rx="2" ry="2" />
<text  x="219.56" y="255.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.10%)</title><rect x="115.1" y="677" width="1.3" height="15.0" fill="rgb(217,176,45)" rx="2" ry="2" />
<text  x="118.14" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="214.1" y="389" width="1.2" height="15.0" fill="rgb(207,177,19)" rx="2" ry="2" />
<text  x="217.09" y="399.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.73%)</title><rect x="383.5" y="549" width="8.7" height="15.0" fill="rgb(245,166,11)" rx="2" ry="2" />
<text  x="386.54" y="559.5" ></text>
</g>
<g >
<title>ovl_write_iter (1 samples, 0.10%)</title><rect x="215.3" y="405" width="1.3" height="15.0" fill="rgb(235,172,43)" rx="2" ry="2" />
<text  x="218.32" y="415.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.10%)</title><rect x="225.2" y="565" width="1.3" height="15.0" fill="rgb(230,210,30)" rx="2" ry="2" />
<text  x="228.22" y="575.5" ></text>
</g>
<g >
<title>std::sys_common::mutex::MovableMutex::raw_lock (1 samples, 0.10%)</title><rect x="361.3" y="549" width="1.2" height="15.0" fill="rgb(221,115,19)" rx="2" ry="2" />
<text  x="364.28" y="559.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.42%)</title><rect x="216.6" y="405" width="4.9" height="15.0" fill="rgb(221,159,32)" rx="2" ry="2" />
<text  x="219.56" y="415.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_u64 (1 samples, 0.10%)</title><rect x="221.5" y="85" width="1.2" height="15.0" fill="rgb(224,110,17)" rx="2" ry="2" />
<text  x="224.51" y="95.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="993.3" y="245" width="1.3" height="15.0" fill="rgb(236,177,51)" rx="2" ry="2" />
<text  x="996.33" y="255.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="993.3" y="309" width="1.3" height="15.0" fill="rgb(251,211,15)" rx="2" ry="2" />
<text  x="996.33" y="319.5" ></text>
</g>
<g >
<title>process_vm_rw_single_vec.constprop.0 (1 samples, 0.10%)</title><rect x="978.5" y="613" width="1.2" height="15.0" fill="rgb(228,196,18)" rx="2" ry="2" />
<text  x="981.49" y="623.5" ></text>
</g>
<g >
<title>perf_evsel__run_ioctl (79 samples, 8.28%)</title><rect x="12.5" y="661" width="97.7" height="15.0" fill="rgb(206,26,38)" rx="2" ry="2" />
<text  x="15.47" y="671.5" >perf_evsel_..</text>
</g>
<g >
<title>cpuidle_idle_call (60 samples, 6.29%)</title><rect x="1084.9" y="677" width="74.2" height="15.0" fill="rgb(222,22,35)" rx="2" ry="2" />
<text  x="1087.86" y="687.5" >cpuidle_..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.10%)</title><rect x="220.3" y="245" width="1.2" height="15.0" fill="rgb(227,112,37)" rx="2" ry="2" />
<text  x="223.27" y="255.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy (1 samples, 0.10%)</title><rect x="133.7" y="709" width="1.2" height="15.0" fill="rgb(207,224,49)" rx="2" ry="2" />
<text  x="136.69" y="719.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1 samples, 0.10%)</title><rect x="112.7" y="581" width="1.2" height="15.0" fill="rgb(215,115,1)" rx="2" ry="2" />
<text  x="115.66" y="591.5" ></text>
</g>
<g >
<title>memcg_check_events (1 samples, 0.10%)</title><rect x="929.0" y="597" width="1.3" height="15.0" fill="rgb(212,176,19)" rx="2" ry="2" />
<text  x="932.01" y="607.5" ></text>
</g>
<g >
<title>nohz_csd_func (1 samples, 0.10%)</title><rect x="1159.1" y="661" width="1.2" height="15.0" fill="rgb(225,130,7)" rx="2" ry="2" />
<text  x="1162.08" y="671.5" ></text>
</g>
<g >
<title>std::sys_common::mutex::MovableMutex::raw_unlock (2 samples, 0.21%)</title><rect x="379.8" y="533" width="2.5" height="15.0" fill="rgb(227,212,28)" rx="2" ry="2" />
<text  x="382.83" y="543.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_access (11 samples, 1.15%)</title><rect x="175.7" y="693" width="13.7" height="15.0" fill="rgb(235,124,8)" rx="2" ry="2" />
<text  x="178.74" y="703.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.21%)</title><rect x="433.0" y="453" width="2.5" height="15.0" fill="rgb(249,206,27)" rx="2" ry="2" />
<text  x="436.02" y="463.5" ></text>
</g>
<g >
<title>__page_set_anon_rmap (2 samples, 0.21%)</title><rect x="940.1" y="597" width="2.5" height="15.0" fill="rgb(251,5,38)" rx="2" ry="2" />
<text  x="943.15" y="607.5" ></text>
</g>
<g >
<title>menu_select (2 samples, 0.21%)</title><rect x="1181.3" y="581" width="2.5" height="15.0" fill="rgb(253,40,11)" rx="2" ry="2" />
<text  x="1184.34" y="591.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (38 samples, 3.98%)</title><rect x="995.8" y="741" width="47.0" height="15.0" fill="rgb(226,34,4)" rx="2" ry="2" />
<text  x="998.81" y="751.5" >asm_..</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.10%)</title><rect x="221.5" y="421" width="1.2" height="15.0" fill="rgb(212,119,50)" rx="2" ry="2" />
<text  x="224.51" y="431.5" ></text>
</g>
<g >
<title>__handle_mm_fault (87 samples, 9.12%)</title><rect x="837.5" y="661" width="107.6" height="15.0" fill="rgb(220,211,49)" rx="2" ry="2" />
<text  x="840.48" y="671.5" >__handle_mm_f..</text>
</g>
<g >
<title>do_unlinkat (1 samples, 0.10%)</title><rect x="214.1" y="357" width="1.2" height="15.0" fill="rgb(250,26,46)" rx="2" ry="2" />
<text  x="217.09" y="367.5" ></text>
</g>
<g >
<title>NaClSysWriteDecoder (293 samples, 30.71%)</title><rect x="366.2" y="709" width="362.4" height="15.0" fill="rgb(249,34,13)" rx="2" ry="2" />
<text  x="369.23" y="719.5" >NaClSysWriteDecoder</text>
</g>
<g >
<title>NaClDescIoDescDtor (1 samples, 0.10%)</title><rect x="214.1" y="597" width="1.2" height="15.0" fill="rgb(245,164,43)" rx="2" ry="2" />
<text  x="217.09" y="607.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.10%)</title><rect x="993.3" y="197" width="1.3" height="15.0" fill="rgb(227,59,15)" rx="2" ry="2" />
<text  x="996.33" y="207.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.10%)</title><rect x="992.1" y="597" width="1.2" height="15.0" fill="rgb(243,224,44)" rx="2" ry="2" />
<text  x="995.10" y="607.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.10%)</title><rect x="221.5" y="213" width="1.2" height="15.0" fill="rgb(209,184,36)" rx="2" ry="2" />
<text  x="224.51" y="223.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for usize&gt;::serialize (1 samples, 0.10%)</title><rect x="216.6" y="309" width="1.2" height="15.0" fill="rgb(225,227,11)" rx="2" ry="2" />
<text  x="219.56" y="319.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.10%)</title><rect x="216.6" y="341" width="1.2" height="15.0" fill="rgb(250,57,7)" rx="2" ry="2" />
<text  x="219.56" y="351.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.10%)</title><rect x="217.8" y="53" width="1.2" height="15.0" fill="rgb(210,85,8)" rx="2" ry="2" />
<text  x="220.80" y="63.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::sys_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::exit_syscall (5 samples, 0.52%)</title><rect x="215.3" y="629" width="6.2" height="15.0" fill="rgb(237,8,10)" rx="2" ry="2" />
<text  x="218.32" y="639.5" ></text>
</g>
<g >
<title>lind_close (1 samples, 0.10%)</title><rect x="221.5" y="581" width="1.2" height="15.0" fill="rgb(248,187,8)" rx="2" ry="2" />
<text  x="224.51" y="591.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.10%)</title><rect x="993.3" y="469" width="1.3" height="15.0" fill="rgb(246,56,35)" rx="2" ry="2" />
<text  x="996.33" y="479.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy (89 samples, 9.33%)</title><rect x="251.2" y="549" width="110.1" height="15.0" fill="rgb(253,99,10)" rx="2" ry="2" />
<text  x="254.19" y="559.5" >ringbuf::cons..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="994.6" y="565" width="1.2" height="15.0" fill="rgb(240,52,18)" rx="2" ry="2" />
<text  x="997.57" y="575.5" ></text>
</g>
<g >
<title>dispatcher (114 samples, 11.95%)</title><rect x="225.2" y="629" width="141.0" height="15.0" fill="rgb(250,22,35)" rx="2" ry="2" />
<text  x="228.22" y="639.5" >dispatcher</text>
</g>
<g >
<title>set_page_dirty (1 samples, 0.10%)</title><rect x="978.5" y="565" width="1.2" height="15.0" fill="rgb(231,190,14)" rx="2" ry="2" />
<text  x="981.49" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_read (1 samples, 0.10%)</title><rect x="110.2" y="581" width="1.2" height="15.0" fill="rgb(247,193,23)" rx="2" ry="2" />
<text  x="113.19" y="591.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.10%)</title><rect x="217.8" y="101" width="1.2" height="15.0" fill="rgb(251,153,50)" rx="2" ry="2" />
<text  x="220.80" y="111.5" ></text>
</g>
<g >
<title>cpuidle_select (2 samples, 0.21%)</title><rect x="1181.3" y="597" width="2.5" height="15.0" fill="rgb(227,197,15)" rx="2" ry="2" />
<text  x="1184.34" y="607.5" ></text>
</g>
<g >
<title>perf-exec (1 samples, 0.10%)</title><rect x="11.2" y="757" width="1.3" height="15.0" fill="rgb(247,158,15)" rx="2" ry="2" />
<text  x="14.24" y="767.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="211.6" y="645" width="1.3" height="15.0" fill="rgb(236,67,29)" rx="2" ry="2" />
<text  x="214.61" y="655.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.73%)</title><rect x="383.5" y="565" width="8.7" height="15.0" fill="rgb(207,184,21)" rx="2" ry="2" />
<text  x="386.54" y="575.5" ></text>
</g>
<g >
<title>NaClSysMunmapDecoder (1 samples, 0.10%)</title><rect x="222.7" y="709" width="1.3" height="15.0" fill="rgb(209,98,18)" rx="2" ry="2" />
<text  x="225.75" y="719.5" ></text>
</g>
<g >
<title>NaClChildNapCtor (1 samples, 0.10%)</title><rect x="214.1" y="661" width="1.2" height="15.0" fill="rgb(249,181,9)" rx="2" ry="2" />
<text  x="217.09" y="671.5" ></text>
</g>
<g >
<title>event_function_call (1 samples, 0.10%)</title><rect x="111.4" y="629" width="1.3" height="15.0" fill="rgb(231,72,46)" rx="2" ry="2" />
<text  x="114.43" y="639.5" ></text>
</g>
<g >
<title>__mod_node_page_state (1 samples, 0.10%)</title><rect x="938.9" y="565" width="1.2" height="15.0" fill="rgb(212,30,19)" rx="2" ry="2" />
<text  x="941.91" y="575.5" ></text>
</g>
<g >
<title>__libc_start_main (1 samples, 0.10%)</title><rect x="993.3" y="725" width="1.3" height="15.0" fill="rgb(236,48,34)" rx="2" ry="2" />
<text  x="996.33" y="735.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.10%)</title><rect x="220.3" y="293" width="1.2" height="15.0" fill="rgb(216,157,2)" rx="2" ry="2" />
<text  x="223.27" y="303.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.10%)</title><rect x="194.3" y="373" width="1.2" height="15.0" fill="rgb(233,134,35)" rx="2" ry="2" />
<text  x="197.30" y="383.5" ></text>
</g>
<g >
<title>cap_inode_getsecurity (1 samples, 0.10%)</title><rect x="215.3" y="261" width="1.3" height="15.0" fill="rgb(234,15,39)" rx="2" ry="2" />
<text  x="218.32" y="271.5" ></text>
</g>
<g >
<title>do_iter_write (1 samples, 0.10%)</title><rect x="112.7" y="613" width="1.2" height="15.0" fill="rgb(229,195,50)" rx="2" ry="2" />
<text  x="115.66" y="623.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (2 samples, 0.21%)</title><rect x="976.0" y="405" width="2.5" height="15.0" fill="rgb(207,79,4)" rx="2" ry="2" />
<text  x="979.02" y="415.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.10%)</title><rect x="217.8" y="229" width="1.2" height="15.0" fill="rgb(232,17,20)" rx="2" ry="2" />
<text  x="220.80" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::mutex::Mutex::lock (1 samples, 0.10%)</title><rect x="361.3" y="533" width="1.2" height="15.0" fill="rgb(243,56,13)" rx="2" ry="2" />
<text  x="364.28" y="543.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.21%)</title><rect x="228.9" y="501" width="2.5" height="15.0" fill="rgb(244,219,8)" rx="2" ry="2" />
<text  x="231.93" y="511.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (11 samples, 1.15%)</title><rect x="175.7" y="661" width="13.7" height="15.0" fill="rgb(206,140,27)" rx="2" ry="2" />
<text  x="178.74" y="671.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (3 samples, 0.31%)</title><rect x="936.4" y="597" width="3.7" height="15.0" fill="rgb(205,45,30)" rx="2" ry="2" />
<text  x="939.44" y="607.5" ></text>
</g>
<g >
<title>CopyCodeSafelyInitial (4 samples, 0.42%)</title><rect x="189.4" y="661" width="4.9" height="15.0" fill="rgb(229,100,43)" rx="2" ry="2" />
<text  x="192.35" y="671.5" ></text>
</g>
<g >
<title>page_add_file_rmap (2 samples, 0.21%)</title><rect x="976.0" y="421" width="2.5" height="15.0" fill="rgb(212,64,17)" rx="2" ry="2" />
<text  x="979.02" y="431.5" ></text>
</g>
<g >
<title>error_entry (3 samples, 0.31%)</title><rect x="956.2" y="725" width="3.7" height="15.0" fill="rgb(231,179,22)" rx="2" ry="2" />
<text  x="959.23" y="735.5" ></text>
</g>
<g >
<title>BitmapSetBit (3 samples, 0.31%)</title><rect x="206.7" y="597" width="3.7" height="15.0" fill="rgb(215,131,38)" rx="2" ry="2" />
<text  x="209.67" y="607.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u64 (1 samples, 0.10%)</title><rect x="216.6" y="293" width="1.2" height="15.0" fill="rgb(246,49,38)" rx="2" ry="2" />
<text  x="219.56" y="303.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1 samples, 0.10%)</title><rect x="994.6" y="709" width="1.2" height="15.0" fill="rgb(254,55,48)" rx="2" ry="2" />
<text  x="997.57" y="719.5" ></text>
</g>
<g >
<title>vfs_rename (1 samples, 0.10%)</title><rect x="214.1" y="261" width="1.2" height="15.0" fill="rgb(224,135,39)" rx="2" ry="2" />
<text  x="217.09" y="271.5" ></text>
</g>
<g >
<title>cap_inode_need_killpriv (1 samples, 0.10%)</title><rect x="215.3" y="357" width="1.3" height="15.0" fill="rgb(207,48,35)" rx="2" ry="2" />
<text  x="218.32" y="367.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.10%)</title><rect x="221.5" y="373" width="1.2" height="15.0" fill="rgb(226,29,32)" rx="2" ry="2" />
<text  x="224.51" y="383.5" ></text>
</g>
<g >
<title>_nohz_idle_balance (1 samples, 0.10%)</title><rect x="1161.6" y="597" width="1.2" height="15.0" fill="rgb(233,147,32)" rx="2" ry="2" />
<text  x="1164.55" y="607.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy::{{closure}} (1 samples, 0.10%)</title><rect x="133.7" y="677" width="1.2" height="15.0" fill="rgb(208,23,5)" rx="2" ry="2" />
<text  x="136.69" y="687.5" ></text>
</g>
<g >
<title>NaClSysWrite (293 samples, 30.71%)</title><rect x="366.2" y="693" width="362.4" height="15.0" fill="rgb(228,15,53)" rx="2" ry="2" />
<text  x="369.23" y="703.5" >NaClSysWrite</text>
</g>
<g >
<title>free_pgtables (1 samples, 0.10%)</title><rect x="11.2" y="533" width="1.3" height="15.0" fill="rgb(205,226,46)" rx="2" ry="2" />
<text  x="14.24" y="543.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_access (1 samples, 0.10%)</title><rect x="133.7" y="693" width="1.2" height="15.0" fill="rgb(223,205,30)" rx="2" ry="2" />
<text  x="136.69" y="703.5" ></text>
</g>
<g >
<title>rest_init (19 samples, 1.99%)</title><rect x="1166.5" y="661" width="23.5" height="15.0" fill="rgb(226,96,20)" rx="2" ry="2" />
<text  x="1169.50" y="671.5" >r..</text>
</g>
<g >
<title>handle_pte_fault (2 samples, 0.21%)</title><rect x="976.0" y="501" width="2.5" height="15.0" fill="rgb(239,134,13)" rx="2" ry="2" />
<text  x="979.02" y="511.5" ></text>
</g>
<g >
<title>ovl_other_xattr_get (1 samples, 0.10%)</title><rect x="215.3" y="325" width="1.3" height="15.0" fill="rgb(247,190,52)" rx="2" ry="2" />
<text  x="218.32" y="335.5" ></text>
</g>
<g >
<title>NaClTextDyncodeCreate (18 samples, 1.89%)</title><rect x="189.4" y="677" width="22.2" height="15.0" fill="rgb(251,159,44)" rx="2" ry="2" />
<text  x="192.35" y="687.5" >N..</text>
</g>
<g >
<title>lindrustfinalize (1 samples, 0.10%)</title><rect x="993.3" y="677" width="1.3" height="15.0" fill="rgb(235,95,21)" rx="2" ry="2" />
<text  x="996.33" y="687.5" ></text>
</g>
<g >
<title>zap_pte_range (30 samples, 3.14%)</title><rect x="1042.8" y="549" width="37.1" height="15.0" fill="rgb(231,62,21)" rx="2" ry="2" />
<text  x="1045.81" y="559.5" >zap..</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (1 samples, 0.10%)</title><rect x="221.5" y="181" width="1.2" height="15.0" fill="rgb(232,153,23)" rx="2" ry="2" />
<text  x="224.51" y="191.5" ></text>
</g>
<g >
<title>[sel_ldr] (436 samples, 45.70%)</title><rect x="189.4" y="741" width="539.2" height="15.0" fill="rgb(229,86,52)" rx="2" ry="2" />
<text  x="192.35" y="751.5" >[sel_ldr]</text>
</g>
<g >
<title>core::sync::atomic::atomic_load (8 samples, 0.84%)</title><rect x="717.5" y="501" width="9.9" height="15.0" fill="rgb(243,79,13)" rx="2" ry="2" />
<text  x="720.51" y="511.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.10%)</title><rect x="221.5" y="565" width="1.2" height="15.0" fill="rgb(254,183,3)" rx="2" ry="2" />
<text  x="224.51" y="575.5" ></text>
</g>
<g >
<title>_dl_map_object_from_fd (1 samples, 0.10%)</title><rect x="994.6" y="613" width="1.2" height="15.0" fill="rgb(207,112,47)" rx="2" ry="2" />
<text  x="997.57" y="623.5" ></text>
</g>
<g >
<title>seq_read_iter (1 samples, 0.10%)</title><rect x="110.2" y="517" width="1.2" height="15.0" fill="rgb(242,170,42)" rx="2" ry="2" />
<text  x="113.19" y="527.5" ></text>
</g>
<g >
<title>exit_mm_release (1 samples, 0.10%)</title><rect x="992.1" y="629" width="1.2" height="15.0" fill="rgb(211,141,39)" rx="2" ry="2" />
<text  x="995.10" y="639.5" ></text>
</g>
<g >
<title>ksys_read (1 samples, 0.10%)</title><rect x="110.2" y="565" width="1.2" height="15.0" fill="rgb(220,177,41)" rx="2" ry="2" />
<text  x="113.19" y="575.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (1 samples, 0.10%)</title><rect x="994.6" y="677" width="1.2" height="15.0" fill="rgb(216,119,3)" rx="2" ry="2" />
<text  x="997.57" y="687.5" ></text>
</g>
<g >
<title>unmap_single_vma (30 samples, 3.14%)</title><rect x="1042.8" y="597" width="37.1" height="15.0" fill="rgb(242,213,49)" rx="2" ry="2" />
<text  x="1045.81" y="607.5" >unm..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (5 samples, 0.52%)</title><rect x="215.3" y="613" width="6.2" height="15.0" fill="rgb(212,180,42)" rx="2" ry="2" />
<text  x="218.32" y="623.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.10%)</title><rect x="194.3" y="533" width="1.2" height="15.0" fill="rgb(251,224,29)" rx="2" ry="2" />
<text  x="197.30" y="543.5" ></text>
</g>
<g >
<title>std::sys_common::rwlock::MovableRWLock::read (1 samples, 0.10%)</title><rect x="363.8" y="565" width="1.2" height="15.0" fill="rgb(242,168,9)" rx="2" ry="2" />
<text  x="366.75" y="575.5" ></text>
</g>
<g >
<title>flush_smp_call_function_from_idle (2 samples, 0.21%)</title><rect x="1164.0" y="693" width="2.5" height="15.0" fill="rgb(234,45,25)" rx="2" ry="2" />
<text  x="1167.03" y="703.5" ></text>
</g>
<g >
<title>kthread (2 samples, 0.21%)</title><rect x="1082.4" y="725" width="2.5" height="15.0" fill="rgb(206,113,13)" rx="2" ry="2" />
<text  x="1085.39" y="735.5" ></text>
</g>
<g >
<title>dispatcher (5 samples, 0.52%)</title><rect x="215.3" y="661" width="6.2" height="15.0" fill="rgb(222,165,30)" rx="2" ry="2" />
<text  x="218.32" y="671.5" ></text>
</g>
<g >
<title>schedule_idle (5 samples, 0.52%)</title><rect x="1183.8" y="613" width="6.2" height="15.0" fill="rgb(207,19,44)" rx="2" ry="2" />
<text  x="1186.82" y="623.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (5 samples, 0.52%)</title><rect x="914.2" y="565" width="6.2" height="15.0" fill="rgb(213,64,12)" rx="2" ry="2" />
<text  x="917.17" y="575.5" ></text>
</g>
<g >
<title>NaClDescIoDescDtor (1 samples, 0.10%)</title><rect x="221.5" y="613" width="1.2" height="15.0" fill="rgb(233,135,29)" rx="2" ry="2" />
<text  x="224.51" y="623.5" ></text>
</g>
<g >
<title>menu_update (2 samples, 0.21%)</title><rect x="1181.3" y="565" width="2.5" height="15.0" fill="rgb(237,163,18)" rx="2" ry="2" />
<text  x="1184.34" y="575.5" ></text>
</g>
<g >
<title>page_remove_rmap (4 samples, 0.42%)</title><rect x="1052.7" y="533" width="5.0" height="15.0" fill="rgb(225,212,18)" rx="2" ry="2" />
<text  x="1055.70" y="543.5" ></text>
</g>
<g >
<title>iput_final (1 samples, 0.10%)</title><rect x="1079.9" y="517" width="1.3" height="15.0" fill="rgb(210,189,45)" rx="2" ry="2" />
<text  x="1082.92" y="527.5" ></text>
</g>
<g >
<title>vm_normal_page (1 samples, 0.10%)</title><rect x="1078.7" y="533" width="1.2" height="15.0" fill="rgb(220,21,41)" rx="2" ry="2" />
<text  x="1081.68" y="543.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.10%)</title><rect x="214.1" y="485" width="1.2" height="15.0" fill="rgb(218,22,7)" rx="2" ry="2" />
<text  x="217.09" y="495.5" ></text>
</g>
<g >
<title>lind_write (293 samples, 30.71%)</title><rect x="366.2" y="645" width="362.4" height="15.0" fill="rgb(247,149,39)" rx="2" ry="2" />
<text  x="369.23" y="655.5" >lind_write</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="978.5" y="677" width="1.2" height="15.0" fill="rgb(235,121,43)" rx="2" ry="2" />
<text  x="981.49" y="687.5" ></text>
</g>
<g >
<title>std::sys::unix::rwlock::RWLock::read (1 samples, 0.10%)</title><rect x="727.4" y="549" width="1.2" height="15.0" fill="rgb(233,125,43)" rx="2" ry="2" />
<text  x="730.40" y="559.5" ></text>
</g>
<g >
<title>NaClSysFork (1 samples, 0.10%)</title><rect x="221.5" y="693" width="1.2" height="15.0" fill="rgb(207,198,36)" rx="2" ry="2" />
<text  x="224.51" y="703.5" ></text>
</g>
<g >
<title>native_write_msr (1 samples, 0.10%)</title><rect x="111.4" y="485" width="1.3" height="15.0" fill="rgb(246,190,49)" rx="2" ry="2" />
<text  x="114.43" y="495.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (14 samples, 1.47%)</title><rect x="1166.5" y="613" width="17.3" height="15.0" fill="rgb(210,201,51)" rx="2" ry="2" />
<text  x="1169.50" y="623.5" ></text>
</g>
<g >
<title>ext4_da_write_end (1 samples, 0.10%)</title><rect x="112.7" y="533" width="1.2" height="15.0" fill="rgb(221,150,30)" rx="2" ry="2" />
<text  x="115.66" y="543.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="220.3" y="229" width="1.2" height="15.0" fill="rgb(244,95,5)" rx="2" ry="2" />
<text  x="223.27" y="239.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.10%)</title><rect x="133.7" y="661" width="1.2" height="15.0" fill="rgb(212,30,21)" rx="2" ry="2" />
<text  x="136.69" y="671.5" ></text>
</g>
<g >
<title>__run_hrtimer (1 samples, 0.10%)</title><rect x="211.6" y="581" width="1.3" height="15.0" fill="rgb(208,173,13)" rx="2" ry="2" />
<text  x="214.61" y="591.5" ></text>
</g>
<g >
<title>__unlink (1 samples, 0.10%)</title><rect x="214.1" y="421" width="1.2" height="15.0" fill="rgb(208,100,50)" rx="2" ry="2" />
<text  x="217.09" y="431.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (1 samples, 0.10%)</title><rect x="112.7" y="597" width="1.2" height="15.0" fill="rgb(234,34,52)" rx="2" ry="2" />
<text  x="115.66" y="607.5" ></text>
</g>
<g >
<title>shmem_fault (1 samples, 0.10%)</title><rect x="194.3" y="437" width="1.2" height="15.0" fill="rgb(234,226,19)" rx="2" ry="2" />
<text  x="197.30" y="447.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.10%)</title><rect x="220.3" y="309" width="1.2" height="15.0" fill="rgb(244,139,42)" rx="2" ry="2" />
<text  x="223.27" y="319.5" ></text>
</g>
<g >
<title>NaClSysExitDecoder (5 samples, 0.52%)</title><rect x="215.3" y="709" width="6.2" height="15.0" fill="rgb(223,128,5)" rx="2" ry="2" />
<text  x="218.32" y="719.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::capacity (1 samples, 0.10%)</title><rect x="572.8" y="533" width="1.2" height="15.0" fill="rgb(247,117,16)" rx="2" ry="2" />
<text  x="575.79" y="543.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash (1 samples, 0.10%)</title><rect x="362.5" y="533" width="1.3" height="15.0" fill="rgb(242,166,41)" rx="2" ry="2" />
<text  x="365.52" y="543.5" ></text>
</g>
<g >
<title>set_page_dirty_lock (1 samples, 0.10%)</title><rect x="978.5" y="581" width="1.2" height="15.0" fill="rgb(239,148,50)" rx="2" ry="2" />
<text  x="981.49" y="591.5" ></text>
</g>
<g >
<title>_perf_ioctl (78 samples, 8.18%)</title><rect x="13.7" y="565" width="96.5" height="15.0" fill="rgb(226,35,50)" rx="2" ry="2" />
<text  x="16.71" y="575.5" >_perf_ioctl</text>
</g>
<g >
<title>perf_event_mmap_event (1 samples, 0.10%)</title><rect x="994.6" y="453" width="1.2" height="15.0" fill="rgb(243,83,9)" rx="2" ry="2" />
<text  x="997.57" y="463.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2 samples, 0.21%)</title><rect x="433.0" y="469" width="2.5" height="15.0" fill="rgb(241,82,52)" rx="2" ry="2" />
<text  x="436.02" y="479.5" ></text>
</g>
<g >
<title>event_function (68 samples, 7.13%)</title><rect x="26.1" y="453" width="84.1" height="15.0" fill="rgb(237,108,39)" rx="2" ry="2" />
<text  x="29.08" y="463.5" >event_fun..</text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (5 samples, 0.52%)</title><rect x="984.7" y="725" width="6.2" height="15.0" fill="rgb(243,108,18)" rx="2" ry="2" />
<text  x="987.68" y="735.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.10%)</title><rect x="214.1" y="501" width="1.2" height="15.0" fill="rgb(223,119,40)" rx="2" ry="2" />
<text  x="217.09" y="511.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.10%)</title><rect x="220.3" y="197" width="1.2" height="15.0" fill="rgb(230,54,47)" rx="2" ry="2" />
<text  x="223.27" y="207.5" ></text>
</g>
<g >
<title>get_page_from_freelist (40 samples, 4.19%)</title><rect x="854.8" y="581" width="49.5" height="15.0" fill="rgb(219,169,12)" rx="2" ry="2" />
<text  x="857.80" y="591.5" >get_..</text>
</g>
<g >
<title>__mod_lruvec_page_state (1 samples, 0.10%)</title><rect x="1051.5" y="533" width="1.2" height="15.0" fill="rgb(214,84,46)" rx="2" ry="2" />
<text  x="1054.47" y="543.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.10%)</title><rect x="221.5" y="437" width="1.2" height="15.0" fill="rgb(251,126,19)" rx="2" ry="2" />
<text  x="224.51" y="447.5" ></text>
</g>
<g >
<title>cpuidle_enter (56 samples, 5.87%)</title><rect x="1086.1" y="661" width="69.3" height="15.0" fill="rgb(253,220,51)" rx="2" ry="2" />
<text  x="1089.10" y="671.5" >cpuidle..</text>
</g>
<g >
<title>__free_one_page (1 samples, 0.10%)</title><rect x="1071.3" y="453" width="1.2" height="15.0" fill="rgb(215,12,10)" rx="2" ry="2" />
<text  x="1074.26" y="463.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (5 samples, 0.52%)</title><rect x="1072.5" y="453" width="6.2" height="15.0" fill="rgb(232,193,49)" rx="2" ry="2" />
<text  x="1075.49" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="215.3" y="485" width="1.3" height="15.0" fill="rgb(211,224,45)" rx="2" ry="2" />
<text  x="218.32" y="495.5" ></text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.10%)</title><rect x="221.5" y="469" width="1.2" height="15.0" fill="rgb(236,4,24)" rx="2" ry="2" />
<text  x="224.51" y="479.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (1 samples, 0.10%)</title><rect x="254.9" y="501" width="1.2" height="15.0" fill="rgb(216,11,36)" rx="2" ry="2" />
<text  x="257.91" y="511.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (64 samples, 6.71%)</title><rect x="31.0" y="389" width="79.2" height="15.0" fill="rgb(220,107,12)" rx="2" ry="2" />
<text  x="34.03" y="399.5" >intel_pmu..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.21%)</title><rect x="111.4" y="741" width="2.5" height="15.0" fill="rgb(207,86,31)" rx="2" ry="2" />
<text  x="114.43" y="751.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (1 samples, 0.10%)</title><rect x="112.7" y="485" width="1.2" height="15.0" fill="rgb(254,15,51)" rx="2" ry="2" />
<text  x="115.66" y="495.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (1 samples, 0.10%)</title><rect x="111.4" y="501" width="1.3" height="15.0" fill="rgb(230,222,3)" rx="2" ry="2" />
<text  x="114.43" y="511.5" ></text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (12 samples, 1.26%)</title><rect x="912.9" y="613" width="14.9" height="15.0" fill="rgb(250,39,30)" rx="2" ry="2" />
<text  x="915.94" y="623.5" ></text>
</g>
<g >
<title>ovl_do_remove (1 samples, 0.10%)</title><rect x="214.1" y="309" width="1.2" height="15.0" fill="rgb(242,58,27)" rx="2" ry="2" />
<text  x="217.09" y="319.5" ></text>
</g>
<g >
<title>dispatcher (293 samples, 30.71%)</title><rect x="366.2" y="629" width="362.4" height="15.0" fill="rgb(254,136,39)" rx="2" ry="2" />
<text  x="369.23" y="639.5" >dispatcher</text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (290 samples, 30.40%)</title><rect x="368.7" y="581" width="358.7" height="15.0" fill="rgb(219,166,2)" rx="2" ry="2" />
<text  x="371.70" y="591.5" >rustposix::interface::pipe::EmulatedPipe::write_..</text>
</g>
<g >
<title>NaClSysReadDecoder (115 samples, 12.05%)</title><rect x="224.0" y="709" width="142.2" height="15.0" fill="rgb(225,157,14)" rx="2" ry="2" />
<text  x="226.98" y="719.5" >NaClSysReadDecoder</text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.10%)</title><rect x="222.7" y="501" width="1.3" height="15.0" fill="rgb(211,91,14)" rx="2" ry="2" />
<text  x="225.75" y="511.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (19 samples, 1.99%)</title><rect x="1166.5" y="709" width="23.5" height="15.0" fill="rgb(239,132,22)" rx="2" ry="2" />
<text  x="1169.50" y="719.5" >x..</text>
</g>
<g >
<title>ksys_write (1 samples, 0.10%)</title><rect x="215.3" y="453" width="1.3" height="15.0" fill="rgb(228,57,38)" rx="2" ry="2" />
<text  x="218.32" y="463.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreateDecoder (20 samples, 2.10%)</title><rect x="189.4" y="709" width="24.7" height="15.0" fill="rgb(210,114,26)" rx="2" ry="2" />
<text  x="192.35" y="719.5" >N..</text>
</g>
<g >
<title>__x64_sys_process_vm_writev (1 samples, 0.10%)</title><rect x="978.5" y="661" width="1.2" height="15.0" fill="rgb(222,70,39)" rx="2" ry="2" />
<text  x="981.49" y="671.5" ></text>
</g>
<g >
<title>ovl_cleanup_and_whiteout (1 samples, 0.10%)</title><rect x="214.1" y="277" width="1.2" height="15.0" fill="rgb(228,182,17)" rx="2" ry="2" />
<text  x="217.09" y="287.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (1 samples, 0.10%)</title><rect x="1067.5" y="485" width="1.3" height="15.0" fill="rgb(206,164,50)" rx="2" ry="2" />
<text  x="1070.55" y="495.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (1 samples, 0.10%)</title><rect x="917.9" y="549" width="1.2" height="15.0" fill="rgb(210,202,25)" rx="2" ry="2" />
<text  x="920.88" y="559.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (85 samples, 8.91%)</title><rect x="1084.9" y="741" width="105.1" height="15.0" fill="rgb(205,178,18)" rx="2" ry="2" />
<text  x="1087.86" y="751.5" >secondary_st..</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.10%)</title><rect x="993.3" y="325" width="1.3" height="15.0" fill="rgb(221,131,36)" rx="2" ry="2" />
<text  x="996.33" y="335.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.31%)</title><rect x="1160.3" y="661" width="3.7" height="15.0" fill="rgb(241,75,9)" rx="2" ry="2" />
<text  x="1163.31" y="671.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (47 samples, 4.93%)</title><rect x="1086.1" y="629" width="58.1" height="15.0" fill="rgb(210,225,42)" rx="2" ry="2" />
<text  x="1089.10" y="639.5" >mwait_..</text>
</g>
<g >
<title>MarkValidJumpTarget (3 samples, 0.31%)</title><rect x="206.7" y="613" width="3.7" height="15.0" fill="rgb(254,16,18)" rx="2" ry="2" />
<text  x="209.67" y="623.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (31 samples, 3.25%)</title><rect x="1042.8" y="709" width="38.4" height="15.0" fill="rgb(208,39,51)" rx="2" ry="2" />
<text  x="1045.81" y="719.5" >__x..</text>
</g>
<g >
<title>x86_pmu_enable (65 samples, 6.81%)</title><rect x="29.8" y="405" width="80.4" height="15.0" fill="rgb(250,29,27)" rx="2" ry="2" />
<text  x="32.79" y="415.5" >x86_pmu_e..</text>
</g>
<g >
<title>NaClSysExecve (1 samples, 0.10%)</title><rect x="214.1" y="693" width="1.2" height="15.0" fill="rgb(248,137,22)" rx="2" ry="2" />
<text  x="217.09" y="703.5" ></text>
</g>
<g >
<title>vma_interval_tree_remove (1 samples, 0.10%)</title><rect x="11.2" y="485" width="1.3" height="15.0" fill="rgb(249,98,43)" rx="2" ry="2" />
<text  x="14.24" y="495.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::read_syscall (113 samples, 11.84%)</title><rect x="225.2" y="597" width="139.8" height="15.0" fill="rgb(209,200,14)" rx="2" ry="2" />
<text  x="228.22" y="607.5" >rustposix::safepo..</text>
</g>
<g >
<title>std::sys::unix::fs::unlink (1 samples, 0.10%)</title><rect x="214.1" y="437" width="1.2" height="15.0" fill="rgb(207,69,25)" rx="2" ry="2" />
<text  x="217.09" y="447.5" ></text>
</g>
<g >
<title>kick_ilb (1 samples, 0.10%)</title><rect x="1162.8" y="597" width="1.2" height="15.0" fill="rgb(213,162,12)" rx="2" ry="2" />
<text  x="1165.79" y="607.5" ></text>
</g>
<g >
<title>NaClAppLoadFileFromFilename (1 samples, 0.10%)</title><rect x="214.1" y="645" width="1.2" height="15.0" fill="rgb(210,85,31)" rx="2" ry="2" />
<text  x="217.09" y="655.5" ></text>
</g>
<g >
<title>__libc_write (1 samples, 0.10%)</title><rect x="215.3" y="517" width="1.3" height="15.0" fill="rgb(236,166,10)" rx="2" ry="2" />
<text  x="218.32" y="527.5" ></text>
</g>
<g >
<title>__x64_sys_process_vm_writev (2 samples, 0.21%)</title><rect x="976.0" y="645" width="2.5" height="15.0" fill="rgb(218,83,15)" rx="2" ry="2" />
<text  x="979.02" y="655.5" ></text>
</g>
<g >
<title>__gconv_find_transform (1 samples, 0.10%)</title><rect x="10.0" y="645" width="1.2" height="15.0" fill="rgb(205,223,3)" rx="2" ry="2" />
<text  x="13.00" y="655.5" ></text>
</g>
<g >
<title>vfs_iter_write (1 samples, 0.10%)</title><rect x="112.7" y="629" width="1.2" height="15.0" fill="rgb(213,61,6)" rx="2" ry="2" />
<text  x="115.66" y="639.5" ></text>
</g>
<g >
<title>NaClChildNapCtor (1 samples, 0.10%)</title><rect x="221.5" y="677" width="1.2" height="15.0" fill="rgb(251,123,31)" rx="2" ry="2" />
<text  x="224.51" y="687.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.10%)</title><rect x="993.3" y="437" width="1.3" height="15.0" fill="rgb(218,109,14)" rx="2" ry="2" />
<text  x="996.33" y="447.5" ></text>
</g>
<g >
<title>generic_write_end (1 samples, 0.10%)</title><rect x="112.7" y="517" width="1.2" height="15.0" fill="rgb(212,105,44)" rx="2" ry="2" />
<text  x="115.66" y="527.5" ></text>
</g>
<g >
<title>__free_one_page (4 samples, 0.42%)</title><rect x="1073.7" y="437" width="5.0" height="15.0" fill="rgb(247,135,35)" rx="2" ry="2" />
<text  x="1076.73" y="447.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.10%)</title><rect x="221.5" y="485" width="1.2" height="15.0" fill="rgb(254,149,6)" rx="2" ry="2" />
<text  x="224.51" y="495.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.10%)</title><rect x="216.6" y="261" width="1.2" height="15.0" fill="rgb(217,96,51)" rx="2" ry="2" />
<text  x="219.56" y="271.5" ></text>
</g>
<g >
<title>NaClSysExecv (1 samples, 0.10%)</title><rect x="214.1" y="677" width="1.2" height="15.0" fill="rgb(253,69,27)" rx="2" ry="2" />
<text  x="217.09" y="687.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.10%)</title><rect x="194.3" y="597" width="1.2" height="15.0" fill="rgb(239,153,50)" rx="2" ry="2" />
<text  x="197.30" y="607.5" ></text>
</g>
<g >
<title>NaClSelLdrMain (1 samples, 0.10%)</title><rect x="993.3" y="693" width="1.3" height="15.0" fill="rgb(245,137,52)" rx="2" ry="2" />
<text  x="996.33" y="703.5" ></text>
</g>
<g >
<title>update_rq_clock (1 samples, 0.10%)</title><rect x="1188.8" y="597" width="1.2" height="15.0" fill="rgb(241,210,29)" rx="2" ry="2" />
<text  x="1191.76" y="607.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (2 samples, 0.21%)</title><rect x="1053.9" y="517" width="2.5" height="15.0" fill="rgb(210,147,50)" rx="2" ry="2" />
<text  x="1056.94" y="527.5" ></text>
</g>
<g >
<title>NaClAppLoadFileFromFilename (1 samples, 0.10%)</title><rect x="221.5" y="661" width="1.2" height="15.0" fill="rgb(234,186,54)" rx="2" ry="2" />
<text  x="224.51" y="671.5" ></text>
</g>
<g >
<title>____fput (1 samples, 0.10%)</title><rect x="1079.9" y="645" width="1.3" height="15.0" fill="rgb(217,204,39)" rx="2" ry="2" />
<text  x="1082.92" y="655.5" ></text>
</g>
<g >
<title>seq_read (1 samples, 0.10%)</title><rect x="110.2" y="533" width="1.2" height="15.0" fill="rgb(242,157,48)" rx="2" ry="2" />
<text  x="113.19" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (79 samples, 8.28%)</title><rect x="12.5" y="613" width="97.7" height="15.0" fill="rgb(218,42,33)" rx="2" ry="2" />
<text  x="15.47" y="623.5" >do_syscall_64</text>
</g>
<g >
<title>__GI___clone (1 samples, 0.10%)</title><rect x="992.1" y="741" width="1.2" height="15.0" fill="rgb(210,212,24)" rx="2" ry="2" />
<text  x="995.10" y="751.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.10%)</title><rect x="216.6" y="325" width="1.2" height="15.0" fill="rgb(227,67,49)" rx="2" ry="2" />
<text  x="219.56" y="335.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (89 samples, 9.33%)</title><rect x="251.2" y="565" width="110.1" height="15.0" fill="rgb(226,156,16)" rx="2" ry="2" />
<text  x="254.19" y="575.5" >ringbuf::cons..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="978.5" y="693" width="1.2" height="15.0" fill="rgb(230,71,45)" rx="2" ry="2" />
<text  x="981.49" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.10%)</title><rect x="112.7" y="709" width="1.2" height="15.0" fill="rgb(230,118,0)" rx="2" ry="2" />
<text  x="115.66" y="719.5" ></text>
</g>
<g >
<title>[anon] (59 samples, 6.18%)</title><rect x="116.4" y="741" width="73.0" height="15.0" fill="rgb(229,114,34)" rx="2" ry="2" />
<text  x="119.37" y="751.5" >[anon]</text>
</g>
<g >
<title>lock_page_lruvec_irqsave (1 samples, 0.10%)</title><rect x="920.4" y="565" width="1.2" height="15.0" fill="rgb(217,14,49)" rx="2" ry="2" />
<text  x="923.36" y="575.5" ></text>
</g>
<g >
<title>NaClSysRead (115 samples, 12.05%)</title><rect x="224.0" y="693" width="142.2" height="15.0" fill="rgb(212,162,28)" rx="2" ry="2" />
<text  x="226.98" y="703.5" >NaClSysRead</text>
</g>
<g >
<title>set_default_locale (1 samples, 0.10%)</title><rect x="10.0" y="693" width="1.2" height="15.0" fill="rgb(217,175,46)" rx="2" ry="2" />
<text  x="13.00" y="703.5" ></text>
</g>
<g >
<title>ovl_remove_and_whiteout (1 samples, 0.10%)</title><rect x="214.1" y="293" width="1.2" height="15.0" fill="rgb(223,1,39)" rx="2" ry="2" />
<text  x="217.09" y="303.5" ></text>
</g>
<g >
<title>rmqueue_pcplist.constprop.0 (10 samples, 1.05%)</title><rect x="891.9" y="549" width="12.4" height="15.0" fill="rgb(241,112,47)" rx="2" ry="2" />
<text  x="894.91" y="559.5" ></text>
</g>
<g >
<title>memset_erms (1 samples, 0.10%)</title><rect x="994.6" y="437" width="1.2" height="15.0" fill="rgb(214,216,28)" rx="2" ry="2" />
<text  x="997.57" y="447.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.42%)</title><rect x="216.6" y="501" width="4.9" height="15.0" fill="rgb(247,29,36)" rx="2" ry="2" />
<text  x="219.56" y="511.5" ></text>
</g>
<g >
<title>mmap_region (1 samples, 0.10%)</title><rect x="994.6" y="485" width="1.2" height="15.0" fill="rgb(210,135,35)" rx="2" ry="2" />
<text  x="997.57" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (79 samples, 8.28%)</title><rect x="12.5" y="597" width="97.7" height="15.0" fill="rgb(216,195,11)" rx="2" ry="2" />
<text  x="15.47" y="607.5" >__x64_sys_i..</text>
</g>
<g >
<title>flush_smp_call_function_from_idle (1 samples, 0.10%)</title><rect x="1159.1" y="677" width="1.2" height="15.0" fill="rgb(229,64,13)" rx="2" ry="2" />
<text  x="1162.08" y="687.5" ></text>
</g>
<g >
<title>process_vm_rw (2 samples, 0.21%)</title><rect x="976.0" y="629" width="2.5" height="15.0" fill="rgb(229,142,9)" rx="2" ry="2" />
<text  x="979.02" y="639.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (4 samples, 0.42%)</title><rect x="216.6" y="453" width="4.9" height="15.0" fill="rgb(209,182,47)" rx="2" ry="2" />
<text  x="219.56" y="463.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (1 samples, 0.10%)</title><rect x="361.3" y="517" width="1.2" height="15.0" fill="rgb(231,209,33)" rx="2" ry="2" />
<text  x="364.28" y="527.5" ></text>
</g>
<g >
<title>lind_mmap (1 samples, 0.10%)</title><rect x="222.7" y="661" width="1.3" height="15.0" fill="rgb(242,113,54)" rx="2" ry="2" />
<text  x="225.75" y="671.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_add (1 samples, 0.10%)</title><rect x="225.2" y="549" width="1.3" height="15.0" fill="rgb(250,52,27)" rx="2" ry="2" />
<text  x="228.22" y="559.5" ></text>
</g>
<g >
<title>down_write_killable (1 samples, 0.10%)</title><rect x="222.7" y="485" width="1.3" height="15.0" fill="rgb(228,156,6)" rx="2" ry="2" />
<text  x="225.75" y="495.5" ></text>
</g>
<g >
<title>std::sys::unix::rwlock::RWLock::read (1 samples, 0.10%)</title><rect x="365.0" y="581" width="1.2" height="15.0" fill="rgb(230,138,53)" rx="2" ry="2" />
<text  x="367.99" y="591.5" ></text>
</g>
<g >
<title>exec_mmap (1 samples, 0.10%)</title><rect x="11.2" y="581" width="1.3" height="15.0" fill="rgb(244,137,13)" rx="2" ry="2" />
<text  x="14.24" y="591.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.10%)</title><rect x="216.6" y="229" width="1.2" height="15.0" fill="rgb(222,142,45)" rx="2" ry="2" />
<text  x="219.56" y="239.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (8 samples, 0.84%)</title><rect x="717.5" y="517" width="9.9" height="15.0" fill="rgb(235,5,25)" rx="2" ry="2" />
<text  x="720.51" y="527.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (1 samples, 0.10%)</title><rect x="360.0" y="517" width="1.3" height="15.0" fill="rgb(214,200,9)" rx="2" ry="2" />
<text  x="363.04" y="527.5" ></text>
</g>
<g >
<title>x86_pmu_enable (1 samples, 0.10%)</title><rect x="111.4" y="517" width="1.3" height="15.0" fill="rgb(212,48,16)" rx="2" ry="2" />
<text  x="114.43" y="527.5" ></text>
</g>
<g >
<title>try_charge (4 samples, 0.42%)</title><rect x="930.3" y="597" width="4.9" height="15.0" fill="rgb(244,81,44)" rx="2" ry="2" />
<text  x="933.25" y="607.5" ></text>
</g>
<g >
<title>do_shared_fault (1 samples, 0.10%)</title><rect x="194.3" y="469" width="1.2" height="15.0" fill="rgb(222,130,17)" rx="2" ry="2" />
<text  x="197.30" y="479.5" ></text>
</g>
<g >
<title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.10%)</title><rect x="363.8" y="581" width="1.2" height="15.0" fill="rgb(208,71,1)" rx="2" ry="2" />
<text  x="366.75" y="591.5" ></text>
</g>
<g >
<title>NaClCopyDynamicTextAndVmmap (3 samples, 0.31%)</title><rect x="976.0" y="725" width="3.7" height="15.0" fill="rgb(226,111,52)" rx="2" ry="2" />
<text  x="979.02" y="735.5" ></text>
</g>
<g >
<title>rustposix::interface::misc::libc_mmap (1 samples, 0.10%)</title><rect x="222.7" y="597" width="1.3" height="15.0" fill="rgb(237,184,26)" rx="2" ry="2" />
<text  x="225.75" y="607.5" ></text>
</g>
<g >
<title>do_fault (1 samples, 0.10%)</title><rect x="194.3" y="485" width="1.2" height="15.0" fill="rgb(245,9,9)" rx="2" ry="2" />
<text  x="197.30" y="495.5" ></text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.21%)</title><rect x="228.9" y="549" width="2.5" height="15.0" fill="rgb(219,188,30)" rx="2" ry="2" />
<text  x="231.93" y="559.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_slice (44 samples, 4.61%)</title><rect x="134.9" y="725" width="54.5" height="15.0" fill="rgb(242,152,38)" rx="2" ry="2" />
<text  x="137.93" y="735.5" >ringb..</text>
</g>
<g >
<title>ext4_xattr_block_get (1 samples, 0.10%)</title><rect x="215.3" y="213" width="1.3" height="15.0" fill="rgb(231,145,32)" rx="2" ry="2" />
<text  x="218.32" y="223.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;ringbuf::consumer::Consumer&lt;u8&gt;&gt;&gt; (2 samples, 0.21%)</title><rect x="228.9" y="565" width="2.5" height="15.0" fill="rgb(240,141,6)" rx="2" ry="2" />
<text  x="231.93" y="575.5" ></text>
</g>
<g >
<title>mblen (1 samples, 0.10%)</title><rect x="10.0" y="677" width="1.2" height="15.0" fill="rgb(210,104,12)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>exit_mm (1 samples, 0.10%)</title><rect x="992.1" y="645" width="1.2" height="15.0" fill="rgb(249,84,3)" rx="2" ry="2" />
<text  x="995.10" y="655.5" ></text>
</g>
<g >
<title>page_add_new_anon_rmap (6 samples, 0.63%)</title><rect x="935.2" y="613" width="7.4" height="15.0" fill="rgb(239,56,5)" rx="2" ry="2" />
<text  x="938.20" y="623.5" ></text>
</g>
<g >
<title>__vfs_getxattr (1 samples, 0.10%)</title><rect x="215.3" y="341" width="1.3" height="15.0" fill="rgb(231,6,35)" rx="2" ry="2" />
<text  x="218.32" y="351.5" ></text>
</g>
<g >
<title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.10%)</title><rect x="231.4" y="565" width="1.2" height="15.0" fill="rgb(222,33,19)" rx="2" ry="2" />
<text  x="234.40" y="575.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.10%)</title><rect x="219.0" y="293" width="1.3" height="15.0" fill="rgb(215,164,37)" rx="2" ry="2" />
<text  x="222.04" y="303.5" ></text>
</g>
<g >
<title>rustposix::interface::file::removefile (1 samples, 0.10%)</title><rect x="214.1" y="469" width="1.2" height="15.0" fill="rgb(214,156,27)" rx="2" ry="2" />
<text  x="217.09" y="479.5" ></text>
</g>
<g >
<title>vfs_unlink (1 samples, 0.10%)</title><rect x="214.1" y="341" width="1.2" height="15.0" fill="rgb(221,107,26)" rx="2" ry="2" />
<text  x="217.09" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_write (1 samples, 0.10%)</title><rect x="215.3" y="469" width="1.3" height="15.0" fill="rgb(208,229,48)" rx="2" ry="2" />
<text  x="218.32" y="479.5" ></text>
</g>
<g >
<title>lru_cache_add (11 samples, 1.15%)</title><rect x="914.2" y="597" width="13.6" height="15.0" fill="rgb(222,154,45)" rx="2" ry="2" />
<text  x="917.17" y="607.5" ></text>
</g>
<g >
<title>std::sys_common::rwlock::MovableRWLock::read (1 samples, 0.10%)</title><rect x="727.4" y="565" width="1.2" height="15.0" fill="rgb(233,73,20)" rx="2" ry="2" />
<text  x="730.40" y="575.5" ></text>
</g>
<g >
<title>rmqueue (11 samples, 1.15%)</title><rect x="890.7" y="565" width="13.6" height="15.0" fill="rgb(232,85,26)" rx="2" ry="2" />
<text  x="893.67" y="575.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min (3 samples, 0.31%)</title><rect x="376.1" y="549" width="3.7" height="15.0" fill="rgb(237,108,41)" rx="2" ry="2" />
<text  x="379.12" y="559.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.10%)</title><rect x="221.5" y="325" width="1.2" height="15.0" fill="rgb(254,51,51)" rx="2" ry="2" />
<text  x="224.51" y="335.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (4 samples, 0.42%)</title><rect x="216.6" y="581" width="4.9" height="15.0" fill="rgb(215,99,6)" rx="2" ry="2" />
<text  x="219.56" y="591.5" ></text>
</g>
<g >
<title>&lt;u64 as itoa::Integer&gt;::write (1 samples, 0.10%)</title><rect x="221.5" y="53" width="1.2" height="15.0" fill="rgb(237,92,33)" rx="2" ry="2" />
<text  x="224.51" y="63.5" ></text>
</g>
<g >
<title>serde_json::ser::to_string (1 samples, 0.10%)</title><rect x="993.3" y="645" width="1.3" height="15.0" fill="rgb(217,31,53)" rx="2" ry="2" />
<text  x="996.33" y="655.5" ></text>
</g>
<g >
<title>exc_page_fault (105 samples, 11.01%)</title><rect x="825.1" y="709" width="129.9" height="15.0" fill="rgb(222,157,13)" rx="2" ry="2" />
<text  x="828.12" y="719.5" >exc_page_fault</text>
</g>
<g >
<title>pin_user_pages_remote (2 samples, 0.21%)</title><rect x="976.0" y="581" width="2.5" height="15.0" fill="rgb(251,71,0)" rx="2" ry="2" />
<text  x="979.02" y="591.5" ></text>
</g>
<g >
<title>shmem_alloc_page (1 samples, 0.10%)</title><rect x="194.3" y="389" width="1.2" height="15.0" fill="rgb(205,180,35)" rx="2" ry="2" />
<text  x="197.30" y="399.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (14 samples, 1.47%)</title><rect x="116.4" y="725" width="17.3" height="15.0" fill="rgb(228,10,35)" rx="2" ry="2" />
<text  x="119.37" y="735.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.10%)</title><rect x="115.1" y="725" width="1.3" height="15.0" fill="rgb(232,164,19)" rx="2" ry="2" />
<text  x="118.14" y="735.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.10%)</title><rect x="362.5" y="565" width="1.3" height="15.0" fill="rgb(230,149,25)" rx="2" ry="2" />
<text  x="365.52" y="575.5" ></text>
</g>
<g >
<title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.10%)</title><rect x="362.5" y="501" width="1.3" height="15.0" fill="rgb(236,142,11)" rx="2" ry="2" />
<text  x="365.52" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="11.2" y="741" width="1.3" height="15.0" fill="rgb(234,94,4)" rx="2" ry="2" />
<text  x="14.24" y="751.5" ></text>
</g>
<g >
<title>unlink_file_vma (1 samples, 0.10%)</title><rect x="11.2" y="517" width="1.3" height="15.0" fill="rgb(241,211,33)" rx="2" ry="2" />
<text  x="14.24" y="527.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.10%)</title><rect x="217.8" y="37" width="1.2" height="15.0" fill="rgb(242,66,28)" rx="2" ry="2" />
<text  x="220.80" y="47.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_access (128 samples, 13.42%)</title><rect x="392.2" y="533" width="158.3" height="15.0" fill="rgb(214,51,47)" rx="2" ry="2" />
<text  x="395.20" y="543.5" >ringbuf::producer::P..</text>
</g>
<g >
<title>alloc_set_pte (2 samples, 0.21%)</title><rect x="976.0" y="437" width="2.5" height="15.0" fill="rgb(226,218,3)" rx="2" ry="2" />
<text  x="979.02" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (84 samples, 8.81%)</title><rect x="256.1" y="485" width="103.9" height="15.0" fill="rgb(233,136,14)" rx="2" ry="2" />
<text  x="259.14" y="495.5" >__memmove_av..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (4 samples, 0.42%)</title><rect x="216.6" y="389" width="4.9" height="15.0" fill="rgb(224,7,16)" rx="2" ry="2" />
<text  x="219.56" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.21%)</title><rect x="111.4" y="725" width="2.5" height="15.0" fill="rgb(248,110,2)" rx="2" ry="2" />
<text  x="114.43" y="735.5" ></text>
</g>
<g >
<title>lind_close (1 samples, 0.10%)</title><rect x="214.1" y="565" width="1.2" height="15.0" fill="rgb(238,30,28)" rx="2" ry="2" />
<text  x="217.09" y="575.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.10%)</title><rect x="211.6" y="597" width="1.3" height="15.0" fill="rgb(208,160,44)" rx="2" ry="2" />
<text  x="214.61" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="992.1" y="709" width="1.2" height="15.0" fill="rgb(218,202,43)" rx="2" ry="2" />
<text  x="995.10" y="719.5" ></text>
</g>
<g >
<title>smp_call_function_single_async (1 samples, 0.10%)</title><rect x="1186.3" y="517" width="1.2" height="15.0" fill="rgb(239,66,28)" rx="2" ry="2" />
<text  x="1189.29" y="527.5" ></text>
</g>
<g >
<title>mem_cgroup_charge_statistics.constprop.0 (1 samples, 0.10%)</title><rect x="927.8" y="597" width="1.2" height="15.0" fill="rgb(209,208,9)" rx="2" ry="2" />
<text  x="930.78" y="607.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (1 samples, 0.10%)</title><rect x="847.4" y="613" width="1.2" height="15.0" fill="rgb(210,13,25)" rx="2" ry="2" />
<text  x="850.38" y="623.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (2 samples, 0.21%)</title><rect x="976.0" y="389" width="2.5" height="15.0" fill="rgb(250,210,10)" rx="2" ry="2" />
<text  x="979.02" y="399.5" ></text>
</g>
<g >
<title>exec_binprm (1 samples, 0.10%)</title><rect x="11.2" y="645" width="1.3" height="15.0" fill="rgb(207,105,27)" rx="2" ry="2" />
<text  x="14.24" y="655.5" ></text>
</g>
<g >
<title>cpu_stopper_thread (1 samples, 0.10%)</title><rect x="1083.6" y="693" width="1.3" height="15.0" fill="rgb(212,60,4)" rx="2" ry="2" />
<text  x="1086.63" y="703.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.10%)</title><rect x="217.8" y="293" width="1.2" height="15.0" fill="rgb(234,64,21)" rx="2" ry="2" />
<text  x="220.80" y="303.5" ></text>
</g>
<g >
<title>__dentry_kill (1 samples, 0.10%)</title><rect x="1079.9" y="581" width="1.3" height="15.0" fill="rgb(214,50,24)" rx="2" ry="2" />
<text  x="1082.92" y="591.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (1 samples, 0.10%)</title><rect x="112.7" y="565" width="1.2" height="15.0" fill="rgb(215,69,14)" rx="2" ry="2" />
<text  x="115.66" y="575.5" ></text>
</g>
<g >
<title>evict (1 samples, 0.10%)</title><rect x="1079.9" y="501" width="1.3" height="15.0" fill="rgb(228,90,49)" rx="2" ry="2" />
<text  x="1082.92" y="511.5" ></text>
</g>
<g >
<title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (1 samples, 0.10%)</title><rect x="221.5" y="37" width="1.2" height="15.0" fill="rgb(237,85,44)" rx="2" ry="2" />
<text  x="224.51" y="47.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.10%)</title><rect x="115.1" y="693" width="1.3" height="15.0" fill="rgb(251,147,16)" rx="2" ry="2" />
<text  x="118.14" y="703.5" ></text>
</g>
<g >
<title>process_vm_rw_core.constprop.0 (2 samples, 0.21%)</title><rect x="976.0" y="613" width="2.5" height="15.0" fill="rgb(234,41,50)" rx="2" ry="2" />
<text  x="979.02" y="623.5" ></text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::len (124 samples, 13.00%)</title><rect x="574.0" y="533" width="153.4" height="15.0" fill="rgb(241,129,16)" rx="2" ry="2" />
<text  x="577.03" y="543.5" >ringbuf::ring_buffe..</text>
</g>
<g >
<title>serde_json::ser::to_vec (4 samples, 0.42%)</title><rect x="216.6" y="565" width="4.9" height="15.0" fill="rgb(247,140,3)" rx="2" ry="2" />
<text  x="219.56" y="575.5" ></text>
</g>
<g >
<title>remote_function (1 samples, 0.10%)</title><rect x="111.4" y="581" width="1.3" height="15.0" fill="rgb(239,58,12)" rx="2" ry="2" />
<text  x="114.43" y="591.5" ></text>
</g>
<g >
<title>mmput (30 samples, 3.14%)</title><rect x="1042.8" y="645" width="37.1" height="15.0" fill="rgb(207,122,50)" rx="2" ry="2" />
<text  x="1045.81" y="655.5" >mmput</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.10%)</title><rect x="194.3" y="565" width="1.2" height="15.0" fill="rgb(209,53,20)" rx="2" ry="2" />
<text  x="197.30" y="575.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::read_from_pipe (110 samples, 11.53%)</title><rect x="226.5" y="581" width="136.0" height="15.0" fill="rgb(227,224,53)" rx="2" ry="2" />
<text  x="229.46" y="591.5" >rustposix::interf..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::close_syscall (1 samples, 0.10%)</title><rect x="214.1" y="517" width="1.2" height="15.0" fill="rgb(231,144,22)" rx="2" ry="2" />
<text  x="217.09" y="527.5" ></text>
</g>
<g >
<title>__GI___mmap64 (1 samples, 0.10%)</title><rect x="222.7" y="581" width="1.3" height="15.0" fill="rgb(220,25,2)" rx="2" ry="2" />
<text  x="225.75" y="591.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (42 samples, 4.40%)</title><rect x="852.3" y="597" width="52.0" height="15.0" fill="rgb(205,141,21)" rx="2" ry="2" />
<text  x="855.33" y="607.5" >__all..</text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.21%)</title><rect x="379.8" y="501" width="2.5" height="15.0" fill="rgb(237,169,51)" rx="2" ry="2" />
<text  x="382.83" y="511.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (1 samples, 0.10%)</title><rect x="216.6" y="181" width="1.2" height="15.0" fill="rgb(251,187,3)" rx="2" ry="2" />
<text  x="219.56" y="191.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (1 samples, 0.10%)</title><rect x="993.3" y="581" width="1.3" height="15.0" fill="rgb(247,59,23)" rx="2" ry="2" />
<text  x="996.33" y="591.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.10%)</title><rect x="993.3" y="661" width="1.3" height="15.0" fill="rgb(208,49,32)" rx="2" ry="2" />
<text  x="996.33" y="671.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (56 samples, 5.87%)</title><rect x="1086.1" y="645" width="69.3" height="15.0" fill="rgb(215,128,41)" rx="2" ry="2" />
<text  x="1089.10" y="655.5" >cpuidle..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.21%)</title><rect x="976.0" y="677" width="2.5" height="15.0" fill="rgb(225,70,8)" rx="2" ry="2" />
<text  x="979.02" y="687.5" ></text>
</g>
<g >
<title>ovl_unlink (1 samples, 0.10%)</title><rect x="214.1" y="325" width="1.2" height="15.0" fill="rgb(234,200,46)" rx="2" ry="2" />
<text  x="217.09" y="335.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.10%)</title><rect x="993.3" y="533" width="1.3" height="15.0" fill="rgb(211,69,28)" rx="2" ry="2" />
<text  x="996.33" y="543.5" ></text>
</g>
<g >
<title>get_typical_interval (1 samples, 0.10%)</title><rect x="1155.4" y="629" width="1.2" height="15.0" fill="rgb(214,176,23)" rx="2" ry="2" />
<text  x="1158.37" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="216.6" y="165" width="1.2" height="15.0" fill="rgb(208,220,18)" rx="2" ry="2" />
<text  x="219.56" y="175.5" ></text>
</g>
<g >
<title>core::cmp::min (3 samples, 0.31%)</title><rect x="376.1" y="565" width="3.7" height="15.0" fill="rgb(212,95,10)" rx="2" ry="2" />
<text  x="379.12" y="575.5" ></text>
</g>
<g >
<title>CopyBundleTails (4 samples, 0.42%)</title><rect x="189.4" y="645" width="4.9" height="15.0" fill="rgb(251,65,13)" rx="2" ry="2" />
<text  x="192.35" y="655.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::GenericInode&gt;::serialize (1 samples, 0.10%)</title><rect x="217.8" y="277" width="1.2" height="15.0" fill="rgb(209,61,20)" rx="2" ry="2" />
<text  x="220.80" y="287.5" ></text>
</g>
<g >
<title>rcu_read_unlock_strict (1 samples, 0.10%)</title><rect x="947.6" y="677" width="1.2" height="15.0" fill="rgb(234,203,27)" rx="2" ry="2" />
<text  x="950.57" y="687.5" ></text>
</g>
<g >
<title>[unknown] (13 samples, 1.36%)</title><rect x="976.0" y="741" width="16.1" height="15.0" fill="rgb(219,19,54)" rx="2" ry="2" />
<text  x="979.02" y="751.5" ></text>
</g>
<g >
<title>nohz_newidle_balance (2 samples, 0.21%)</title><rect x="1185.1" y="549" width="2.4" height="15.0" fill="rgb(242,151,50)" rx="2" ry="2" />
<text  x="1188.05" y="559.5" ></text>
</g>
<g >
<title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.10%)</title><rect x="362.5" y="469" width="1.3" height="15.0" fill="rgb(230,109,8)" rx="2" ry="2" />
<text  x="365.52" y="479.5" ></text>
</g>
<g >
<title>[unknown]  (200 samples, 20.96%)</title><rect x="728.6" y="741" width="247.4" height="15.0" fill="rgb(221,47,4)" rx="2" ry="2" />
<text  x="731.64" y="751.5" >[unknown] </text>
</g>
<g >
<title>__fput (1 samples, 0.10%)</title><rect x="1079.9" y="629" width="1.3" height="15.0" fill="rgb(239,57,2)" rx="2" ry="2" />
<text  x="1082.92" y="639.5" ></text>
</g>
<g >
<title>_perf_event_enable (76 samples, 7.97%)</title><rect x="16.2" y="533" width="94.0" height="15.0" fill="rgb(245,108,9)" rx="2" ry="2" />
<text  x="19.18" y="543.5" >_perf_event..</text>
</g>
<g >
<title>zap_pmd_range.isra.0 (30 samples, 3.14%)</title><rect x="1042.8" y="565" width="37.1" height="15.0" fill="rgb(239,11,26)" rx="2" ry="2" />
<text  x="1045.81" y="575.5" >zap..</text>
</g>
<g >
<title>newidle_balance (2 samples, 0.21%)</title><rect x="1161.6" y="629" width="2.4" height="15.0" fill="rgb(221,223,0)" rx="2" ry="2" />
<text  x="1164.55" y="639.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (1 samples, 0.10%)</title><rect x="254.9" y="517" width="1.2" height="15.0" fill="rgb(209,148,5)" rx="2" ry="2" />
<text  x="257.91" y="527.5" ></text>
</g>
<g >
<title>ValidateChunkAMD64 (12 samples, 1.26%)</title><rect x="196.8" y="629" width="14.8" height="15.0" fill="rgb(251,73,15)" rx="2" ry="2" />
<text  x="199.77" y="639.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="217.8" y="181" width="1.2" height="15.0" fill="rgb(210,128,13)" rx="2" ry="2" />
<text  x="220.80" y="191.5" ></text>
</g>
<g >
<title>main (1 samples, 0.10%)</title><rect x="10.0" y="709" width="1.2" height="15.0" fill="rgb(211,48,41)" rx="2" ry="2" />
<text  x="13.00" y="719.5" ></text>
</g>
<g >
<title>lock_page_memcg (1 samples, 0.10%)</title><rect x="1056.4" y="517" width="1.3" height="15.0" fill="rgb(250,91,38)" rx="2" ry="2" />
<text  x="1059.42" y="527.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write (1 samples, 0.10%)</title><rect x="215.3" y="533" width="1.3" height="15.0" fill="rgb(243,73,52)" rx="2" ry="2" />
<text  x="218.32" y="543.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (3 samples, 0.31%)</title><rect x="1063.8" y="485" width="3.7" height="15.0" fill="rgb(212,62,26)" rx="2" ry="2" />
<text  x="1066.84" y="495.5" ></text>
</g>
<g >
<title>NaClHostDescWrite (293 samples, 30.71%)</title><rect x="366.2" y="661" width="362.4" height="15.0" fill="rgb(221,214,2)" rx="2" ry="2" />
<text  x="369.23" y="671.5" >NaClHostDescWrite</text>
</g>
<g >
<title>do_anonymous_page (83 samples, 8.70%)</title><rect x="841.2" y="629" width="102.7" height="15.0" fill="rgb(223,0,47)" rx="2" ry="2" />
<text  x="844.19" y="639.5" >do_anonymous..</text>
</g>
<g >
<title>rustposix::interface::file::EmulatedFile::writefile_from_string (1 samples, 0.10%)</title><rect x="215.3" y="581" width="1.3" height="15.0" fill="rgb(221,148,54)" rx="2" ry="2" />
<text  x="218.32" y="591.5" ></text>
</g>
<g >
<title>CachedMapWritableText (1 samples, 0.10%)</title><rect x="194.3" y="645" width="1.2" height="15.0" fill="rgb(216,22,43)" rx="2" ry="2" />
<text  x="197.30" y="655.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="222.7" y="549" width="1.3" height="15.0" fill="rgb(220,139,53)" rx="2" ry="2" />
<text  x="225.75" y="559.5" ></text>
</g>
<g >
<title>do_exit (31 samples, 3.25%)</title><rect x="1042.8" y="677" width="38.4" height="15.0" fill="rgb(220,15,35)" rx="2" ry="2" />
<text  x="1045.81" y="687.5" >do_..</text>
</g>
<g >
<title>lind (1 samples, 0.10%)</title><rect x="10.0" y="757" width="1.2" height="15.0" fill="rgb(213,145,25)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.10%)</title><rect x="110.2" y="629" width="1.2" height="15.0" fill="rgb(232,224,25)" rx="2" ry="2" />
<text  x="113.19" y="639.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.21%)</title><rect x="217.8" y="325" width="2.5" height="15.0" fill="rgb(250,170,47)" rx="2" ry="2" />
<text  x="220.80" y="335.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.42%)</title><rect x="216.6" y="533" width="4.9" height="15.0" fill="rgb(245,165,41)" rx="2" ry="2" />
<text  x="219.56" y="543.5" ></text>
</g>
<g >
<title>core::sync::atomic::atomic_load (7 samples, 0.73%)</title><rect x="435.5" y="501" width="8.7" height="15.0" fill="rgb(222,77,35)" rx="2" ry="2" />
<text  x="438.49" y="511.5" ></text>
</g>
<g >
<title>khugepaged_do_scan (1 samples, 0.10%)</title><rect x="1082.4" y="693" width="1.2" height="15.0" fill="rgb(247,187,31)" rx="2" ry="2" />
<text  x="1085.39" y="703.5" ></text>
</g>
<g >
<title>NaClCopyDynamicRegion (2 samples, 0.21%)</title><rect x="976.0" y="709" width="2.5" height="15.0" fill="rgb(206,120,32)" rx="2" ry="2" />
<text  x="979.02" y="719.5" ></text>
</g>
<g >
<title>_start (2 samples, 0.21%)</title><rect x="993.3" y="741" width="2.5" height="15.0" fill="rgb(246,132,16)" rx="2" ry="2" />
<text  x="996.33" y="751.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (4 samples, 0.42%)</title><rect x="216.6" y="373" width="4.9" height="15.0" fill="rgb(226,60,37)" rx="2" ry="2" />
<text  x="219.56" y="383.5" ></text>
</g>
<g >
<title>rmqueue_bulk.constprop.0 (7 samples, 0.73%)</title><rect x="895.6" y="533" width="8.7" height="15.0" fill="rgb(238,59,0)" rx="2" ry="2" />
<text  x="898.62" y="543.5" ></text>
</g>
<g >
<title>shmem_alloc_and_acct_page (1 samples, 0.10%)</title><rect x="194.3" y="405" width="1.2" height="15.0" fill="rgb(249,213,48)" rx="2" ry="2" />
<text  x="197.30" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (31 samples, 3.25%)</title><rect x="1042.8" y="725" width="38.4" height="15.0" fill="rgb(221,189,48)" rx="2" ry="2" />
<text  x="1045.81" y="735.5" >do_..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.10%)</title><rect x="216.6" y="197" width="1.2" height="15.0" fill="rgb(239,133,35)" rx="2" ry="2" />
<text  x="219.56" y="207.5" ></text>
</g>
<g >
<title>NaClSysExit (5 samples, 0.52%)</title><rect x="215.3" y="693" width="6.2" height="15.0" fill="rgb(254,91,5)" rx="2" ry="2" />
<text  x="218.32" y="703.5" ></text>
</g>
<g >
<title>page_cache_delete (1 samples, 0.10%)</title><rect x="1079.9" y="421" width="1.3" height="15.0" fill="rgb(217,117,9)" rx="2" ry="2" />
<text  x="1082.92" y="431.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="993.3" y="549" width="1.3" height="15.0" fill="rgb(226,158,2)" rx="2" ry="2" />
<text  x="996.33" y="559.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (1 samples, 0.10%)</title><rect x="937.7" y="565" width="1.2" height="15.0" fill="rgb(215,62,30)" rx="2" ry="2" />
<text  x="940.67" y="575.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="990.9" y="725" width="1.2" height="15.0" fill="rgb(211,159,15)" rx="2" ry="2" />
<text  x="993.86" y="735.5" ></text>
</g>
<g >
<title>__GI___pthread_rwlock_rdlock (1 samples, 0.10%)</title><rect x="727.4" y="533" width="1.2" height="15.0" fill="rgb(218,229,18)" rx="2" ry="2" />
<text  x="730.40" y="543.5" ></text>
</g>
<g >
<title>__cmd_record (80 samples, 8.39%)</title><rect x="12.5" y="709" width="98.9" height="15.0" fill="rgb(252,17,41)" rx="2" ry="2" />
<text  x="15.47" y="719.5" >__cmd_record</text>
</g>
<g >
<title>pmd_page_vaddr (1 samples, 0.10%)</title><rect x="943.9" y="629" width="1.2" height="15.0" fill="rgb(211,9,10)" rx="2" ry="2" />
<text  x="946.86" y="639.5" ></text>
</g>
<g >
<title>__block_commit_write.constprop.0.isra.0 (1 samples, 0.10%)</title><rect x="112.7" y="501" width="1.2" height="15.0" fill="rgb(210,112,15)" rx="2" ry="2" />
<text  x="115.66" y="511.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::close_syscall (1 samples, 0.10%)</title><rect x="221.5" y="533" width="1.2" height="15.0" fill="rgb(235,39,36)" rx="2" ry="2" />
<text  x="224.51" y="543.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (113 samples, 11.84%)</title><rect x="225.2" y="613" width="139.8" height="15.0" fill="rgb(222,50,16)" rx="2" ry="2" />
<text  x="228.22" y="623.5" >rustposix::safepo..</text>
</g>
<g >
<title>_nohz_idle_balance (1 samples, 0.10%)</title><rect x="1185.1" y="533" width="1.2" height="15.0" fill="rgb(231,21,2)" rx="2" ry="2" />
<text  x="1188.05" y="543.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (1 samples, 0.10%)</title><rect x="382.3" y="549" width="1.2" height="15.0" fill="rgb(249,55,3)" rx="2" ry="2" />
<text  x="385.31" y="559.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (5 samples, 0.52%)</title><rect x="215.3" y="645" width="6.2" height="15.0" fill="rgb(254,125,14)" rx="2" ry="2" />
<text  x="218.32" y="655.5" ></text>
</g>
<g >
<title>schedule_idle (3 samples, 0.31%)</title><rect x="1160.3" y="677" width="3.7" height="15.0" fill="rgb(226,2,20)" rx="2" ry="2" />
<text  x="1163.31" y="687.5" ></text>
</g>
<g >
<title>task_work_run (1 samples, 0.10%)</title><rect x="1079.9" y="661" width="1.3" height="15.0" fill="rgb(234,140,39)" rx="2" ry="2" />
<text  x="1082.92" y="671.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="221.5" y="389" width="1.2" height="15.0" fill="rgb(248,165,22)" rx="2" ry="2" />
<text  x="224.51" y="399.5" ></text>
</g>
<g >
<title>cgroup_throttle_swaprate (6 samples, 0.63%)</title><rect x="905.5" y="613" width="7.4" height="15.0" fill="rgb(215,6,12)" rx="2" ry="2" />
<text  x="908.51" y="623.5" ></text>
</g>
<g >
<title>vfs_getxattr (1 samples, 0.10%)</title><rect x="215.3" y="293" width="1.3" height="15.0" fill="rgb(219,86,1)" rx="2" ry="2" />
<text  x="218.32" y="303.5" ></text>
</g>
<g >
<title>__evlist__enable (79 samples, 8.28%)</title><rect x="12.5" y="693" width="97.7" height="15.0" fill="rgb(248,94,50)" rx="2" ry="2" />
<text  x="15.47" y="703.5" >__evlist__e..</text>
</g>
<g >
<title>__mod_lruvec_state (1 samples, 0.10%)</title><rect x="1055.2" y="501" width="1.2" height="15.0" fill="rgb(210,94,31)" rx="2" ry="2" />
<text  x="1058.18" y="511.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.10%)</title><rect x="993.3" y="597" width="1.3" height="15.0" fill="rgb(211,4,4)" rx="2" ry="2" />
<text  x="996.33" y="607.5" ></text>
</g>
<g >
<title>nr_iowait_cpu (1 samples, 0.10%)</title><rect x="1156.6" y="629" width="1.2" height="15.0" fill="rgb(252,214,10)" rx="2" ry="2" />
<text  x="1159.60" y="639.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (17 samples, 1.78%)</title><rect x="1057.7" y="533" width="21.0" height="15.0" fill="rgb(213,114,7)" rx="2" ry="2" />
<text  x="1060.65" y="543.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.10%)</title><rect x="993.3" y="613" width="1.3" height="15.0" fill="rgb(248,170,40)" rx="2" ry="2" />
<text  x="996.33" y="623.5" ></text>
</g>
<g >
<title>Process1OperandZeroExtends (1 samples, 0.10%)</title><rect x="210.4" y="613" width="1.2" height="15.0" fill="rgb(216,172,30)" rx="2" ry="2" />
<text  x="213.38" y="623.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str_contents (1 samples, 0.10%)</title><rect x="993.3" y="213" width="1.3" height="15.0" fill="rgb(222,9,26)" rx="2" ry="2" />
<text  x="996.33" y="223.5" ></text>
</g>
<g >
<title>event_function (1 samples, 0.10%)</title><rect x="111.4" y="565" width="1.3" height="15.0" fill="rgb(207,34,19)" rx="2" ry="2" />
<text  x="114.43" y="575.5" ></text>
</g>
<g >
<title>enqueue_task_fair (1 samples, 0.10%)</title><rect x="1083.6" y="629" width="1.3" height="15.0" fill="rgb(251,72,37)" rx="2" ry="2" />
<text  x="1086.63" y="639.5" ></text>
</g>
<g >
<title>cpu_startup_entry (19 samples, 1.99%)</title><rect x="1166.5" y="645" width="23.5" height="15.0" fill="rgb(237,158,52)" rx="2" ry="2" />
<text  x="1169.50" y="655.5" >c..</text>
</g>
<g >
<title>sync_regs (1 samples, 0.10%)</title><rect x="212.9" y="661" width="1.2" height="15.0" fill="rgb(212,135,54)" rx="2" ry="2" />
<text  x="215.85" y="671.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.10%)</title><rect x="217.8" y="165" width="1.2" height="15.0" fill="rgb(218,90,6)" rx="2" ry="2" />
<text  x="220.80" y="175.5" ></text>
</g>
<g >
<title>do_idle (19 samples, 1.99%)</title><rect x="1166.5" y="629" width="23.5" height="15.0" fill="rgb(248,31,31)" rx="2" ry="2" />
<text  x="1169.50" y="639.5" >d..</text>
</g>
<g >
<title>release_pages (4 samples, 0.42%)</title><rect x="921.6" y="565" width="4.9" height="15.0" fill="rgb(239,213,29)" rx="2" ry="2" />
<text  x="924.59" y="575.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (4 samples, 0.42%)</title><rect x="1169.0" y="565" width="4.9" height="15.0" fill="rgb(240,172,25)" rx="2" ry="2" />
<text  x="1171.97" y="575.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_u64 (1 samples, 0.10%)</title><rect x="221.5" y="101" width="1.2" height="15.0" fill="rgb(250,114,51)" rx="2" ry="2" />
<text  x="224.51" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="992.1" y="693" width="1.2" height="15.0" fill="rgb(235,190,40)" rx="2" ry="2" />
<text  x="995.10" y="703.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_slice (134 samples, 14.05%)</title><rect x="392.2" y="565" width="165.7" height="15.0" fill="rgb(232,61,8)" rx="2" ry="2" />
<text  x="395.20" y="575.5" >ringbuf::producer::Pr..</text>
</g>
<g >
<title>mmput (1 samples, 0.10%)</title><rect x="11.2" y="565" width="1.3" height="15.0" fill="rgb(220,22,46)" rx="2" ry="2" />
<text  x="14.24" y="575.5" ></text>
</g>
<g >
<title>itoa::Buffer::format (1 samples, 0.10%)</title><rect x="221.5" y="69" width="1.2" height="15.0" fill="rgb(250,114,49)" rx="2" ry="2" />
<text  x="224.51" y="79.5" ></text>
</g>
<g >
<title>khugepaged_scan_mm_slot (1 samples, 0.10%)</title><rect x="1082.4" y="677" width="1.2" height="15.0" fill="rgb(215,192,8)" rx="2" ry="2" />
<text  x="1085.39" y="687.5" ></text>
</g>
<g >
<title>std::sys::unix::rwlock::RWLock::read (1 samples, 0.10%)</title><rect x="363.8" y="549" width="1.2" height="15.0" fill="rgb(211,8,7)" rx="2" ry="2" />
<text  x="366.75" y="559.5" ></text>
</g>
<g >
<title>new_sync_write (1 samples, 0.10%)</title><rect x="112.7" y="661" width="1.2" height="15.0" fill="rgb(231,166,42)" rx="2" ry="2" />
<text  x="115.66" y="671.5" ></text>
</g>
<g >
<title>insert_module (1 samples, 0.10%)</title><rect x="10.0" y="581" width="1.2" height="15.0" fill="rgb(217,19,39)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.10%)</title><rect x="215.3" y="437" width="1.3" height="15.0" fill="rgb(209,214,16)" rx="2" ry="2" />
<text  x="218.32" y="447.5" ></text>
</g>
<g >
<title>[unknown] (80 samples, 8.39%)</title><rect x="12.5" y="741" width="98.9" height="15.0" fill="rgb(231,17,19)" rx="2" ry="2" />
<text  x="15.47" y="751.5" >[unknown]</text>
</g>
<g >
<title>process_vm_rw (1 samples, 0.10%)</title><rect x="978.5" y="645" width="1.2" height="15.0" fill="rgb(215,15,2)" rx="2" ry="2" />
<text  x="981.49" y="655.5" ></text>
</g>
<g >
<title>tick_nohz_get_sleep_length (1 samples, 0.10%)</title><rect x="1157.8" y="629" width="1.3" height="15.0" fill="rgb(209,165,11)" rx="2" ry="2" />
<text  x="1160.84" y="639.5" ></text>
</g>
<g >
<title>rustposix::interface::pipe::EmulatedPipe::write_to_pipe (3 samples, 0.31%)</title><rect x="376.1" y="533" width="3.7" height="15.0" fill="rgb(238,209,39)" rx="2" ry="2" />
<text  x="379.12" y="543.5" ></text>
</g>
<g >
<title>NaClHostDescRead (114 samples, 11.95%)</title><rect x="225.2" y="661" width="141.0" height="15.0" fill="rgb(253,113,10)" rx="2" ry="2" />
<text  x="228.22" y="671.5" >NaClHostDescRead</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.10%)</title><rect x="194.3" y="517" width="1.2" height="15.0" fill="rgb(249,97,21)" rx="2" ry="2" />
<text  x="197.30" y="527.5" ></text>
</g>
<g >
<title>cpuidle_select (3 samples, 0.31%)</title><rect x="1155.4" y="661" width="3.7" height="15.0" fill="rgb(208,63,17)" rx="2" ry="2" />
<text  x="1158.37" y="671.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.21%)</title><rect x="211.6" y="677" width="2.5" height="15.0" fill="rgb(234,61,35)" rx="2" ry="2" />
<text  x="214.61" y="687.5" ></text>
</g>
<g >
<title>begin_new_exec (1 samples, 0.10%)</title><rect x="11.2" y="597" width="1.3" height="15.0" fill="rgb(247,105,1)" rx="2" ry="2" />
<text  x="14.24" y="607.5" ></text>
</g>
<g >
<title>perf_event__prepare_comm (1 samples, 0.10%)</title><rect x="110.2" y="677" width="1.2" height="15.0" fill="rgb(239,72,7)" rx="2" ry="2" />
<text  x="113.19" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="214.1" y="405" width="1.2" height="15.0" fill="rgb(207,219,40)" rx="2" ry="2" />
<text  x="217.09" y="415.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.10%)</title><rect x="231.4" y="549" width="1.2" height="15.0" fill="rgb(241,81,13)" rx="2" ry="2" />
<text  x="234.40" y="559.5" ></text>
</g>
<g >
<title>core::sync::atomic::AtomicUsize::load (7 samples, 0.73%)</title><rect x="435.5" y="517" width="8.7" height="15.0" fill="rgb(210,189,45)" rx="2" ry="2" />
<text  x="438.49" y="527.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.10%)</title><rect x="194.3" y="581" width="1.2" height="15.0" fill="rgb(241,92,42)" rx="2" ry="2" />
<text  x="197.30" y="591.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.42%)</title><rect x="216.6" y="357" width="4.9" height="15.0" fill="rgb(237,66,28)" rx="2" ry="2" />
<text  x="219.56" y="367.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 0.21%)</title><rect x="976.0" y="517" width="2.5" height="15.0" fill="rgb(236,194,31)" rx="2" ry="2" />
<text  x="979.02" y="527.5" ></text>
</g>
<g >
<title>__GI___pthread_rwlock_rdlock (1 samples, 0.10%)</title><rect x="363.8" y="533" width="1.2" height="15.0" fill="rgb(230,122,3)" rx="2" ry="2" />
<text  x="366.75" y="543.5" ></text>
</g>
<g >
<title>std::sys_common::rwlock::MovableRWLock::read (1 samples, 0.10%)</title><rect x="365.0" y="597" width="1.2" height="15.0" fill="rgb(212,140,53)" rx="2" ry="2" />
<text  x="367.99" y="607.5" ></text>
</g>
<g >
<title>dentry_kill (1 samples, 0.10%)</title><rect x="1079.9" y="597" width="1.3" height="15.0" fill="rgb(226,53,2)" rx="2" ry="2" />
<text  x="1082.92" y="607.5" ></text>
</g>
<g >
<title>security_inode_getsecurity (1 samples, 0.10%)</title><rect x="215.3" y="277" width="1.3" height="15.0" fill="rgb(245,229,1)" rx="2" ry="2" />
<text  x="218.32" y="287.5" ></text>
</g>
<g >
<title>ret_from_fork (2 samples, 0.21%)</title><rect x="1082.4" y="741" width="2.5" height="15.0" fill="rgb(207,70,1)" rx="2" ry="2" />
<text  x="1085.39" y="751.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (5 samples, 0.52%)</title><rect x="215.3" y="597" width="6.2" height="15.0" fill="rgb(238,28,33)" rx="2" ry="2" />
<text  x="218.32" y="607.5" ></text>
</g>
<g >
<title>should_fail_alloc_page (1 samples, 0.10%)</title><rect x="904.3" y="597" width="1.2" height="15.0" fill="rgb(247,13,50)" rx="2" ry="2" />
<text  x="907.28" y="607.5" ></text>
</g>
<g >
<title>perf_ioctl (1 samples, 0.10%)</title><rect x="111.4" y="693" width="1.3" height="15.0" fill="rgb(216,25,43)" rx="2" ry="2" />
<text  x="114.43" y="703.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.10%)</title><rect x="217.8" y="117" width="1.2" height="15.0" fill="rgb(229,28,16)" rx="2" ry="2" />
<text  x="220.80" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.21%)</title><rect x="976.0" y="661" width="2.5" height="15.0" fill="rgb(218,31,11)" rx="2" ry="2" />
<text  x="979.02" y="671.5" ></text>
</g>
<g >
<title>ctx_resched (1 samples, 0.10%)</title><rect x="111.4" y="533" width="1.3" height="15.0" fill="rgb(253,143,52)" rx="2" ry="2" />
<text  x="114.43" y="543.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (4 samples, 0.42%)</title><rect x="216.6" y="421" width="4.9" height="15.0" fill="rgb(212,158,39)" rx="2" ry="2" />
<text  x="219.56" y="431.5" ></text>
</g>
<g >
<title>free_pcp_prepare (1 samples, 0.10%)</title><rect x="1070.0" y="469" width="1.3" height="15.0" fill="rgb(249,123,27)" rx="2" ry="2" />
<text  x="1073.02" y="479.5" ></text>
</g>
<g >
<title>lind_read (114 samples, 11.95%)</title><rect x="225.2" y="645" width="141.0" height="15.0" fill="rgb(217,48,21)" rx="2" ry="2" />
<text  x="228.22" y="655.5" >lind_read</text>
</g>
<g >
<title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.21%)</title><rect x="379.8" y="549" width="2.5" height="15.0" fill="rgb(245,218,48)" rx="2" ry="2" />
<text  x="382.83" y="559.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (291 samples, 30.50%)</title><rect x="368.7" y="613" width="359.9" height="15.0" fill="rgb(239,128,51)" rx="2" ry="2" />
<text  x="371.70" y="623.5" >rustposix::safeposix::dispatcher::dispatcher::{{..</text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::Inode&gt;::serialize (1 samples, 0.10%)</title><rect x="993.3" y="373" width="1.3" height="15.0" fill="rgb(234,37,27)" rx="2" ry="2" />
<text  x="996.33" y="383.5" ></text>
</g>
<g >
<title>start_kernel (19 samples, 1.99%)</title><rect x="1166.5" y="693" width="23.5" height="15.0" fill="rgb(237,227,47)" rx="2" ry="2" />
<text  x="1169.50" y="703.5" >s..</text>
</g>
<g >
<title>khugepaged (1 samples, 0.10%)</title><rect x="1082.4" y="709" width="1.2" height="15.0" fill="rgb(217,11,53)" rx="2" ry="2" />
<text  x="1085.39" y="719.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.10%)</title><rect x="214.1" y="533" width="1.2" height="15.0" fill="rgb(216,115,15)" rx="2" ry="2" />
<text  x="217.09" y="543.5" ></text>
</g>
<g >
<title>std::sys::unix::mutex::Mutex::unlock (2 samples, 0.21%)</title><rect x="379.8" y="517" width="2.5" height="15.0" fill="rgb(223,107,44)" rx="2" ry="2" />
<text  x="382.83" y="527.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::len (15 samples, 1.57%)</title><rect x="232.6" y="565" width="18.6" height="15.0" fill="rgb(209,101,35)" rx="2" ry="2" />
<text  x="235.64" y="575.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="211.6" y="629" width="1.3" height="15.0" fill="rgb(240,31,46)" rx="2" ry="2" />
<text  x="214.61" y="639.5" ></text>
</g>
<g >
<title>process_vm_writev (1 samples, 0.10%)</title><rect x="978.5" y="709" width="1.2" height="15.0" fill="rgb(224,136,26)" rx="2" ry="2" />
<text  x="981.49" y="719.5" ></text>
</g>
<g >
<title>pick_next_task_fair (3 samples, 0.31%)</title><rect x="1183.8" y="581" width="3.7" height="15.0" fill="rgb(247,62,22)" rx="2" ry="2" />
<text  x="1186.82" y="591.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.10%)</title><rect x="221.5" y="341" width="1.2" height="15.0" fill="rgb(251,219,28)" rx="2" ry="2" />
<text  x="224.51" y="351.5" ></text>
</g>
<g >
<title>rustposix::safeposix::dispatcher::dispatcher::{{closure}} (1 samples, 0.10%)</title><rect x="221.5" y="549" width="1.2" height="15.0" fill="rgb(207,163,28)" rx="2" ry="2" />
<text  x="224.51" y="559.5" ></text>
</g>
<g >
<title>NaClSysDyncodeCreate (20 samples, 2.10%)</title><rect x="189.4" y="693" width="24.7" height="15.0" fill="rgb(235,196,50)" rx="2" ry="2" />
<text  x="192.35" y="703.5" >N..</text>
</g>
<g >
<title>iput.part.0 (1 samples, 0.10%)</title><rect x="1079.9" y="533" width="1.3" height="15.0" fill="rgb(215,168,19)" rx="2" ry="2" />
<text  x="1082.92" y="543.5" ></text>
</g>
<g >
<title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="225.2" y="581" width="1.3" height="15.0" fill="rgb(241,12,54)" rx="2" ry="2" />
<text  x="228.22" y="591.5" ></text>
</g>
<g >
<title>exit_mm (30 samples, 3.14%)</title><rect x="1042.8" y="661" width="37.1" height="15.0" fill="rgb(229,7,15)" rx="2" ry="2" />
<text  x="1045.81" y="671.5" >exi..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.10%)</title><rect x="194.3" y="549" width="1.2" height="15.0" fill="rgb(238,121,1)" rx="2" ry="2" />
<text  x="197.30" y="559.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for usize&gt;::serialize (1 samples, 0.10%)</title><rect x="221.5" y="117" width="1.2" height="15.0" fill="rgb(225,192,15)" rx="2" ry="2" />
<text  x="224.51" y="127.5" ></text>
</g>
<g >
<title>shmem_undo_range (1 samples, 0.10%)</title><rect x="1079.9" y="469" width="1.3" height="15.0" fill="rgb(211,47,33)" rx="2" ry="2" />
<text  x="1082.92" y="479.5" ></text>
</g>
<g >
<title>unmap_page_range (30 samples, 3.14%)</title><rect x="1042.8" y="581" width="37.1" height="15.0" fill="rgb(218,127,49)" rx="2" ry="2" />
<text  x="1045.81" y="591.5" >unm..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.10%)</title><rect x="221.5" y="309" width="1.2" height="15.0" fill="rgb(219,99,16)" rx="2" ry="2" />
<text  x="224.51" y="319.5" ></text>
</g>
<g >
<title>llist_add_batch (1 samples, 0.10%)</title><rect x="1186.3" y="501" width="1.2" height="15.0" fill="rgb(253,215,12)" rx="2" ry="2" />
<text  x="1189.29" y="511.5" ></text>
</g>
<g >
<title>fault_in_kernel_space (1 samples, 0.10%)</title><rect x="955.0" y="709" width="1.2" height="15.0" fill="rgb(222,126,19)" rx="2" ry="2" />
<text  x="957.99" y="719.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (1 samples, 0.10%)</title><rect x="1066.3" y="469" width="1.2" height="15.0" fill="rgb(211,66,40)" rx="2" ry="2" />
<text  x="1069.31" y="479.5" ></text>
</g>
<g >
<title>enqueue_entity (1 samples, 0.10%)</title><rect x="1083.6" y="613" width="1.3" height="15.0" fill="rgb(212,54,5)" rx="2" ry="2" />
<text  x="1086.63" y="623.5" ></text>
</g>
<g >
<title>sync_regs (13 samples, 1.36%)</title><rect x="959.9" y="725" width="16.1" height="15.0" fill="rgb(226,65,30)" rx="2" ry="2" />
<text  x="962.94" y="735.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (1 samples, 0.10%)</title><rect x="977.3" y="373" width="1.2" height="15.0" fill="rgb(237,39,7)" rx="2" ry="2" />
<text  x="980.25" y="383.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.42%)</title><rect x="216.6" y="485" width="4.9" height="15.0" fill="rgb(228,42,28)" rx="2" ry="2" />
<text  x="219.56" y="495.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="1157.8" y="597" width="1.3" height="15.0" fill="rgb(227,224,27)" rx="2" ry="2" />
<text  x="1160.84" y="607.5" ></text>
</g>
<g >
<title>perf_evsel__enable_cpu (79 samples, 8.28%)</title><rect x="12.5" y="677" width="97.7" height="15.0" fill="rgb(207,187,10)" rx="2" ry="2" />
<text  x="15.47" y="687.5" >perf_evsel_..</text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.10%)</title><rect x="221.5" y="133" width="1.2" height="15.0" fill="rgb(228,43,2)" rx="2" ry="2" />
<text  x="224.51" y="143.5" ></text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.10%)</title><rect x="194.3" y="501" width="1.2" height="15.0" fill="rgb(251,213,9)" rx="2" ry="2" />
<text  x="197.30" y="511.5" ></text>
</g>
<g >
<title>dispatcher (1 samples, 0.10%)</title><rect x="222.7" y="645" width="1.3" height="15.0" fill="rgb(211,105,28)" rx="2" ry="2" />
<text  x="225.75" y="655.5" ></text>
</g>
<g >
<title>__ioctl (79 samples, 8.28%)</title><rect x="12.5" y="645" width="97.7" height="15.0" fill="rgb(238,127,37)" rx="2" ry="2" />
<text  x="15.47" y="655.5" >__ioctl</text>
</g>
<g >
<title>smp_call_function_single (1 samples, 0.10%)</title><rect x="111.4" y="613" width="1.3" height="15.0" fill="rgb(226,176,52)" rx="2" ry="2" />
<text  x="114.43" y="623.5" ></text>
</g>
<g >
<title>perf_event__synthesize_comm (1 samples, 0.10%)</title><rect x="110.2" y="693" width="1.2" height="15.0" fill="rgb(241,175,18)" rx="2" ry="2" />
<text  x="113.19" y="703.5" ></text>
</g>
<g >
<title>__pagevec_lru_add (10 samples, 1.05%)</title><rect x="914.2" y="581" width="12.3" height="15.0" fill="rgb(208,27,42)" rx="2" ry="2" />
<text  x="917.17" y="591.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.10%)</title><rect x="362.5" y="517" width="1.3" height="15.0" fill="rgb(210,7,9)" rx="2" ry="2" />
<text  x="365.52" y="527.5" ></text>
</g>
<g >
<title>process_vm_writev (2 samples, 0.21%)</title><rect x="976.0" y="693" width="2.5" height="15.0" fill="rgb(232,129,28)" rx="2" ry="2" />
<text  x="979.02" y="703.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="211.6" y="661" width="1.3" height="15.0" fill="rgb(219,168,54)" rx="2" ry="2" />
<text  x="214.61" y="671.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (31 samples, 3.25%)</title><rect x="1042.8" y="741" width="38.4" height="15.0" fill="rgb(229,102,34)" rx="2" ry="2" />
<text  x="1045.81" y="751.5" >ent..</text>
</g>
<g >
<title>serde_json::ser::to_vec (1 samples, 0.10%)</title><rect x="993.3" y="629" width="1.3" height="15.0" fill="rgb(210,74,52)" rx="2" ry="2" />
<text  x="996.33" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (1 samples, 0.10%)</title><rect x="222.7" y="533" width="1.3" height="15.0" fill="rgb(230,161,44)" rx="2" ry="2" />
<text  x="225.75" y="543.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.10%)</title><rect x="211.6" y="613" width="1.3" height="15.0" fill="rgb(211,199,17)" rx="2" ry="2" />
<text  x="214.61" y="623.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="1187.5" y="597" width="1.3" height="15.0" fill="rgb(233,21,51)" rx="2" ry="2" />
<text  x="1190.53" y="607.5" ></text>
</g>
<g >
<title>__wcsmbs_load_conv (1 samples, 0.10%)</title><rect x="10.0" y="661" width="1.2" height="15.0" fill="rgb(250,127,3)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>unmap_vmas (30 samples, 3.14%)</title><rect x="1042.8" y="613" width="37.1" height="15.0" fill="rgb(248,84,1)" rx="2" ry="2" />
<text  x="1045.81" y="623.5" >unm..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.10%)</title><rect x="993.3" y="133" width="1.3" height="15.0" fill="rgb(221,118,23)" rx="2" ry="2" />
<text  x="996.33" y="143.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (17 samples, 1.78%)</title><rect x="1057.7" y="517" width="21.0" height="15.0" fill="rgb(226,97,21)" rx="2" ry="2" />
<text  x="1060.65" y="527.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.31%)</title><rect x="1183.8" y="597" width="3.7" height="15.0" fill="rgb(232,164,20)" rx="2" ry="2" />
<text  x="1186.82" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="994.6" y="581" width="1.2" height="15.0" fill="rgb(236,2,37)" rx="2" ry="2" />
<text  x="997.57" y="591.5" ></text>
</g>
<g >
<title>mem_cgroup_charge (6 samples, 0.63%)</title><rect x="927.8" y="613" width="7.4" height="15.0" fill="rgb(243,212,35)" rx="2" ry="2" />
<text  x="930.78" y="623.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (69 samples, 7.23%)</title><rect x="454.0" y="501" width="85.4" height="15.0" fill="rgb(206,21,50)" rx="2" ry="2" />
<text  x="457.05" y="511.5" >core::intr..</text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="993.3" y="261" width="1.3" height="15.0" fill="rgb(241,45,18)" rx="2" ry="2" />
<text  x="996.33" y="271.5" ></text>
</g>
<g >
<title>_dl_map_object (1 samples, 0.10%)</title><rect x="994.6" y="629" width="1.2" height="15.0" fill="rgb(243,101,3)" rx="2" ry="2" />
<text  x="997.57" y="639.5" ></text>
</g>
<g >
<title>NaClRefCountUnref (1 samples, 0.10%)</title><rect x="214.1" y="613" width="1.2" height="15.0" fill="rgb(232,198,43)" rx="2" ry="2" />
<text  x="217.09" y="623.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (4 samples, 0.42%)</title><rect x="979.7" y="725" width="5.0" height="15.0" fill="rgb(214,29,39)" rx="2" ry="2" />
<text  x="982.73" y="735.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (1 samples, 0.10%)</title><rect x="926.5" y="581" width="1.3" height="15.0" fill="rgb(219,154,1)" rx="2" ry="2" />
<text  x="929.54" y="591.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_copy::{{closure}} (84 samples, 8.81%)</title><rect x="256.1" y="517" width="103.9" height="15.0" fill="rgb(251,60,24)" rx="2" ry="2" />
<text  x="259.14" y="527.5" >ringbuf::con..</text>
</g>
<g >
<title>serde_json::ser::to_writer (4 samples, 0.42%)</title><rect x="216.6" y="549" width="4.9" height="15.0" fill="rgb(215,125,35)" rx="2" ry="2" />
<text  x="219.56" y="559.5" ></text>
</g>
<g >
<title>NaClSysMunmap (1 samples, 0.10%)</title><rect x="222.7" y="693" width="1.3" height="15.0" fill="rgb(241,30,24)" rx="2" ry="2" />
<text  x="225.75" y="703.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (77 samples, 8.07%)</title><rect x="14.9" y="549" width="95.3" height="15.0" fill="rgb(224,59,12)" rx="2" ry="2" />
<text  x="17.95" y="559.5" >perf_event_..</text>
</g>
<g >
<title>vfs_getxattr_alloc (1 samples, 0.10%)</title><rect x="215.3" y="245" width="1.3" height="15.0" fill="rgb(226,112,10)" rx="2" ry="2" />
<text  x="218.32" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="215.3" y="501" width="1.3" height="15.0" fill="rgb(226,193,53)" rx="2" ry="2" />
<text  x="218.32" y="511.5" ></text>
</g>
<g >
<title>poll_idle (6 samples, 0.63%)</title><rect x="1173.9" y="565" width="7.4" height="15.0" fill="rgb(224,162,20)" rx="2" ry="2" />
<text  x="1176.92" y="575.5" ></text>
</g>
<g >
<title>read (1 samples, 0.10%)</title><rect x="110.2" y="645" width="1.2" height="15.0" fill="rgb(236,72,9)" rx="2" ry="2" />
<text  x="113.19" y="655.5" ></text>
</g>
<g >
<title>handle_mm_fault (93 samples, 9.75%)</title><rect x="832.5" y="677" width="115.1" height="15.0" fill="rgb(218,8,32)" rx="2" ry="2" />
<text  x="835.54" y="687.5" >handle_mm_fault</text>
</g>
<g >
<title>_dl_catch_exception (1 samples, 0.10%)</title><rect x="994.6" y="661" width="1.2" height="15.0" fill="rgb(228,76,23)" rx="2" ry="2" />
<text  x="997.57" y="671.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1 samples, 0.10%)</title><rect x="993.3" y="277" width="1.3" height="15.0" fill="rgb(233,89,2)" rx="2" ry="2" />
<text  x="996.33" y="287.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.21%)</title><rect x="433.0" y="437" width="2.5" height="15.0" fill="rgb(207,132,8)" rx="2" ry="2" />
<text  x="436.02" y="447.5" ></text>
</g>
<g >
<title>_dl_start (1 samples, 0.10%)</title><rect x="994.6" y="725" width="1.2" height="15.0" fill="rgb(226,118,40)" rx="2" ry="2" />
<text  x="997.57" y="735.5" ></text>
</g>
<g >
<title>serde_json::ser::to_writer (1 samples, 0.10%)</title><rect x="221.5" y="453" width="1.2" height="15.0" fill="rgb(209,159,32)" rx="2" ry="2" />
<text  x="224.51" y="463.5" ></text>
</g>
<g >
<title>__perf_event_enable (1 samples, 0.10%)</title><rect x="111.4" y="549" width="1.3" height="15.0" fill="rgb(230,64,11)" rx="2" ry="2" />
<text  x="114.43" y="559.5" ></text>
</g>
<g >
<title>perf_event__get_comm_ids (1 samples, 0.10%)</title><rect x="110.2" y="661" width="1.2" height="15.0" fill="rgb(254,217,1)" rx="2" ry="2" />
<text  x="113.19" y="671.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (1 samples, 0.10%)</title><rect x="111.4" y="661" width="1.3" height="15.0" fill="rgb(206,33,31)" rx="2" ry="2" />
<text  x="114.43" y="671.5" ></text>
</g>
<g >
<title>unpin_user_pages_dirty_lock (1 samples, 0.10%)</title><rect x="978.5" y="597" width="1.2" height="15.0" fill="rgb(214,176,7)" rx="2" ry="2" />
<text  x="981.49" y="607.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.10%)</title><rect x="993.3" y="181" width="1.3" height="15.0" fill="rgb(222,19,18)" rx="2" ry="2" />
<text  x="996.33" y="191.5" ></text>
</g>
<g >
<title>openaux (1 samples, 0.10%)</title><rect x="994.6" y="645" width="1.2" height="15.0" fill="rgb(236,156,39)" rx="2" ry="2" />
<text  x="997.57" y="655.5" ></text>
</g>
<g >
<title>smp_call_function_single (76 samples, 7.97%)</title><rect x="16.2" y="501" width="94.0" height="15.0" fill="rgb(249,28,20)" rx="2" ry="2" />
<text  x="19.18" y="511.5" >smp_call_fu..</text>
</g>
<g >
<title>NaClDescIoDescRead (114 samples, 11.95%)</title><rect x="225.2" y="677" width="141.0" height="15.0" fill="rgb(209,174,51)" rx="2" ry="2" />
<text  x="228.22" y="687.5" >NaClDescIoDescRead</text>
</g>
<g >
<title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.10%)</title><rect x="365.0" y="613" width="1.2" height="15.0" fill="rgb(227,118,5)" rx="2" ry="2" />
<text  x="367.99" y="623.5" ></text>
</g>
<g >
<title>handle_pte_fault (1 samples, 0.10%)</title><rect x="945.1" y="661" width="1.2" height="15.0" fill="rgb(215,135,23)" rx="2" ry="2" />
<text  x="948.09" y="671.5" ></text>
</g>
<g >
<title>clear_page_erms (25 samples, 2.62%)</title><rect x="859.7" y="565" width="31.0" height="15.0" fill="rgb(235,12,3)" rx="2" ry="2" />
<text  x="862.75" y="575.5" >cl..</text>
</g>
<g >
<title>finish_fault (2 samples, 0.21%)</title><rect x="976.0" y="453" width="2.5" height="15.0" fill="rgb(244,120,0)" rx="2" ry="2" />
<text  x="979.02" y="463.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_slice (6 samples, 0.63%)</title><rect x="550.5" y="533" width="7.4" height="15.0" fill="rgb(226,114,51)" rx="2" ry="2" />
<text  x="553.52" y="543.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.10%)</title><rect x="221.5" y="197" width="1.2" height="15.0" fill="rgb(249,21,42)" rx="2" ry="2" />
<text  x="224.51" y="207.5" ></text>
</g>
<g >
<title>do_user_addr_fault (103 samples, 10.80%)</title><rect x="827.6" y="693" width="127.4" height="15.0" fill="rgb(249,19,38)" rx="2" ry="2" />
<text  x="830.59" y="703.5" >do_user_addr_fa..</text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_slice (1 samples, 0.10%)</title><rect x="133.7" y="725" width="1.2" height="15.0" fill="rgb(220,198,22)" rx="2" ry="2" />
<text  x="136.69" y="735.5" ></text>
</g>
<g >
<title>do_exit (1 samples, 0.10%)</title><rect x="992.1" y="661" width="1.2" height="15.0" fill="rgb(231,217,44)" rx="2" ry="2" />
<text  x="995.10" y="671.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.10%)</title><rect x="994.6" y="533" width="1.2" height="15.0" fill="rgb(218,9,21)" rx="2" ry="2" />
<text  x="997.57" y="543.5" ></text>
</g>
<g >
<title>ringbuf::consumer::Consumer&lt;T&gt;::pop_access (89 samples, 9.33%)</title><rect x="251.2" y="533" width="110.1" height="15.0" fill="rgb(225,90,41)" rx="2" ry="2" />
<text  x="254.19" y="543.5" >ringbuf::cons..</text>
</g>
<g >
<title>handle_pte_fault (86 samples, 9.01%)</title><rect x="838.7" y="645" width="106.4" height="15.0" fill="rgb(209,8,22)" rx="2" ry="2" />
<text  x="841.72" y="655.5" >handle_pte_fa..</text>
</g>
<g >
<title>std::sync::mutex::Mutex&lt;T&gt;::lock (1 samples, 0.10%)</title><rect x="361.3" y="565" width="1.2" height="15.0" fill="rgb(230,192,5)" rx="2" ry="2" />
<text  x="364.28" y="575.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_copy::{{closure}} (11 samples, 1.15%)</title><rect x="175.7" y="677" width="13.7" height="15.0" fill="rgb(251,0,0)" rx="2" ry="2" />
<text  x="178.74" y="687.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.10%)</title><rect x="217.8" y="85" width="1.2" height="15.0" fill="rgb(244,79,48)" rx="2" ry="2" />
<text  x="220.80" y="95.5" ></text>
</g>
<g >
<title>NaClSysExecveDecoder (1 samples, 0.10%)</title><rect x="214.1" y="709" width="1.2" height="15.0" fill="rgb(210,31,53)" rx="2" ry="2" />
<text  x="217.09" y="719.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.10%)</title><rect x="115.1" y="709" width="1.3" height="15.0" fill="rgb(235,226,30)" rx="2" ry="2" />
<text  x="118.14" y="719.5" ></text>
</g>
<g >
<title>__next_zones_zonelist (2 samples, 0.21%)</title><rect x="852.3" y="581" width="2.5" height="15.0" fill="rgb(244,153,26)" rx="2" ry="2" />
<text  x="855.33" y="591.5" ></text>
</g>
<g >
<title>__get_user_pages (2 samples, 0.21%)</title><rect x="976.0" y="549" width="2.5" height="15.0" fill="rgb(230,48,16)" rx="2" ry="2" />
<text  x="979.02" y="559.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.10%)</title><rect x="112.7" y="677" width="1.2" height="15.0" fill="rgb(245,56,7)" rx="2" ry="2" />
<text  x="115.66" y="687.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_copy (11 samples, 1.15%)</title><rect x="175.7" y="709" width="13.7" height="15.0" fill="rgb(223,105,33)" rx="2" ry="2" />
<text  x="178.74" y="719.5" ></text>
</g>
<g >
<title>MakeDynamicCodePagesVisible (1 samples, 0.10%)</title><rect x="194.3" y="629" width="1.2" height="15.0" fill="rgb(221,229,19)" rx="2" ry="2" />
<text  x="197.30" y="639.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.10%)</title><rect x="993.3" y="293" width="1.3" height="15.0" fill="rgb(245,157,53)" rx="2" ry="2" />
<text  x="996.33" y="303.5" ></text>
</g>
<g >
<title>ApplyDfaValidator_x86_64 (12 samples, 1.26%)</title><rect x="196.8" y="645" width="14.8" height="15.0" fill="rgb(234,119,39)" rx="2" ry="2" />
<text  x="199.77" y="655.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.10%)</title><rect x="993.3" y="389" width="1.3" height="15.0" fill="rgb(206,223,20)" rx="2" ry="2" />
<text  x="996.33" y="399.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str (1 samples, 0.10%)</title><rect x="993.3" y="229" width="1.3" height="15.0" fill="rgb(249,53,45)" rx="2" ry="2" />
<text  x="996.33" y="239.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.10%)</title><rect x="113.9" y="725" width="1.2" height="15.0" fill="rgb(229,149,12)" rx="2" ry="2" />
<text  x="116.90" y="735.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="993.3" y="421" width="1.3" height="15.0" fill="rgb(205,114,21)" rx="2" ry="2" />
<text  x="996.33" y="431.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.10%)</title><rect x="217.8" y="261" width="1.2" height="15.0" fill="rgb(228,53,39)" rx="2" ry="2" />
<text  x="220.80" y="271.5" ></text>
</g>
<g >
<title>delete_from_page_cache (1 samples, 0.10%)</title><rect x="1079.9" y="437" width="1.3" height="15.0" fill="rgb(205,115,40)" rx="2" ry="2" />
<text  x="1082.92" y="447.5" ></text>
</g>
<g >
<title>do_shared_fault (2 samples, 0.21%)</title><rect x="976.0" y="469" width="2.5" height="15.0" fill="rgb(210,147,21)" rx="2" ry="2" />
<text  x="979.02" y="479.5" ></text>
</g>
<g >
<title>std::sys::unix::mutex::Mutex::unlock (2 samples, 0.21%)</title><rect x="228.9" y="517" width="2.5" height="15.0" fill="rgb(240,123,49)" rx="2" ry="2" />
<text  x="231.93" y="527.5" ></text>
</g>
<g >
<title>vfs_read (1 samples, 0.10%)</title><rect x="110.2" y="549" width="1.2" height="15.0" fill="rgb(249,47,16)" rx="2" ry="2" />
<text  x="113.19" y="559.5" ></text>
</g>
<g >
<title>xas_clear_mark (1 samples, 0.10%)</title><rect x="1079.9" y="405" width="1.3" height="15.0" fill="rgb(210,43,15)" rx="2" ry="2" />
<text  x="1082.92" y="415.5" ></text>
</g>
<g >
<title>NaClValidateCode (13 samples, 1.36%)</title><rect x="195.5" y="661" width="16.1" height="15.0" fill="rgb(221,66,32)" rx="2" ry="2" />
<text  x="198.53" y="671.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.10%)</title><rect x="220.3" y="261" width="1.2" height="15.0" fill="rgb(221,218,40)" rx="2" ry="2" />
<text  x="223.27" y="271.5" ></text>
</g>
<g >
<title>migration_cpu_stop (1 samples, 0.10%)</title><rect x="1083.6" y="677" width="1.3" height="15.0" fill="rgb(244,190,49)" rx="2" ry="2" />
<text  x="1086.63" y="687.5" ></text>
</g>
<g >
<title>__GI___pthread_rwlock_rdlock (1 samples, 0.10%)</title><rect x="365.0" y="565" width="1.2" height="15.0" fill="rgb(208,20,54)" rx="2" ry="2" />
<text  x="367.99" y="575.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.10%)</title><rect x="993.3" y="517" width="1.3" height="15.0" fill="rgb(244,214,40)" rx="2" ry="2" />
<text  x="996.33" y="527.5" ></text>
</g>
<g >
<title>start_thread (1 samples, 0.10%)</title><rect x="992.1" y="725" width="1.2" height="15.0" fill="rgb(254,128,15)" rx="2" ry="2" />
<text  x="995.10" y="735.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::FilesystemMetadata&gt;::serialize (4 samples, 0.42%)</title><rect x="216.6" y="517" width="4.9" height="15.0" fill="rgb(217,102,46)" rx="2" ry="2" />
<text  x="219.56" y="527.5" ></text>
</g>
<g >
<title>cpu_startup_entry (66 samples, 6.92%)</title><rect x="1084.9" y="709" width="81.6" height="15.0" fill="rgb(230,196,32)" rx="2" ry="2" />
<text  x="1087.86" y="719.5" >cpu_start..</text>
</g>
<g >
<title>handle_mm_fault (2 samples, 0.21%)</title><rect x="976.0" y="533" width="2.5" height="15.0" fill="rgb(233,11,13)" rx="2" ry="2" />
<text  x="979.02" y="543.5" ></text>
</g>
<g >
<title>__do_fault (1 samples, 0.10%)</title><rect x="194.3" y="453" width="1.2" height="15.0" fill="rgb(236,105,14)" rx="2" ry="2" />
<text  x="197.30" y="463.5" ></text>
</g>
<g >
<title>release_pages (15 samples, 1.57%)</title><rect x="1060.1" y="501" width="18.6" height="15.0" fill="rgb(244,37,41)" rx="2" ry="2" />
<text  x="1063.13" y="511.5" ></text>
</g>
<g >
<title>free_unref_page_list (8 samples, 0.84%)</title><rect x="1068.8" y="485" width="9.9" height="15.0" fill="rgb(231,156,18)" rx="2" ry="2" />
<text  x="1071.78" y="495.5" ></text>
</g>
<g >
<title>NaClHostDescClose (1 samples, 0.10%)</title><rect x="221.5" y="597" width="1.2" height="15.0" fill="rgb(229,221,7)" rx="2" ry="2" />
<text  x="224.51" y="607.5" ></text>
</g>
<g >
<title>enqueue_task (1 samples, 0.10%)</title><rect x="1083.6" y="645" width="1.3" height="15.0" fill="rgb(225,108,34)" rx="2" ry="2" />
<text  x="1086.63" y="655.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_slice (9 samples, 0.94%)</title><rect x="539.4" y="517" width="11.1" height="15.0" fill="rgb(253,15,4)" rx="2" ry="2" />
<text  x="542.39" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (1 samples, 0.10%)</title><rect x="194.3" y="357" width="1.2" height="15.0" fill="rgb(219,3,47)" rx="2" ry="2" />
<text  x="197.30" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="110.2" y="597" width="1.2" height="15.0" fill="rgb(236,172,15)" rx="2" ry="2" />
<text  x="113.19" y="607.5" ></text>
</g>
<g >
<title>security_inode_need_killpriv (1 samples, 0.10%)</title><rect x="215.3" y="373" width="1.3" height="15.0" fill="rgb(229,160,53)" rx="2" ry="2" />
<text  x="218.32" y="383.5" ></text>
</g>
<g >
<title>[[heap]] (2 samples, 0.21%)</title><rect x="113.9" y="741" width="2.5" height="15.0" fill="rgb(226,104,49)" rx="2" ry="2" />
<text  x="116.90" y="751.5" ></text>
</g>
<g >
<title>__mmap (1 samples, 0.10%)</title><rect x="994.6" y="597" width="1.2" height="15.0" fill="rgb(224,16,6)" rx="2" ry="2" />
<text  x="997.57" y="607.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.31%)</title><rect x="217.8" y="341" width="3.7" height="15.0" fill="rgb(206,10,17)" rx="2" ry="2" />
<text  x="220.80" y="351.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::persist_metadata (1 samples, 0.10%)</title><rect x="221.5" y="501" width="1.2" height="15.0" fill="rgb(235,223,49)" rx="2" ry="2" />
<text  x="224.51" y="511.5" ></text>
</g>
<g >
<title>tick_nohz_next_event (1 samples, 0.10%)</title><rect x="1157.8" y="613" width="1.3" height="15.0" fill="rgb(254,193,3)" rx="2" ry="2" />
<text  x="1160.84" y="623.5" ></text>
</g>
<g >
<title>__libc_start_main (1 samples, 0.10%)</title><rect x="10.0" y="725" width="1.2" height="15.0" fill="rgb(213,88,50)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>_perf_ioctl (1 samples, 0.10%)</title><rect x="111.4" y="677" width="1.3" height="15.0" fill="rgb(250,208,42)" rx="2" ry="2" />
<text  x="114.43" y="687.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (1 samples, 0.10%)</title><rect x="11.2" y="661" width="1.3" height="15.0" fill="rgb(206,54,53)" rx="2" ry="2" />
<text  x="14.24" y="671.5" ></text>
</g>
<g >
<title>nohz_newidle_balance (2 samples, 0.21%)</title><rect x="1161.6" y="613" width="2.4" height="15.0" fill="rgb(246,202,35)" rx="2" ry="2" />
<text  x="1164.55" y="623.5" ></text>
</g>
<g >
<title>dentry_unlink_inode (1 samples, 0.10%)</title><rect x="1079.9" y="565" width="1.3" height="15.0" fill="rgb(239,13,5)" rx="2" ry="2" />
<text  x="1082.92" y="575.5" ></text>
</g>
<g >
<title>NaClSysForkDecoder (1 samples, 0.10%)</title><rect x="221.5" y="709" width="1.2" height="15.0" fill="rgb(213,27,50)" rx="2" ry="2" />
<text  x="224.51" y="719.5" ></text>
</g>
<g >
<title>cpuidle_enter (11 samples, 1.15%)</title><rect x="1167.7" y="597" width="13.6" height="15.0" fill="rgb(225,132,1)" rx="2" ry="2" />
<text  x="1170.74" y="607.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::write_syscall (291 samples, 30.50%)</title><rect x="368.7" y="597" width="359.9" height="15.0" fill="rgb(227,54,28)" rx="2" ry="2" />
<text  x="371.70" y="607.5" >rustposix::safeposix::syscalls::fs_calls::&lt;impl ..</text>
</g>
<g >
<title>remote_function (73 samples, 7.65%)</title><rect x="19.9" y="469" width="90.3" height="15.0" fill="rgb(232,100,33)" rx="2" ry="2" />
<text  x="22.90" y="479.5" >remote_fun..</text>
</g>
<g >
<title>load_elf_binary (1 samples, 0.10%)</title><rect x="11.2" y="613" width="1.3" height="15.0" fill="rgb(244,8,3)" rx="2" ry="2" />
<text  x="14.24" y="623.5" ></text>
</g>
<g >
<title>_perf_event_enable (1 samples, 0.10%)</title><rect x="111.4" y="645" width="1.3" height="15.0" fill="rgb(211,155,15)" rx="2" ry="2" />
<text  x="114.43" y="655.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.10%)</title><rect x="993.3" y="405" width="1.3" height="15.0" fill="rgb(213,88,13)" rx="2" ry="2" />
<text  x="996.33" y="415.5" ></text>
</g>
<g >
<title>ovl_xattr_get (1 samples, 0.10%)</title><rect x="215.3" y="309" width="1.3" height="15.0" fill="rgb(246,184,54)" rx="2" ry="2" />
<text  x="218.32" y="319.5" ></text>
</g>
<g >
<title>free_unref_page_commit (6 samples, 0.63%)</title><rect x="1071.3" y="469" width="7.4" height="15.0" fill="rgb(231,116,51)" rx="2" ry="2" />
<text  x="1074.26" y="479.5" ></text>
</g>
<g >
<title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.10%)</title><rect x="993.3" y="357" width="1.3" height="15.0" fill="rgb(244,71,53)" rx="2" ry="2" />
<text  x="996.33" y="367.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.42%)</title><rect x="216.6" y="469" width="4.9" height="15.0" fill="rgb(247,22,43)" rx="2" ry="2" />
<text  x="219.56" y="479.5" ></text>
</g>
<g >
<title>perf (82 samples, 8.60%)</title><rect x="12.5" y="757" width="101.4" height="15.0" fill="rgb(247,218,15)" rx="2" ry="2" />
<text  x="15.47" y="767.5" >perf</text>
</g>
<g >
<title>vm_mmap_pgoff (1 samples, 0.10%)</title><rect x="994.6" y="517" width="1.2" height="15.0" fill="rgb(234,28,29)" rx="2" ry="2" />
<text  x="997.57" y="527.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.10%)</title><rect x="216.6" y="213" width="1.2" height="15.0" fill="rgb(248,45,27)" rx="2" ry="2" />
<text  x="219.56" y="223.5" ></text>
</g>
<g >
<title>kick_ilb (1 samples, 0.10%)</title><rect x="1186.3" y="533" width="1.2" height="15.0" fill="rgb(216,187,48)" rx="2" ry="2" />
<text  x="1189.29" y="543.5" ></text>
</g>
<g >
<title>lind_exit (5 samples, 0.52%)</title><rect x="215.3" y="677" width="6.2" height="15.0" fill="rgb(233,191,45)" rx="2" ry="2" />
<text  x="218.32" y="687.5" ></text>
</g>
<g >
<title>mm_release (1 samples, 0.10%)</title><rect x="992.1" y="613" width="1.2" height="15.0" fill="rgb(245,11,33)" rx="2" ry="2" />
<text  x="995.10" y="623.5" ></text>
</g>
<g >
<title>generic_exec_single (75 samples, 7.86%)</title><rect x="17.4" y="485" width="92.8" height="15.0" fill="rgb(220,89,14)" rx="2" ry="2" />
<text  x="20.42" y="495.5" >generic_exe..</text>
</g>
<g >
<title>NaClHostDescClose (1 samples, 0.10%)</title><rect x="214.1" y="581" width="1.2" height="15.0" fill="rgb(245,126,53)" rx="2" ry="2" />
<text  x="217.09" y="591.5" ></text>
</g>
<g >
<title>pfn_pte (1 samples, 0.10%)</title><rect x="942.6" y="613" width="1.3" height="15.0" fill="rgb(206,129,12)" rx="2" ry="2" />
<text  x="945.62" y="623.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (62 samples, 6.50%)</title><rect x="462.7" y="485" width="76.7" height="15.0" fill="rgb(250,30,51)" rx="2" ry="2" />
<text  x="465.70" y="495.5" >__memmov..</text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_copy (134 samples, 14.05%)</title><rect x="392.2" y="549" width="165.7" height="15.0" fill="rgb(250,176,54)" rx="2" ry="2" />
<text  x="395.20" y="559.5" >ringbuf::producer::Pr..</text>
</g>
<g >
<title>bprm_execve (1 samples, 0.10%)</title><rect x="11.2" y="677" width="1.3" height="15.0" fill="rgb(229,63,42)" rx="2" ry="2" />
<text  x="14.24" y="687.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.10%)</title><rect x="221.5" y="245" width="1.2" height="15.0" fill="rgb(244,76,47)" rx="2" ry="2" />
<text  x="224.51" y="255.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (1 samples, 0.10%)</title><rect x="1055.2" y="485" width="1.2" height="15.0" fill="rgb(231,92,34)" rx="2" ry="2" />
<text  x="1058.18" y="495.5" ></text>
</g>
<g >
<title>NaClDescUnref (1 samples, 0.10%)</title><rect x="221.5" y="645" width="1.2" height="15.0" fill="rgb(234,100,21)" rx="2" ry="2" />
<text  x="224.51" y="655.5" ></text>
</g>
<g >
<title>native_write_msr (64 samples, 6.71%)</title><rect x="31.0" y="373" width="79.2" height="15.0" fill="rgb(233,67,33)" rx="2" ry="2" />
<text  x="34.03" y="383.5" >native_wr..</text>
</g>
<g >
<title>dput (1 samples, 0.10%)</title><rect x="1079.9" y="613" width="1.3" height="15.0" fill="rgb(222,125,4)" rx="2" ry="2" />
<text  x="1082.92" y="623.5" ></text>
</g>
<g >
<title>std::sys::unix::net::Socket::write (1 samples, 0.10%)</title><rect x="215.3" y="549" width="1.3" height="15.0" fill="rgb(252,121,35)" rx="2" ry="2" />
<text  x="218.32" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (1 samples, 0.10%)</title><rect x="111.4" y="709" width="1.3" height="15.0" fill="rgb(213,1,8)" rx="2" ry="2" />
<text  x="114.43" y="719.5" ></text>
</g>
<g >
<title>_start (1 samples, 0.10%)</title><rect x="10.0" y="741" width="1.2" height="15.0" fill="rgb(235,126,8)" rx="2" ry="2" />
<text  x="13.00" y="751.5" ></text>
</g>
<g >
<title>add_module.constprop.0 (1 samples, 0.10%)</title><rect x="10.0" y="597" width="1.2" height="15.0" fill="rgb(247,29,21)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>shmem_evict_inode (1 samples, 0.10%)</title><rect x="1079.9" y="485" width="1.3" height="15.0" fill="rgb(236,171,30)" rx="2" ry="2" />
<text  x="1082.92" y="495.5" ></text>
</g>
<g >
<title>down_read_trylock (3 samples, 0.31%)</title><rect x="828.8" y="677" width="3.7" height="15.0" fill="rgb(213,124,36)" rx="2" ry="2" />
<text  x="831.83" y="687.5" ></text>
</g>
<g >
<title>rwsem_down_write_slowpath (1 samples, 0.10%)</title><rect x="222.7" y="469" width="1.3" height="15.0" fill="rgb(206,133,1)" rx="2" ry="2" />
<text  x="225.75" y="479.5" ></text>
</g>
<g >
<title>generic_exec_single (1 samples, 0.10%)</title><rect x="111.4" y="597" width="1.3" height="15.0" fill="rgb(211,166,53)" rx="2" ry="2" />
<text  x="114.43" y="607.5" ></text>
</g>
<g >
<title>swapper (88 samples, 9.22%)</title><rect x="1081.2" y="757" width="108.8" height="15.0" fill="rgb(214,183,54)" rx="2" ry="2" />
<text  x="1084.15" y="767.5" >swapper</text>
</g>
<g >
<title>ringbuf::ring_buffer::RingBuffer&lt;T&gt;::len (14 samples, 1.47%)</title><rect x="233.9" y="549" width="17.3" height="15.0" fill="rgb(226,189,27)" rx="2" ry="2" />
<text  x="236.88" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="110.2" y="613" width="1.2" height="15.0" fill="rgb(212,31,49)" rx="2" ry="2" />
<text  x="113.19" y="623.5" ></text>
</g>
<g >
<title>new_sync_write (1 samples, 0.10%)</title><rect x="215.3" y="421" width="1.3" height="15.0" fill="rgb(233,1,47)" rx="2" ry="2" />
<text  x="218.32" y="431.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.10%)</title><rect x="11.2" y="549" width="1.3" height="15.0" fill="rgb(228,92,2)" rx="2" ry="2" />
<text  x="14.24" y="559.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="11.2" y="725" width="1.3" height="15.0" fill="rgb(243,48,9)" rx="2" ry="2" />
<text  x="14.24" y="735.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.10%)</title><rect x="220.3" y="277" width="1.2" height="15.0" fill="rgb(248,132,44)" rx="2" ry="2" />
<text  x="223.27" y="287.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="221.5" y="261" width="1.2" height="15.0" fill="rgb(237,103,42)" rx="2" ry="2" />
<text  x="224.51" y="271.5" ></text>
</g>
<g >
<title>kvmalloc_node (1 samples, 0.10%)</title><rect x="110.2" y="501" width="1.2" height="15.0" fill="rgb(209,136,11)" rx="2" ry="2" />
<text  x="113.19" y="511.5" ></text>
</g>
<g >
<title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.10%)</title><rect x="993.3" y="165" width="1.3" height="15.0" fill="rgb(253,98,43)" rx="2" ry="2" />
<text  x="996.33" y="175.5" ></text>
</g>
<g >
<title>ksys_write (1 samples, 0.10%)</title><rect x="112.7" y="693" width="1.2" height="15.0" fill="rgb(253,184,35)" rx="2" ry="2" />
<text  x="115.66" y="703.5" ></text>
</g>
<g >
<title>rustposix::safeposix::filesystem::_::&lt;impl serde::ser::Serialize for rustposix::safeposix::filesystem::DeviceInode&gt;::serialize (1 samples, 0.10%)</title><rect x="993.3" y="341" width="1.3" height="15.0" fill="rgb(230,129,37)" rx="2" ry="2" />
<text  x="996.33" y="351.5" ></text>
</g>
<g >
<title>NaClTextMapWrapper (1 samples, 0.10%)</title><rect x="194.3" y="661" width="1.2" height="15.0" fill="rgb(247,188,27)" rx="2" ry="2" />
<text  x="197.30" y="671.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.10%)</title><rect x="1083.6" y="709" width="1.3" height="15.0" fill="rgb(211,116,14)" rx="2" ry="2" />
<text  x="1086.63" y="719.5" ></text>
</g>
<g >
<title>ringbuf::producer::Producer&lt;T&gt;::push_copy::{{closure}} (77 samples, 8.07%)</title><rect x="444.2" y="517" width="95.2" height="15.0" fill="rgb(223,59,44)" rx="2" ry="2" />
<text  x="447.15" y="527.5" >ringbuf::pr..</text>
</g>
<g >
<title>ext4_xattr_security_get (1 samples, 0.10%)</title><rect x="215.3" y="229" width="1.3" height="15.0" fill="rgb(249,28,36)" rx="2" ry="2" />
<text  x="218.32" y="239.5" ></text>
</g>
<g >
<title>NaClDescIoDescWrite (293 samples, 30.71%)</title><rect x="366.2" y="677" width="362.4" height="15.0" fill="rgb(210,216,38)" rx="2" ry="2" />
<text  x="369.23" y="687.5" >NaClDescIoDescWrite</text>
</g>
<g >
<title>dl_main (1 samples, 0.10%)</title><rect x="994.6" y="693" width="1.2" height="15.0" fill="rgb(209,141,32)" rx="2" ry="2" />
<text  x="997.57" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="222.7" y="565" width="1.3" height="15.0" fill="rgb(214,69,51)" rx="2" ry="2" />
<text  x="225.75" y="575.5" ></text>
</g>
<g >
<title>up_read (5 samples, 0.52%)</title><rect x="948.8" y="677" width="6.2" height="15.0" fill="rgb(249,15,24)" rx="2" ry="2" />
<text  x="951.81" y="687.5" ></text>
</g>
<g >
<title>do_mmap (1 samples, 0.10%)</title><rect x="994.6" y="501" width="1.2" height="15.0" fill="rgb(244,114,6)" rx="2" ry="2" />
<text  x="997.57" y="511.5" ></text>
</g>
<g >
<title>NaClDescUnref (1 samples, 0.10%)</title><rect x="214.1" y="629" width="1.2" height="15.0" fill="rgb(240,152,42)" rx="2" ry="2" />
<text  x="217.09" y="639.5" ></text>
</g>
<g >
<title>NaClRefCountUnref (1 samples, 0.10%)</title><rect x="221.5" y="629" width="1.2" height="15.0" fill="rgb(205,115,15)" rx="2" ry="2" />
<text  x="224.51" y="639.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_string_fragment (1 samples, 0.10%)</title><rect x="217.8" y="133" width="1.2" height="15.0" fill="rgb(233,157,34)" rx="2" ry="2" />
<text  x="220.80" y="143.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.10%)</title><rect x="211.6" y="565" width="1.3" height="15.0" fill="rgb(223,46,39)" rx="2" ry="2" />
<text  x="214.61" y="575.5" ></text>
</g>
<g >
<title>process_vm_rw_single_vec.constprop.0 (2 samples, 0.21%)</title><rect x="976.0" y="597" width="2.5" height="15.0" fill="rgb(224,53,23)" rx="2" ry="2" />
<text  x="979.02" y="607.5" ></text>
</g>
<g >
<title>__gconv_read_conf (1 samples, 0.10%)</title><rect x="10.0" y="613" width="1.2" height="15.0" fill="rgb(241,108,0)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>do_execveat_common (1 samples, 0.10%)</title><rect x="11.2" y="693" width="1.3" height="15.0" fill="rgb(231,67,43)" rx="2" ry="2" />
<text  x="14.24" y="703.5" ></text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (8 samples, 0.84%)</title><rect x="425.6" y="485" width="9.9" height="15.0" fill="rgb(251,226,16)" rx="2" ry="2" />
<text  x="428.60" y="495.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.10%)</title><rect x="221.5" y="165" width="1.2" height="15.0" fill="rgb(243,70,26)" rx="2" ry="2" />
<text  x="224.51" y="175.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.10%)</title><rect x="993.3" y="149" width="1.3" height="15.0" fill="rgb(247,165,21)" rx="2" ry="2" />
<text  x="996.33" y="159.5" ></text>
</g>
<g >
<title>iput (1 samples, 0.10%)</title><rect x="1079.9" y="549" width="1.3" height="15.0" fill="rgb(216,18,16)" rx="2" ry="2" />
<text  x="1082.92" y="559.5" ></text>
</g>
<g >
<title>__perf_event_enable (66 samples, 6.92%)</title><rect x="28.6" y="437" width="81.6" height="15.0" fill="rgb(250,7,29)" rx="2" ry="2" />
<text  x="31.55" y="447.5" >__perf_ev..</text>
</g>
<g >
<title>__x64_sys_exit (1 samples, 0.10%)</title><rect x="992.1" y="677" width="1.2" height="15.0" fill="rgb(210,142,44)" rx="2" ry="2" />
<text  x="995.10" y="687.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (110 samples, 11.53%)</title><rect x="820.2" y="725" width="136.0" height="15.0" fill="rgb(225,211,13)" rx="2" ry="2" />
<text  x="823.17" y="735.5" >asm_exc_page_fault</text>
</g>
<g >
<title>process_vm_rw_core.constprop.0 (1 samples, 0.10%)</title><rect x="978.5" y="629" width="1.2" height="15.0" fill="rgb(239,107,17)" rx="2" ry="2" />
<text  x="981.49" y="639.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (4 samples, 0.42%)</title><rect x="216.6" y="437" width="4.9" height="15.0" fill="rgb(209,198,22)" rx="2" ry="2" />
<text  x="219.56" y="447.5" ></text>
</g>
<g >
<title>start_secondary (66 samples, 6.92%)</title><rect x="1084.9" y="725" width="81.6" height="15.0" fill="rgb(235,194,3)" rx="2" ry="2" />
<text  x="1087.86" y="735.5" >start_sec..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (8 samples, 0.84%)</title><rect x="425.6" y="517" width="9.9" height="15.0" fill="rgb(219,5,47)" rx="2" ry="2" />
<text  x="428.60" y="527.5" ></text>
</g>
<g >
<title>generic_perform_write (1 samples, 0.10%)</title><rect x="112.7" y="549" width="1.2" height="15.0" fill="rgb(231,107,42)" rx="2" ry="2" />
<text  x="115.66" y="559.5" ></text>
</g>
<g >
<title>main (1 samples, 0.10%)</title><rect x="993.3" y="709" width="1.3" height="15.0" fill="rgb(205,110,13)" rx="2" ry="2" />
<text  x="996.33" y="719.5" ></text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (1 samples, 0.10%)</title><rect x="221.5" y="517" width="1.2" height="15.0" fill="rgb(228,222,42)" rx="2" ry="2" />
<text  x="224.51" y="527.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.10%)</title><rect x="221.5" y="293" width="1.2" height="15.0" fill="rgb(213,40,42)" rx="2" ry="2" />
<text  x="224.51" y="303.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.10%)</title><rect x="362.5" y="549" width="1.3" height="15.0" fill="rgb(234,201,28)" rx="2" ry="2" />
<text  x="365.52" y="559.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.10%)</title><rect x="993.3" y="485" width="1.3" height="15.0" fill="rgb(225,222,34)" rx="2" ry="2" />
<text  x="996.33" y="495.5" ></text>
</g>
<g >
<title>_cond_resched (1 samples, 0.10%)</title><rect x="827.6" y="677" width="1.2" height="15.0" fill="rgb(236,172,36)" rx="2" ry="2" />
<text  x="830.59" y="687.5" ></text>
</g>
<g >
<title>ctx_resched (66 samples, 6.92%)</title><rect x="28.6" y="421" width="81.6" height="15.0" fill="rgb(229,189,54)" rx="2" ry="2" />
<text  x="31.55" y="431.5" >ctx_resched</text>
</g>
<g >
<title>perf_ioctl (79 samples, 8.28%)</title><rect x="12.5" y="581" width="97.7" height="15.0" fill="rgb(234,123,21)" rx="2" ry="2" />
<text  x="15.47" y="591.5" >perf_ioctl</text>
</g>
<g >
<title>NaClSyscallCSegHook (436 samples, 45.70%)</title><rect x="189.4" y="725" width="539.2" height="15.0" fill="rgb(216,146,51)" rx="2" ry="2" />
<text  x="192.35" y="735.5" >NaClSyscallCSegHook</text>
</g>
<g >
<title>__mod_zone_page_state (1 samples, 0.10%)</title><rect x="1058.9" y="501" width="1.2" height="15.0" fill="rgb(207,22,23)" rx="2" ry="2" />
<text  x="1061.89" y="511.5" ></text>
</g>
<g >
<title>exit_mmap (30 samples, 3.14%)</title><rect x="1042.8" y="629" width="37.1" height="15.0" fill="rgb(238,100,30)" rx="2" ry="2" />
<text  x="1045.81" y="639.5" >exi..</text>
</g>
<g >
<title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.10%)</title><rect x="727.4" y="581" width="1.2" height="15.0" fill="rgb(233,204,52)" rx="2" ry="2" />
<text  x="730.40" y="591.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;ringbuf::producer::Producer&lt;u8&gt;&gt;&gt; (3 samples, 0.31%)</title><rect x="379.8" y="565" width="3.7" height="15.0" fill="rgb(237,111,3)" rx="2" ry="2" />
<text  x="382.83" y="575.5" ></text>
</g>
<g >
<title>newidle_balance (3 samples, 0.31%)</title><rect x="1183.8" y="565" width="3.7" height="15.0" fill="rgb(210,102,24)" rx="2" ry="2" />
<text  x="1186.82" y="575.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map::{{closure}} (1 samples, 0.10%)</title><rect x="221.5" y="277" width="1.2" height="15.0" fill="rgb(250,150,50)" rx="2" ry="2" />
<text  x="224.51" y="287.5" ></text>
</g>
<g >
<title>__mod_memcg_state.part.0 (1 samples, 0.10%)</title><rect x="977.3" y="357" width="1.2" height="15.0" fill="rgb(228,228,1)" rx="2" ry="2" />
<text  x="980.25" y="367.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.10%)</title><rect x="993.3" y="453" width="1.3" height="15.0" fill="rgb(228,189,14)" rx="2" ry="2" />
<text  x="996.33" y="463.5" ></text>
</g>
<g >
<title>__mod_node_page_state (1 samples, 0.10%)</title><rect x="919.1" y="549" width="1.3" height="15.0" fill="rgb(219,167,52)" rx="2" ry="2" />
<text  x="922.12" y="559.5" ></text>
</g>
<g >
<title>_raw_spin_lock (2 samples, 0.21%)</title><rect x="838.7" y="629" width="2.5" height="15.0" fill="rgb(227,194,6)" rx="2" ry="2" />
<text  x="841.72" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_execve (1 samples, 0.10%)</title><rect x="11.2" y="709" width="1.3" height="15.0" fill="rgb(236,104,11)" rx="2" ry="2" />
<text  x="14.24" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (79 samples, 8.28%)</title><rect x="12.5" y="629" width="97.7" height="15.0" fill="rgb(218,137,51)" rx="2" ry="2" />
<text  x="15.47" y="639.5" >entry_SYSCA..</text>
</g>
<g >
<title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.10%)</title><rect x="217.8" y="197" width="1.2" height="15.0" fill="rgb(246,16,21)" rx="2" ry="2" />
<text  x="220.80" y="207.5" ></text>
</g>
<g >
<title>serde::ser::Serializer::collect_map (1 samples, 0.10%)</title><rect x="993.3" y="501" width="1.3" height="15.0" fill="rgb(216,215,24)" rx="2" ry="2" />
<text  x="996.33" y="511.5" ></text>
</g>
<g >
<title>std::sys_common::mutex::MovableMutex::raw_unlock (2 samples, 0.21%)</title><rect x="228.9" y="533" width="2.5" height="15.0" fill="rgb(208,171,26)" rx="2" ry="2" />
<text  x="231.93" y="543.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (1 samples, 0.10%)</title><rect x="222.7" y="517" width="1.3" height="15.0" fill="rgb(241,68,9)" rx="2" ry="2" />
<text  x="225.75" y="527.5" ></text>
</g>
<g >
<title>perf_event_mmap (1 samples, 0.10%)</title><rect x="994.6" y="469" width="1.2" height="15.0" fill="rgb(253,27,14)" rx="2" ry="2" />
<text  x="997.57" y="479.5" ></text>
</g>
<g >
<title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.10%)</title><rect x="215.3" y="565" width="1.3" height="15.0" fill="rgb(250,171,18)" rx="2" ry="2" />
<text  x="218.32" y="575.5" ></text>
</g>
<g >
<title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="221.5" y="149" width="1.2" height="15.0" fill="rgb(240,30,7)" rx="2" ry="2" />
<text  x="224.51" y="159.5" ></text>
</g>
<g >
<title>shmem_getpage_gfp (1 samples, 0.10%)</title><rect x="194.3" y="421" width="1.2" height="15.0" fill="rgb(215,111,24)" rx="2" ry="2" />
<text  x="197.30" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_unlink (1 samples, 0.10%)</title><rect x="214.1" y="373" width="1.2" height="15.0" fill="rgb(215,176,19)" rx="2" ry="2" />
<text  x="217.09" y="383.5" ></text>
</g>
<g >
<title>__remove_shared_vm_struct (1 samples, 0.10%)</title><rect x="11.2" y="501" width="1.3" height="15.0" fill="rgb(210,152,51)" rx="2" ry="2" />
<text  x="14.24" y="511.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::write_u64 (1 samples, 0.10%)</title><rect x="216.6" y="277" width="1.2" height="15.0" fill="rgb(225,13,33)" rx="2" ry="2" />
<text  x="219.56" y="287.5" ></text>
</g>
<g >
<title>mem_cgroup_from_task (1 samples, 0.10%)</title><rect x="946.3" y="661" width="1.3" height="15.0" fill="rgb(245,137,14)" rx="2" ry="2" />
<text  x="949.33" y="671.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="220.3" y="213" width="1.2" height="15.0" fill="rgb(220,45,47)" rx="2" ry="2" />
<text  x="223.27" y="223.5" ></text>
</g>
<g >
<title>all (954 samples, 100%)</title><rect x="10.0" y="773" width="1180.0" height="15.0" fill="rgb(214,51,19)" rx="2" ry="2" />
<text  x="13.00" y="783.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::collections::hash::map::HashMap&lt;K,V,H&gt;&gt;::serialize (1 samples, 0.10%)</title><rect x="221.5" y="357" width="1.2" height="15.0" fill="rgb(217,55,53)" rx="2" ry="2" />
<text  x="224.51" y="367.5" ></text>
</g>
<g >
<title>MunmapInternal (1 samples, 0.10%)</title><rect x="222.7" y="677" width="1.3" height="15.0" fill="rgb(214,26,3)" rx="2" ry="2" />
<text  x="225.75" y="687.5" ></text>
</g>
<g >
<title>rwsem_optimistic_spin (1 samples, 0.10%)</title><rect x="222.7" y="453" width="1.3" height="15.0" fill="rgb(207,41,45)" rx="2" ry="2" />
<text  x="225.75" y="463.5" ></text>
</g>
<g >
<title>serde_json::ser::Formatter::begin_object_value (1 samples, 0.10%)</title><rect x="220.3" y="325" width="1.2" height="15.0" fill="rgb(209,0,24)" rx="2" ry="2" />
<text  x="223.27" y="335.5" ></text>
</g>
<g >
<title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.10%)</title><rect x="221.5" y="405" width="1.2" height="15.0" fill="rgb(234,58,15)" rx="2" ry="2" />
<text  x="224.51" y="415.5" ></text>
</g>
<g >
<title>serde_json::ser::format_escaped_str_contents (1 samples, 0.10%)</title><rect x="217.8" y="149" width="1.2" height="15.0" fill="rgb(221,111,15)" rx="2" ry="2" />
<text  x="220.80" y="159.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (11 samples, 1.15%)</title><rect x="1167.7" y="581" width="13.6" height="15.0" fill="rgb(243,107,7)" rx="2" ry="2" />
<text  x="1170.74" y="591.5" ></text>
</g>
<g >
<title>ovl_write_iter (1 samples, 0.10%)</title><rect x="112.7" y="645" width="1.2" height="15.0" fill="rgb(236,18,40)" rx="2" ry="2" />
<text  x="115.66" y="655.5" ></text>
</g>
<g >
<title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.10%)</title><rect x="221.5" y="229" width="1.2" height="15.0" fill="rgb(230,92,18)" rx="2" ry="2" />
<text  x="224.51" y="239.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.10%)</title><rect x="992.1" y="581" width="1.2" height="15.0" fill="rgb(238,47,44)" rx="2" ry="2" />
<text  x="995.10" y="591.5" ></text>
</g>
<g >
<title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.10%)</title><rect x="362.5" y="485" width="1.3" height="15.0" fill="rgb(247,173,31)" rx="2" ry="2" />
<text  x="365.52" y="495.5" ></text>
</g>
<g >
<title>__get_user_pages_remote (2 samples, 0.21%)</title><rect x="976.0" y="565" width="2.5" height="15.0" fill="rgb(228,62,30)" rx="2" ry="2" />
<text  x="979.02" y="575.5" ></text>
</g>
<g >
<title>[sel_ldr] (1 samples, 0.10%)</title><rect x="818.9" y="725" width="1.3" height="15.0" fill="rgb(215,63,51)" rx="2" ry="2" />
<text  x="821.93" y="735.5" ></text>
</g>
<g >
<title>__gconv_load_conf (1 samples, 0.10%)</title><rect x="10.0" y="629" width="1.2" height="15.0" fill="rgb(233,51,5)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
</g>
</svg>
