* Clean up logging.
  - prepend [watchdog] for watchdog messages
  - Make -D use a separate debug log file
  - audit printfs and change to output/debugf as necessary
  - make debugf a proper varargs function.

* decode fd number -> filename in output

* watchdog improvements
  - in main loop, check watchdog is still alive
  - check shm->parent_pid still alive in watchdog
  - bind watchdog process to a cpu.
  - RT watchdog task ? (needs initial startup as root, and drop privs afterwards).

* Change regeneration code.
  Instead of every n syscalls, make it happen after 15 minutes.

* ->decode_argN functions to print decoded flags etc.

* Improve socket generation to not generate duplicates.

* the COLOR_ARG macro in syscall.c:mkcall() has grown into a monster.
  Look at turning it into a function or two.

* Revisit fuzzing ptrace.
  - It's disabled currently because of situations like..
  child a traces child b
  child a segfaults
  child b never proceeds, and doesn't get untraced.

* Finish annotating syscall return types

* First thing a child should do is allocate a buffer of random numbers
  to be used as syscall numbers.

* Based upon the first syscall the child is going to call, bias the subsequent
  random syscalls to be calls that use the return type from syscall 1.
  Ie, if syscall #1 is going to be a syscall that returns an fd, do a bunch
  of syscalls that work on fd's.
  This will give us a sort of auto-grouping of syscalls.

* Destroy structures we allocated during a syscalls ->sanitise in a ->post method.
  - On return from the syscall, we don't call the destructor immediately.
    We pick a small random number, and do N other syscalls before we do the destruction.
    This requires us to create a list of work to be done later, along with a pointer
    to any allocated data.

* Rewrite the fd generation code.
  - Don't generate so many fd's (faster startup)
  - When requesting an fd, occasionally generate a new one.

* generate overlapping addresses/lengths.

* There are a few syscalls with duplicate '64' variants.
  They take the same arguments, and vary only in name.
  Two possibilities.
  1. what I did for fcntl[64] in 22b4b44ececaf59f9178f52788e3bcfe92535574
  2. leave the dupes, just for the sake of getting the ->name right.

* Store a field in the syscall definition on when it was added upstream.
  This will allow for things like "just fuzz syscalls added since 2.6.32"
  It won't be much use on kernels that have them backported, but that's
  not a big deal. We could do a ENOSYS test.

* Arch specific TODO
  x86-64: Build both a 64bit and a 32bit executable.
  *: Move arch specific syscalls into syscalls/arch/
  *: Move addresses in get_interesting_value() to per-arch headers.

* --ignore-socketcache

* Perform some checks on return from syscall
  - check padding between struct members is zeroed.
  - Set regs that should be preserved across syscalls to a known value, and check
    on return whether any of them got clobbered.
  - Check for corruption patterns (LIST_DEBUG, SLAB_POISON)

* Add a parameter to bias the randomness passed to length parameters.
  Right now it's hardwired to return 16 bit 70% of the time.
  (and 32bit in the 64bit path)

* Add a parameter for the dir/file randomness bias

* --oneshot
  ./trinity --oneshot futex -1,0x40000000,1,2,3,4

* Other arch support. S390? fully native PPC64? (PPC64 currently requires 32-bit glibc-kernheaders)

* run tests in different namespaces, personalities.

* Output errno distribution on exit

* Track success/failure per-thread instead of globally

* Store previous syscall results

* -x & -C should build a syscall table & adjust max_nr_syscalls

* allow for multiple -G's (after there is more than 'vm')

* ARG_MODE_T

* use inotify to check if /proc/sys/kernel/tainted changes instead of polling.
  (does inotify work on procfs?)

* audit which syscalls never succeed, and write sanitise routines for them

* Try passing a format string as a syscall argument.

* sanitise_setsockopt needs further expansion to cope with things such as
  those in do_ip_setsockopt

* decode addresses when printing them out to print 'page_rand+4' instead of a hex address.

* 'safe root' syscall mode.

* if a read() blocks, blacklist (close?) that fd.

* Pause on oops.
  Sometimes we might want to read trinity state when we trigger a bad event.

* config file
  - specify an ip of a victim machine
  - exclude file list for (certain sysfs files for eg)

* rework ioctl
  - pick known ioctl at random
  - start with: DRM, Networking, ALSA,..
  - lookup the correct /dev/node

* generic linked list implementation
  - convert file list usage
  - memory allocation usage

* file list struct extensions
  - use count

* destructor lists

