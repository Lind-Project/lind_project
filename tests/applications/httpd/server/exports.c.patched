/*
 * THIS FILE WAS AUTOGENERATED BY make_exports.awk
 *
 * This is an ugly hack that needs to be here, so
 * that libtool will link all of the APR functions
 * into server regardless of whether the base server
 * uses them.
 */

#include "ap_compat.h"
#include "ap_config.h"
#include "ap_config_auto.h"
#include "ap_config_layout.h"
#include "ap_expr.h"
#include "ap_hooks.h"
#include "ap_listen.h"
#include "ap_mmn.h"
#include "ap_mpm.h"
#include "ap_provider.h"
#include "ap_regex.h"
#include "ap_regkey.h"
#include "ap_release.h"
#include "ap_slotmem.h"
#include "ap_socache.h"
#include "apache_noprobes.h"
#include "apr_buckets.h"
#include "apr_hooks.h"
#include "apr_optional.h"
#include "apr_optional_hooks.h"
#include "apr_uri.h"
#include "apu.h"
#include "expat.h"
#include "expat_config.h"
#include "expat_external.h"
#include "heartbeat.h"
#include "http_config.h"
#include "http_connection.h"
#include "http_core.h"
#include "http_log.h"
#include "http_main.h"
#include "http_protocol.h"
#include "http_request.h"
#include "http_vhost.h"
#include "httpd.h"
#include "mod_auth.h"
#include "mod_core.h"
#include "mod_request.h"
#include "mpm_common.h"
#include "pcre.h"
#include "scoreboard.h"
#include "util_cfgtree.h"
#include "util_charset.h"
#include "util_cookies.h"
#include "util_ebcdic.h"
#include "util_fcgi.h"
#include "util_filter.h"
#include "util_ldap.h"
#include "util_md5.h"
#include "util_mutex.h"
#include "util_script.h"
#include "util_time.h"
#include "util_varbuf.h"
#include "util_xml.h"
#include "os.h"
#include "unixd.h"
#include "mpm_fdqueue.h"
#include "apr_anylock.h"
#include "apr_base64.h"
#include "apr_buckets.h"
#include "apr_crypto.h"
#include "apr_date.h"
#include "apr_dbd.h"
#include "apr_dbm.h"
#include "apr_hooks.h"
#include "apr_ldap.h"
#include "apr_ldap_init.h"
#include "apr_ldap_option.h"
#include "apr_ldap_rebind.h"
#include "apr_ldap_url.h"
#include "apr_md4.h"
#include "apr_md5.h"
#include "apr_memcache.h"
#include "apr_optional.h"
#include "apr_optional_hooks.h"
#include "apr_queue.h"
#include "apr_redis.h"
#include "apr_reslist.h"
#include "apr_rmm.h"
#include "apr_sdbm.h"
#include "apr_sha1.h"
#include "apr_siphash.h"
#include "apr_strmatch.h"
#include "apr_thread_pool.h"
#include "apr_uri.h"
#include "apr_uuid.h"
#include "apr_xlate.h"
#include "apr_xml.h"
#include "apu.h"
#include "apu_errno.h"
#include "apu_version.h"
#include "apu_want.h"
#include "apr.h"
#include "apr_allocator.h"
#include "apr_atomic.h"
#include "apr_cstr.h"
#include "apr_dso.h"
#include "apr_env.h"
#include "apr_errno.h"
#include "apr_escape.h"
#include "apr_file_info.h"
#include "apr_file_io.h"
#include "apr_fnmatch.h"
#include "apr_general.h"
#include "apr_getopt.h"
#include "apr_global_mutex.h"
#include "apr_hash.h"
#include "apr_inherit.h"
#include "apr_lib.h"
#include "apr_mmap.h"
#include "apr_network_io.h"
#include "apr_perms_set.h"
#include "apr_poll.h"
#include "apr_pools.h"
#include "apr_portable.h"
#include "apr_proc_mutex.h"
#include "apr_random.h"
#include "apr_ring.h"
#include "apr_shm.h"
#include "apr_signal.h"
#include "apr_skiplist.h"
#include "apr_strings.h"
#include "apr_support.h"
#include "apr_tables.h"
#include "apr_thread_cond.h"
#include "apr_thread_mutex.h"
#include "apr_thread_proc.h"
#include "apr_thread_rwlock.h"
#include "apr_time.h"
#include "apr_user.h"
#include "apr_version.h"
#include "apr_want.h"

const void *ap_ugly_hack = NULL;

/*
 * /home/jp/lind_project/test_cases/httpd/include/ap_expr.h
 */
const void *ap_hack_ap_expr_exec = (const void *)ap_expr_exec;
const void *ap_hack_ap_expr_exec_re = (const void *)ap_expr_exec_re;
const void *ap_hack_ap_expr_exec_ctx = (const void *)ap_expr_exec_ctx;
const void *ap_hack_ap_expr_str_exec = (const void *)ap_expr_str_exec;
const void *ap_hack_ap_expr_str_exec_re = (const void *)ap_expr_str_exec_re;
const void *ap_hack_ap_expr_lookup_default = (const void *)ap_expr_lookup_default;
const void *ap_hack_ap_hook_expr_lookup = (const void *)ap_hook_expr_lookup;
const void *ap_hack_ap_hook_get_expr_lookup = (const void *)ap_hook_get_expr_lookup;
const void *ap_hack_ap_run_expr_lookup = (const void *)ap_run_expr_lookup;
const void *ap_hack_ap_expr_parse = (const void *)ap_expr_parse;
const void *ap_hack_ap_expr_parse_cmd_mi = (const void *)ap_expr_parse_cmd_mi;

/*
 * /home/jp/lind_project/test_cases/httpd/include/ap_listen.h
 */
const void *ap_hack_ap_listen_pre_config = (const void *)ap_listen_pre_config;
const void *ap_hack_ap_setup_listeners = (const void *)ap_setup_listeners;
const void *ap_hack_ap_duplicate_listeners = (const void *)ap_duplicate_listeners;
const void *ap_hack_ap_close_listeners = (const void *)ap_close_listeners;
const void *ap_hack_ap_close_listeners_ex = (const void *)ap_close_listeners_ex;
const void *ap_hack_ap_close_selected_listeners = (const void *)ap_close_selected_listeners;
const void *ap_hack_ap_set_listenbacklog = (const void *)ap_set_listenbacklog;
const void *ap_hack_ap_set_listencbratio = (const void *)ap_set_listencbratio;
const void *ap_hack_ap_set_listener = (const void *)ap_set_listener;
const void *ap_hack_ap_set_send_buffer_size = (const void *)ap_set_send_buffer_size;
const void *ap_hack_ap_set_receive_buffer_size = (const void *)ap_set_receive_buffer_size;

/*
 * /home/jp/lind_project/test_cases/httpd/include/ap_mpm.h
 */
const void *ap_hack_ap_hook_mpm = (const void *)ap_hook_mpm;
const void *ap_hack_ap_hook_get_mpm = (const void *)ap_hook_get_mpm;
const void *ap_hack_ap_run_mpm = (const void *)ap_run_mpm;
const void *ap_hack_ap_os_create_privileged_process = (const void *)ap_os_create_privileged_process;
const void *ap_hack_ap_mpm_query = (const void *)ap_mpm_query;
const void *ap_hack_ap_mpm_register_timed_callback = (const void *)ap_mpm_register_timed_callback;
const void *ap_hack_ap_hook_child_status = (const void *)ap_hook_child_status;
const void *ap_hack_ap_hook_get_child_status = (const void *)ap_hook_get_child_status;
const void *ap_hack_ap_run_child_status = (const void *)ap_run_child_status;
const void *ap_hack_ap_hook_end_generation = (const void *)ap_hook_end_generation;
const void *ap_hack_ap_hook_get_end_generation = (const void *)ap_hook_get_end_generation;
const void *ap_hack_ap_run_end_generation = (const void *)ap_run_end_generation;
#ifdef AP_ENABLE_EXCEPTION_HOOK
const void *ap_hack_ap_hook_fatal_exception = (const void *)ap_hook_fatal_exception;
const void *ap_hack_ap_hook_get_fatal_exception = (const void *)ap_hook_get_fatal_exception;
const void *ap_hack_ap_run_fatal_exception = (const void *)ap_run_fatal_exception;
#endif /*AP_ENABLE_EXCEPTION_HOOK*/

/*
 * /home/jp/lind_project/test_cases/httpd/include/ap_provider.h
 */
const void *ap_hack_ap_register_provider = (const void *)ap_register_provider;
const void *ap_hack_ap_lookup_provider = (const void *)ap_lookup_provider;
const void *ap_hack_ap_list_provider_names = (const void *)ap_list_provider_names;
const void *ap_hack_ap_list_provider_groups = (const void *)ap_list_provider_groups;

/*
 * /home/jp/lind_project/test_cases/httpd/include/ap_regex.h
 */
const void *ap_hack_ap_regcomp_get_default_cflags = (const void *)ap_regcomp_get_default_cflags;
const void *ap_hack_ap_regcomp_set_default_cflags = (const void *)ap_regcomp_set_default_cflags;
const void *ap_hack_ap_regcomp_default_cflag_by_name = (const void *)ap_regcomp_default_cflag_by_name;
const void *ap_hack_ap_regcomp = (const void *)ap_regcomp;
const void *ap_hack_ap_regexec = (const void *)ap_regexec;
const void *ap_hack_ap_regexec_len = (const void *)ap_regexec_len;
const void *ap_hack_ap_regerror = (const void *)ap_regerror;
const void *ap_hack_ap_regname = (const void *)ap_regname;
const void *ap_hack_ap_regfree = (const void *)ap_regfree;
const void *ap_hack_ap_rxplus_compile = (const void *)ap_rxplus_compile;
const void *ap_hack_ap_rxplus_exec = (const void *)ap_rxplus_exec;
#ifdef DOXYGEN
const void *ap_hack_ap_rxplus_nmatch = (const void *)ap_rxplus_nmatch;
#else
#endif
const void *ap_hack_ap_rxplus_match = (const void *)ap_rxplus_match;
const void *ap_hack_ap_rxplus_pmatch = (const void *)ap_rxplus_pmatch;

/*
 * /home/jp/lind_project/test_cases/httpd/include/ap_regkey.h
 */
#if defined(WIN32) || defined(DOXYGEN)
const void *ap_hack_ap_regkey_const = (const void *)ap_regkey_const;
const void *ap_hack_ap_regkey_open = (const void *)ap_regkey_open;
const void *ap_hack_ap_regkey_close = (const void *)ap_regkey_close;
const void *ap_hack_ap_regkey_remove = (const void *)ap_regkey_remove;
const void *ap_hack_ap_regkey_value_get = (const void *)ap_regkey_value_get;
const void *ap_hack_ap_regkey_value_set = (const void *)ap_regkey_value_set;
const void *ap_hack_ap_regkey_value_raw_get = (const void *)ap_regkey_value_raw_get;
const void *ap_hack_ap_regkey_value_raw_set = (const void *)ap_regkey_value_raw_set;
const void *ap_hack_ap_regkey_value_array_get = (const void *)ap_regkey_value_array_get;
const void *ap_hack_ap_regkey_value_array_set = (const void *)ap_regkey_value_array_set;
const void *ap_hack_ap_regkey_value_remove = (const void *)ap_regkey_value_remove;
#endif /* def WIN32 || def DOXYGEN */

/*
 * /home/jp/lind_project/test_cases/httpd/include/apr_buckets.h
 */
const void *ap_hack_apr_brigade_create = (const void *)apr_brigade_create;
const void *ap_hack_apr_brigade_destroy = (const void *)apr_brigade_destroy;
const void *ap_hack_apr_brigade_cleanup = (const void *)apr_brigade_cleanup;
const void *ap_hack_apr_brigade_split_ex = (const void *)apr_brigade_split_ex;
const void *ap_hack_apr_brigade_split = (const void *)apr_brigade_split;
const void *ap_hack_apr_brigade_partition = (const void *)apr_brigade_partition;
const void *ap_hack_apr_brigade_length = (const void *)apr_brigade_length;
const void *ap_hack_apr_brigade_flatten = (const void *)apr_brigade_flatten;
const void *ap_hack_apr_brigade_pflatten = (const void *)apr_brigade_pflatten;
const void *ap_hack_apr_brigade_split_line = (const void *)apr_brigade_split_line;
const void *ap_hack_apr_brigade_to_iovec = (const void *)apr_brigade_to_iovec;
const void *ap_hack_apr_brigade_vputstrs = (const void *)apr_brigade_vputstrs;
const void *ap_hack_apr_brigade_write = (const void *)apr_brigade_write;
const void *ap_hack_apr_brigade_writev = (const void *)apr_brigade_writev;
const void *ap_hack_apr_brigade_puts = (const void *)apr_brigade_puts;
const void *ap_hack_apr_brigade_putc = (const void *)apr_brigade_putc;
const void *ap_hack_apr_brigade_putstrs = (const void *)apr_brigade_putstrs;
const void *ap_hack_apr_brigade_printf = (const void *)apr_brigade_printf;
const void *ap_hack_apr_brigade_vprintf = (const void *)apr_brigade_vprintf;
const void *ap_hack_apr_brigade_insert_file = (const void *)apr_brigade_insert_file;
const void *ap_hack_apr_bucket_alloc_create = (const void *)apr_bucket_alloc_create;
const void *ap_hack_apr_bucket_alloc_create_ex = (const void *)apr_bucket_alloc_create_ex;
const void *ap_hack_apr_bucket_alloc_destroy = (const void *)apr_bucket_alloc_destroy;
const void *ap_hack_apr_bucket_alloc_aligned_floor = (const void *)apr_bucket_alloc_aligned_floor;
const void *ap_hack_apr_bucket_alloc = (const void *)apr_bucket_alloc;
const void *ap_hack_apr_bucket_free = (const void *)apr_bucket_free;
const void *ap_hack_apr_bucket_setaside_noop = (const void *)apr_bucket_setaside_noop;
const void *ap_hack_apr_bucket_setaside_notimpl = (const void *)apr_bucket_setaside_notimpl;
const void *ap_hack_apr_bucket_split_notimpl = (const void *)apr_bucket_split_notimpl;
const void *ap_hack_apr_bucket_copy_notimpl = (const void *)apr_bucket_copy_notimpl;
const void *ap_hack_apr_bucket_destroy_noop = (const void *)apr_bucket_destroy_noop;
const void *ap_hack_apr_bucket_simple_split = (const void *)apr_bucket_simple_split;
const void *ap_hack_apr_bucket_simple_copy = (const void *)apr_bucket_simple_copy;
const void *ap_hack_apr_bucket_shared_make = (const void *)apr_bucket_shared_make;
const void *ap_hack_apr_bucket_shared_destroy = (const void *)apr_bucket_shared_destroy;
const void *ap_hack_apr_bucket_shared_split = (const void *)apr_bucket_shared_split;
const void *ap_hack_apr_bucket_shared_copy = (const void *)apr_bucket_shared_copy;
const void *ap_hack_apr_bucket_eos_create = (const void *)apr_bucket_eos_create;
const void *ap_hack_apr_bucket_eos_make = (const void *)apr_bucket_eos_make;
const void *ap_hack_apr_bucket_flush_create = (const void *)apr_bucket_flush_create;
const void *ap_hack_apr_bucket_flush_make = (const void *)apr_bucket_flush_make;
const void *ap_hack_apr_bucket_immortal_create = (const void *)apr_bucket_immortal_create;
const void *ap_hack_apr_bucket_immortal_make = (const void *)apr_bucket_immortal_make;
const void *ap_hack_apr_bucket_transient_create = (const void *)apr_bucket_transient_create;
const void *ap_hack_apr_bucket_transient_make = (const void *)apr_bucket_transient_make;
const void *ap_hack_apr_bucket_heap_create = (const void *)apr_bucket_heap_create;
const void *ap_hack_apr_bucket_heap_make = (const void *)apr_bucket_heap_make;
const void *ap_hack_apr_bucket_pool_create = (const void *)apr_bucket_pool_create;
const void *ap_hack_apr_bucket_pool_make = (const void *)apr_bucket_pool_make;
#if APR_HAS_MMAP
const void *ap_hack_apr_bucket_mmap_create = (const void *)apr_bucket_mmap_create;
const void *ap_hack_apr_bucket_mmap_make = (const void *)apr_bucket_mmap_make;
#endif
const void *ap_hack_apr_bucket_socket_create = (const void *)apr_bucket_socket_create;
const void *ap_hack_apr_bucket_socket_make = (const void *)apr_bucket_socket_make;
const void *ap_hack_apr_bucket_pipe_create = (const void *)apr_bucket_pipe_create;
const void *ap_hack_apr_bucket_pipe_make = (const void *)apr_bucket_pipe_make;
const void *ap_hack_apr_bucket_file_create = (const void *)apr_bucket_file_create;
const void *ap_hack_apr_bucket_file_make = (const void *)apr_bucket_file_make;
const void *ap_hack_apr_bucket_file_enable_mmap = (const void *)apr_bucket_file_enable_mmap;
const void *ap_hack_apr_bucket_file_set_buf_size = (const void *)apr_bucket_file_set_buf_size;

/*
 * /home/jp/lind_project/test_cases/httpd/include/apr_hooks.h
 */
const void *ap_hack_apr_hook_sort_register = (const void *)apr_hook_sort_register;
const void *ap_hack_apr_hook_sort_all = (const void *)apr_hook_sort_all;
const void *ap_hack_apr_hook_debug_show = (const void *)apr_hook_debug_show;
const void *ap_hack_apr_hook_deregister_all = (const void *)apr_hook_deregister_all;

/*
 * /home/jp/lind_project/test_cases/httpd/include/apr_optional.h
 */
const void *ap_hack_apr_dynamic_fn_register = (const void *)apr_dynamic_fn_register;
const void *ap_hack_apr_dynamic_fn_retrieve = (const void *)apr_dynamic_fn_retrieve;

/*
 * /home/jp/lind_project/test_cases/httpd/include/apr_optional_hooks.h
 */
const void *ap_hack_apr_optional_hook_add = (const void *)apr_optional_hook_add;
const void *ap_hack_apr_optional_hook_get = (const void *)apr_optional_hook_get;

/*
 * /home/jp/lind_project/test_cases/httpd/include/apr_uri.h
 */
const void *ap_hack_apr_uri_port_of_scheme = (const void *)apr_uri_port_of_scheme;
const void *ap_hack_apr_uri_unparse = (const void *)apr_uri_unparse;
const void *ap_hack_apr_uri_parse = (const void *)apr_uri_parse;
const void *ap_hack_apr_uri_parse_hostinfo = (const void *)apr_uri_parse_hostinfo;

/*
 * /home/jp/lind_project/test_cases/httpd/include/http_config.h
 */
const void *ap_hack_ap_get_module_config = (const void *)ap_get_module_config;
const void *ap_hack_ap_set_module_config = (const void *)ap_set_module_config;
const void *ap_hack_ap_get_module_flags = (const void *)ap_get_module_flags;
const void *ap_hack_ap_get_server_module_loglevel = (const void *)ap_get_server_module_loglevel;
const void *ap_hack_ap_get_conn_module_loglevel = (const void *)ap_get_conn_module_loglevel;
const void *ap_hack_ap_get_conn_server_module_loglevel = (const void *)ap_get_conn_server_module_loglevel;
const void *ap_hack_ap_get_request_module_loglevel = (const void *)ap_get_request_module_loglevel;
const void *ap_hack_ap_set_module_loglevel = (const void *)ap_set_module_loglevel;
const void *ap_hack_ap_reset_module_loglevels = (const void *)ap_reset_module_loglevels;
const void *ap_hack_ap_set_string_slot = (const void *)ap_set_string_slot;
const void *ap_hack_ap_set_int_slot = (const void *)ap_set_int_slot;
const void *ap_hack_ap_parse_log_level = (const void *)ap_parse_log_level;
const void *ap_hack_ap_method_is_limited = (const void *)ap_method_is_limited;
const void *ap_hack_ap_set_string_slot_lower = (const void *)ap_set_string_slot_lower;
const void *ap_hack_ap_set_flag_slot = (const void *)ap_set_flag_slot;
const void *ap_hack_ap_set_flag_slot_char = (const void *)ap_set_flag_slot_char;
const void *ap_hack_ap_set_file_slot = (const void *)ap_set_file_slot;
const void *ap_hack_ap_set_deprecated = (const void *)ap_set_deprecated;
const void *ap_hack_ap_server_root_relative = (const void *)ap_server_root_relative;
const void *ap_hack_ap_runtime_dir_relative = (const void *)ap_runtime_dir_relative;
const void *ap_hack_ap_add_module = (const void *)ap_add_module;
const void *ap_hack_ap_remove_module = (const void *)ap_remove_module;
const void *ap_hack_ap_add_loaded_module = (const void *)ap_add_loaded_module;
const void *ap_hack_ap_remove_loaded_module = (const void *)ap_remove_loaded_module;
const void *ap_hack_ap_find_module_name = (const void *)ap_find_module_name;
const void *ap_hack_ap_find_module_short_name = (const void *)ap_find_module_short_name;
const void *ap_hack_ap_find_linked_module = (const void *)ap_find_linked_module;
const void *ap_hack_ap_pcfg_openfile = (const void *)ap_pcfg_openfile;
const void *ap_hack_ap_pcfg_open_custom = (const void *)ap_pcfg_open_custom;
const void *ap_hack_ap_cfg_getline = (const void *)ap_cfg_getline;
const void *ap_hack_ap_cfg_getc = (const void *)ap_cfg_getc;
const void *ap_hack_ap_cfg_closefile = (const void *)ap_cfg_closefile;
const void *ap_hack_ap_pcfg_strerror = (const void *)ap_pcfg_strerror;
const void *ap_hack_ap_soak_end_container = (const void *)ap_soak_end_container;
const void *ap_hack_ap_build_cont_config = (const void *)ap_build_cont_config;
const void *ap_hack_ap_build_config = (const void *)ap_build_config;
const void *ap_hack_ap_walk_config = (const void *)ap_walk_config;
const void *ap_hack_ap_check_cmd_context = (const void *)ap_check_cmd_context;
const void *ap_hack_ap_single_module_configure = (const void *)ap_single_module_configure;
const void *ap_hack_ap_setup_prelinked_modules = (const void *)ap_setup_prelinked_modules;
const void *ap_hack_ap_show_directives = (const void *)ap_show_directives;
const void *ap_hack_ap_exists_directive = (const void *)ap_exists_directive;
const void *ap_hack_ap_show_modules = (const void *)ap_show_modules;
const void *ap_hack_ap_show_mpm = (const void *)ap_show_mpm;
const void *ap_hack_ap_read_config = (const void *)ap_read_config;
const void *ap_hack_ap_run_rewrite_args = (const void *)ap_run_rewrite_args;
const void *ap_hack_ap_register_hooks = (const void *)ap_register_hooks;
const void *ap_hack_ap_fixup_virtual_hosts = (const void *)ap_fixup_virtual_hosts;
const void *ap_hack_ap_reserve_module_slots = (const void *)ap_reserve_module_slots;
const void *ap_hack_ap_reserve_module_slots_directive = (const void *)ap_reserve_module_slots_directive;
const void *ap_hack_ap_create_request_config = (const void *)ap_create_request_config;
const void *ap_hack_ap_create_per_dir_config = (const void *)ap_create_per_dir_config;
const void *ap_hack_ap_merge_per_dir_configs = (const void *)ap_merge_per_dir_configs;
const void *ap_hack_ap_new_log_config = (const void *)ap_new_log_config;
const void *ap_hack_ap_merge_log_config = (const void *)ap_merge_log_config;
const void *ap_hack_ap_create_conn_config = (const void *)ap_create_conn_config;
const void *ap_hack_ap_parse_htaccess = (const void *)ap_parse_htaccess;
const void *ap_hack_ap_init_virtual_host = (const void *)ap_init_virtual_host;
const void *ap_hack_ap_process_resource_config = (const void *)ap_process_resource_config;
const void *ap_hack_ap_process_fnmatch_configs = (const void *)ap_process_fnmatch_configs;
const void *ap_hack_ap_process_config_tree = (const void *)ap_process_config_tree;
const void *ap_hack_ap_retained_data_create = (const void *)ap_retained_data_create;
const void *ap_hack_ap_retained_data_get = (const void *)ap_retained_data_get;
const void *ap_hack_ap_invoke_handler = (const void *)ap_invoke_handler;
const void *ap_hack_ap_find_command = (const void *)ap_find_command;
const void *ap_hack_ap_find_command_in_modules = (const void *)ap_find_command_in_modules;
const void *ap_hack_ap_set_config_vectors = (const void *)ap_set_config_vectors;
const void *ap_hack_ap_hook_header_parser = (const void *)ap_hook_header_parser;
const void *ap_hack_ap_hook_get_header_parser = (const void *)ap_hook_get_header_parser;
const void *ap_hack_ap_run_header_parser = (const void *)ap_run_header_parser;
const void *ap_hack_ap_hook_pre_config = (const void *)ap_hook_pre_config;
const void *ap_hack_ap_hook_get_pre_config = (const void *)ap_hook_get_pre_config;
const void *ap_hack_ap_run_pre_config = (const void *)ap_run_pre_config;
const void *ap_hack_ap_hook_check_config = (const void *)ap_hook_check_config;
const void *ap_hack_ap_hook_get_check_config = (const void *)ap_hook_get_check_config;
const void *ap_hack_ap_run_check_config = (const void *)ap_run_check_config;
const void *ap_hack_ap_hook_test_config = (const void *)ap_hook_test_config;
const void *ap_hack_ap_hook_get_test_config = (const void *)ap_hook_get_test_config;
const void *ap_hack_ap_run_test_config = (const void *)ap_run_test_config;
const void *ap_hack_ap_hook_post_config = (const void *)ap_hook_post_config;
const void *ap_hack_ap_hook_get_post_config = (const void *)ap_hook_get_post_config;
const void *ap_hack_ap_run_post_config = (const void *)ap_run_post_config;
const void *ap_hack_ap_hook_open_logs = (const void *)ap_hook_open_logs;
const void *ap_hack_ap_hook_get_open_logs = (const void *)ap_hook_get_open_logs;
const void *ap_hack_ap_run_open_logs = (const void *)ap_run_open_logs;
const void *ap_hack_ap_hook_child_init = (const void *)ap_hook_child_init;
const void *ap_hack_ap_hook_get_child_init = (const void *)ap_hook_get_child_init;
const void *ap_hack_ap_run_child_init = (const void *)ap_run_child_init;
const void *ap_hack_ap_hook_handler = (const void *)ap_hook_handler;
const void *ap_hack_ap_hook_get_handler = (const void *)ap_hook_get_handler;
const void *ap_hack_ap_run_handler = (const void *)ap_run_handler;
const void *ap_hack_ap_hook_quick_handler = (const void *)ap_hook_quick_handler;
const void *ap_hack_ap_hook_get_quick_handler = (const void *)ap_hook_get_quick_handler;
const void *ap_hack_ap_run_quick_handler = (const void *)ap_run_quick_handler;
const void *ap_hack_ap_hook_optional_fn_retrieve = (const void *)ap_hook_optional_fn_retrieve;
const void *ap_hack_ap_hook_get_optional_fn_retrieve = (const void *)ap_hook_get_optional_fn_retrieve;
const void *ap_hack_ap_run_optional_fn_retrieve = (const void *)ap_run_optional_fn_retrieve;
const void *ap_hack_ap_hook_open_htaccess = (const void *)ap_hook_open_htaccess;
const void *ap_hack_ap_hook_get_open_htaccess = (const void *)ap_hook_get_open_htaccess;
const void *ap_hack_ap_run_open_htaccess = (const void *)ap_run_open_htaccess;
const void *ap_hack_ap_pool_cleanup_set_null = (const void *)ap_pool_cleanup_set_null;

/*
 * /home/jp/lind_project/test_cases/httpd/include/http_connection.h
 */
const void *ap_hack_ap_process_connection = (const void *)ap_process_connection;
const void *ap_hack_ap_shutdown_conn = (const void *)ap_shutdown_conn;
const void *ap_hack_ap_flush_conn = (const void *)ap_flush_conn;
const void *ap_hack_ap_lingering_close = (const void *)ap_lingering_close;
const void *ap_hack_ap_prep_lingering_close = (const void *)ap_prep_lingering_close;
const void *ap_hack_ap_start_lingering_close = (const void *)ap_start_lingering_close;
const void *ap_hack_ap_hook_create_connection = (const void *)ap_hook_create_connection;
const void *ap_hack_ap_hook_get_create_connection = (const void *)ap_hook_get_create_connection;
const void *ap_hack_ap_run_create_connection = (const void *)ap_run_create_connection;
const void *ap_hack_ap_hook_pre_connection = (const void *)ap_hook_pre_connection;
const void *ap_hack_ap_hook_get_pre_connection = (const void *)ap_hook_get_pre_connection;
const void *ap_hack_ap_run_pre_connection = (const void *)ap_run_pre_connection;
const void *ap_hack_ap_hook_process_connection = (const void *)ap_hook_process_connection;
const void *ap_hack_ap_hook_get_process_connection = (const void *)ap_hook_get_process_connection;
const void *ap_hack_ap_run_process_connection = (const void *)ap_run_process_connection;
const void *ap_hack_ap_hook_pre_close_connection = (const void *)ap_hook_pre_close_connection;
const void *ap_hack_ap_hook_get_pre_close_connection = (const void *)ap_hook_get_pre_close_connection;
const void *ap_hack_ap_run_pre_close_connection = (const void *)ap_run_pre_close_connection;
const void *ap_hack_ap_bucket_eoc_make = (const void *)ap_bucket_eoc_make;
const void *ap_hack_ap_bucket_eoc_create = (const void *)ap_bucket_eoc_create;

/*
 * /home/jp/lind_project/test_cases/httpd/include/http_core.h
 */
const void *ap_hack_ap_allow_options = (const void *)ap_allow_options;
const void *ap_hack_ap_allow_overrides = (const void *)ap_allow_overrides;
const void *ap_hack_ap_document_root = (const void *)ap_document_root;
const void *ap_hack_ap_get_useragent_host = (const void *)ap_get_useragent_host;
const void *ap_hack_ap_get_remote_host = (const void *)ap_get_remote_host;
const void *ap_hack_ap_get_remote_logname = (const void *)ap_get_remote_logname;
const void *ap_hack_ap_construct_url = (const void *)ap_construct_url;
const void *ap_hack_ap_get_server_name = (const void *)ap_get_server_name;
const void *ap_hack_ap_get_server_name_for_url = (const void *)ap_get_server_name_for_url;
const void *ap_hack_ap_get_server_port = (const void *)ap_get_server_port;
const void *ap_hack_ap_get_limit_req_body = (const void *)ap_get_limit_req_body;
const void *ap_hack_ap_get_limit_xml_body = (const void *)ap_get_limit_xml_body;
const void *ap_hack_ap_custom_response = (const void *)ap_custom_response;
const void *ap_hack_ap_is_recursion_limit_exceeded = (const void *)ap_is_recursion_limit_exceeded;
const void *ap_hack_ap_exists_config_define = (const void *)ap_exists_config_define;
const void *ap_hack_ap_core_translate = (const void *)ap_core_translate;
const void *ap_hack_ap_auth_type = (const void *)ap_auth_type;
const void *ap_hack_ap_auth_name = (const void *)ap_auth_name;
const void *ap_hack_ap_satisfies = (const void *)ap_satisfies;
const void *ap_hack_ap_get_core_module_config = (const void *)ap_get_core_module_config;
const void *ap_hack_ap_set_core_module_config = (const void *)ap_set_core_module_config;
const void *ap_hack_ap_get_conn_socket = (const void *)ap_get_conn_socket;
const void *ap_hack_ap_register_request_note = (const void *)ap_register_request_note;
const void *ap_hack_ap_get_request_note = (const void *)ap_get_request_note;
const void *ap_hack_ap_add_per_dir_conf = (const void *)ap_add_per_dir_conf;
const void *ap_hack_ap_add_per_url_conf = (const void *)ap_add_per_url_conf;
const void *ap_hack_ap_add_file_conf = (const void *)ap_add_file_conf;
const void *ap_hack_ap_add_if_conf = (const void *)ap_add_if_conf;
const void *ap_hack_ap_limit_section = (const void *)ap_limit_section;
const void *ap_hack_ap_get_server_protocol = (const void *)ap_get_server_protocol;
const void *ap_hack_ap_set_server_protocol = (const void *)ap_set_server_protocol;
const void *ap_hack_ap_hook_insert_network_bucket = (const void *)ap_hook_insert_network_bucket;
const void *ap_hack_ap_hook_get_insert_network_bucket = (const void *)ap_hook_get_insert_network_bucket;
const void *ap_hack_ap_run_insert_network_bucket = (const void *)ap_run_insert_network_bucket;
const void *ap_hack_ap_hook_get_mgmt_items = (const void *)ap_hook_get_mgmt_items;
const void *ap_hack_ap_hook_get_get_mgmt_items = (const void *)ap_hook_get_get_mgmt_items;
const void *ap_hack_ap_run_get_mgmt_items = (const void *)ap_run_get_mgmt_items;
const void *ap_hack_ap_register_errorlog_handler = (const void *)ap_register_errorlog_handler;
const void *ap_hack_ap_hook_error_log = (const void *)ap_hook_error_log;
const void *ap_hack_ap_hook_get_error_log = (const void *)ap_hook_get_error_log;
const void *ap_hack_ap_run_error_log = (const void *)ap_run_error_log;
const void *ap_hack_ap_register_log_hooks = (const void *)ap_register_log_hooks;
const void *ap_hack_ap_register_config_hooks = (const void *)ap_register_config_hooks;
const void *ap_hack_ap_state_query = (const void *)ap_state_query;

/*
 * /home/jp/lind_project/test_cases/httpd/include/http_log.h
 */
const void *ap_hack_ap_open_stderr_log = (const void *)ap_open_stderr_log;
const void *ap_hack_ap_replace_stderr_log = (const void *)ap_replace_stderr_log;
#ifdef DOXYGEN
const void *ap_hack_ap_log_error = (const void *)ap_log_error;
#else
const void *ap_hack_ap_log_error_ = (const void *)ap_log_error_;
#endif
#ifdef DOXYGEN
const void *ap_hack_ap_log_perror = (const void *)ap_log_perror;
#else
const void *ap_hack_ap_log_perror_ = (const void *)ap_log_perror_;
#endif
#ifdef DOXYGEN
const void *ap_hack_ap_log_rerror = (const void *)ap_log_rerror;
#else
const void *ap_hack_ap_log_rerror_ = (const void *)ap_log_rerror_;
#endif
#ifdef DOXYGEN
const void *ap_hack_ap_log_cerror = (const void *)ap_log_cerror;
#else
const void *ap_hack_ap_log_cerror_ = (const void *)ap_log_cerror_;
#endif
#ifdef DOXYGEN
const void *ap_hack_ap_log_cserror = (const void *)ap_log_cserror;
#else
const void *ap_hack_ap_log_cserror_ = (const void *)ap_log_cserror_;
#endif
#ifdef DOXYGEN
const void *ap_hack_ap_log_data = (const void *)ap_log_data;
#else
const void *ap_hack_ap_log_data_ = (const void *)ap_log_data_;
#endif
#ifdef DOXYGEN
const void *ap_hack_ap_log_rdata = (const void *)ap_log_rdata;
#else
const void *ap_hack_ap_log_rdata_ = (const void *)ap_log_rdata_;
#endif
#ifdef DOXYGEN
const void *ap_hack_ap_log_cdata = (const void *)ap_log_cdata;
#else
const void *ap_hack_ap_log_cdata_ = (const void *)ap_log_cdata_;
#endif
#ifdef DOXYGEN
const void *ap_hack_ap_log_csdata = (const void *)ap_log_csdata;
#else
const void *ap_hack_ap_log_csdata_ = (const void *)ap_log_csdata_;
#endif
const void *ap_hack_ap_error_log2stderr = (const void *)ap_error_log2stderr;
const void *ap_hack_ap_log_command_line = (const void *)ap_log_command_line;
const void *ap_hack_ap_log_mpm_common = (const void *)ap_log_mpm_common;
const void *ap_hack_ap_log_pid = (const void *)ap_log_pid;
const void *ap_hack_ap_remove_pid = (const void *)ap_remove_pid;
const void *ap_hack_ap_read_pid = (const void *)ap_read_pid;
const void *ap_hack_ap_open_piped_log = (const void *)ap_open_piped_log;
const void *ap_hack_ap_open_piped_log_ex = (const void *)ap_open_piped_log_ex;
const void *ap_hack_ap_close_piped_log = (const void *)ap_close_piped_log;
const void *ap_hack_ap_piped_log_read_fd = (const void *)ap_piped_log_read_fd;
const void *ap_hack_ap_piped_log_write_fd = (const void *)ap_piped_log_write_fd;
const void *ap_hack_ap_hook_generate_log_id = (const void *)ap_hook_generate_log_id;
const void *ap_hack_ap_hook_get_generate_log_id = (const void *)ap_hook_get_generate_log_id;
const void *ap_hack_ap_run_generate_log_id = (const void *)ap_run_generate_log_id;

/*
 * /home/jp/lind_project/test_cases/httpd/include/http_protocol.h
 */
const void *ap_hack_ap_hook_insert_error_filter = (const void *)ap_hook_insert_error_filter;
const void *ap_hack_ap_hook_get_insert_error_filter = (const void *)ap_hook_get_insert_error_filter;
const void *ap_hack_ap_run_insert_error_filter = (const void *)ap_run_insert_error_filter;
const void *ap_hack_ap_get_mime_headers = (const void *)ap_get_mime_headers;
const void *ap_hack_ap_get_mime_headers_core = (const void *)ap_get_mime_headers_core;
const void *ap_hack_ap_finalize_request_protocol = (const void *)ap_finalize_request_protocol;
const void *ap_hack_ap_send_error_response = (const void *)ap_send_error_response;
const void *ap_hack_ap_set_content_length = (const void *)ap_set_content_length;
const void *ap_hack_ap_set_keepalive = (const void *)ap_set_keepalive;
const void *ap_hack_ap_rationalize_mtime = (const void *)ap_rationalize_mtime;
const void *ap_hack_ap_make_content_type = (const void *)ap_make_content_type;
const void *ap_hack_ap_setup_make_content_type = (const void *)ap_setup_make_content_type;
const void *ap_hack_ap_make_etag = (const void *)ap_make_etag;
const void *ap_hack_ap_set_etag = (const void *)ap_set_etag;
const void *ap_hack_ap_set_last_modified = (const void *)ap_set_last_modified;
const void *ap_hack_ap_condition_if_match = (const void *)ap_condition_if_match;
const void *ap_hack_ap_condition_if_unmodified_since = (const void *)ap_condition_if_unmodified_since;
const void *ap_hack_ap_condition_if_none_match = (const void *)ap_condition_if_none_match;
const void *ap_hack_ap_condition_if_modified_since = (const void *)ap_condition_if_modified_since;
const void *ap_hack_ap_condition_if_range = (const void *)ap_condition_if_range;
const void *ap_hack_ap_meets_conditions = (const void *)ap_meets_conditions;
const void *ap_hack_ap_send_fd = (const void *)ap_send_fd;
#if APR_HAS_MMAP
const void *ap_hack_ap_send_mmap = (const void *)ap_send_mmap;
#endif
const void *ap_hack_ap_method_register = (const void *)ap_method_register;
const void *ap_hack_ap_method_registry_init = (const void *)ap_method_registry_init;
const void *ap_hack_ap_make_method_list = (const void *)ap_make_method_list;
const void *ap_hack_ap_copy_method_list = (const void *)ap_copy_method_list;
const void *ap_hack_ap_method_in_list = (const void *)ap_method_in_list;
const void *ap_hack_ap_method_list_add = (const void *)ap_method_list_add;
const void *ap_hack_ap_method_list_remove = (const void *)ap_method_list_remove;
const void *ap_hack_ap_clear_method_list = (const void *)ap_clear_method_list;
const void *ap_hack_ap_set_content_type = (const void *)ap_set_content_type;
const void *ap_hack_ap_set_accept_ranges = (const void *)ap_set_accept_ranges;
const void *ap_hack_ap_rputc = (const void *)ap_rputc;
const void *ap_hack_ap_rwrite = (const void *)ap_rwrite;
const void *ap_hack_ap_rvputs = (const void *)ap_rvputs;
const void *ap_hack_ap_vrprintf = (const void *)ap_vrprintf;
const void *ap_hack_ap_rprintf = (const void *)ap_rprintf;
const void *ap_hack_ap_rflush = (const void *)ap_rflush;
const void *ap_hack_ap_index_of_response = (const void *)ap_index_of_response;
const void *ap_hack_ap_get_status_line = (const void *)ap_get_status_line;
const void *ap_hack_ap_setup_client_block = (const void *)ap_setup_client_block;
const void *ap_hack_ap_should_client_block = (const void *)ap_should_client_block;
const void *ap_hack_ap_get_client_block = (const void *)ap_get_client_block;
const void *ap_hack_ap_map_http_request_error = (const void *)ap_map_http_request_error;
const void *ap_hack_ap_discard_request_body = (const void *)ap_discard_request_body;
const void *ap_hack_ap_note_auth_failure = (const void *)ap_note_auth_failure;
const void *ap_hack_ap_note_basic_auth_failure = (const void *)ap_note_basic_auth_failure;
const void *ap_hack_ap_note_digest_auth_failure = (const void *)ap_note_digest_auth_failure;
const void *ap_hack_ap_hook_note_auth_failure = (const void *)ap_hook_note_auth_failure;
const void *ap_hack_ap_hook_get_note_auth_failure = (const void *)ap_hook_get_note_auth_failure;
const void *ap_hack_ap_run_note_auth_failure = (const void *)ap_run_note_auth_failure;
const void *ap_hack_ap_get_basic_auth_pw = (const void *)ap_get_basic_auth_pw;
const void *ap_hack_ap_get_basic_auth_components = (const void *)ap_get_basic_auth_components;
const void *ap_hack_ap_parse_uri = (const void *)ap_parse_uri;
const void *ap_hack_ap_getline = (const void *)ap_getline;
#if APR_CHARSET_EBCDIC
const void *ap_hack_ap_rgetline = (const void *)ap_rgetline;
#else /* ASCII box */
#endif
const void *ap_hack_ap_rgetline_core = (const void *)ap_rgetline_core;
const void *ap_hack_ap_method_number_of = (const void *)ap_method_number_of;
const void *ap_hack_ap_method_name_of = (const void *)ap_method_name_of;
const void *ap_hack_ap_hook_pre_read_request = (const void *)ap_hook_pre_read_request;
const void *ap_hack_ap_hook_get_pre_read_request = (const void *)ap_hook_get_pre_read_request;
const void *ap_hack_ap_run_pre_read_request = (const void *)ap_run_pre_read_request;
const void *ap_hack_ap_hook_post_read_request = (const void *)ap_hook_post_read_request;
const void *ap_hack_ap_hook_get_post_read_request = (const void *)ap_hook_get_post_read_request;
const void *ap_hack_ap_run_post_read_request = (const void *)ap_run_post_read_request;
const void *ap_hack_ap_hook_log_transaction = (const void *)ap_hook_log_transaction;
const void *ap_hack_ap_hook_get_log_transaction = (const void *)ap_hook_get_log_transaction;
const void *ap_hack_ap_run_log_transaction = (const void *)ap_run_log_transaction;
const void *ap_hack_ap_hook_http_scheme = (const void *)ap_hook_http_scheme;
const void *ap_hack_ap_hook_get_http_scheme = (const void *)ap_hook_get_http_scheme;
const void *ap_hack_ap_run_http_scheme = (const void *)ap_run_http_scheme;
const void *ap_hack_ap_hook_default_port = (const void *)ap_hook_default_port;
const void *ap_hack_ap_hook_get_default_port = (const void *)ap_hook_get_default_port;
const void *ap_hack_ap_run_default_port = (const void *)ap_run_default_port;
const void *ap_hack_ap_hook_protocol_propose = (const void *)ap_hook_protocol_propose;
const void *ap_hack_ap_hook_get_protocol_propose = (const void *)ap_hook_get_protocol_propose;
const void *ap_hack_ap_run_protocol_propose = (const void *)ap_run_protocol_propose;
const void *ap_hack_ap_hook_protocol_switch = (const void *)ap_hook_protocol_switch;
const void *ap_hack_ap_hook_get_protocol_switch = (const void *)ap_hook_get_protocol_switch;
const void *ap_hack_ap_run_protocol_switch = (const void *)ap_run_protocol_switch;
const void *ap_hack_ap_hook_protocol_get = (const void *)ap_hook_protocol_get;
const void *ap_hack_ap_hook_get_protocol_get = (const void *)ap_hook_get_protocol_get;
const void *ap_hack_ap_run_protocol_get = (const void *)ap_run_protocol_get;
const void *ap_hack_ap_get_protocol_upgrades = (const void *)ap_get_protocol_upgrades;
const void *ap_hack_ap_select_protocol = (const void *)ap_select_protocol;
const void *ap_hack_ap_switch_protocol = (const void *)ap_switch_protocol;
const void *ap_hack_ap_get_protocol = (const void *)ap_get_protocol;
const void *ap_hack_ap_is_allowed_protocol = (const void *)ap_is_allowed_protocol;
const void *ap_hack_ap_bucket_error_make = (const void *)ap_bucket_error_make;
const void *ap_hack_ap_bucket_error_create = (const void *)ap_bucket_error_create;
const void *ap_hack_ap_byterange_filter = (const void *)ap_byterange_filter;
const void *ap_hack_ap_http_header_filter = (const void *)ap_http_header_filter;
const void *ap_hack_ap_content_length_filter = (const void *)ap_content_length_filter;
const void *ap_hack_ap_old_write_filter = (const void *)ap_old_write_filter;
const void *ap_hack_ap_set_sub_req_protocol = (const void *)ap_set_sub_req_protocol;
const void *ap_hack_ap_finalize_sub_req_protocol = (const void *)ap_finalize_sub_req_protocol;
const void *ap_hack_ap_send_interim_response = (const void *)ap_send_interim_response;

/*
 * /home/jp/lind_project/test_cases/httpd/include/http_request.h
 */
const void *ap_hack_ap_process_request_internal = (const void *)ap_process_request_internal;
const void *ap_hack_ap_sub_req_lookup_uri = (const void *)ap_sub_req_lookup_uri;
const void *ap_hack_ap_sub_req_lookup_file = (const void *)ap_sub_req_lookup_file;
const void *ap_hack_ap_sub_req_lookup_dirent = (const void *)ap_sub_req_lookup_dirent;
const void *ap_hack_ap_sub_req_method_uri = (const void *)ap_sub_req_method_uri;
const void *ap_hack_ap_sub_req_output_filter = (const void *)ap_sub_req_output_filter;
const void *ap_hack_ap_run_sub_req = (const void *)ap_run_sub_req;
const void *ap_hack_ap_destroy_sub_req = (const void *)ap_destroy_sub_req;
const void *ap_hack_ap_internal_redirect = (const void *)ap_internal_redirect;
const void *ap_hack_ap_internal_redirect_handler = (const void *)ap_internal_redirect_handler;
const void *ap_hack_ap_internal_fast_redirect = (const void *)ap_internal_fast_redirect;
const void *ap_hack_ap_some_auth_required = (const void *)ap_some_auth_required;
const void *ap_hack_ap_clear_auth_internal = (const void *)ap_clear_auth_internal;
const void *ap_hack_ap_setup_auth_internal = (const void *)ap_setup_auth_internal;
const void *ap_hack_ap_register_auth_provider = (const void *)ap_register_auth_provider;
const void *ap_hack_ap_is_initial_req = (const void *)ap_is_initial_req;
const void *ap_hack_ap_update_mtime = (const void *)ap_update_mtime;
const void *ap_hack_ap_allow_methods = (const void *)ap_allow_methods;
const void *ap_hack_ap_allow_standard_methods = (const void *)ap_allow_standard_methods;
const void *ap_hack_ap_process_request = (const void *)ap_process_request;
const void *ap_hack_ap_process_request_after_handler = (const void *)ap_process_request_after_handler;
const void *ap_hack_ap_die = (const void *)ap_die;
const void *ap_hack_ap_check_pipeline = (const void *)ap_check_pipeline;
const void *ap_hack_ap_hook_create_request = (const void *)ap_hook_create_request;
const void *ap_hack_ap_hook_get_create_request = (const void *)ap_hook_get_create_request;
const void *ap_hack_ap_run_create_request = (const void *)ap_run_create_request;
const void *ap_hack_ap_hook_translate_name = (const void *)ap_hook_translate_name;
const void *ap_hack_ap_hook_get_translate_name = (const void *)ap_hook_get_translate_name;
const void *ap_hack_ap_run_translate_name = (const void *)ap_run_translate_name;
const void *ap_hack_ap_hook_map_to_storage = (const void *)ap_hook_map_to_storage;
const void *ap_hack_ap_hook_get_map_to_storage = (const void *)ap_hook_get_map_to_storage;
const void *ap_hack_ap_run_map_to_storage = (const void *)ap_run_map_to_storage;
const void *ap_hack_ap_hook_check_user_id = (const void *)ap_hook_check_user_id;
const void *ap_hack_ap_hook_get_check_user_id = (const void *)ap_hook_get_check_user_id;
const void *ap_hack_ap_run_check_user_id = (const void *)ap_run_check_user_id;
const void *ap_hack_ap_hook_fixups = (const void *)ap_hook_fixups;
const void *ap_hack_ap_hook_get_fixups = (const void *)ap_hook_get_fixups;
const void *ap_hack_ap_run_fixups = (const void *)ap_run_fixups;
const void *ap_hack_ap_hook_type_checker = (const void *)ap_hook_type_checker;
const void *ap_hack_ap_hook_get_type_checker = (const void *)ap_hook_get_type_checker;
const void *ap_hack_ap_run_type_checker = (const void *)ap_run_type_checker;
const void *ap_hack_ap_hook_access_checker = (const void *)ap_hook_access_checker;
const void *ap_hack_ap_hook_get_access_checker = (const void *)ap_hook_get_access_checker;
const void *ap_hack_ap_run_access_checker = (const void *)ap_run_access_checker;
const void *ap_hack_ap_hook_access_checker_ex = (const void *)ap_hook_access_checker_ex;
const void *ap_hack_ap_hook_get_access_checker_ex = (const void *)ap_hook_get_access_checker_ex;
const void *ap_hack_ap_run_access_checker_ex = (const void *)ap_run_access_checker_ex;
const void *ap_hack_ap_hook_auth_checker = (const void *)ap_hook_auth_checker;
const void *ap_hack_ap_hook_get_auth_checker = (const void *)ap_hook_get_auth_checker;
const void *ap_hack_ap_run_auth_checker = (const void *)ap_run_auth_checker;
const void *ap_hack_ap_hook_check_access = (const void *)ap_hook_check_access;
const void *ap_hack_ap_hook_check_access_ex = (const void *)ap_hook_check_access_ex;
const void *ap_hack_ap_hook_check_authn = (const void *)ap_hook_check_authn;
const void *ap_hack_ap_hook_check_authz = (const void *)ap_hook_check_authz;
const void *ap_hack_ap_hook_insert_filter = (const void *)ap_hook_insert_filter;
const void *ap_hack_ap_hook_get_insert_filter = (const void *)ap_hook_get_insert_filter;
const void *ap_hack_ap_run_insert_filter = (const void *)ap_run_insert_filter;
const void *ap_hack_ap_hook_post_perdir_config = (const void *)ap_hook_post_perdir_config;
const void *ap_hack_ap_hook_get_post_perdir_config = (const void *)ap_hook_get_post_perdir_config;
const void *ap_hack_ap_run_post_perdir_config = (const void *)ap_run_post_perdir_config;
const void *ap_hack_ap_hook_force_authn = (const void *)ap_hook_force_authn;
const void *ap_hack_ap_hook_get_force_authn = (const void *)ap_hook_get_force_authn;
const void *ap_hack_ap_run_force_authn = (const void *)ap_run_force_authn;
const void *ap_hack_ap_hook_dirwalk_stat = (const void *)ap_hook_dirwalk_stat;
const void *ap_hack_ap_hook_get_dirwalk_stat = (const void *)ap_hook_get_dirwalk_stat;
const void *ap_hack_ap_run_dirwalk_stat = (const void *)ap_run_dirwalk_stat;
const void *ap_hack_ap_location_walk = (const void *)ap_location_walk;
const void *ap_hack_ap_directory_walk = (const void *)ap_directory_walk;
const void *ap_hack_ap_file_walk = (const void *)ap_file_walk;
const void *ap_hack_ap_if_walk = (const void *)ap_if_walk;
const void *ap_hack_ap_bucket_eor_make = (const void *)ap_bucket_eor_make;
const void *ap_hack_ap_bucket_eor_create = (const void *)ap_bucket_eor_create;
const void *ap_hack_ap_some_authn_required = (const void *)ap_some_authn_required;

/*
 * /home/jp/lind_project/test_cases/httpd/include/http_vhost.h
 */
const void *ap_hack_ap_init_vhost_config = (const void *)ap_init_vhost_config;
const void *ap_hack_ap_fini_vhost_config = (const void *)ap_fini_vhost_config;
const void *ap_hack_ap_set_name_virtual_host = (const void *)ap_set_name_virtual_host;
const void *ap_hack_ap_vhost_iterate_given_conn = (const void *)ap_vhost_iterate_given_conn;
const void *ap_hack_ap_update_vhost_given_ip = (const void *)ap_update_vhost_given_ip;
const void *ap_hack_ap_update_vhost_from_headers = (const void *)ap_update_vhost_from_headers;
const void *ap_hack_ap_matches_request_vhost = (const void *)ap_matches_request_vhost;

/*
 * /home/jp/lind_project/test_cases/httpd/include/httpd.h
 */
const void *ap_hack_ap_get_server_revision = (const void *)ap_get_server_revision;
const void *ap_hack_ap_get_server_banner = (const void *)ap_get_server_banner;
const void *ap_hack_ap_get_server_description = (const void *)ap_get_server_description;
const void *ap_hack_ap_add_version_component = (const void *)ap_add_version_component;
const void *ap_hack_ap_get_server_built = (const void *)ap_get_server_built;
const void *ap_hack_ap_context_document_root = (const void *)ap_context_document_root;
const void *ap_hack_ap_context_prefix = (const void *)ap_context_prefix;
const void *ap_hack_ap_set_context_info = (const void *)ap_set_context_info;
const void *ap_hack_ap_set_document_root = (const void *)ap_set_document_root;
const void *ap_hack_ap_field_noparam = (const void *)ap_field_noparam;
const void *ap_hack_ap_ht_time = (const void *)ap_ht_time;
const void *ap_hack_ap_getword = (const void *)ap_getword;
const void *ap_hack_ap_getword_nc = (const void *)ap_getword_nc;
const void *ap_hack_ap_getword_white = (const void *)ap_getword_white;
const void *ap_hack_ap_getword_white_nc = (const void *)ap_getword_white_nc;
const void *ap_hack_ap_getword_nulls = (const void *)ap_getword_nulls;
const void *ap_hack_ap_getword_nulls_nc = (const void *)ap_getword_nulls_nc;
const void *ap_hack_ap_getword_conf = (const void *)ap_getword_conf;
const void *ap_hack_ap_getword_conf_nc = (const void *)ap_getword_conf_nc;
const void *ap_hack_ap_getword_conf2 = (const void *)ap_getword_conf2;
const void *ap_hack_ap_getword_conf2_nc = (const void *)ap_getword_conf2_nc;
const void *ap_hack_ap_resolve_env = (const void *)ap_resolve_env;
const void *ap_hack_ap_size_list_item = (const void *)ap_size_list_item;
const void *ap_hack_ap_get_list_item = (const void *)ap_get_list_item;
const void *ap_hack_ap_find_list_item = (const void *)ap_find_list_item;
const void *ap_hack_ap_find_etag_weak = (const void *)ap_find_etag_weak;
const void *ap_hack_ap_find_etag_strong = (const void *)ap_find_etag_strong;
const void *ap_hack_ap_scan_http_field_content = (const void *)ap_scan_http_field_content;
const void *ap_hack_ap_scan_http_token = (const void *)ap_scan_http_token;
const void *ap_hack_ap_scan_vchar_obstext = (const void *)ap_scan_vchar_obstext;
const void *ap_hack_ap_parse_token_list_strict = (const void *)ap_parse_token_list_strict;
const void *ap_hack_ap_get_token = (const void *)ap_get_token;
const void *ap_hack_ap_find_token = (const void *)ap_find_token;
const void *ap_hack_ap_find_last_token = (const void *)ap_find_last_token;
const void *ap_hack_ap_is_url = (const void *)ap_is_url;
const void *ap_hack_ap_unescape_all = (const void *)ap_unescape_all;
const void *ap_hack_ap_unescape_url = (const void *)ap_unescape_url;
const void *ap_hack_ap_unescape_url_keep2f = (const void *)ap_unescape_url_keep2f;
const void *ap_hack_ap_unescape_urlencoded = (const void *)ap_unescape_urlencoded;
const void *ap_hack_ap_no2slash = (const void *)ap_no2slash;
const void *ap_hack_ap_getparents = (const void *)ap_getparents;
const void *ap_hack_ap_escape_path_segment = (const void *)ap_escape_path_segment;
const void *ap_hack_ap_escape_path_segment_buffer = (const void *)ap_escape_path_segment_buffer;
const void *ap_hack_ap_os_escape_path = (const void *)ap_os_escape_path;
const void *ap_hack_ap_escape_urlencoded = (const void *)ap_escape_urlencoded;
const void *ap_hack_ap_escape_urlencoded_buffer = (const void *)ap_escape_urlencoded_buffer;
const void *ap_hack_ap_escape_html2 = (const void *)ap_escape_html2;
const void *ap_hack_ap_escape_logitem = (const void *)ap_escape_logitem;
const void *ap_hack_ap_escape_errorlog_item = (const void *)ap_escape_errorlog_item;
const void *ap_hack_ap_construct_server = (const void *)ap_construct_server;
const void *ap_hack_ap_escape_shell_cmd = (const void *)ap_escape_shell_cmd;
const void *ap_hack_ap_count_dirs = (const void *)ap_count_dirs;
const void *ap_hack_ap_make_dirstr_prefix = (const void *)ap_make_dirstr_prefix;
const void *ap_hack_ap_make_dirstr_parent = (const void *)ap_make_dirstr_parent;
const void *ap_hack_ap_make_full_path = (const void *)ap_make_full_path;
const void *ap_hack_ap_os_is_path_absolute = (const void *)ap_os_is_path_absolute;
const void *ap_hack_ap_is_matchexp = (const void *)ap_is_matchexp;
const void *ap_hack_ap_strcmp_match = (const void *)ap_strcmp_match;
const void *ap_hack_ap_strcasecmp_match = (const void *)ap_strcasecmp_match;
const void *ap_hack_ap_strcasestr = (const void *)ap_strcasestr;
const void *ap_hack_ap_stripprefix = (const void *)ap_stripprefix;
const void *ap_hack_ap_pbase64decode = (const void *)ap_pbase64decode;
const void *ap_hack_ap_pbase64encode = (const void *)ap_pbase64encode;
const void *ap_hack_ap_pregcomp = (const void *)ap_pregcomp;
const void *ap_hack_ap_pregfree = (const void *)ap_pregfree;
const void *ap_hack_ap_pregsub = (const void *)ap_pregsub;
const void *ap_hack_ap_pregsub_ex = (const void *)ap_pregsub_ex;
const void *ap_hack_ap_content_type_tolower = (const void *)ap_content_type_tolower;
const void *ap_hack_ap_str_tolower = (const void *)ap_str_tolower;
const void *ap_hack_ap_str_toupper = (const void *)ap_str_toupper;
const void *ap_hack_ap_ind = (const void *)ap_ind;
const void *ap_hack_ap_rind = (const void *)ap_rind;
const void *ap_hack_ap_escape_quotes = (const void *)ap_escape_quotes;
const void *ap_hack_ap_append_pid = (const void *)ap_append_pid;
const void *ap_hack_ap_timeout_parameter_parse = (const void *)ap_timeout_parameter_parse;
const void *ap_hack_ap_request_has_body = (const void *)ap_request_has_body;
const void *ap_hack_ap_pstr2_alnum = (const void *)ap_pstr2_alnum;
const void *ap_hack_ap_str2_alnum = (const void *)ap_str2_alnum;
const void *ap_hack_ap_parse_form_data = (const void *)ap_parse_form_data;
const void *ap_hack_ap_is_rdirectory = (const void *)ap_is_rdirectory;
const void *ap_hack_ap_is_directory = (const void *)ap_is_directory;
const void *ap_hack_ap_log_assert = (const void *)ap_log_assert;
const void *ap_hack_ap_psignature = (const void *)ap_psignature;
const void *ap_hack_ap_strchr = (const void *)ap_strchr;
const void *ap_hack_ap_strchr_c = (const void *)ap_strchr_c;
const void *ap_hack_ap_strrchr = (const void *)ap_strrchr;
const void *ap_hack_ap_strrchr_c = (const void *)ap_strrchr_c;
const void *ap_hack_ap_strstr = (const void *)ap_strstr;
const void *ap_hack_ap_strstr_c = (const void *)ap_strstr_c;
const void *ap_hack_ap_random_insecure_bytes = (const void *)ap_random_insecure_bytes;
const void *ap_hack_ap_random_pick = (const void *)ap_random_pick;
const void *ap_hack_ap_abort_on_oom = (const void *)ap_abort_on_oom;
const void *ap_hack_ap_malloc = (const void *)ap_malloc;
const void *ap_hack_ap_calloc = (const void *)ap_calloc;
const void *ap_hack_ap_realloc = (const void *)ap_realloc;
const void *ap_hack_ap_get_sload = (const void *)ap_get_sload;
const void *ap_hack_ap_get_loadavg = (const void *)ap_get_loadavg;
const void *ap_hack_ap_bin2hex = (const void *)ap_bin2hex;
const void *ap_hack_ap_get_exec_line = (const void *)ap_get_exec_line;
const void *ap_hack_ap_array_str_index = (const void *)ap_array_str_index;
const void *ap_hack_ap_array_str_contains = (const void *)ap_array_str_contains;
const void *ap_hack_ap_cstr_casecmp = (const void *)ap_cstr_casecmp;
const void *ap_hack_ap_cstr_casecmpn = (const void *)ap_cstr_casecmpn;

/*
 * /home/jp/lind_project/test_cases/httpd/include/mod_core.h
 */
const void *ap_hack_ap_basic_http_header = (const void *)ap_basic_http_header;
const void *ap_hack_ap_send_http_trace = (const void *)ap_send_http_trace;
const void *ap_hack_ap_send_http_options = (const void *)ap_send_http_options;
const void *ap_hack_ap_init_rng = (const void *)ap_init_rng;
const void *ap_hack_ap_random_parent_after_fork = (const void *)ap_random_parent_after_fork;

/*
 * /home/jp/lind_project/test_cases/httpd/include/mpm_common.h
 */
#if (!defined(WIN32) && !defined(NETWARE)) || defined(DOXYGEN)
const void *ap_hack_ap_reclaim_child_processes = (const void *)ap_reclaim_child_processes;
const void *ap_hack_ap_relieve_child_processes = (const void *)ap_relieve_child_processes;
const void *ap_hack_ap_register_extra_mpm_process = (const void *)ap_register_extra_mpm_process;
const void *ap_hack_ap_unregister_extra_mpm_process = (const void *)ap_unregister_extra_mpm_process;
const void *ap_hack_ap_mpm_safe_kill = (const void *)ap_mpm_safe_kill;
const void *ap_hack_ap_process_child_status = (const void *)ap_process_child_status;
const void *ap_hack_ap_fatal_signal_setup = (const void *)ap_fatal_signal_setup;
const void *ap_hack_ap_fatal_signal_child_setup = (const void *)ap_fatal_signal_child_setup;
#endif /* (!WIN32 && !NETWARE) || DOXYGEN */
const void *ap_hack_ap_wait_or_timeout = (const void *)ap_wait_or_timeout;
#ifdef HAVE_GETPWNAM
const void *ap_hack_ap_uname2id = (const void *)ap_uname2id;
#endif
#ifdef HAVE_GETGRNAM
const void *ap_hack_ap_gname2id = (const void *)ap_gname2id;
#endif
#if (!defined(WIN32) && !defined(NETWARE)) || defined(DOXYGEN)
const void *ap_hack_ap_mpm_pod_open = (const void *)ap_mpm_pod_open;
const void *ap_hack_ap_mpm_pod_check = (const void *)ap_mpm_pod_check;
const void *ap_hack_ap_mpm_pod_close = (const void *)ap_mpm_pod_close;
const void *ap_hack_ap_mpm_pod_signal = (const void *)ap_mpm_pod_signal;
const void *ap_hack_ap_mpm_pod_killpg = (const void *)ap_mpm_pod_killpg;
const void *ap_hack_ap_mpm_podx_open = (const void *)ap_mpm_podx_open;
const void *ap_hack_ap_mpm_podx_check = (const void *)ap_mpm_podx_check;
const void *ap_hack_ap_mpm_podx_close = (const void *)ap_mpm_podx_close;
const void *ap_hack_ap_mpm_podx_signal = (const void *)ap_mpm_podx_signal;
const void *ap_hack_ap_mpm_podx_killpg = (const void *)ap_mpm_podx_killpg;
#endif /* (!WIN32 && !NETWARE) || DOXYGEN */
const void *ap_hack_ap_check_mpm = (const void *)ap_check_mpm;
const void *ap_hack_ap_mpm_set_graceful_shutdown = (const void *)ap_mpm_set_graceful_shutdown;
const void *ap_hack_ap_hook_monitor = (const void *)ap_hook_monitor;
const void *ap_hack_ap_hook_get_monitor = (const void *)ap_hook_get_monitor;
const void *ap_hack_ap_run_monitor = (const void *)ap_run_monitor;
const void *ap_hack_ap_sys_privileges_handlers = (const void *)ap_sys_privileges_handlers;
const void *ap_hack_ap_hook_drop_privileges = (const void *)ap_hook_drop_privileges;
const void *ap_hack_ap_hook_get_drop_privileges = (const void *)ap_hook_get_drop_privileges;
const void *ap_hack_ap_run_drop_privileges = (const void *)ap_run_drop_privileges;
const void *ap_hack_ap_hook_mpm_query = (const void *)ap_hook_mpm_query;
const void *ap_hack_ap_hook_get_mpm_query = (const void *)ap_hook_get_mpm_query;
const void *ap_hack_ap_run_mpm_query = (const void *)ap_run_mpm_query;
const void *ap_hack_ap_hook_mpm_register_timed_callback = (const void *)ap_hook_mpm_register_timed_callback;
const void *ap_hack_ap_hook_get_mpm_register_timed_callback = (const void *)ap_hook_get_mpm_register_timed_callback;
const void *ap_hack_ap_run_mpm_register_timed_callback = (const void *)ap_run_mpm_register_timed_callback;
const void *ap_hack_ap_hook_mpm_get_name = (const void *)ap_hook_mpm_get_name;
const void *ap_hack_ap_hook_get_mpm_get_name = (const void *)ap_hook_get_mpm_get_name;
const void *ap_hack_ap_run_mpm_get_name = (const void *)ap_run_mpm_get_name;
const void *ap_hack_ap_hook_suspend_connection = (const void *)ap_hook_suspend_connection;
const void *ap_hack_ap_hook_get_suspend_connection = (const void *)ap_hook_get_suspend_connection;
const void *ap_hack_ap_run_suspend_connection = (const void *)ap_run_suspend_connection;
const void *ap_hack_ap_hook_resume_connection = (const void *)ap_hook_resume_connection;
const void *ap_hack_ap_hook_get_resume_connection = (const void *)ap_hook_get_resume_connection;
const void *ap_hack_ap_run_resume_connection = (const void *)ap_run_resume_connection;

/*
 * /home/jp/lind_project/test_cases/httpd/include/scoreboard.h
 */
const void *ap_hack_ap_exists_scoreboard_image = (const void *)ap_exists_scoreboard_image;
const void *ap_hack_ap_increment_counts = (const void *)ap_increment_counts;
const void *ap_hack_ap_reopen_scoreboard = (const void *)ap_reopen_scoreboard;
const void *ap_hack_ap_init_scoreboard = (const void *)ap_init_scoreboard;
const void *ap_hack_ap_calc_scoreboard_size = (const void *)ap_calc_scoreboard_size;
const void *ap_hack_ap_create_sb_handle = (const void *)ap_create_sb_handle;
const void *ap_hack_ap_update_sb_handle = (const void *)ap_update_sb_handle;
const void *ap_hack_ap_find_child_by_pid = (const void *)ap_find_child_by_pid;
const void *ap_hack_ap_update_child_status = (const void *)ap_update_child_status;
const void *ap_hack_ap_update_child_status_from_indexes = (const void *)ap_update_child_status_from_indexes;
const void *ap_hack_ap_update_child_status_from_conn = (const void *)ap_update_child_status_from_conn;
const void *ap_hack_ap_update_child_status_from_server = (const void *)ap_update_child_status_from_server;
const void *ap_hack_ap_update_child_status_descr = (const void *)ap_update_child_status_descr;
const void *ap_hack_ap_time_process_request = (const void *)ap_time_process_request;
const void *ap_hack_ap_update_global_status = (const void *)ap_update_global_status;
const void *ap_hack_ap_get_scoreboard_worker = (const void *)ap_get_scoreboard_worker;
const void *ap_hack_ap_get_scoreboard_worker_from_indexes = (const void *)ap_get_scoreboard_worker_from_indexes;
const void *ap_hack_ap_copy_scoreboard_worker = (const void *)ap_copy_scoreboard_worker;
const void *ap_hack_ap_get_scoreboard_process = (const void *)ap_get_scoreboard_process;
const void *ap_hack_ap_get_scoreboard_global = (const void *)ap_get_scoreboard_global;
const void *ap_hack_ap_hook_pre_mpm = (const void *)ap_hook_pre_mpm;
const void *ap_hack_ap_hook_get_pre_mpm = (const void *)ap_hook_get_pre_mpm;
const void *ap_hack_ap_run_pre_mpm = (const void *)ap_run_pre_mpm;

/*
 * /home/jp/lind_project/test_cases/httpd/include/util_cookies.h
 */
const void *ap_hack_ap_cookie_write = (const void *)ap_cookie_write;
const void *ap_hack_ap_cookie_write2 = (const void *)ap_cookie_write2;
const void *ap_hack_ap_cookie_remove = (const void *)ap_cookie_remove;
const void *ap_hack_ap_cookie_remove2 = (const void *)ap_cookie_remove2;
const void *ap_hack_ap_cookie_read = (const void *)ap_cookie_read;
const void *ap_hack_ap_cookie_check_string = (const void *)ap_cookie_check_string;

/*
 * /home/jp/lind_project/test_cases/httpd/include/util_fcgi.h
 */
const void *ap_hack_ap_fcgi_header_to_array = (const void *)ap_fcgi_header_to_array;
const void *ap_hack_ap_fcgi_header_from_array = (const void *)ap_fcgi_header_from_array;
const void *ap_hack_ap_fcgi_header_fields_from_array = (const void *)ap_fcgi_header_fields_from_array;
const void *ap_hack_ap_fcgi_begin_request_body_to_array = (const void *)ap_fcgi_begin_request_body_to_array;
const void *ap_hack_ap_fcgi_fill_in_header = (const void *)ap_fcgi_fill_in_header;
const void *ap_hack_ap_fcgi_fill_in_request_body = (const void *)ap_fcgi_fill_in_request_body;
const void *ap_hack_ap_fcgi_encoded_env_len = (const void *)ap_fcgi_encoded_env_len;
const void *ap_hack_ap_fcgi_encode_env = (const void *)ap_fcgi_encode_env;

/*
 * /home/jp/lind_project/test_cases/httpd/include/util_filter.h
 */
const void *ap_hack_ap_get_brigade = (const void *)ap_get_brigade;
const void *ap_hack_ap_pass_brigade = (const void *)ap_pass_brigade;
const void *ap_hack_ap_pass_brigade_fchk = (const void *)ap_pass_brigade_fchk;
const void *ap_hack_ap_register_input_filter = (const void *)ap_register_input_filter;
const void *ap_hack_ap_register_output_filter = (const void *)ap_register_output_filter;
const void *ap_hack_ap_register_output_filter_protocol = (const void *)ap_register_output_filter_protocol;
const void *ap_hack_ap_add_input_filter = (const void *)ap_add_input_filter;
const void *ap_hack_ap_add_input_filter_handle = (const void *)ap_add_input_filter_handle;
const void *ap_hack_ap_get_input_filter_handle = (const void *)ap_get_input_filter_handle;
const void *ap_hack_ap_add_output_filter = (const void *)ap_add_output_filter;
const void *ap_hack_ap_add_output_filter_handle = (const void *)ap_add_output_filter_handle;
const void *ap_hack_ap_get_output_filter_handle = (const void *)ap_get_output_filter_handle;
const void *ap_hack_ap_remove_input_filter = (const void *)ap_remove_input_filter;
const void *ap_hack_ap_remove_output_filter = (const void *)ap_remove_output_filter;
const void *ap_hack_ap_remove_input_filter_byhandle = (const void *)ap_remove_input_filter_byhandle;
const void *ap_hack_ap_remove_output_filter_byhandle = (const void *)ap_remove_output_filter_byhandle;
const void *ap_hack_ap_save_brigade = (const void *)ap_save_brigade;
const void *ap_hack_ap_filter_flush = (const void *)ap_filter_flush;
const void *ap_hack_ap_fflush = (const void *)ap_fflush;
const void *ap_hack_ap_fputstrs = (const void *)ap_fputstrs;
const void *ap_hack_ap_fprintf = (const void *)ap_fprintf;
const void *ap_hack_ap_filter_protocol = (const void *)ap_filter_protocol;

/*
 * /home/jp/lind_project/test_cases/httpd/include/util_md5.h
 */
const void *ap_hack_ap_md5 = (const void *)ap_md5;
const void *ap_hack_ap_md5_binary = (const void *)ap_md5_binary;
const void *ap_hack_ap_md5contextTo64 = (const void *)ap_md5contextTo64;
const void *ap_hack_ap_md5digest = (const void *)ap_md5digest;

/*
 * /home/jp/lind_project/test_cases/httpd/include/util_mutex.h
 */
const void *ap_hack_ap_parse_mutex = (const void *)ap_parse_mutex;
const void *ap_hack_ap_set_mutex = (const void *)ap_set_mutex;
const void *ap_hack_ap_mutex_init = (const void *)ap_mutex_init;
const void *ap_hack_ap_mutex_register = (const void *)ap_mutex_register;
const void *ap_hack_ap_global_mutex_create = (const void *)ap_global_mutex_create;
const void *ap_hack_ap_proc_mutex_create = (const void *)ap_proc_mutex_create;
const void *ap_hack_ap_dump_mutexes = (const void *)ap_dump_mutexes;

/*
 * /home/jp/lind_project/test_cases/httpd/include/util_script.h
 */
const void *ap_hack_ap_create_environment = (const void *)ap_create_environment;
const void *ap_hack_ap_find_path_info = (const void *)ap_find_path_info;
const void *ap_hack_ap_add_cgi_vars = (const void *)ap_add_cgi_vars;
const void *ap_hack_ap_add_common_vars = (const void *)ap_add_common_vars;
const void *ap_hack_ap_scan_script_header_err = (const void *)ap_scan_script_header_err;
const void *ap_hack_ap_scan_script_header_err_ex = (const void *)ap_scan_script_header_err_ex;
const void *ap_hack_ap_scan_script_header_err_brigade = (const void *)ap_scan_script_header_err_brigade;
const void *ap_hack_ap_scan_script_header_err_brigade_ex = (const void *)ap_scan_script_header_err_brigade_ex;
const void *ap_hack_ap_scan_script_header_err_strs = (const void *)ap_scan_script_header_err_strs;
const void *ap_hack_ap_scan_script_header_err_strs_ex = (const void *)ap_scan_script_header_err_strs_ex;
const void *ap_hack_ap_scan_script_header_err_core = (const void *)ap_scan_script_header_err_core;
const void *ap_hack_ap_scan_script_header_err_core_ex = (const void *)ap_scan_script_header_err_core_ex;
const void *ap_hack_ap_args_to_table = (const void *)ap_args_to_table;

/*
 * /home/jp/lind_project/test_cases/httpd/include/util_time.h
 */
const void *ap_hack_ap_explode_recent_localtime = (const void *)ap_explode_recent_localtime;
const void *ap_hack_ap_explode_recent_gmt = (const void *)ap_explode_recent_gmt;
const void *ap_hack_ap_recent_ctime = (const void *)ap_recent_ctime;
const void *ap_hack_ap_recent_ctime_ex = (const void *)ap_recent_ctime_ex;
const void *ap_hack_ap_recent_rfc822_date = (const void *)ap_recent_rfc822_date;

/*
 * /home/jp/lind_project/test_cases/httpd/include/util_varbuf.h
 */
const void *ap_hack_ap_varbuf_init = (const void *)ap_varbuf_init;
const void *ap_hack_ap_varbuf_grow = (const void *)ap_varbuf_grow;
const void *ap_hack_ap_varbuf_free = (const void *)ap_varbuf_free;
const void *ap_hack_ap_varbuf_strmemcat = (const void *)ap_varbuf_strmemcat;
const void *ap_hack_ap_varbuf_pdup = (const void *)ap_varbuf_pdup;
const void *ap_hack_ap_varbuf_regsub = (const void *)ap_varbuf_regsub;
const void *ap_hack_ap_varbuf_cfg_getline = (const void *)ap_varbuf_cfg_getline;

/*
 * /home/jp/lind_project/test_cases/httpd/include/util_xml.h
 */
const void *ap_hack_ap_xml_parse_input = (const void *)ap_xml_parse_input;

/*
 * /home/jp/lind_project/test_cases/httpd/os/unix/unixd.h
 */
const void *ap_hack_ap_hook_get_suexec_identity = (const void *)ap_hook_get_suexec_identity;
const void *ap_hack_ap_hook_get_get_suexec_identity = (const void *)ap_hook_get_get_suexec_identity;
const void *ap_hack_ap_run_get_suexec_identity = (const void *)ap_run_get_suexec_identity;
#if defined(RLIMIT_CPU) || defined(RLIMIT_DATA) || defined(RLIMIT_VMEM) || defined(RLIMIT_NPROC) || defined(RLIMIT_AS)
const void *ap_hack_ap_unixd_set_rlimit = (const void *)ap_unixd_set_rlimit;
#endif
const void *ap_hack_ap_unixd_set_proc_mutex_perms = (const void *)ap_unixd_set_proc_mutex_perms;
const void *ap_hack_ap_unixd_set_global_mutex_perms = (const void *)ap_unixd_set_global_mutex_perms;
const void *ap_hack_ap_unixd_accept = (const void *)ap_unixd_accept;
const void *ap_hack_ap_unixd_mpm_get_retained_data = (const void *)ap_unixd_mpm_get_retained_data;
const void *ap_hack_ap_unixd_mpm_set_signals = (const void *)ap_unixd_mpm_set_signals;

/*
 * /home/jp/lind_project/test_cases/httpd/server/mpm_fdqueue.h
 */
#if APR_HAS_THREADS
const void *ap_hack_ap_queue_info_create = (const void *)ap_queue_info_create;
const void *ap_hack_ap_queue_info_set_idle = (const void *)ap_queue_info_set_idle;
const void *ap_hack_ap_queue_info_try_get_idler = (const void *)ap_queue_info_try_get_idler;
const void *ap_hack_ap_queue_info_wait_for_idler = (const void *)ap_queue_info_wait_for_idler;
const void *ap_hack_ap_queue_info_num_idlers = (const void *)ap_queue_info_num_idlers;
const void *ap_hack_ap_queue_info_term = (const void *)ap_queue_info_term;
const void *ap_hack_ap_queue_info_pop_pool = (const void *)ap_queue_info_pop_pool;
const void *ap_hack_ap_queue_info_push_pool = (const void *)ap_queue_info_push_pool;
const void *ap_hack_ap_queue_info_free_idle_pools = (const void *)ap_queue_info_free_idle_pools;
const void *ap_hack_ap_queue_create = (const void *)ap_queue_create;
const void *ap_hack_ap_queue_push_socket = (const void *)ap_queue_push_socket;
const void *ap_hack_ap_queue_push_timer = (const void *)ap_queue_push_timer;
const void *ap_hack_ap_queue_pop_something = (const void *)ap_queue_pop_something;
const void *ap_hack_ap_queue_interrupt_all = (const void *)ap_queue_interrupt_all;
const void *ap_hack_ap_queue_interrupt_one = (const void *)ap_queue_interrupt_one;
const void *ap_hack_ap_queue_term = (const void *)ap_queue_term;
#endif /* APR_HAS_THREADS */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_allocator.h
 */
const void *ap_hack_apr_allocator_create = (const void *)apr_allocator_create;
const void *ap_hack_apr_allocator_destroy = (const void *)apr_allocator_destroy;
const void *ap_hack_apr_allocator_alloc = (const void *)apr_allocator_alloc;
const void *ap_hack_apr_allocator_free = (const void *)apr_allocator_free;
const void *ap_hack_apr_allocator_align = (const void *)apr_allocator_align;
const void *ap_hack_apr_allocator_owner_set = (const void *)apr_allocator_owner_set;
const void *ap_hack_apr_allocator_owner_get = (const void *)apr_allocator_owner_get;
const void *ap_hack_apr_allocator_max_free_set = (const void *)apr_allocator_max_free_set;
#if APR_HAS_THREADS
const void *ap_hack_apr_allocator_mutex_set = (const void *)apr_allocator_mutex_set;
const void *ap_hack_apr_allocator_mutex_get = (const void *)apr_allocator_mutex_get;
#endif /* APR_HAS_THREADS */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_atomic.h
 */
const void *ap_hack_apr_atomic_init = (const void *)apr_atomic_init;
const void *ap_hack_apr_atomic_read32 = (const void *)apr_atomic_read32;
const void *ap_hack_apr_atomic_set32 = (const void *)apr_atomic_set32;
const void *ap_hack_apr_atomic_add32 = (const void *)apr_atomic_add32;
const void *ap_hack_apr_atomic_sub32 = (const void *)apr_atomic_sub32;
const void *ap_hack_apr_atomic_inc32 = (const void *)apr_atomic_inc32;
const void *ap_hack_apr_atomic_dec32 = (const void *)apr_atomic_dec32;
const void *ap_hack_apr_atomic_cas32 = (const void *)apr_atomic_cas32;
const void *ap_hack_apr_atomic_xchg32 = (const void *)apr_atomic_xchg32;
const void *ap_hack_apr_atomic_casptr = (const void *)apr_atomic_casptr;
const void *ap_hack_apr_atomic_xchgptr = (const void *)apr_atomic_xchgptr;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_cstr.h
 */
const void *ap_hack_apr_cstr_split = (const void *)apr_cstr_split;
const void *ap_hack_apr_cstr_split_append = (const void *)apr_cstr_split_append;
const void *ap_hack_apr_cstr_match_glob_list = (const void *)apr_cstr_match_glob_list;
const void *ap_hack_apr_cstr_match_list = (const void *)apr_cstr_match_list;
const void *ap_hack_apr_cstr_tokenize = (const void *)apr_cstr_tokenize;
const void *ap_hack_apr_cstr_count_newlines = (const void *)apr_cstr_count_newlines;
#if 0 /* XXX: stringbuf logic is not present in APR */
const void *ap_hack_apr_cstr_join = (const void *)apr_cstr_join;
#endif
const void *ap_hack_apr_cstr_casecmp = (const void *)apr_cstr_casecmp;
const void *ap_hack_apr_cstr_casecmpn = (const void *)apr_cstr_casecmpn;
const void *ap_hack_apr_cstr_strtoi64 = (const void *)apr_cstr_strtoi64;
const void *ap_hack_apr_cstr_atoi64 = (const void *)apr_cstr_atoi64;
const void *ap_hack_apr_cstr_atoi = (const void *)apr_cstr_atoi;
const void *ap_hack_apr_cstr_strtoui64 = (const void *)apr_cstr_strtoui64;
const void *ap_hack_apr_cstr_atoui64 = (const void *)apr_cstr_atoui64;
const void *ap_hack_apr_cstr_atoui = (const void *)apr_cstr_atoui;
const void *ap_hack_apr_cstr_skip_prefix = (const void *)apr_cstr_skip_prefix;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_dso.h
 */
#if APR_HAS_DSO || defined(DOXYGEN)
const void *ap_hack_apr_dso_load = (const void *)apr_dso_load;
const void *ap_hack_apr_dso_unload = (const void *)apr_dso_unload;
const void *ap_hack_apr_dso_sym = (const void *)apr_dso_sym;
const void *ap_hack_apr_dso_error = (const void *)apr_dso_error;
#endif /* APR_HAS_DSO */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_env.h
 */
const void *ap_hack_apr_env_get = (const void *)apr_env_get;
const void *ap_hack_apr_env_set = (const void *)apr_env_set;
const void *ap_hack_apr_env_delete = (const void *)apr_env_delete;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_errno.h
 */
const void *ap_hack_apr_strerror = (const void *)apr_strerror;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_escape.h
 */
const void *ap_hack_apr_escape_shell = (const void *)apr_escape_shell;
const void *ap_hack_apr_pescape_shell = (const void *)apr_pescape_shell;
const void *ap_hack_apr_unescape_url = (const void *)apr_unescape_url;
const void *ap_hack_apr_punescape_url = (const void *)apr_punescape_url;
const void *ap_hack_apr_escape_path_segment = (const void *)apr_escape_path_segment;
const void *ap_hack_apr_pescape_path_segment = (const void *)apr_pescape_path_segment;
const void *ap_hack_apr_escape_path = (const void *)apr_escape_path;
const void *ap_hack_apr_pescape_path = (const void *)apr_pescape_path;
const void *ap_hack_apr_escape_urlencoded = (const void *)apr_escape_urlencoded;
const void *ap_hack_apr_pescape_urlencoded = (const void *)apr_pescape_urlencoded;
const void *ap_hack_apr_escape_entity = (const void *)apr_escape_entity;
const void *ap_hack_apr_pescape_entity = (const void *)apr_pescape_entity;
const void *ap_hack_apr_unescape_entity = (const void *)apr_unescape_entity;
const void *ap_hack_apr_punescape_entity = (const void *)apr_punescape_entity;
const void *ap_hack_apr_escape_echo = (const void *)apr_escape_echo;
const void *ap_hack_apr_pescape_echo = (const void *)apr_pescape_echo;
const void *ap_hack_apr_escape_hex = (const void *)apr_escape_hex;
const void *ap_hack_apr_pescape_hex = (const void *)apr_pescape_hex;
const void *ap_hack_apr_unescape_hex = (const void *)apr_unescape_hex;
const void *ap_hack_apr_punescape_hex = (const void *)apr_punescape_hex;
const void *ap_hack_apr_escape_ldap = (const void *)apr_escape_ldap;
const void *ap_hack_apr_pescape_ldap = (const void *)apr_pescape_ldap;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_file_info.h
 */
const void *ap_hack_apr_stat = (const void *)apr_stat;
const void *ap_hack_apr_dir_open = (const void *)apr_dir_open;
const void *ap_hack_apr_dir_close = (const void *)apr_dir_close;
const void *ap_hack_apr_dir_read = (const void *)apr_dir_read;
const void *ap_hack_apr_dir_rewind = (const void *)apr_dir_rewind;
const void *ap_hack_apr_filepath_root = (const void *)apr_filepath_root;
const void *ap_hack_apr_filepath_merge = (const void *)apr_filepath_merge;
const void *ap_hack_apr_filepath_list_split = (const void *)apr_filepath_list_split;
const void *ap_hack_apr_filepath_list_merge = (const void *)apr_filepath_list_merge;
const void *ap_hack_apr_filepath_get = (const void *)apr_filepath_get;
const void *ap_hack_apr_filepath_set = (const void *)apr_filepath_set;
const void *ap_hack_apr_filepath_encoding = (const void *)apr_filepath_encoding;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_file_io.h
 */
const void *ap_hack_apr_file_open = (const void *)apr_file_open;
const void *ap_hack_apr_file_close = (const void *)apr_file_close;
const void *ap_hack_apr_file_remove = (const void *)apr_file_remove;
const void *ap_hack_apr_file_rename = (const void *)apr_file_rename;
const void *ap_hack_apr_file_link = (const void *)apr_file_link;
const void *ap_hack_apr_file_copy = (const void *)apr_file_copy;
const void *ap_hack_apr_file_append = (const void *)apr_file_append;
const void *ap_hack_apr_file_eof = (const void *)apr_file_eof;
const void *ap_hack_apr_file_open_stderr = (const void *)apr_file_open_stderr;
const void *ap_hack_apr_file_open_stdout = (const void *)apr_file_open_stdout;
const void *ap_hack_apr_file_open_stdin = (const void *)apr_file_open_stdin;
const void *ap_hack_apr_file_open_flags_stderr = (const void *)apr_file_open_flags_stderr;
const void *ap_hack_apr_file_open_flags_stdout = (const void *)apr_file_open_flags_stdout;
const void *ap_hack_apr_file_open_flags_stdin = (const void *)apr_file_open_flags_stdin;
const void *ap_hack_apr_file_read = (const void *)apr_file_read;
const void *ap_hack_apr_file_write = (const void *)apr_file_write;
const void *ap_hack_apr_file_writev = (const void *)apr_file_writev;
const void *ap_hack_apr_file_read_full = (const void *)apr_file_read_full;
const void *ap_hack_apr_file_write_full = (const void *)apr_file_write_full;
const void *ap_hack_apr_file_writev_full = (const void *)apr_file_writev_full;
const void *ap_hack_apr_file_putc = (const void *)apr_file_putc;
const void *ap_hack_apr_file_getc = (const void *)apr_file_getc;
const void *ap_hack_apr_file_ungetc = (const void *)apr_file_ungetc;
const void *ap_hack_apr_file_gets = (const void *)apr_file_gets;
const void *ap_hack_apr_file_puts = (const void *)apr_file_puts;
const void *ap_hack_apr_file_flush = (const void *)apr_file_flush;
const void *ap_hack_apr_file_sync = (const void *)apr_file_sync;
const void *ap_hack_apr_file_datasync = (const void *)apr_file_datasync;
const void *ap_hack_apr_file_dup = (const void *)apr_file_dup;
const void *ap_hack_apr_file_dup2 = (const void *)apr_file_dup2;
const void *ap_hack_apr_file_setaside = (const void *)apr_file_setaside;
const void *ap_hack_apr_file_buffer_set = (const void *)apr_file_buffer_set;
const void *ap_hack_apr_file_buffer_size_get = (const void *)apr_file_buffer_size_get;
const void *ap_hack_apr_file_seek = (const void *)apr_file_seek;
const void *ap_hack_apr_file_pipe_create = (const void *)apr_file_pipe_create;
const void *ap_hack_apr_file_pipe_create_ex = (const void *)apr_file_pipe_create_ex;
const void *ap_hack_apr_file_pipe_create_pools = (const void *)apr_file_pipe_create_pools;
const void *ap_hack_apr_file_namedpipe_create = (const void *)apr_file_namedpipe_create;
const void *ap_hack_apr_file_pipe_timeout_get = (const void *)apr_file_pipe_timeout_get;
const void *ap_hack_apr_file_pipe_timeout_set = (const void *)apr_file_pipe_timeout_set;
const void *ap_hack_apr_file_lock = (const void *)apr_file_lock;
const void *ap_hack_apr_file_unlock = (const void *)apr_file_unlock;
const void *ap_hack_apr_file_name_get = (const void *)apr_file_name_get;
const void *ap_hack_apr_file_data_get = (const void *)apr_file_data_get;
const void *ap_hack_apr_file_data_set = (const void *)apr_file_data_set;
const void *ap_hack_apr_file_printf = (const void *)apr_file_printf;
const void *ap_hack_apr_file_perms_set = (const void *)apr_file_perms_set;
const void *ap_hack_apr_file_attrs_set = (const void *)apr_file_attrs_set;
const void *ap_hack_apr_file_mtime_set = (const void *)apr_file_mtime_set;
const void *ap_hack_apr_dir_make = (const void *)apr_dir_make;
const void *ap_hack_apr_dir_make_recursive = (const void *)apr_dir_make_recursive;
const void *ap_hack_apr_dir_remove = (const void *)apr_dir_remove;
const void *ap_hack_apr_file_info_get = (const void *)apr_file_info_get;
const void *ap_hack_apr_file_trunc = (const void *)apr_file_trunc;
const void *ap_hack_apr_file_flags_get = (const void *)apr_file_flags_get;
const void *ap_hack_apr_file_pool_get = (const void *)apr_file_pool_get;
const void *ap_hack_apr_file_inherit_set = (const void *)apr_file_inherit_set;
const void *ap_hack_apr_file_inherit_unset = (const void *)apr_file_inherit_unset;
const void *ap_hack_apr_file_mktemp = (const void *)apr_file_mktemp;
const void *ap_hack_apr_temp_dir_get = (const void *)apr_temp_dir_get;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_fnmatch.h
 */
const void *ap_hack_apr_fnmatch = (const void *)apr_fnmatch;
const void *ap_hack_apr_fnmatch_test = (const void *)apr_fnmatch_test;
const void *ap_hack_apr_match_glob = (const void *)apr_match_glob;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_general.h
 */
const void *ap_hack_apr_initialize = (const void *)apr_initialize;
const void *ap_hack_apr_app_initialize = (const void *)apr_app_initialize;
const void *ap_hack_apr_terminate = (const void *)apr_terminate;
const void *ap_hack_apr_terminate2 = (const void *)apr_terminate2;
#if APR_HAS_RANDOM || defined(DOXYGEN)
const void *ap_hack_apr_generate_random_bytes = (const void *)apr_generate_random_bytes;
#endif

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_getopt.h
 */
const void *ap_hack_apr_getopt_init = (const void *)apr_getopt_init;
const void *ap_hack_apr_getopt = (const void *)apr_getopt;
const void *ap_hack_apr_getopt_long = (const void *)apr_getopt_long;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_global_mutex.h
 */
#if !APR_PROC_MUTEX_IS_GLOBAL || defined(DOXYGEN)
const void *ap_hack_apr_global_mutex_create = (const void *)apr_global_mutex_create;
const void *ap_hack_apr_global_mutex_child_init = (const void *)apr_global_mutex_child_init;
const void *ap_hack_apr_global_mutex_lock = (const void *)apr_global_mutex_lock;
const void *ap_hack_apr_global_mutex_trylock = (const void *)apr_global_mutex_trylock;
const void *ap_hack_apr_global_mutex_unlock = (const void *)apr_global_mutex_unlock;
const void *ap_hack_apr_global_mutex_destroy = (const void *)apr_global_mutex_destroy;
const void *ap_hack_apr_global_mutex_lockfile = (const void *)apr_global_mutex_lockfile;
const void *ap_hack_apr_global_mutex_mech = (const void *)apr_global_mutex_mech;
const void *ap_hack_apr_global_mutex_name = (const void *)apr_global_mutex_name;
const void *ap_hack_apr_global_mutex_pool_get = (const void *)apr_global_mutex_pool_get;
#else /* APR_PROC_MUTEX_IS_GLOBAL */
#endif

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_hash.h
 */
const void *ap_hack_apr_hashfunc_default = (const void *)apr_hashfunc_default;
const void *ap_hack_apr_hash_make = (const void *)apr_hash_make;
const void *ap_hack_apr_hash_make_custom = (const void *)apr_hash_make_custom;
const void *ap_hack_apr_hash_copy = (const void *)apr_hash_copy;
const void *ap_hack_apr_hash_set = (const void *)apr_hash_set;
const void *ap_hack_apr_hash_get = (const void *)apr_hash_get;
const void *ap_hack_apr_hash_first = (const void *)apr_hash_first;
const void *ap_hack_apr_hash_next = (const void *)apr_hash_next;
const void *ap_hack_apr_hash_this = (const void *)apr_hash_this;
const void *ap_hack_apr_hash_this_key = (const void *)apr_hash_this_key;
const void *ap_hack_apr_hash_this_key_len = (const void *)apr_hash_this_key_len;
const void *ap_hack_apr_hash_this_val = (const void *)apr_hash_this_val;
const void *ap_hack_apr_hash_count = (const void *)apr_hash_count;
const void *ap_hack_apr_hash_clear = (const void *)apr_hash_clear;
const void *ap_hack_apr_hash_overlay = (const void *)apr_hash_overlay;
const void *ap_hack_apr_hash_merge = (const void *)apr_hash_merge;
const void *ap_hack_apr_hash_do = (const void *)apr_hash_do;
const void *ap_hack_apr_hash_pool_get = (const void *)apr_hash_pool_get;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_lib.h
 */
const void *ap_hack_apr_filepath_name_get = (const void *)apr_filepath_name_get;
const void *ap_hack_apr_vformatter = (const void *)apr_vformatter;
const void *ap_hack_apr_password_get = (const void *)apr_password_get;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_mmap.h
 */
#if APR_HAS_MMAP || defined(DOXYGEN)
const void *ap_hack_apr_mmap_create = (const void *)apr_mmap_create;
const void *ap_hack_apr_mmap_dup = (const void *)apr_mmap_dup;
const void *ap_hack_apr_mmap_delete = (const void *)apr_mmap_delete;
const void *ap_hack_apr_mmap_offset = (const void *)apr_mmap_offset;
#endif /* APR_HAS_MMAP */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_network_io.h
 */
const void *ap_hack_apr_socket_create = (const void *)apr_socket_create;
const void *ap_hack_apr_socket_shutdown = (const void *)apr_socket_shutdown;
const void *ap_hack_apr_socket_close = (const void *)apr_socket_close;
const void *ap_hack_apr_socket_bind = (const void *)apr_socket_bind;
const void *ap_hack_apr_socket_listen = (const void *)apr_socket_listen;
const void *ap_hack_apr_socket_accept = (const void *)apr_socket_accept;
const void *ap_hack_apr_socket_connect = (const void *)apr_socket_connect;
const void *ap_hack_apr_socket_atreadeof = (const void *)apr_socket_atreadeof;
const void *ap_hack_apr_sockaddr_info_get = (const void *)apr_sockaddr_info_get;
const void *ap_hack_apr_sockaddr_info_copy = (const void *)apr_sockaddr_info_copy;
const void *ap_hack_apr_getnameinfo = (const void *)apr_getnameinfo;
const void *ap_hack_apr_parse_addr_port = (const void *)apr_parse_addr_port;
const void *ap_hack_apr_gethostname = (const void *)apr_gethostname;
const void *ap_hack_apr_socket_data_get = (const void *)apr_socket_data_get;
const void *ap_hack_apr_socket_data_set = (const void *)apr_socket_data_set;
const void *ap_hack_apr_socket_send = (const void *)apr_socket_send;
const void *ap_hack_apr_socket_sendv = (const void *)apr_socket_sendv;
const void *ap_hack_apr_socket_sendto = (const void *)apr_socket_sendto;
const void *ap_hack_apr_socket_recvfrom = (const void *)apr_socket_recvfrom;
#if APR_HAS_SENDFILE || defined(DOXYGEN)
const void *ap_hack_apr_socket_sendfile = (const void *)apr_socket_sendfile;
#endif /* APR_HAS_SENDFILE */
const void *ap_hack_apr_socket_recv = (const void *)apr_socket_recv;
const void *ap_hack_apr_socket_opt_set = (const void *)apr_socket_opt_set;
const void *ap_hack_apr_socket_timeout_set = (const void *)apr_socket_timeout_set;
const void *ap_hack_apr_socket_opt_get = (const void *)apr_socket_opt_get;
const void *ap_hack_apr_socket_timeout_get = (const void *)apr_socket_timeout_get;
const void *ap_hack_apr_socket_atmark = (const void *)apr_socket_atmark;
const void *ap_hack_apr_socket_addr_get = (const void *)apr_socket_addr_get;
const void *ap_hack_apr_sockaddr_ip_get = (const void *)apr_sockaddr_ip_get;
const void *ap_hack_apr_sockaddr_ip_getbuf = (const void *)apr_sockaddr_ip_getbuf;
const void *ap_hack_apr_sockaddr_equal = (const void *)apr_sockaddr_equal;
const void *ap_hack_apr_sockaddr_is_wildcard = (const void *)apr_sockaddr_is_wildcard;
const void *ap_hack_apr_socket_type_get = (const void *)apr_socket_type_get;
const void *ap_hack_apr_getservbyname = (const void *)apr_getservbyname;
const void *ap_hack_apr_ipsubnet_create = (const void *)apr_ipsubnet_create;
const void *ap_hack_apr_ipsubnet_test = (const void *)apr_ipsubnet_test;
const void *ap_hack_apr_socket_protocol_get = (const void *)apr_socket_protocol_get;
const void *ap_hack_apr_socket_pool_get = (const void *)apr_socket_pool_get;
const void *ap_hack_apr_socket_inherit_set = (const void *)apr_socket_inherit_set;
const void *ap_hack_apr_socket_inherit_unset = (const void *)apr_socket_inherit_unset;
const void *ap_hack_apr_mcast_join = (const void *)apr_mcast_join;
const void *ap_hack_apr_mcast_leave = (const void *)apr_mcast_leave;
const void *ap_hack_apr_mcast_hops = (const void *)apr_mcast_hops;
const void *ap_hack_apr_mcast_loopback = (const void *)apr_mcast_loopback;
const void *ap_hack_apr_mcast_interface = (const void *)apr_mcast_interface;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_poll.h
 */
const void *ap_hack_apr_pollset_create = (const void *)apr_pollset_create;
const void *ap_hack_apr_pollset_create_ex = (const void *)apr_pollset_create_ex;
const void *ap_hack_apr_pollset_destroy = (const void *)apr_pollset_destroy;
const void *ap_hack_apr_pollset_add = (const void *)apr_pollset_add;
const void *ap_hack_apr_pollset_remove = (const void *)apr_pollset_remove;
const void *ap_hack_apr_pollset_poll = (const void *)apr_pollset_poll;
const void *ap_hack_apr_pollset_wakeup = (const void *)apr_pollset_wakeup;
const void *ap_hack_apr_poll = (const void *)apr_poll;
const void *ap_hack_apr_pollset_method_name = (const void *)apr_pollset_method_name;
const void *ap_hack_apr_poll_method_defname = (const void *)apr_poll_method_defname;
const void *ap_hack_apr_pollcb_create = (const void *)apr_pollcb_create;
const void *ap_hack_apr_pollcb_create_ex = (const void *)apr_pollcb_create_ex;
const void *ap_hack_apr_pollcb_add = (const void *)apr_pollcb_add;
const void *ap_hack_apr_pollcb_remove = (const void *)apr_pollcb_remove;
const void *ap_hack_apr_pollcb_poll = (const void *)apr_pollcb_poll;
const void *ap_hack_apr_pollcb_wakeup = (const void *)apr_pollcb_wakeup;
const void *ap_hack_apr_pollcb_method_name = (const void *)apr_pollcb_method_name;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_pools.h
 */
const void *ap_hack_apr_pool_initialize = (const void *)apr_pool_initialize;
const void *ap_hack_apr_pool_terminate = (const void *)apr_pool_terminate;
const void *ap_hack_apr_pool_create_ex = (const void *)apr_pool_create_ex;
const void *ap_hack_apr_pool_create_core_ex = (const void *)apr_pool_create_core_ex;
const void *ap_hack_apr_pool_create_unmanaged_ex = (const void *)apr_pool_create_unmanaged_ex;
const void *ap_hack_apr_pool_create_ex_debug = (const void *)apr_pool_create_ex_debug;
const void *ap_hack_apr_pool_create_core_ex_debug = (const void *)apr_pool_create_core_ex_debug;
const void *ap_hack_apr_pool_create_unmanaged_ex_debug = (const void *)apr_pool_create_unmanaged_ex_debug;
#if defined(DOXYGEN)
const void *ap_hack_apr_pool_create = (const void *)apr_pool_create;
#else
#endif
#if defined(DOXYGEN)
const void *ap_hack_apr_pool_create_core = (const void *)apr_pool_create_core;
const void *ap_hack_apr_pool_create_unmanaged = (const void *)apr_pool_create_unmanaged;
#else
#endif
const void *ap_hack_apr_pool_allocator_get = (const void *)apr_pool_allocator_get;
const void *ap_hack_apr_pool_clear = (const void *)apr_pool_clear;
const void *ap_hack_apr_pool_clear_debug = (const void *)apr_pool_clear_debug;
const void *ap_hack_apr_pool_destroy = (const void *)apr_pool_destroy;
const void *ap_hack_apr_pool_destroy_debug = (const void *)apr_pool_destroy_debug;
const void *ap_hack_apr_palloc = (const void *)apr_palloc;
const void *ap_hack_apr_palloc_debug = (const void *)apr_palloc_debug;
#if defined(DOXYGEN)
const void *ap_hack_apr_pcalloc = (const void *)apr_pcalloc;
#elif !APR_POOL_DEBUG
#endif
const void *ap_hack_apr_pcalloc_debug = (const void *)apr_pcalloc_debug;
const void *ap_hack_apr_pool_abort_set = (const void *)apr_pool_abort_set;
const void *ap_hack_apr_pool_abort_get = (const void *)apr_pool_abort_get;
const void *ap_hack_apr_pool_parent_get = (const void *)apr_pool_parent_get;
const void *ap_hack_apr_pool_is_ancestor = (const void *)apr_pool_is_ancestor;
const void *ap_hack_apr_pool_tag = (const void *)apr_pool_tag;
const void *ap_hack_apr_pool_userdata_set = (const void *)apr_pool_userdata_set;
const void *ap_hack_apr_pool_userdata_setn = (const void *)apr_pool_userdata_setn;
const void *ap_hack_apr_pool_userdata_get = (const void *)apr_pool_userdata_get;
const void *ap_hack_apr_pool_cleanup_register = (const void *)apr_pool_cleanup_register;
const void *ap_hack_apr_pool_pre_cleanup_register = (const void *)apr_pool_pre_cleanup_register;
const void *ap_hack_apr_pool_cleanup_kill = (const void *)apr_pool_cleanup_kill;
const void *ap_hack_apr_pool_child_cleanup_set = (const void *)apr_pool_child_cleanup_set;
const void *ap_hack_apr_pool_cleanup_run = (const void *)apr_pool_cleanup_run;
const void *ap_hack_apr_pool_cleanup_null = (const void *)apr_pool_cleanup_null;
const void *ap_hack_apr_pool_cleanup_for_exec = (const void *)apr_pool_cleanup_for_exec;
#if APR_POOL_DEBUG || defined(DOXYGEN)
const void *ap_hack_apr_pool_join = (const void *)apr_pool_join;
const void *ap_hack_apr_pool_find = (const void *)apr_pool_find;
const void *ap_hack_apr_pool_num_bytes = (const void *)apr_pool_num_bytes;
const void *ap_hack_apr_pool_lock = (const void *)apr_pool_lock;
#else /* APR_POOL_DEBUG or DOXYGEN */
#endif /* APR_POOL_DEBUG or DOXYGEN */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_portable.h
 */
#if APR_PROC_MUTEX_IS_GLOBAL || defined(DOXYGEN)
#else
const void *ap_hack_apr_os_global_mutex_get = (const void *)apr_os_global_mutex_get;
#endif
const void *ap_hack_apr_os_file_get = (const void *)apr_os_file_get;
const void *ap_hack_apr_os_dir_get = (const void *)apr_os_dir_get;
const void *ap_hack_apr_os_sock_get = (const void *)apr_os_sock_get;
const void *ap_hack_apr_os_proc_mutex_get = (const void *)apr_os_proc_mutex_get;
const void *ap_hack_apr_os_proc_mutex_get_ex = (const void *)apr_os_proc_mutex_get_ex;
const void *ap_hack_apr_os_exp_time_get = (const void *)apr_os_exp_time_get;
const void *ap_hack_apr_os_imp_time_get = (const void *)apr_os_imp_time_get;
const void *ap_hack_apr_os_shm_get = (const void *)apr_os_shm_get;
#if APR_HAS_THREADS || defined(DOXYGEN)
const void *ap_hack_apr_os_thread_get = (const void *)apr_os_thread_get;
const void *ap_hack_apr_os_threadkey_get = (const void *)apr_os_threadkey_get;
const void *ap_hack_apr_os_thread_put = (const void *)apr_os_thread_put;
const void *ap_hack_apr_os_threadkey_put = (const void *)apr_os_threadkey_put;
const void *ap_hack_apr_os_thread_current = (const void *)apr_os_thread_current;
const void *ap_hack_apr_os_thread_equal = (const void *)apr_os_thread_equal;
#endif /* APR_HAS_THREADS */
const void *ap_hack_apr_os_file_put = (const void *)apr_os_file_put;
const void *ap_hack_apr_os_pipe_put = (const void *)apr_os_pipe_put;
const void *ap_hack_apr_os_pipe_put_ex = (const void *)apr_os_pipe_put_ex;
const void *ap_hack_apr_os_dir_put = (const void *)apr_os_dir_put;
const void *ap_hack_apr_os_sock_put = (const void *)apr_os_sock_put;
const void *ap_hack_apr_os_sock_make = (const void *)apr_os_sock_make;
const void *ap_hack_apr_os_proc_mutex_put = (const void *)apr_os_proc_mutex_put;
const void *ap_hack_apr_os_proc_mutex_put_ex = (const void *)apr_os_proc_mutex_put_ex;
const void *ap_hack_apr_os_imp_time_put = (const void *)apr_os_imp_time_put;
const void *ap_hack_apr_os_exp_time_put = (const void *)apr_os_exp_time_put;
const void *ap_hack_apr_os_shm_put = (const void *)apr_os_shm_put;
#if APR_HAS_DSO || defined(DOXYGEN)
const void *ap_hack_apr_os_dso_handle_put = (const void *)apr_os_dso_handle_put;
const void *ap_hack_apr_os_dso_handle_get = (const void *)apr_os_dso_handle_get;
#endif /* APR_HAS_DSO */
#if APR_HAS_OS_UUID
const void *ap_hack_apr_os_uuid_get = (const void *)apr_os_uuid_get;
#endif
const void *ap_hack_apr_os_default_encoding = (const void *)apr_os_default_encoding;
const void *ap_hack_apr_os_locale_encoding = (const void *)apr_os_locale_encoding;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_proc_mutex.h
 */
const void *ap_hack_apr_proc_mutex_create = (const void *)apr_proc_mutex_create;
const void *ap_hack_apr_proc_mutex_child_init = (const void *)apr_proc_mutex_child_init;
const void *ap_hack_apr_proc_mutex_lock = (const void *)apr_proc_mutex_lock;
const void *ap_hack_apr_proc_mutex_trylock = (const void *)apr_proc_mutex_trylock;
const void *ap_hack_apr_proc_mutex_unlock = (const void *)apr_proc_mutex_unlock;
const void *ap_hack_apr_proc_mutex_destroy = (const void *)apr_proc_mutex_destroy;
const void *ap_hack_apr_proc_mutex_cleanup = (const void *)apr_proc_mutex_cleanup;
const void *ap_hack_apr_proc_mutex_lockfile = (const void *)apr_proc_mutex_lockfile;
const void *ap_hack_apr_proc_mutex_mech = (const void *)apr_proc_mutex_mech;
const void *ap_hack_apr_proc_mutex_name = (const void *)apr_proc_mutex_name;
const void *ap_hack_apr_proc_mutex_defname = (const void *)apr_proc_mutex_defname;
const void *ap_hack_apr_proc_mutex_pool_get = (const void *)apr_proc_mutex_pool_get;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_random.h
 */
const void *ap_hack_apr_crypto_sha256_new = (const void *)apr_crypto_sha256_new;
const void *ap_hack_apr_random_init = (const void *)apr_random_init;
const void *ap_hack_apr_random_standard_new = (const void *)apr_random_standard_new;
const void *ap_hack_apr_random_add_entropy = (const void *)apr_random_add_entropy;
const void *ap_hack_apr_random_insecure_bytes = (const void *)apr_random_insecure_bytes;
const void *ap_hack_apr_random_secure_bytes = (const void *)apr_random_secure_bytes;
const void *ap_hack_apr_random_barrier = (const void *)apr_random_barrier;
const void *ap_hack_apr_random_secure_ready = (const void *)apr_random_secure_ready;
const void *ap_hack_apr_random_insecure_ready = (const void *)apr_random_insecure_ready;
const void *ap_hack_apr_random_after_fork = (const void *)apr_random_after_fork;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_shm.h
 */
const void *ap_hack_apr_shm_create = (const void *)apr_shm_create;
const void *ap_hack_apr_shm_create_ex = (const void *)apr_shm_create_ex;
const void *ap_hack_apr_shm_remove = (const void *)apr_shm_remove;
const void *ap_hack_apr_shm_delete = (const void *)apr_shm_delete;
const void *ap_hack_apr_shm_destroy = (const void *)apr_shm_destroy;
const void *ap_hack_apr_shm_attach = (const void *)apr_shm_attach;
const void *ap_hack_apr_shm_attach_ex = (const void *)apr_shm_attach_ex;
const void *ap_hack_apr_shm_detach = (const void *)apr_shm_detach;
const void *ap_hack_apr_shm_baseaddr_get = (const void *)apr_shm_baseaddr_get;
const void *ap_hack_apr_shm_size_get = (const void *)apr_shm_size_get;
const void *ap_hack_apr_shm_pool_get = (const void *)apr_shm_pool_get;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_signal.h
 */
#if APR_HAVE_SIGACTION || defined(DOXYGEN)
const void *ap_hack_apr_signal = (const void *)apr_signal;
#else /* !APR_HAVE_SIGACTION */
#endif
const void *ap_hack_apr_signal_description_get = (const void *)apr_signal_description_get;
const void *ap_hack_apr_signal_block = (const void *)apr_signal_block;
const void *ap_hack_apr_signal_unblock = (const void *)apr_signal_unblock;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_skiplist.h
 */
const void *ap_hack_apr_skiplist_alloc = (const void *)apr_skiplist_alloc;
const void *ap_hack_apr_skiplist_free = (const void *)apr_skiplist_free;
const void *ap_hack_apr_skiplist_init = (const void *)apr_skiplist_init;
const void *ap_hack_apr_skiplist_set_compare = (const void *)apr_skiplist_set_compare;
const void *ap_hack_apr_skiplist_add_index = (const void *)apr_skiplist_add_index;
const void *ap_hack_apr_skiplist_getlist = (const void *)apr_skiplist_getlist;
const void *ap_hack_apr_skiplist_find_compare = (const void *)apr_skiplist_find_compare;
const void *ap_hack_apr_skiplist_find = (const void *)apr_skiplist_find;
const void *ap_hack_apr_skiplist_last_compare = (const void *)apr_skiplist_last_compare;
const void *ap_hack_apr_skiplist_last = (const void *)apr_skiplist_last;
const void *ap_hack_apr_skiplist_next = (const void *)apr_skiplist_next;
const void *ap_hack_apr_skiplist_previous = (const void *)apr_skiplist_previous;
const void *ap_hack_apr_skiplist_element = (const void *)apr_skiplist_element;
const void *ap_hack_apr_skiplist_insert_compare = (const void *)apr_skiplist_insert_compare;
const void *ap_hack_apr_skiplist_insert = (const void *)apr_skiplist_insert;
const void *ap_hack_apr_skiplist_add_compare = (const void *)apr_skiplist_add_compare;
const void *ap_hack_apr_skiplist_add = (const void *)apr_skiplist_add;
const void *ap_hack_apr_skiplist_replace_compare = (const void *)apr_skiplist_replace_compare;
const void *ap_hack_apr_skiplist_replace = (const void *)apr_skiplist_replace;
const void *ap_hack_apr_skiplist_remove_node = (const void *)apr_skiplist_remove_node;
const void *ap_hack_apr_skiplist_remove_compare = (const void *)apr_skiplist_remove_compare;
const void *ap_hack_apr_skiplist_remove = (const void *)apr_skiplist_remove;
const void *ap_hack_apr_skiplist_remove_all = (const void *)apr_skiplist_remove_all;
const void *ap_hack_apr_skiplist_destroy = (const void *)apr_skiplist_destroy;
const void *ap_hack_apr_skiplist_pop = (const void *)apr_skiplist_pop;
const void *ap_hack_apr_skiplist_peek = (const void *)apr_skiplist_peek;
const void *ap_hack_apr_skiplist_size = (const void *)apr_skiplist_size;
const void *ap_hack_apr_skiplist_height = (const void *)apr_skiplist_height;
const void *ap_hack_apr_skiplist_preheight = (const void *)apr_skiplist_preheight;
const void *ap_hack_apr_skiplist_set_preheight = (const void *)apr_skiplist_set_preheight;
const void *ap_hack_apr_skiplist_merge = (const void *)apr_skiplist_merge;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_strings.h
 */
const void *ap_hack_apr_strnatcmp = (const void *)apr_strnatcmp;
const void *ap_hack_apr_strnatcasecmp = (const void *)apr_strnatcasecmp;
const void *ap_hack_apr_pstrdup = (const void *)apr_pstrdup;
const void *ap_hack_apr_pstrmemdup = (const void *)apr_pstrmemdup;
const void *ap_hack_apr_pstrndup = (const void *)apr_pstrndup;
const void *ap_hack_apr_pmemdup = (const void *)apr_pmemdup;
const void *ap_hack_apr_pstrcat = (const void *)apr_pstrcat;
const void *ap_hack_apr_pstrcatv = (const void *)apr_pstrcatv;
const void *ap_hack_apr_pvsprintf = (const void *)apr_pvsprintf;
const void *ap_hack_apr_psprintf = (const void *)apr_psprintf;
const void *ap_hack_apr_cpystrn = (const void *)apr_cpystrn;
const void *ap_hack_apr_collapse_spaces = (const void *)apr_collapse_spaces;
const void *ap_hack_apr_tokenize_to_argv = (const void *)apr_tokenize_to_argv;
const void *ap_hack_apr_strtok = (const void *)apr_strtok;
const void *ap_hack_apr_snprintf = (const void *)apr_snprintf;
const void *ap_hack_apr_vsnprintf = (const void *)apr_vsnprintf;
const void *ap_hack_apr_itoa = (const void *)apr_itoa;
const void *ap_hack_apr_ltoa = (const void *)apr_ltoa;
const void *ap_hack_apr_off_t_toa = (const void *)apr_off_t_toa;
const void *ap_hack_apr_strtoff = (const void *)apr_strtoff;
const void *ap_hack_apr_strtoi64 = (const void *)apr_strtoi64;
const void *ap_hack_apr_atoi64 = (const void *)apr_atoi64;
const void *ap_hack_apr_strfsize = (const void *)apr_strfsize;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_tables.h
 */
const void *ap_hack_apr_table_elts = (const void *)apr_table_elts;
const void *ap_hack_apr_is_empty_table = (const void *)apr_is_empty_table;
const void *ap_hack_apr_is_empty_array = (const void *)apr_is_empty_array;
const void *ap_hack_apr_array_make = (const void *)apr_array_make;
const void *ap_hack_apr_array_push = (const void *)apr_array_push;
const void *ap_hack_apr_array_pop = (const void *)apr_array_pop;
const void *ap_hack_apr_array_clear = (const void *)apr_array_clear;
const void *ap_hack_apr_array_cat = (const void *)apr_array_cat;
const void *ap_hack_apr_array_copy = (const void *)apr_array_copy;
const void *ap_hack_apr_array_copy_hdr = (const void *)apr_array_copy_hdr;
const void *ap_hack_apr_array_append = (const void *)apr_array_append;
const void *ap_hack_apr_array_pstrcat = (const void *)apr_array_pstrcat;
const void *ap_hack_apr_table_make = (const void *)apr_table_make;
const void *ap_hack_apr_table_copy = (const void *)apr_table_copy;
const void *ap_hack_apr_table_clone = (const void *)apr_table_clone;
const void *ap_hack_apr_table_clear = (const void *)apr_table_clear;
const void *ap_hack_apr_table_get = (const void *)apr_table_get;
const void *ap_hack_apr_table_getm = (const void *)apr_table_getm;
const void *ap_hack_apr_table_set = (const void *)apr_table_set;
const void *ap_hack_apr_table_setn = (const void *)apr_table_setn;
const void *ap_hack_apr_table_unset = (const void *)apr_table_unset;
const void *ap_hack_apr_table_merge = (const void *)apr_table_merge;
const void *ap_hack_apr_table_mergen = (const void *)apr_table_mergen;
const void *ap_hack_apr_table_add = (const void *)apr_table_add;
const void *ap_hack_apr_table_addn = (const void *)apr_table_addn;
const void *ap_hack_apr_table_overlay = (const void *)apr_table_overlay;
const void *ap_hack_apr_table_do = (const void *)apr_table_do;
const void *ap_hack_apr_table_vdo = (const void *)apr_table_vdo;
const void *ap_hack_apr_table_overlap = (const void *)apr_table_overlap;
const void *ap_hack_apr_table_compress = (const void *)apr_table_compress;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_thread_cond.h
 */
#if APR_HAS_THREADS || defined(DOXYGEN)
const void *ap_hack_apr_thread_cond_create = (const void *)apr_thread_cond_create;
const void *ap_hack_apr_thread_cond_wait = (const void *)apr_thread_cond_wait;
const void *ap_hack_apr_thread_cond_timedwait = (const void *)apr_thread_cond_timedwait;
const void *ap_hack_apr_thread_cond_signal = (const void *)apr_thread_cond_signal;
const void *ap_hack_apr_thread_cond_broadcast = (const void *)apr_thread_cond_broadcast;
const void *ap_hack_apr_thread_cond_destroy = (const void *)apr_thread_cond_destroy;
const void *ap_hack_apr_thread_cond_pool_get = (const void *)apr_thread_cond_pool_get;
#endif /* APR_HAS_THREADS */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_thread_mutex.h
 */
#if APR_HAS_THREADS || defined(DOXYGEN)
const void *ap_hack_apr_thread_mutex_create = (const void *)apr_thread_mutex_create;
const void *ap_hack_apr_thread_mutex_lock = (const void *)apr_thread_mutex_lock;
const void *ap_hack_apr_thread_mutex_trylock = (const void *)apr_thread_mutex_trylock;
const void *ap_hack_apr_thread_mutex_unlock = (const void *)apr_thread_mutex_unlock;
const void *ap_hack_apr_thread_mutex_destroy = (const void *)apr_thread_mutex_destroy;
const void *ap_hack_apr_thread_mutex_pool_get = (const void *)apr_thread_mutex_pool_get;
#endif /* APR_HAS_THREADS */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_thread_proc.h
 */
#if APR_HAS_THREADS
const void *ap_hack_apr_threadattr_create = (const void *)apr_threadattr_create;
const void *ap_hack_apr_threadattr_detach_set = (const void *)apr_threadattr_detach_set;
const void *ap_hack_apr_threadattr_detach_get = (const void *)apr_threadattr_detach_get;
const void *ap_hack_apr_threadattr_stacksize_set = (const void *)apr_threadattr_stacksize_set;
const void *ap_hack_apr_threadattr_guardsize_set = (const void *)apr_threadattr_guardsize_set;
const void *ap_hack_apr_thread_create = (const void *)apr_thread_create;
const void *ap_hack_apr_thread_exit = (const void *)apr_thread_exit;
const void *ap_hack_apr_thread_join = (const void *)apr_thread_join;
const void *ap_hack_apr_thread_yield = (const void *)apr_thread_yield;
const void *ap_hack_apr_thread_once_init = (const void *)apr_thread_once_init;
const void *ap_hack_apr_thread_once = (const void *)apr_thread_once;
const void *ap_hack_apr_thread_detach = (const void *)apr_thread_detach;
const void *ap_hack_apr_thread_data_get = (const void *)apr_thread_data_get;
const void *ap_hack_apr_thread_data_set = (const void *)apr_thread_data_set;
const void *ap_hack_apr_threadkey_private_create = (const void *)apr_threadkey_private_create;
const void *ap_hack_apr_threadkey_private_get = (const void *)apr_threadkey_private_get;
const void *ap_hack_apr_threadkey_private_set = (const void *)apr_threadkey_private_set;
const void *ap_hack_apr_threadkey_private_delete = (const void *)apr_threadkey_private_delete;
const void *ap_hack_apr_threadkey_data_get = (const void *)apr_threadkey_data_get;
const void *ap_hack_apr_threadkey_data_set = (const void *)apr_threadkey_data_set;
#endif
const void *ap_hack_apr_procattr_create = (const void *)apr_procattr_create;
const void *ap_hack_apr_procattr_io_set = (const void *)apr_procattr_io_set;
const void *ap_hack_apr_procattr_child_in_set = (const void *)apr_procattr_child_in_set;
const void *ap_hack_apr_procattr_child_out_set = (const void *)apr_procattr_child_out_set;
const void *ap_hack_apr_procattr_child_err_set = (const void *)apr_procattr_child_err_set;
const void *ap_hack_apr_procattr_dir_set = (const void *)apr_procattr_dir_set;
const void *ap_hack_apr_procattr_cmdtype_set = (const void *)apr_procattr_cmdtype_set;
const void *ap_hack_apr_procattr_detach_set = (const void *)apr_procattr_detach_set;
#if APR_HAVE_STRUCT_RLIMIT
const void *ap_hack_apr_procattr_limit_set = (const void *)apr_procattr_limit_set;
#endif
const void *ap_hack_apr_procattr_child_errfn_set = (const void *)apr_procattr_child_errfn_set;
const void *ap_hack_apr_procattr_error_check_set = (const void *)apr_procattr_error_check_set;
const void *ap_hack_apr_procattr_addrspace_set = (const void *)apr_procattr_addrspace_set;
const void *ap_hack_apr_procattr_user_set = (const void *)apr_procattr_user_set;
const void *ap_hack_apr_procattr_group_set = (const void *)apr_procattr_group_set;
const void *ap_hack_apr_procattr_perms_set_register = (const void *)apr_procattr_perms_set_register;
#if APR_HAS_FORK
const void *ap_hack_apr_proc_fork = (const void *)apr_proc_fork;
#endif
const void *ap_hack_apr_proc_create = (const void *)apr_proc_create;
const void *ap_hack_apr_proc_wait = (const void *)apr_proc_wait;
const void *ap_hack_apr_proc_wait_all_procs = (const void *)apr_proc_wait_all_procs;
const void *ap_hack_apr_proc_detach = (const void *)apr_proc_detach;
const void *ap_hack_apr_proc_other_child_register = (const void *)apr_proc_other_child_register;
const void *ap_hack_apr_proc_other_child_unregister = (const void *)apr_proc_other_child_unregister;
const void *ap_hack_apr_proc_other_child_alert = (const void *)apr_proc_other_child_alert;
const void *ap_hack_apr_proc_other_child_refresh = (const void *)apr_proc_other_child_refresh;
const void *ap_hack_apr_proc_other_child_refresh_all = (const void *)apr_proc_other_child_refresh_all;
const void *ap_hack_apr_proc_kill = (const void *)apr_proc_kill;
const void *ap_hack_apr_pool_note_subprocess = (const void *)apr_pool_note_subprocess;
#if APR_HAS_THREADS 
#if (APR_HAVE_SIGWAIT || APR_HAVE_SIGSUSPEND) && !defined(OS2)
const void *ap_hack_apr_setup_signal_thread = (const void *)apr_setup_signal_thread;
const void *ap_hack_apr_signal_thread = (const void *)apr_signal_thread;
#endif /* (APR_HAVE_SIGWAIT || APR_HAVE_SIGSUSPEND) && !defined(OS2) */
const void *ap_hack_apr_thread_pool_get = (const void *)apr_thread_pool_get;
#endif /* APR_HAS_THREADS */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_thread_rwlock.h
 */
#if APR_HAS_THREADS
const void *ap_hack_apr_thread_rwlock_create = (const void *)apr_thread_rwlock_create;
const void *ap_hack_apr_thread_rwlock_rdlock = (const void *)apr_thread_rwlock_rdlock;
const void *ap_hack_apr_thread_rwlock_tryrdlock = (const void *)apr_thread_rwlock_tryrdlock;
const void *ap_hack_apr_thread_rwlock_wrlock = (const void *)apr_thread_rwlock_wrlock;
const void *ap_hack_apr_thread_rwlock_trywrlock = (const void *)apr_thread_rwlock_trywrlock;
const void *ap_hack_apr_thread_rwlock_unlock = (const void *)apr_thread_rwlock_unlock;
const void *ap_hack_apr_thread_rwlock_destroy = (const void *)apr_thread_rwlock_destroy;
const void *ap_hack_apr_thread_rwlock_pool_get = (const void *)apr_thread_rwlock_pool_get;
#endif  /* APR_HAS_THREADS */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_time.h
 */
const void *ap_hack_apr_time_now = (const void *)apr_time_now;
const void *ap_hack_apr_time_ansi_put = (const void *)apr_time_ansi_put;
const void *ap_hack_apr_time_exp_tz = (const void *)apr_time_exp_tz;
const void *ap_hack_apr_time_exp_gmt = (const void *)apr_time_exp_gmt;
const void *ap_hack_apr_time_exp_lt = (const void *)apr_time_exp_lt;
const void *ap_hack_apr_time_exp_get = (const void *)apr_time_exp_get;
const void *ap_hack_apr_time_exp_gmt_get = (const void *)apr_time_exp_gmt_get;
const void *ap_hack_apr_sleep = (const void *)apr_sleep;
const void *ap_hack_apr_rfc822_date = (const void *)apr_rfc822_date;
const void *ap_hack_apr_ctime = (const void *)apr_ctime;
const void *ap_hack_apr_strftime = (const void *)apr_strftime;
const void *ap_hack_apr_time_clock_hires = (const void *)apr_time_clock_hires;

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_user.h
 */
#if APR_HAS_USER 
const void *ap_hack_apr_uid_current = (const void *)apr_uid_current;
const void *ap_hack_apr_uid_name_get = (const void *)apr_uid_name_get;
const void *ap_hack_apr_uid_get = (const void *)apr_uid_get;
const void *ap_hack_apr_uid_homepath_get = (const void *)apr_uid_homepath_get;
#if defined(WIN32)
const void *ap_hack_apr_uid_compare = (const void *)apr_uid_compare;
#else
#endif
const void *ap_hack_apr_gid_name_get = (const void *)apr_gid_name_get;
const void *ap_hack_apr_gid_get = (const void *)apr_gid_get;
#if defined(WIN32)
const void *ap_hack_apr_gid_compare = (const void *)apr_gid_compare;
#else
#endif
#endif  /* ! APR_HAS_USER */

/*
 * /home/jp/lind_project/test_cases/httpd/srclib/apr/include/apr_version.h
 */
#ifndef APR_VERSION_ONLY
const void *ap_hack_apr_version = (const void *)apr_version;
const void *ap_hack_apr_version_string = (const void *)apr_version_string;
#endif /* ndef APR_VERSION_ONLY */

