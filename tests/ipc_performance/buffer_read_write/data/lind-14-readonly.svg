<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1686" onload="init(evt)" viewBox="0 0 1200 1686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1686.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1669" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1669" > </text>
<g id="frames">
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="901" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="911.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="517" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="527.5" >std::__detail::_E..</text>
</g>
<g >
<title>cpuidle_idle_call (709,587,910 samples, 14.17%)</title><rect x="992.6" y="1541" width="167.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="995.65" y="1551.5" >cpuidle_idle_call</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1477" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1487.5" >std::__detail::_E..</text>
</g>
<g >
<title>mm_init (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1429" width="48.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="591.96" y="1439.5" >mm_i..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="965" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="975.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="613" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="623.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1557" width="157.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="1567.5" >do_execveat_common.i..</text>
</g>
<g >
<title>__mod_memcg_state (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1381" width="65.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="812.55" y="1391.5" >__mod_m..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="373" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="383.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>[unknown] (1,201,659,129 samples, 23.99%)</title><rect x="305.9" y="1605" width="283.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="308.87" y="1615.5" >[unknown]</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="837" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="847.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>unmap_vmas (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1381" width="157.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="13.00" y="1391.5" >unmap_vmas</text>
</g>
<g >
<title>__schedule (606,763,707 samples, 12.11%)</title><rect x="666.6" y="1477" width="142.9" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="669.60" y="1487.5" >__schedule</text>
</g>
<g >
<title>exec_binprm (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1509" width="157.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="1519.5" >exec_binprm</text>
</g>
<g >
<title>__x64_sys_epoll_wait (606,763,707 samples, 12.11%)</title><rect x="666.6" y="1573" width="142.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="669.60" y="1583.5" >__x64_sys_epoll_wait</text>
</g>
<g >
<title>evlist__prepare_workload (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1573" width="48.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="591.96" y="1583.5" >evli..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1189" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1199.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="981" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="991.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1173" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1183.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>malloc (592,282,837 samples, 11.82%)</title><rect x="449.4" y="37" width="139.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="452.43" y="47.5" >malloc</text>
</g>
<g >
<title>page_remove_rmap (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1253" width="14.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="640.64" y="1263.5" ></text>
</g>
<g >
<title>__percpu_counter_init (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1413" width="48.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="591.96" y="1423.5" >__pe..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1029" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="1039.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1157" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="1167.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>rustposix::interface::file::EmulatedFile::close (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1477" width="14.1" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="640.64" y="1487.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (501,349,147 samples, 10.01%)</title><rect x="874.5" y="1573" width="118.1" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="877.54" y="1583.5" >smpboot_thread..</text>
</g>
<g >
<title>sock_write_iter (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1525" width="65.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="812.55" y="1535.5" >sock_wr..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="149" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="159.5" >std::__detail::_E..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1445" width="14.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="640.64" y="1455.5" ></text>
</g>
<g >
<title>__vm_munmap (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1397" width="14.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="640.64" y="1407.5" ></text>
</g>
<g >
<title>NaClSysReadDecoder (63,281,382 samples, 1.26%)</title><rect x="651.7" y="1573" width="14.9" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="654.70" y="1583.5" ></text>
</g>
<g >
<title>cpu_stop_should_run (501,349,147 samples, 10.01%)</title><rect x="874.5" y="1557" width="118.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="877.54" y="1567.5" >cpu_stop_shoul..</text>
</g>
<g >
<title>ep_poll (606,763,707 samples, 12.11%)</title><rect x="666.6" y="1541" width="142.9" height="15.0" fill="rgb(238,151,36)" rx="2" ry="2" />
<text  x="669.60" y="1551.5" >ep_poll</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1509" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1519.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1557" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1567.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1125" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1135.5" >std::__detail::_E..</text>
</g>
<g >
<title>all (5,008,909,474 samples, 100%)</title><rect x="10.0" y="1637" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="517" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="527.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1445" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1455.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>_find_next_zero_bit (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1365" width="48.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="591.96" y="1375.5" >_fin..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1477" width="48.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="591.96" y="1487.5" >do_e..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="485" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="495.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="661" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="671.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1253" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1263.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="805" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="815.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1189" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1199.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1221" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1231.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1429" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1439.5" >std::__detail::_E..</text>
</g>
<g >
<title>[anon] (586,589,641 samples, 11.71%)</title><rect x="167.7" y="1605" width="138.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="170.68" y="1615.5" >[anon]</text>
</g>
<g >
<title>bprm_execve.part.0 (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1525" width="157.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="1535.5" >bprm_execve.part.0</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="837" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="847.5" >std::__detail::_E..</text>
</g>
<g >
<title>__x64_sys_munmap (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1413" width="14.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="640.64" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="245" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="255.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="309" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="319.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="469" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="479.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="773" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="783.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="821" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="831.5" >std::__detail::_E..</text>
</g>
<g >
<title>perf-exec (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1621" width="48.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="591.96" y="1631.5" >perf..</text>
</g>
<g >
<title>execve (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1541" width="48.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="591.96" y="1551.5" >execve</text>
</g>
<g >
<title>sel_ldr (122,943,478 samples, 2.45%)</title><rect x="637.6" y="1621" width="29.0" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="640.64" y="1631.5" >se..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1461" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1471.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1349" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1359.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1061" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1071.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="981" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="991.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="421" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="431.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1333" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1343.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="213" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="223.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1157" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1167.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="325" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="335.5" >std::__detail::_E..</text>
</g>
<g >
<title>do_syscall_64 (882,653,797 samples, 17.62%)</title><rect x="666.6" y="1589" width="207.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="669.60" y="1599.5" >do_syscall_64</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="549" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="559.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="533" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="543.5" >std::__detail::_E..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper_inner (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1493" width="14.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="640.64" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1285" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="1295.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="901" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="911.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1397" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1407.5" >std::__detail::_E..</text>
</g>
<g >
<title>inet_sendmsg (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1493" width="65.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="812.55" y="1503.5" >inet_se..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="565" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="575.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="581" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="591.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1381" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1391.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="693" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="703.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="741" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="751.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1269" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1279.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="757" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="767.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="869" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="879.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1333" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1343.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>unmap_single_vma (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1365" width="157.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="13.00" y="1375.5" >unmap_single_vma</text>
</g>
<g >
<title>ttwu_do_activate (128,139,150 samples, 2.56%)</title><rect x="1159.8" y="1493" width="30.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1162.81" y="1503.5" >tt..</text>
</g>
<g >
<title>cpuidle_enter_state (709,587,910 samples, 14.17%)</title><rect x="992.6" y="1509" width="167.2" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="995.65" y="1519.5" >cpuidle_enter_state</text>
</g>
<g >
<title>load_elf_binary (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1477" width="157.7" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="1487.5" >load_elf_binary</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="277" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="287.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="949" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="959.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="709" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="719.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="693" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="703.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1013" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1023.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="341" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="351.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>alloc_bprm (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1461" width="48.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="591.96" y="1471.5" >allo..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="421" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="431.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1541" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1551.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="645" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="655.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>[libc.so.6] (609,376,292 samples, 12.17%)</title><rect x="305.9" y="69" width="143.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="308.87" y="79.5" >[libc.so.6]</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="885" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="895.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>unmap_vmas (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1333" width="14.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="640.64" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="309" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="319.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>enqueue_entity (128,139,150 samples, 2.56%)</title><rect x="1159.8" y="1445" width="30.2" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="1162.81" y="1455.5" >en..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1605" width="157.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="1615.5" >entry_SYSCALL_64_aft..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="181" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="191.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>start_secondary (837,727,060 samples, 16.72%)</title><rect x="992.6" y="1589" width="197.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="995.65" y="1599.5" >start_secondary</text>
</g>
<g >
<title>NaClSysRead (63,281,382 samples, 1.26%)</title><rect x="651.7" y="1557" width="14.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="654.70" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1429" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1439.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="277" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="287.5" >std::__detail::_E..</text>
</g>
<g >
<title>secondary_startup_64_no_verify (837,727,060 samples, 16.72%)</title><rect x="992.6" y="1605" width="197.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="995.65" y="1615.5" >secondary_startup_64_no_v..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="949" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="959.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="165" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="175.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="677" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="687.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="549" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="559.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1445" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1455.5" >std::__detail::_E..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::read_syscall (63,281,382 samples, 1.26%)</title><rect x="651.7" y="1541" width="14.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="654.70" y="1551.5" ></text>
</g>
<g >
<title>__munmap (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1461" width="14.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="640.64" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="437" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="447.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>unmap_page_range (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1349" width="157.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.00" y="1359.5" >unmap_page_range</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="405" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="415.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1061" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1071.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="533" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="543.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>lind_close (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1541" width="14.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="640.64" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1365" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1375.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>vfs_write (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1541" width="65.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="812.55" y="1551.5" >vfs_write</text>
</g>
<g >
<title>tcp_stream_alloc_skb (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1445" width="65.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="812.55" y="1455.5" >tcp_str..</text>
</g>
<g >
<title>swapper (2,221,730,004 samples, 44.36%)</title><rect x="666.6" y="1621" width="523.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="669.60" y="1631.5" >swapper</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1269" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1279.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="933" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="943.5" >std::__detail::_E..</text>
</g>
<g >
<title>cpu_startup_entry (837,727,060 samples, 16.72%)</title><rect x="992.6" y="1573" width="197.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="995.65" y="1583.5" >cpu_startup_entry</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="805" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="815.5" >std::__detail::_E..</text>
</g>
<g >
<title>zap_pte_range (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1317" width="157.7" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="13.00" y="1327.5" >zap_pte_range</text>
</g>
<g >
<title>zap_pte_range (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1269" width="14.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="640.64" y="1279.5" ></text>
</g>
<g >
<title>__alloc_percpu_gfp (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1397" width="48.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="591.96" y="1407.5" >__al..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="821" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="831.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="597" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="607.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1141" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1151.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1093" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="1103.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="725" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="735.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="117" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="127.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1077" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1087.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1205" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1215.5" >std::__detail::_E..</text>
</g>
<g >
<title>do_syscall_64 (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1509" width="48.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="591.96" y="1519.5" >do_s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="261" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="271.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1285" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1295.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="133" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="143.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1253" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1263.5" >std::__detail::_E..</text>
</g>
<g >
<title>schedule (606,763,707 samples, 12.11%)</title><rect x="666.6" y="1493" width="142.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="669.60" y="1503.5" >schedule</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="149" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="159.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>__x64_sys_execve (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1573" width="157.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="1583.5" >__x64_sys_execve</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="917" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="927.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>mm_alloc (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1445" width="48.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="591.96" y="1455.5" >mm_a..</text>
</g>
<g >
<title>do_idle (837,727,060 samples, 16.72%)</title><rect x="992.6" y="1557" width="197.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="995.65" y="1567.5" >do_idle</text>
</g>
<g >
<title>ret_from_fork (501,349,147 samples, 10.01%)</title><rect x="874.5" y="1605" width="118.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="877.54" y="1615.5" >ret_from_fork</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="101" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="111.5" >std::__detail::_E..</text>
</g>
<g >
<title>rustposix::safeposix::syscalls::fs_calls::&lt;impl rustposix::safeposix::cage::Cage&gt;::_close_helper (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1509" width="14.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="640.64" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="373" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="383.5" >std::__detail::_E..</text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (709,587,910 samples, 14.17%)</title><rect x="992.6" y="1493" width="167.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="995.65" y="1503.5" >mwait_idle_with_hints..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="213" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="223.5" >std::__detail::_E..</text>
</g>
<g >
<title>bprm_execve (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1541" width="157.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="1551.5" >bprm_execve</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="709" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="719.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="741" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="751.5" >std::__detail::_E..</text>
</g>
<g >
<title>exec_mmap (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1445" width="157.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="13.00" y="1455.5" >exec_mmap</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="261" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="271.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1397" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1407.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1349" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="1359.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>schedule_hrtimeout_range (606,763,707 samples, 12.11%)</title><rect x="666.6" y="1525" width="142.9" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="669.60" y="1535.5" >schedule_hrtimeout..</text>
</g>
<g >
<title>do_syscall_64 (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1589" width="157.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="1599.5" >do_syscall_64</text>
</g>
<g >
<title>begin_new_exec (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1461" width="157.7" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="13.00" y="1471.5" >begin_new_exec</text>
</g>
<g >
<title>NaClSysClose (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1557" width="14.1" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="640.64" y="1567.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1525" width="48.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="591.96" y="1535.5" >entr..</text>
</g>
<g >
<title>ksys_write (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1557" width="65.0" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="812.55" y="1567.5" >ksys_wr..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1077" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1087.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>[sel_ldr] (122,943,478 samples, 2.45%)</title><rect x="637.6" y="1605" width="29.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="640.64" y="1615.5" >[s..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1493" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1503.5" >std::__detail::_E..</text>
</g>
<g >
<title>[[vdso]] (586,589,641 samples, 11.71%)</title><rect x="167.7" y="1589" width="138.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="170.68" y="1599.5" >[[vdso]]</text>
</g>
<g >
<title>__x64_sys_execve (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1493" width="48.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="591.96" y="1503.5" >__x6..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1541" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="1551.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>enqueue_task_fair (128,139,150 samples, 2.56%)</title><rect x="1159.8" y="1461" width="30.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1162.81" y="1471.5" >en..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="501" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="511.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1301" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1311.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1493" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1503.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1509" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1519.5" >std::__detail::_E..</text>
</g>
<g >
<title>do_mas_munmap (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1381" width="14.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="640.64" y="1391.5" ></text>
</g>
<g >
<title>sk_forced_mem_schedule (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1429" width="65.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="812.55" y="1439.5" >sk_forc..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="917" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="927.5" >std::__detail::_E..</text>
</g>
<g >
<title>do_epoll_wait (606,763,707 samples, 12.11%)</title><rect x="666.6" y="1557" width="142.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="669.60" y="1567.5" >do_epoll_wait</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="357" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="367.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1365" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1375.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="501" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="511.5" >std::__detail::_E..</text>
</g>
<g >
<title>mod_memcg_state (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1397" width="65.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="812.55" y="1407.5" >mod_mem..</text>
</g>
<g >
<title>do_syscall_64 (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1429" width="14.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="640.64" y="1439.5" ></text>
</g>
<g >
<title>sock_sendmsg (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1509" width="65.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="812.55" y="1519.5" >sock_se..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="629" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="639.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="341" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="351.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="645" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="655.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="597" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="607.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="869" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="879.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>__cmd_record (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1589" width="48.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="591.96" y="1599.5" >__cm..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="485" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="495.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="389" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="399.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="405" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="415.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="677" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="687.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (1,201,659,129 samples, 23.99%)</title><rect x="305.9" y="1589" width="283.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1599.5" >std::__detail::_Executor&lt;__gnu_cxx::_..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="757" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="767.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1045" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1055.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="933" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="943.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1317" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1327.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1093" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1103.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1013" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1023.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="389" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="399.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>dequeue_task (606,763,707 samples, 12.11%)</title><rect x="666.6" y="1461" width="142.9" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="669.60" y="1471.5" >dequeue_task</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="565" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="575.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1573" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1583.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="629" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="639.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>zap_pmd_range.isra.0 (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1333" width="157.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="1343.5" >zap_pmd_range.isra.0</text>
</g>
<g >
<title>[unknown] (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1605" width="48.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="591.96" y="1615.5" >[unk..</text>
</g>
<g >
<title>NaClSyscallCSegHook (122,943,478 samples, 2.45%)</title><rect x="637.6" y="1589" width="29.0" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="640.64" y="1599.5" >Na..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="437" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="447.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1029" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1039.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1141" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1151.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="773" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="783.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1173" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1183.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="181" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="191.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1125" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1135.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>[libc.so.6] (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1557" width="48.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="591.96" y="1567.5" >[lib..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1045" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1055.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="293" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="303.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="725" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="735.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>unmap_region (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1349" width="14.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="640.64" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1301" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1311.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="85" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="95.5" >std::__detail::_E..</text>
</g>
<g >
<title>unmap_single_vma (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1317" width="14.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="640.64" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="789" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="799.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1381" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1391.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="581" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="591.5" >std::__detail::_E..</text>
</g>
<g >
<title>sched_ttwu_pending (128,139,150 samples, 2.56%)</title><rect x="1159.8" y="1509" width="30.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1162.81" y="1519.5" >sc..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="853" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="863.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>dispatcher (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1525" width="14.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="640.64" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1573" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1583.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1413" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1423.5" >std::__detail::_E..</text>
</g>
<g >
<title>__x64_sys_write (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1573" width="65.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="812.55" y="1583.5" >__x64_s..</text>
</g>
<g >
<title>unmap_page_range (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1301" width="14.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="640.64" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="661" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="671.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="245" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="255.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="117" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="127.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>exit_mmap (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1397" width="157.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="13.00" y="1407.5" >exit_mmap</text>
</g>
<g >
<title>do_mas_align_munmap (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1365" width="14.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="640.64" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1525" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1535.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1237" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1247.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>cpuidle_enter (709,587,910 samples, 14.17%)</title><rect x="992.6" y="1525" width="167.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="995.65" y="1535.5" >cpuidle_enter</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="469" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="479.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (592,282,837 samples, 11.82%)</title><rect x="449.4" y="69" width="139.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="452.43" y="79.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="997" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1007.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>tcp_sendmsg_locked (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1461" width="65.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="812.55" y="1471.5" >tcp_sen..</text>
</g>
<g >
<title>pcpu_alloc (206,651,202 samples, 4.13%)</title><rect x="589.0" y="1381" width="48.6" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="591.96" y="1391.5" >pcpu..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="885" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="895.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="229" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="239.5" >std::__detail::_E..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (882,653,797 samples, 17.62%)</title><rect x="666.6" y="1605" width="207.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="669.60" y="1615.5" >entry_SYSCALL_64_after_hwfr..</text>
</g>
<g >
<title>cfree (609,376,292 samples, 12.17%)</title><rect x="305.9" y="85" width="143.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="308.87" y="95.5" >cfree</text>
</g>
<g >
<title>tcp_sendmsg (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1477" width="65.0" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="812.55" y="1487.5" >tcp_sen..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="165" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="175.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="453" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="463.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="293" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="303.5" >std::__detail::_E..</text>
</g>
<g >
<title>enqueue_task (128,139,150 samples, 2.56%)</title><rect x="1159.8" y="1477" width="30.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1162.81" y="1487.5" >en..</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (606,763,707 samples, 12.11%)</title><rect x="666.6" y="1509" width="142.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="669.60" y="1519.5" >schedule_hrtimeout..</text>
</g>
<g >
<title>__mmput (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1413" width="157.7" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="13.00" y="1423.5" >__mmput</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="965" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="975.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>node (1,788,248,770 samples, 35.70%)</title><rect x="167.7" y="1621" width="421.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="170.68" y="1631.5" >node</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1557" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1567.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="853" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="863.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="133" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="143.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="357" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="367.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1461" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1471.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="325" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="335.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1109" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1119.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="197" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="207.5" >std::__detail::_E..</text>
</g>
<g >
<title>NaClSysCloseDecoder (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1573" width="14.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="640.64" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="453" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="463.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1221" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="1231.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1205" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1215.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1477" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="1487.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>lind (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1621" width="157.7" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.00" y="1631.5" >lind</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="229" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="239.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>mem_cgroup_charge_skmem (275,890,090 samples, 5.51%)</title><rect x="809.5" y="1413" width="65.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="812.55" y="1423.5" >mem_cgr..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1109" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="1119.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="613" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="623.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_lookahead (609,376,292 samples, 12.17%)</title><rect x="305.9" y="101" width="143.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="308.87" y="111.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="1413" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="1423.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>kthread (501,349,147 samples, 10.01%)</title><rect x="874.5" y="1589" width="118.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="877.54" y="1599.5" >kthread</text>
</g>
<g >
<title>__rcu_read_lock (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1285" width="157.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.00" y="1295.5" >__rcu_read_lock</text>
</g>
<g >
<title>__flush_smp_call_function_queue (128,139,150 samples, 2.56%)</title><rect x="1159.8" y="1525" width="30.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1162.81" y="1535.5" >__..</text>
</g>
<g >
<title>flush_smp_call_function_queue (128,139,150 samples, 2.56%)</title><rect x="1159.8" y="1541" width="30.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1162.81" y="1551.5" >fl..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1237" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1247.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1317" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1327.5" >std::__detail::_E..</text>
</g>
<g >
<title>search_binary_handler (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1493" width="157.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="1503.5" >search_binary_handler</text>
</g>
<g >
<title>page_remove_rmap (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1301" width="157.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="13.00" y="1311.5" >page_remove_rmap</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (609,376,292 samples, 12.17%)</title><rect x="305.9" y="197" width="143.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="308.87" y="207.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>operator new (592,282,837 samples, 11.82%)</title><rect x="449.4" y="53" width="139.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="452.43" y="63.5" >operator new</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (592,282,837 samples, 11.82%)</title><rect x="449.4" y="997" width="139.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="452.43" y="1007.5" >std::__detail::_E..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (609,376,292 samples, 12.17%)</title><rect x="305.9" y="789" width="143.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="308.87" y="799.5" >std::__detail::_Ex..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (592,282,837 samples, 11.82%)</title><rect x="449.4" y="1525" width="139.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="452.43" y="1535.5" >std::__detail::_E..</text>
</g>
<g >
<title>mmput (669,336,004 samples, 13.36%)</title><rect x="10.0" y="1429" width="157.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="13.00" y="1439.5" >mmput</text>
</g>
<g >
<title>zap_pmd_range.isra.0 (59,662,096 samples, 1.19%)</title><rect x="637.6" y="1285" width="14.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="640.64" y="1295.5" ></text>
</g>
</g>
</svg>
